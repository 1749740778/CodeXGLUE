[
 {
  "idx": "staqc-test-1",
  "doc": "Retrieve position of elements with setting some criteria in numpy",
  "code": "using_filters            : 0.130\nusing_eight_shifts       : 0.340\nusing_quadratic_loop     : 18.794\n"
 },
 {
  "idx": "staqc-test-2",
  "doc": "making regex capture group optional in url for a tornado app",
  "code": "class QuestionHandler(RequestHandler):\n    def get(self, id):\n        # Display the question\n\nclass AnswerHandler(RequestHandler):\n    def post(self, id):\n        # Validates the answer\n        answer = self.get_argument('answer')\n\napplication = Application([\n    (r'/(\\d+)', QuestionHandler),\n    (r'/(\\d+)/answer', AnswerHandler),\n])\n"
 },
 {
  "idx": "staqc-test-3",
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": "import pandas as pd\n\ndef with_pandas_groupby(func, x, b):\n    grouped = pd.Series(x).groupby(b)\n    return grouped.agg(func)\n"
 },
 {
  "idx": "staqc-test-4",
  "doc": "How to add parameters to flask-restful in python?",
  "code": "class TodoSimple(Resource):\n    def get(self, todo_id):\n        return {todo_id: todos[todo_id]}\n\n    def put(self, todo_id):\n        todos[todo_id] = request.form['data']\n        return {todo_id: todos[todo_id]}\n\napi.add_resource(TodoSimple, '/<string:todo_id>')\n"
 },
 {
  "idx": "staqc-test-5",
  "doc": "Pandas - group by consecutive ranges",
  "code": "df.groupby('categories').agg(f)\n\"\"\"\n              groups  end start\n               first last first\ncategories                     \n0            (5, 10]   17     1\n1           (10, 15]   30    18\n2            (5, 10]   42    31\n\"\"\"\n"
 },
 {
  "idx": "staqc-test-6",
  "doc": "Pandas - group by consecutive ranges",
  "code": "df['categories']=(df.groups!=df.groups.shift()).cumsum()\n"
 },
 {
  "idx": "staqc-test-7",
  "doc": "how to groupby pandas dataframe on some condition",
  "code": "users = df.groupby('buyer_id').apply(lambda r: r['item_id'].unique().shape[0] > 1 and \n                                               r['date'].unique().shape[0] > 1 )*1\ndf.set_index('buyer_id', inplace=True)\ndf['good_user'] = users\n"
 },
 {
  "idx": "staqc-test-8",
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "circle._circumference_is_set = True \n"
 },
 {
  "idx": "staqc-test-9",
  "doc": "Insert into a large table in psycopg using a dictionary",
  "code": "create table testins (foo int, bar int, baz int)\n"
 },
 {
  "idx": "staqc-test-10",
  "doc": "Socket code from python to Objective C",
  "code": "#include <netinet/in.h>\n#include <arpa/inet.h>\n#import \"Base64.h\"\n"
 },
 {
  "idx": "staqc-test-11",
  "doc": "Iterate through a list of numpy arrays",
  "code": "[ 0.  0.]\n[ 1.13075762  0.87658186]\n[ 2.34610724  0.77485066]\n[ 1.08704527  2.59122417]\n"
 },
 {
  "idx": "staqc-test-12",
  "doc": "Django reverse url to onetoonefield on success",
  "code": "profile.user\n"
 },
 {
  "idx": "staqc-test-13",
  "doc": "Complete a task during certain time frames within a python script",
  "code": "while currenttime > '23:40:00' and currenttime < '23:50:00':\n"
 },
 {
  "idx": "staqc-test-14",
  "doc": "Django app deployment on nGINX",
  "code": "server {\nlisten 84;\nserver_name example.com;\naccess_log /var/log/nginx/sample_project.access.log;\nerror_log /var/log/nginx/sample_project.error.log;\n\n# https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production\nlocation /static/ { # STATIC_URL\n    alias /home/www/myhostname.com/static/; # STATIC_ROOT\n    expires 30d;\n                  }\n\n       }\n"
 },
 {
  "idx": "staqc-test-15",
  "doc": "Transform comma separated string into a list but ignore comma in quotes",
  "code": "['1', '', '2', '3,4']\n"
 },
 {
  "idx": "staqc-test-16",
  "doc": "Getting value of a class in selenium and python",
  "code": "medications = driver.find_elements_by_css_selector(\"input[id*=Medications]\")\n"
 },
 {
  "idx": "staqc-test-17",
  "doc": "Sort a list based on a given distribution",
  "code": "from numpy import take,argsort\n\ntake(opt,argsort(argsort(perc)[::-1]))\n"
 },
 {
  "idx": "staqc-test-18",
  "doc": "parse list of tuple in python and eliminate doubles",
  "code": "    lib32c-dev : Not Specified\n    libc6-x32 : 2.16\n    libc6-i386 : 2.16\n    libncurses5-dev : 5.9+20150516-2ubuntu1\n    libc6-dev : Not Specified\n    libc-dev : Not Specified\n    libncursesw5-dev : 5.9+20150516-2ubuntu1\n    libc6-dev-x32 : Not Specified\n"
 },
 {
  "idx": "staqc-test-19",
  "doc": "RQ - Empty & Delete Queues",
  "code": "$ pip install rq-dashboard\n"
 },
 {
  "idx": "staqc-test-20",
  "doc": "Clean way to manage parse-dictionaries that contain function names",
  "code": "{\"somestring\":\"myfunction\"}\n"
 },
 {
  "idx": "staqc-test-21",
  "doc": "Creating a slice object in python",
  "code": "someseq[slice(2, None)]\n"
 },
 {
  "idx": "staqc-test-22",
  "doc": "Python program: foreign language word-frequency dictionary",
  "code": "import re\nimport collections\n\ndef cleandup(fh):\n    for line in fh:\n        for word in re.findall('[a-z]+', line.lower()):\n            yield word\n\nwith open ('DQ.txt') as doc:\n    wordlist = collections.Counter(cleanedup(doc))\n    print wordlist.most_commond(5)\n"
 },
 {
  "idx": "staqc-test-23",
  "doc": "Can I cleanse a numpy array without a loop?",
  "code": "import numpy as np\ndeltas=np.diff(data)\ndeltas[deltas<0]=0\ndeltas[deltas>100]=0\n"
 },
 {
  "idx": "staqc-test-24",
  "doc": "Get seconds since midnight in python",
  "code": "datetime.now() - datetime.now()\n"
 },
 {
  "idx": "staqc-test-25",
  "doc": "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python",
  "code": "def f(x): print(x)\ndata = list(range(53))  # list from 0 (included) to 52 (included)\n# here is the top part\n"
 },
 {
  "idx": "staqc-test-26",
  "doc": "reinterpret signed long as unsigned in Python",
  "code": "x &= 2 ** 64 - 1\n"
 },
 {
  "idx": "staqc-test-27",
  "doc": "How to connect QLineEdit focusOutEvent",
  "code": "# ...\nself._filter = Filter()\n# adjust for your QLineEdit\nself.ui.lineEdit.installEventFilter(self._filter)\n"
 },
 {
  "idx": "staqc-test-28",
  "doc": "Comparing Python dictionaries and nested dictionaries",
  "code": "comparing d1 to d2:\na->b :\n -  cs  :  10\n +  cs  :  30\nNone\ncomparing d2 to d1:\na->b :\n -  cs  :  30\n +  cs  :  10\na :\nnewa as key not in d2 \n\nNone\n"
 },
 {
  "idx": "staqc-test-29",
  "doc": "Django: how to change label using formset extra?",
  "code": "from django.conf.urls import url, patterns\nfrom views import get_no_of_lines, line_form\n\n\nurlpatterns = patterns('',\n     url(r'^$', get_no_of_lines, name='get_no_of_lines'),\n     url(r'^line_form/(?P<no_of_lines>\\d{1})$', line_form, name='line_form'),\n)\n"
 },
 {
  "idx": "staqc-test-30",
  "doc": "How to apply parameters/for loop",
  "code": "import operator\n\nvector1 = (1, 2, 3)\n\n# get a list of vectors\nvectors = [\n    (4, 5, 6),\n    (7, 8, 9)\n]\n\n# for loop through the vectors,\n# assignig the current vector to vector2 in every iteration\nfor vector2 in vectors:\n    dotProduct = reduce(operator.add, map(operator.mul, vector1, vector2))\n    print dotProduct\n"
 },
 {
  "idx": "staqc-test-31",
  "doc": "how to exclude the non numerical integers from a data frame in Python",
  "code": "import pandas as pd #import the pandas library\n#creating a small dataset for testing\ndf1 = pd.DataFrame({'PassengerId' :  [1, 2, 3], \n        'Name' : ['Abbing, Mr. Anthony', 'Ann, C', 'John, H'], \n        'Fare' : [7.25, 71.28, 7.92]})\n#extract only the numeric column types\ndf2 = df1._get_numeric_data()\nprint(df2)\n"
 },
 {
  "idx": "staqc-test-32",
  "doc": "Passing list of parameters to SQL in psycopg2",
  "code": "cur.mogrify(\"SELECT * FROM table WHERE column IN %s;\", ((1,2,3),))\n"
 },
 {
  "idx": "staqc-test-33",
  "doc": "calling linux shell in python with writing output in a text file",
  "code": "subprocess.call([\"ls\",  \"-lrt\"], stdout=open(\"foo.txt\",'w'))\n"
 },
 {
  "idx": "staqc-test-34",
  "doc": "How to reset an unordered index to an ordered one in python?",
  "code": "transactional.reset_index(inplace = True)\n"
 },
 {
  "idx": "staqc-test-35",
  "doc": "How to treat a hex as string?",
  "code": ">>> hex(0x61cc1000)\n'0x61cc1000'\n"
 },
 {
  "idx": "staqc-test-36",
  "doc": "Atomic increment of a counter in django",
  "code": "counter = Counter.objects.get_or_create(name = name)\ncounter.count = F('count') +1\ncounter.save()\n"
 },
 {
  "idx": "staqc-test-37",
  "doc": "Python Pandas DataFrame how to Pivot",
  "code": "df_wanted.loc['XYK987', :]\ndf_wanted.loc[:, ('sum14N_avg')]\ndf_wanted.loc['ALF234', ('RIA_avg', 'C', 24)]\n"
 },
 {
  "idx": "staqc-test-38",
  "doc": "Inversing a twodimensional array in python",
  "code": "tempArray = [x[::-1] for x in reversed(self.topArea)]\n"
 },
 {
  "idx": "staqc-test-39",
  "doc": "Python array from CSV file",
  "code": "$ pip install pyyaml\n"
 },
 {
  "idx": "staqc-test-40",
  "doc": "Python array from CSV file",
  "code": "Consider using other format, e.g. YAML\ndata.yaml\nMyHome:\n- \"10.0.0.3\"\n- \"10.0.0.9\"\n- \"10.0.0.234\"\n"
 },
 {
  "idx": "staqc-test-41",
  "doc": "Delete files with python through OS shell",
  "code": "import os\ndir = \"E:\\\\test\"\nfiles = os.listdir(dir)\nfor file in files:\n    if file.endswith(\".txt\"):\n        os.remove(os.path.join(dir,file))\n"
 },
 {
  "idx": "staqc-test-42",
  "doc": "List Comprehensions - How to have strings and integers in one list?",
  "code": "['min', 1, 2, 3, 5, 6]\n['max', 1, 2, 3, 5, 6]\n['avg', 1, 2, 3, 5, 6]\n"
 },
 {
  "idx": "staqc-test-43",
  "doc": "python matplotlib dash-dot-dot - how to?",
  "code": "plt.plot([1,5,2,4], '-', dashes=[8, 4, 2, 4, 2, 4])\nplt.show()\n"
 },
 {
  "idx": "staqc-test-44",
  "doc": "How to count occurrences of specific element for arrays in a list?",
  "code": "In [7]: [np.bincount(x)[2] for x in a]\nOut[7]: [3, 0]\n"
 },
 {
  "idx": "staqc-test-45",
  "doc": "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts",
  "code": "[{'greeting': 'HELLO WORLD!'}, {'greeting': 'Hello Mars'}, {}, {}]\n"
 },
 {
  "idx": "staqc-test-46",
  "doc": "How to add in a dictionary the values that have similar keys?",
  "code": "from itertools import groupby\n\nkey = lambda i: i[0][0].upper()\nout = {key: sum(v for k, v in group) for key, group in groupby(sorted(original.items(), key=key), key=key)}\n"
 },
 {
  "idx": "staqc-test-47",
  "doc": "calculate distance between two chains in PDB file",
  "code": "awk -f script.awk file{,}\n"
 },
 {
  "idx": "staqc-test-48",
  "doc": "How to add a another value to a key in python",
  "code": "def add_contact():\n   name = raw_input(\"Please enter a name:\")\n   number = raw_input(\"Please enter a number:\")\n   phonebook[name].append(number)\n"
 },
 {
  "idx": "staqc-test-49",
  "doc": "Special End-line characters/string from lines read from text file, using Python",
  "code": "alphabet = 'abcdefghijklmnopqrstuvwxyz '\nch = ':;:'.join(''.join(choice(alphabet) for nc in xrange(randrange(0,60)))\n                for i in xrange(324000))\nwith open('fofo.txt','wb') as g:\n    g.write(ch)\n"
 },
 {
  "idx": "staqc-test-50",
  "doc": "Elegant Python function to convert CamelCase to snake_case?",
  "code": "import re\n"
 },
 {
  "idx": "staqc-test-51",
  "doc": "Computing 16-bit checksum of ICMPv6 header",
  "code": "TYPE_CODE = \"8700\"\nREMAINDER = \"00000000fe80000000000000026097fffe0769ea01010000860580da\"\nicmpv6_chunk = build_icmpv6_chunk(TYPE_CODE, REMAINDER)\n"
 },
 {
  "idx": "staqc-test-52",
  "doc": "chunk of data into fixed lengths chunks and then add a space and again add them all as a string",
  "code": "x=\"a85b080040010000\"\n\nprint \" \".join([i for i in re.split(r\"(.{2})\",x) if i])\n"
 },
 {
  "idx": "staqc-test-53",
  "doc": "Django URL matching any 140 characters",
  "code": ">>> re.search(regex, \"home/ abcd fghizzz\")\n# Doesn't match, returns None\n"
 },
 {
  "idx": "staqc-test-54",
  "doc": "Faster alternative to for loop in for loop",
  "code": ">>> set(generate_neighbors('ab', {'a', 'b', 'c', 'd'}))\n{'aa', 'ac', 'ad', 'bb', 'cb', 'db'}\n"
 },
 {
  "idx": "staqc-test-55",
  "doc": "How to match integers in NLTK CFG?",
  "code": "(S (NP I) (VP (V shot) (NP (NUM 333) (N elephants))))\n"
 },
 {
  "idx": "staqc-test-56",
  "doc": "Regular Expression (Python) to extract strings of text from inside of < and > - e.g. <stringone><string-two> etc",
  "code": "<([^>]*)>\n"
 },
 {
  "idx": "staqc-test-57",
  "doc": "Obtaining dictionary value in Python",
  "code": "20225 17\n20232 9\n20233 22\n20234 3\n20235 28\n20236 69\n"
 },
 {
  "idx": "staqc-test-58",
  "doc": "Passing binary data from Python to C API extension",
  "code": "from authbind import authenticate\n\ncreds = 'foo\\x00bar\\x00'\nauthenticate(bytearray(creds))\n"
 },
 {
  "idx": "staqc-test-59",
  "doc": "How to parse the header files of the pcap file?",
  "code": "In [91]: data.data.data\nOut[91]: TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145)\n"
 },
 {
  "idx": "staqc-test-60",
  "doc": "Django Templates: Is there a way to query a specific object based on its property (instead of iterating over all)?",
  "code": "templatetags/my_tags.py\n...\n@register.filter\ndef where_id(users,user_id):\n    return filter(lambda u:u.pk==user_id,users)\n...\n"
 },
 {
  "idx": "staqc-test-61",
  "doc": "Change object's variable from different file",
  "code": "0 We've encountered no one.\n1 We've encountered Knight of Ni.\n4 We've encountered French.\n42 We've found the Grail!\n"
 },
 {
  "idx": "staqc-test-62",
  "doc": "Convert a python list into function",
  "code": "import numpy as np\nfrom scipy.interpolate import interp1d\n\nx = y = np.arange(5)\nf = interp1d(x,y, kind=\"linear\", fill_value=0., bounds_error=False)\n\nprint f(0)\nprint f(2)\nprint f(3)\nprint f(3.4)\n"
 },
 {
  "idx": "staqc-test-63",
  "doc": "how to know the type of sql query result before it is executed in sqlalchemy",
  "code": "[c['type'] for c in query.column_descriptions]\n"
 },
 {
  "idx": "staqc-test-64",
  "doc": "How do you create a list of values in Python within a certain range?",
  "code": ">>> [ '{}{:05d}'.format('IT',x) for x in range(10) ]\n['IT00000', 'IT00001', 'IT00002', 'IT00003', 'IT00004', 'IT00005', 'IT00006', 'IT00007', 'IT00008', 'IT00009']\n"
 },
 {
  "idx": "staqc-test-65",
  "doc": "Calculate point based on distance and direction",
  "code": "$ python test.py \nStart: 48 51m 0.0s N, 2 21m 0.0s E\n1 km north: 48 52m 0.0s N, 2 21m 0.0s E\nControl distance between both points: 1.0000 km.\n"
 },
 {
  "idx": "staqc-test-66",
  "doc": "How to get a vector from a list in list in python?",
  "code": ">>> list(Comprehension(range(10)).bit_length())\n[0, 1, 2, 2, 3, 3, 3, 3, 4, 4]\n"
 },
 {
  "idx": "staqc-test-67",
  "doc": "How can I use a list comprehension to extend a list in python?",
  "code": "return sum((doSomething(x) for x in originalList), [])\n"
 },
 {
  "idx": "staqc-test-68",
  "doc": "Boost.Python: Ownership of pointer variables",
  "code": "void node_add_child(Node& n, std::auto_ptr<Node> child) {\n   n.add_child(child.get());\n   child.release();\n}\n"
 },
 {
  "idx": "staqc-test-69",
  "doc": "Parsing members of a variable length python string",
  "code": "OrderedDict([('1-1', '92'), ('1-2', '2'), ('2-1', '1'), ('3-1', '8'), ('3-2', '200'), ('3-3', '6')])\n"
 },
 {
  "idx": "staqc-test-70",
  "doc": "Parsing multilevel text list",
  "code": "TOP: 1 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\nTOP: 2 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\nTOP: 3 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\ndone\n"
 },
 {
  "idx": "staqc-test-71",
  "doc": "Pyyaml - Using different styles for keys and integers and strings",
  "code": "---\n\"main\":\n  \"directory\":\n    \"options\":\n      \"directive\": 'options'\n      \"item\":\n        \"options\": 'Stuff OtherStuff MoreStuff'\n  \"directoryindex\":\n    \"item\":\n      \"directoryindex\": 'stuff.htm otherstuff.htm morestuff.html'\n  \"fileetag\":\n    \"item\":\n      \"fileetag\": 'Stuff'\n  \"keepalive\":\n    \"item\":\n      \"keepalive\": 'Stuff'\n  \"keepalivetimeout\":\n    \"item\":\n      \"keepalivetimeout\": 400\n"
 },
 {
  "idx": "staqc-test-72",
  "doc": "Extracting Data From Python Classes",
  "code": "m_sun = 1.989e+30\nG = 6.67e-11\n"
 },
 {
  "idx": "staqc-test-73",
  "doc": "removing excess spaces from a string (and counting them)",
  "code": ">>> s = \"foo    bar  baz                        bam\"\n>>> countSpaces(s)\nThe whitespace normalized string is foo bar baz bam\nThe maximum length of consecutive whitespace is 23\n"
 },
 {
  "idx": "staqc-test-74",
  "doc": "Scrapy - Follow RSS links",
  "code": ">>> xxs.select(\"//link/text()\").extract()\n[u'http://blog.scrapy.org',\n u'http://blog.scrapy.org/new-bugfix-release-0101',\n u'http://blog.scrapy.org/new-scrapy-blog-and-scrapy-010-release']\n"
 },
 {
  "idx": "staqc-test-75",
  "doc": "call __str__ inside a class? python 3.X",
  "code": "print(self)\n"
 },
 {
  "idx": "staqc-test-76",
  "doc": "How to apply group by on data frame with neglecting NaN values in Pandas?",
  "code": "         xAxis  yAxis1  yAxis2\n0   2009-05-01      53      55\n1   2009-05-02      55      55\n2   2009-05-03      57      58\n3   2009-05-04      57      60\n4   2009-05-05      60      62\n5   2009-05-06      63      66\n"
 },
 {
  "idx": "staqc-test-77",
  "doc": "Trying to duplicate a list and modify one version of it in Python 2",
  "code": "newList = list(oldList)\n"
 },
 {
  "idx": "staqc-test-78",
  "doc": "Dynamic Table Creation and ORM mapping in SqlAlchemy",
  "code": ">>> players_table = Table('players', metadata,\n...   Column('id', Integer, primary_key=True),\n...   Column('name', String),\n...   Column('score', Integer)\n... )\n>>> metadata.create_all(engine) # create the table\n"
 },
 {
  "idx": "staqc-test-79",
  "doc": "Transform string in a list with elements separated on Python",
  "code": "bytearray(int(x,16) for x in u.split())\nOut[14]: bytearray(b'\\x01\\xa02\\x00\\x00\\x00\\x00\\xfe\\x12o\\x04')\n"
 },
 {
  "idx": "staqc-test-80",
  "doc": "Python Regex: Optional White Space Around Matching Group",
  "code": "text = 'user = bob'\na = re.match(r'(?P<key>.*?) ?(?P<operator>NOT LIKE|LIKE|<=>|>=|<=|!=|<>|=|>|<) ?(?P<values>.*)',text)\nprint a.group()\n"
 },
 {
  "idx": "staqc-test-81",
  "doc": "Python minidom - Parse XML file and write to CSV",
  "code": "title,author\nSandman Volume 1: Preludes and Nocturnes,Neil Gaiman\nGood Omens,Neil Gamain\nGood Omens,Terry Pratchett\n\"\"\"Repent, Harlequin!\"\" Said the Tick-Tock Man\",Harlan Ellison\n"
 },
 {
  "idx": "staqc-test-82",
  "doc": "How to scrape table with different xpath on the same level with Scrapy?",
  "code": "{u'04.09.2013': [u'1', u'2'], u'05.10.2013': [u'3', u'4', u'5', u'6']}\n"
 },
 {
  "idx": "staqc-test-83",
  "doc": "parsing single text items from xml with Python",
  "code": "xp = \"//PropertySetProperty[Key/text()=$key]/Value/text()\"\nwanted = doc.xpath(xp, key=\"ConnectionFile\")[0]\n"
 },
 {
  "idx": "staqc-test-84",
  "doc": "How to make a calculator with strings and numbers as mixed input using parser python ply",
  "code": "t_plustext    = r'plus'\n"
 },
 {
  "idx": "staqc-test-85",
  "doc": "Test subclass behaviour?",
  "code": "class A2(A):\n    ...\n"
 },
 {
  "idx": "staqc-test-86",
  "doc": "Using multiple (similar) generator expressions",
  "code": "replacements = [\n    ('abc', 'x'),\n    ('def', 'y'),\n    ('ghi', 'z'),\n]\n\ntrans = str.maketrans({ k: v for l, v in replacements for k in l })\n"
 },
 {
  "idx": "staqc-test-87",
  "doc": "Get the count of the each date entry from onr of the raw from CSV file",
  "code": "4/14/2016 2\n6/14/2016 1\n"
 },
 {
  "idx": "staqc-test-88",
  "doc": "Get the count of the each date entry from onr of the raw from CSV file",
  "code": "with open(\"your_file.csv\") as f:\n    for x,y in itertools.groupby(sorted(map(str.split, f.read().strip().split(\"\\n\"))), key = lambda x:x[0]):\n        print x,len(list(y))\n"
 },
 {
  "idx": "staqc-test-89",
  "doc": "How can I find all subclasses of a given class in Python?",
  "code": "def all_subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in all_subclasses(s)]\n\nprint(all_subclasses(vars()['Foo']))\n# [<class '__main__.Bar'>, <class '__main__.Baz'>, <class '__main__.Bing'>]\n"
 },
 {
  "idx": "staqc-test-90",
  "doc": "Python - lexical analysis and tokenization",
  "code": "stuff = r'property.${general.name}.ip = ${general.ip}'\nstuff2 = r'''\ngeneral {\n  name = myname\n  ip = 127.0.0.1\n}\n'''\n\nprint ' stuff '.center(60, '=')\nfor tok in tokenize(stuff):\n    print tok\n\nprint ' stuff2 '.center(60, '=')\nfor tok in tokenize(stuff2):\n    print tok\n"
 },
 {
  "idx": "staqc-test-91",
  "doc": "Matplotlib: force aspect ratio in series of plots",
  "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.imshow(np.random.random((20, 20)), extent=(0, 10.5, 2, 4.7), aspect=1, interpolation='nearest')\n"
 },
 {
  "idx": "staqc-test-92",
  "doc": "How to get a list of the elements in TreeView? PyGtk",
  "code": "model = self.treeview.get_model()\n"
 },
 {
  "idx": "staqc-test-93",
  "doc": "how to show each element of array separately",
  "code": "columns = [[] for _ in range(6)]\n"
 },
 {
  "idx": "staqc-test-94",
  "doc": "Remove duplicate, remove certain letters from line if found",
  "code": "A   786 65534 65534 786 786 786 786 10026/AS4637 19151 19151 19151 19151 19151     19151 10796/AS13706\n"
 },
 {
  "idx": "staqc-test-95",
  "doc": "Retaining category order when charting/plotting ordered categorical Series",
  "code": "print df.value_counts()\nawful    2\ngood     2\nbad      2\nok       1\ndtype: int64\n\nprint df.value_counts(sort=False)\nbad      2\nok       1\ngood     2\nawful    2\ndtype: int64\n\nprint df.value_counts(sort=False).plot.bar()\n"
 },
 {
  "idx": "staqc-test-96",
  "doc": "How to search a string with the url patterns in django?",
  "code": "def user_profile_view(request, user_name):\n    # some code here\n\nuser_profile_view.name = \"User Profile View\"\n"
 },
 {
  "idx": "staqc-test-97",
  "doc": "How to string format OptionParser() help message?",
  "code": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--s',\n                  help='''first line\nsecond line''')\nargs = parser.parse_args()\nprint args.s\n"
 },
 {
  "idx": "staqc-test-98",
  "doc": "deleting element from python dictionary",
  "code": "for eachitem in dicta:\n    for k in ['NAME','STATE','COUNTRY','REGION','LNAME']:\n        del eachitem[k]\n"
 },
 {
  "idx": "staqc-test-99",
  "doc": "Matrix triple product with theano",
  "code": "np.einsum('nr,mr,lr->nml', A, B, C)\n"
 },
 {
  "idx": "staqc-test-100",
  "doc": "How to chain django query filters to conditionally filter by certain criteria",
  "code": "user_profiles = user_profiles.filter(gender=gender)\n"
 },
 {
  "idx": "staqc-test-101",
  "doc": "How to chain django query filters to conditionally filter by certain criteria",
  "code": "user_profiles.filter(gender=gender)\n"
 },
 {
  "idx": "staqc-test-102",
  "doc": "Getting specific field from chosen Row in Pyspark DataFrame",
  "code": "result = users_df.where(users_df._id == chosen_user).select(\"gender\")\n"
 },
 {
  "idx": "staqc-test-103",
  "doc": "I dont know how to add Proxy to my Phantomjs script",
  "code": "saStr = \" \".join(service_args)\n"
 },
 {
  "idx": "staqc-test-104",
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "df = df.sort(columns='number_of_purchase', ascending=False)\ndf\n"
 },
 {
  "idx": "staqc-test-105",
  "doc": "Find nested sub-classes in a class in the order they're defined",
  "code": "class A:\n    pass\n\nclass B(metaclass=OrderedClass):\n    x = 5\n    class D(A):\n        pass\n    class C(A):\n        pass\n\nprint(filter(lambda x: isinstance(getattr(B, x), type), b.members)))\n"
 },
 {
  "idx": "staqc-test-106",
  "doc": "mongo - find items who at least match an array of values",
  "code": "{\n    'ok': 1.0,\n    'result': [\n                  {\n                      '_id': ObjectId('54fa181014d995a397252a1a'), \n                      'item1': ['a', 'b', 'c'], \n                      'is_subset': True\n                   }\n               ]\n }\n"
 },
 {
  "idx": "staqc-test-107",
  "doc": "mongo - find items who at least match an array of values",
  "code": "for item in col.find({\"$and\": [{\"item1\": 'a', \"item1\": 'b', \"item1\": 'c'}]}):\n    print(item)\n"
 },
 {
  "idx": "staqc-test-108",
  "doc": "Slicing pandas groupby groups into equal lengths",
  "code": " #       page  hour  count\n # 0     3727441     1   2003\n # 1     3727441     2    654\n # 2     3727441     3   5434\n # 3     3727458     1    326\n # 4     3727458     2   2348\n # 5     3727458     3   4040\n # 6   3727458_1     4    374\n # 7   3727458_1     5   2917\n # 8   3727458_1     6   3937\n # 9     3735634     1   1957\n # 10    3735634     2   2398\n # 11    3735634     3   2812\n # 12    3768433     1    499\n # 13    3768433     2   4924\n # 14    3768433     3   5460\n # 15  3768433_1     4   1710\n # 16  3768433_1     5   3877\n # 17  3768433_1     6   1912\n # 18  3768433_2     7   1367\n # 19  3768433_2     8   1626\n # 20  3768433_2     9   4750\n"
 },
 {
  "idx": "staqc-test-109",
  "doc": "Convert Country Names to Country Code using Python DictReader/DictWriter",
  "code": "Kazakhstan KZ\nUkraine UA\n"
 },
 {
  "idx": "staqc-test-110",
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "entries = Entry.objects.filter(user=request.user).order_by(\"-timestamp\")\n"
 },
 {
  "idx": "staqc-test-111",
  "doc": "How can I get certain text from a website with Python?",
  "code": "Domain Authority: 100, Page Authority: 97 \nRoot Domains: 680\n"
 },
 {
  "idx": "staqc-test-112",
  "doc": "Accessing an additional profile from templates",
  "code": "class UserReferralProfile(models.Model):\n    x = models.OneToOneField(User, related_name='referal')\n    y = models.CharField()\n"
 },
 {
  "idx": "staqc-test-113",
  "doc": "Accessing an additional profile from templates",
  "code": "{{ request.user.referal.y }}\n"
 },
 {
  "idx": "staqc-test-114",
  "doc": "How to split a string by a string except when the string is in quotes in python?",
  "code": "((?:(?!\\band\\b)[^'])*(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'(?:(?!\\band\\b)[^'])*)*)(?:and|$)\n"
 },
 {
  "idx": "staqc-test-115",
  "doc": "Monitor ZIP File Extraction Python",
  "code": " print \"%s %%\\r\" % (extracted_size * 100/uncompress_size),\n"
 },
 {
  "idx": "staqc-test-116",
  "doc": "create dictionary from list same values",
  "code": "def to_nested_dict(list_dict):\n    d = {}                                   # initialize the outer dict\n    for k, lst in list_dict.items():\n        d[k] = {}                            # initialize inner dicts\n        for x, y in lst:\n            d[k].setdefault(x, []).append(y) # initialize and populate innermost list\n    return d\n"
 },
 {
  "idx": "staqc-test-117",
  "doc": "List database tables with SQLAlchemy",
  "code": "from sqlalchemy import MetaData\nm = MetaData()\nm.reflect(engine)\nfor table in m.tables.values():\n    print(table.name)\n    for column in table.c:\n        print(column.name)\n"
 },
 {
  "idx": "staqc-test-118",
  "doc": "Adding information from one file to another, after a specific action",
  "code": "C:\\>python st.py f1.txt f2.txt\n# IdName1 Info1 Info2 Info3\n#Info: from program1 for name1\n#Info: from program2 for name1\n# ProgramInfo\n# Query: IdName1 Info1 Info2 Info3\n# DatabaseInfo\n# FiledInfo\nline1\nline2\n# IdName2 Info1 Info2 Info3\n#Info: from program1 for name2\n#Info: from program2 for name2\n# ProgramInfo\n# Query: IdName2 Info1 Info2 Info3\n# DatabaseInfo\n# FiledInfo\n# IdName4 Info1 Info2 Info3\n#Info: from program1 for name4\n# ProgramInfo\n# Query: IdName4 Info1 Info2 Info3\n# DatabaseInfo\n# FiledInfo\nline1\nline2\nline3\nline4\n"
 },
 {
  "idx": "staqc-test-119",
  "doc": "A list as a key for PySpark's reduceByKey",
  "code": "# This will fail with TypeError: unhashable type: 'set'\nrdd.map(lambda (k, v): (set(k), v)).groupByKey().collect()\n"
 },
 {
  "idx": "staqc-test-120",
  "doc": "Insert data from one sorted array into another sorted array",
  "code": "[[ 1  0  0  0  0]\n [ 2  0  0  0  0]\n [ 5 18  0  0  0]\n [ 3  1  0  0  0]\n [ 4  0  0  0  0]\n [ 6  0  0  0  0]\n [ 7  2  0  0  0]\n [ 8  0  0  0  0]]\n"
 },
 {
  "idx": "staqc-test-121",
  "doc": "How to convert string timezones in form (Country/city) into datetime.tzinfo",
  "code": "datetime.datetime(2011, 3, 16, 1, 39, 33, 87375, tzinfo=<DstTzInfo 'America/New_York' EDT-1 day, 20:00:00 DST>)\n"
 },
 {
  "idx": "staqc-test-122",
  "doc": "generate lists from 3 dimensional array",
  "code": "np.swapaxes(np.swapaxes(myArray,0,2),0,1)\n"
 },
 {
  "idx": "staqc-test-123",
  "doc": "Django how to update more than a row field at once",
  "code": "TheForm.objects.filter(id=1).update(value=1, value2=2)\n"
 },
 {
  "idx": "staqc-test-124",
  "doc": "Iterating over a list while incrementing another variable at the same time",
  "code": "answer = {}\nfor i,char in enumerate(ascii_lowercase):\n    answer[char] = i+1\n"
 },
 {
  "idx": "staqc-test-125",
  "doc": "Iterating over a list while incrementing another variable at the same time",
  "code": "dict((char,i) for i,char in enumerate(ascii_lowercase, 1))\n"
 },
 {
  "idx": "staqc-test-126",
  "doc": "Test if two lists of lists are equal",
  "code": "l1 = [['a',1], ['b',2], ['c',3]]\nl2 = [['b',2], ['c',3], ['a',1]]\nprint sorted(l1) == sorted(l2)\n"
 },
 {
  "idx": "staqc-test-127",
  "doc": "Handling months in python datetimes",
  "code": ">>> get_start_of_previous_month(datetime.datetime.now())\ndatetime.datetime(2013, 2, 1, 0, 0)\n>>> get_start_of_previous_month(datetime.datetime(2013, 1, 21, 12, 23))\ndatetime.datetime(2012, 12, 1, 0, 0)\n"
 },
 {
  "idx": "staqc-test-128",
  "doc": "Save app data in Weather App",
  "code": "import json\nfrom urllib import urlopen\n\nurl = urlopen('http://api.openweathermap.org/data/2.5/forecast/daily?q={}&mode=json&units={}'.format(getname,temp_type)).read()\n#where getname is the name of city.\n#and temp_type is either C(Celsius) or F(Fahrenheit)\nresult = json.loads(url)\nout_file = open(\"weather.json\",\"w\")\njson.dump(result,self.out_file, indent=4)\n#indent = 4, just to make it easy to read.\nout_file.close()\n"
 },
 {
  "idx": "staqc-test-129",
  "doc": "Getting the number of digits (Python)",
  "code": "def order(num):\n    res = 0\n    while num > 0:\n        num = int(num / 10)\n        res += 1\n    return res\n\nprint(order(127))  # prints 3\n"
 },
 {
  "idx": "staqc-test-130",
  "doc": "How to find and select a table in html code with xpath",
  "code": "Complete solution\nroot = tree.getroot()\ntables = root.xpath('.//h3[text()=\"Impact\"]/following-sibling::table')\nfor table in tables:\n    print str\n"
 },
 {
  "idx": "staqc-test-131",
  "doc": "What's an easy and fast way to put returned XML data into a dict?",
  "code": "import lxml.etree\nimport urllib2\nurl='http://ipinfodb.com/ip_query.php?ip=74.125.45.100&timezone=true'\ndoc = lxml.etree.parse( urllib2.urlopen(url) ).getroot()\nprint dict(((elt.tag,elt.text) for elt in doc))\n"
 },
 {
  "idx": "staqc-test-132",
  "doc": "python - sorting a list of lists by a key that's substring of each element",
  "code": "print sorted(my_list,key=key)\n"
 },
 {
  "idx": "staqc-test-133",
  "doc": "Alternatives to cartesian in Spark?",
  "code": "from operator import add\n\nflattened = rdd.flatMap(lambda kv: ((v, kv[0]) for v in kv[1])) # Flatten input\nflattened.first()\n# (1, 3) <- from (3, [1, 4])\n\nresult = (flattened \n    .join(flattened) # Perform self join using value from input as key\n    .filter(filter_source) # Remove pairs from the same source\n    .map(swap)\n    .reduceByKey(add)\n    .map(reshape)) # Get final output\n"
 },
 {
  "idx": "staqc-test-134",
  "doc": "How to insert a python program into a bash script?",
  "code": "Argument List: ['-', '1', '2', '3']\n"
 },
 {
  "idx": "staqc-test-135",
  "doc": "Django permissions mixin on CBV, how to apply on 'publish blog' method",
  "code": "url(r\"^(?P<pk>[0-9]+)/publish/$\", views.BlogUpdateView.publish, name=\"publish\"),\n"
 },
 {
  "idx": "staqc-test-136",
  "doc": "Django permissions mixin on CBV, how to apply on 'publish blog' method",
  "code": "     class BlogUpdateView(UpdateView):\n\n            model = Blog\n\n            @staticmethod\n            def publish(request, pk):\n               if request.method == \"GET\":\n               Blog.objects.filter(pk=pk).update(publish_date=datetime.datetime.now())\n               return HttpResponseRedirect(\"/blogs/\" + pk)\n"
 },
 {
  "idx": "staqc-test-137",
  "doc": "Print tree without recursion",
  "code": ">>> print_nonrec_breathfirst(n1)\n1\n2\n3\n4\n5\n6\n7\n>>> print_nonrec_depthfirst(n1)\n1\n4\n3\n6\n7\n5\n2\n"
 },
 {
  "idx": "staqc-test-138",
  "doc": "python: how can I get a new value in round robin style every time i invoke the script",
  "code": "$ python next_available_subnet.py \nsubnet1\n$ python next_available_subnet.py \nsubnet2\n$ python next_available_subnet.py \nsubnet3\n$ python next_available_subnet.py \nsubnet1\n"
 },
 {
  "idx": "staqc-test-139",
  "doc": "class name as variable in python",
  "code": ">>> class MyClass(object):\n...     pass\n... \n>>> myObj = MyClass()\n>>> NewClass = myObj.__class__\n>>> newObj = NewClass()\n>>> myObj, newObj\n(<__main__.MyClass object at 0x102740d90>, <__main__.MyClass object at 0x102740d50>)\n"
 },
 {
  "idx": "staqc-test-140",
  "doc": "On using a string as an integer counter (aka index) in a for loop",
  "code": "from collections import OrderedDict\n\narrays = OrderedDict()\nfor file in os.listdir(directoryPath):\n    if file.endswith(\".csv\"):\n       arrays[file] = numpy.genfromtxt(file, delimiter=',')[:,2]\n"
 },
 {
  "idx": "staqc-test-141",
  "doc": "How to create a vector of Matrices in python",
  "code": "listOfFlowMaps = []\n"
 },
 {
  "idx": "staqc-test-142",
  "doc": "finding the greatest Fibonacci number within limited time in python",
  "code": "Calculated 1st fibonacci number as 1 in 0.000001 seconds\nCalculated 31st fibonacci number as 1346269 in 0.000010 seconds\nCalculated 294th fibonacci number as 12384578529797304192493293627316781267732493780359086838016392 in 0.000100 seconds\n"
 },
 {
  "idx": "staqc-test-143",
  "doc": "python - Nested list in dict to csv files",
  "code": "label1;label2;label3\nval1;otherval1;yetanotherval1\nval2;otherval2;dummy\nval3;dummy;dummy\n"
 },
 {
  "idx": "staqc-test-144",
  "doc": "Is it possible to assign two different returned values from a python function to two separate variables?",
  "code": "def foo():\n  return 'bar', 42\n\na, b = foo()\n"
 },
 {
  "idx": "staqc-test-145",
  "doc": "How do I implement SelectionSort and InsertionSort on a linked list in Python?",
  "code": "4->1->12->10\n1->4->10->12\n"
 },
 {
  "idx": "staqc-test-146",
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "return reduced_list[i]\n"
 },
 {
  "idx": "staqc-test-147",
  "doc": "Sorting a List by frequency of occurrence in a list",
  "code": "from collections import Counter\nfrom itertools import repeat, chain\nprint list(chain.from_iterable(repeat(i, c) for i,c in Counter(a).most_common()))\n# [5, 5, 5, 5, 3, 3, 3, 4, 4, 4, 1, 1, 2]\n"
 },
 {
  "idx": "staqc-test-148",
  "doc": "Making use of piped data in python",
  "code": "import sys\nprint sys.stdin.read()\n"
 },
 {
  "idx": "staqc-test-149",
  "doc": "What is the standard way to add N seconds to datetime.time in Python?",
  "code": "import datetime\na = datetime.datetime(100,1,1,11,34,59)\nb = a + datetime.timedelta(0,3) # days, seconds, then other fields.\nprint a.time()\nprint b.time()\n"
 },
 {
  "idx": "staqc-test-150",
  "doc": "How can I use a pre-made color map for my heat map in matplotlib?",
  "code": "from pylab import imshow, show, get_cmap\nfrom numpy import random\n\nZ = random.random((50,50))   # Test data\n\nimshow(Z, cmap=get_cmap(\"Spectral\"), interpolation='nearest')\nshow()\n"
 },
 {
  "idx": "staqc-test-151",
  "doc": "Splitting a list in python",
  "code": "l = ['(', '2', '.', 'x', '.', '(', '3', '-', '1', ')', '+', '4', ')',\n     '/', '3', '.', 'x', '^', '2']\n\nfor r in split_list(l, '+'):\n    print r\n"
 },
 {
  "idx": "staqc-test-152",
  "doc": "python - increase array size and initialize new elements to zero",
  "code": "A_new  = padarray(A,[1 2],'post')\n"
 },
 {
  "idx": "staqc-test-153",
  "doc": "Permutation of values on numpy array/matrix",
  "code": "print(permgrid(2, 3))\n\n# [[0 0 0]\n#  [0 0 1]\n#  [0 1 0]\n#  [0 1 1]\n#  [1 0 0]\n#  [1 0 1]\n#  [1 1 0]\n#  [1 1 1]]\n"
 },
 {
  "idx": "staqc-test-154",
  "doc": "writing csv output python",
  "code": "writer = csv.DictWriter(ouf, ['Name'] + months[1:])\n"
 },
 {
  "idx": "staqc-test-155",
  "doc": "jinja2 print to console or logging",
  "code": "def debug(text):\n  print text\n  return ''\n\nenvironment.filters['debug']=debug\n"
 },
 {
  "idx": "staqc-test-156",
  "doc": "Beautiful Soup [Python] and the extracting of text in a table",
  "code": "first_td = table.find('td')\n"
 },
 {
  "idx": "staqc-test-157",
  "doc": "Calculate number of jumps in Dijkstra's algorithm?",
  "code": "%timeit jumpvec3(pmat,1)\n%timeit jumpvec2(pmat, 1)\n%timeit jumpvec(pmat, 1)\n"
 },
 {
  "idx": "staqc-test-158",
  "doc": "Exponential Decay on Python Pandas DataFrame",
  "code": "In[68]: %timeit multipleApply(dataset)\n1 loops, best of 3: 414 ms per loop\n"
 },
 {
  "idx": "staqc-test-159",
  "doc": "Beautiful Soup - Class contains 'a' and not contains 'b'",
  "code": "soup.find_all(\"tr\", class_=\"viewLicense\")\n"
 },
 {
  "idx": "staqc-test-160",
  "doc": "Concat every 4 strings from a list?",
  "code": ">>> data = ['192', '168', '0', '1', '80', '192', '168', '0', '2', '8080']\n>>> ['{}.{}.{}.{}:{}'.format(*x) for x in zip(*[iter(data)]*5)]\n['192.168.0.1:80', '192.168.0.2:8080']\n"
 },
 {
  "idx": "staqc-test-161",
  "doc": "Intersection between multiple files",
  "code": "from itertools import combinations\n\nfor f1, f2 in combinations(sys.argv[1:], 2):\n    with open(f1) as inp1, open(f2) as inp2:\n        print set(line.rstrip() for line in inp1).intersection(map(str.rstrip,\n                                                                           inp2))\n"
 },
 {
  "idx": "staqc-test-162",
  "doc": "Saving an Element in an Array Permanently",
  "code": "savefile = file(\"backup.json\", \"w\")\nsavefile.write(json.dumps(li))\n"
 },
 {
  "idx": "staqc-test-163",
  "doc": "parse blocks of text from text file using Python",
  "code": "txt = read_file(files[0])\n"
 },
 {
  "idx": "staqc-test-164",
  "doc": "Fasted Python way to bulk csv convert outside of using pandas",
  "code": "1.41840219498\n0.56161403656\n"
 },
 {
  "idx": "staqc-test-165",
  "doc": "Counting elements matching a pattern in a tuple of tuples",
  "code": "def count_zeros(matrix):\n    total = 0\n    for row in matrix:\n        total += row.count(0)\n    return total\n"
 },
 {
  "idx": "staqc-test-166",
  "doc": "Counting elements matching a pattern in a tuple of tuples",
  "code": "def count_zeros_gen(matrix):\n    return sum(row.count(0) for row in matrix)\n"
 },
 {
  "idx": "staqc-test-167",
  "doc": "how to represent a number value as a string in python?",
  "code": ">>> chr(60)\n'<'\n>>> chr(97)\n'a'\n>>> chr(67)\n'C'\n"
 },
 {
  "idx": "staqc-test-168",
  "doc": "Skip/pass over view function so the next can execute in Flask",
  "code": "@app.route('/<slug>')\ndef feature(slug):\n    if slug_in_database(slug):\n        return \"feature: \" + slug\n    with app.test_request_context(url_for('catch', url=slug))\n        return catch(slug)\n\n@app.route('/<path:url>')\ndef catch(url):\n    return \"catch: \" + url\n"
 },
 {
  "idx": "staqc-test-169",
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "Header,Profile,Report,Sequence,Status\n,xxxx,223313,3433,true\nThe,xxxx,43838,0323,true\n,xxxx,6541998,5323,true\n"
 },
 {
  "idx": "staqc-test-170",
  "doc": "two dimensional array for encryption in python",
  "code": ">>> table['7834']  = 'B'\n>>> table['7834']\n'B'\n"
 },
 {
  "idx": "staqc-test-171",
  "doc": "two dimensional array for encryption in python",
  "code": ">>> table.where('9')   # this should work equally well for '9C'\n'6534'\n"
 },
 {
  "idx": "staqc-test-172",
  "doc": "how to write two elements into one row in Python",
  "code": "first sentence, 1\nsecond sentence, 0\nthird sentence, 1\n"
 },
 {
  "idx": "staqc-test-173",
  "doc": "Python3 Rename files in a directory importing the new names from a txt file",
  "code": ">python file_renamer.py\nenter file with new names: newnames.txt\nThe list of files -  ['.git', '.idea', '1111.1.0000.1234567', '1111.1.0000.1234568', '1111.1.0000.1234569', 'file_renamer.py', 'newnames.txt.txt']\nSuccessfully renamed 1111.1.0000.1234567 to 0000.1.0000.1234567\nSuccessfully renamed 1111.1.0000.1234568 to 0000.1.0000.1234568\nSuccessfully renamed 1111.1.0000.1234569 to 0000.1.0000.1234569\n"
 },
 {
  "idx": "staqc-test-174",
  "doc": "Python: How to remove whitespace from number in a string",
  "code": ">>> import re\n>>> s = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris 850 152 nisi ut aliquip ex ea commodo consequat. Duis aute irure 360 458 000 dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n>>> re.sub(r'(?<=\\d)\\s(?=\\d)', r'', s)\n'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris 850152 nisi ut aliquip ex ea commodo consequat. Duis aute irure 360458000 dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'\n"
 },
 {
  "idx": "staqc-test-175",
  "doc": "Diagonals at different points of a 2D list in Python",
  "code": "diag1: [[1], [2, 4], [3, 5, 7], [6, 8], [9]]\ndiag2: [[3], [2, 6], [1, 5, 9], [4, 8], [7]]\n"
 },
 {
  "idx": "staqc-test-176",
  "doc": "Python thread-safe access without blocking or uncontrolled queue growth?",
  "code": "def process():\n    # Do the measurement\n    # Do the calculation\n    Buffer.onNewReading(data1, data2, etc)\n"
 },
 {
  "idx": "staqc-test-177",
  "doc": "How to convert dictionary into string",
  "code": "''.join('{}{}'.format(key, val) for key, val in sorted(adict.items()))\n"
 },
 {
  "idx": "staqc-test-178",
  "doc": "Date formate conversion in Python",
  "code": ">>> import datetime\n>>> d = datetime.datetime.today()\n>>> d.isoformat(' ')\n'2013-01-26 13:12:08.628580'\n>>> d.strftime('%Y-%m-%d %H:%M:%S')\n'2013-01-26 13:12:08'\n"
 },
 {
  "idx": "staqc-test-179",
  "doc": "recursively (or non-recursively) iterating through python array and get the elements",
  "code": "ls1 = [[[[1, '1.0.1'], [1, '2.0.1']], [1, '3.0.11']], [1, '4.0.11']]\nflatten(ls1)\n=> [1, '1.0.1', 1, '2.0.1', 1, '3.0.11', 1, '4.0.11']\n"
 },
 {
  "idx": "staqc-test-180",
  "doc": "Python multiline string - $ for variables",
  "code": ">>> s = \"This is an {example} with {vars}\".format(vars=\"variables\", example=\"example\")\n>>> s\n'This is an example with variables'\n"
 },
 {
  "idx": "staqc-test-181",
  "doc": "saving the number into the variable in every run of cycle python",
  "code": "def try_parse(string):\n    string2 = \"\"\n    for c in string:\n        if not c.isdigit() and c != '.':\n            break\n        string2 += c\n    return string2\n"
 },
 {
  "idx": "staqc-test-182",
  "doc": "Getting file path from command line arguments in python",
  "code": "C:\\Users\\310176421\\Desktop\\Python>python print.py C:\\Users\\310176421\\Desktop\\tes\nt.txt\nTrue\nC:\\Users\\310176421\\Desktop\\test.txt\n\nC:\\Users\\310176421\\Desktop\\Python>python print.py whatever\nFalse\nwhatever\n"
 },
 {
  "idx": "staqc-test-183",
  "doc": "Reshape for array multiplication/division in python",
  "code": "(x * y.T).T\n"
 },
 {
  "idx": "staqc-test-184",
  "doc": "Python list manipulation: Add an item to a string element to make it a 2 item list",
  "code": ">>> a = ['spam', 'eggs', 100, 1234]\n>>> a[0] = [a[0], 'Devon']\n>>> a\n[['spam', 'Devon'], 'eggs', 100, 1234]\n"
 },
 {
  "idx": "staqc-test-185",
  "doc": "numpy: most efficient frequency counts for unique values in an array",
  "code": "zip(ii,y[ii]) \n# [(1, 5), (2, 3), (5, 1), (25, 1)]\n"
 },
 {
  "idx": "staqc-test-186",
  "doc": "Specifying types and patterns using argparse choices",
  "code": "$ ls\nfile.1  file.2  file.3  s.py\n$ python s.py 2\n2\n$ python s.py _\n3\n"
 },
 {
  "idx": "staqc-test-187",
  "doc": "Is it possible to pass the evaluated result of one template tag as a parameter to another tag?",
  "code": "{% some_simple_tag something myobject.body %}\n"
 },
 {
  "idx": "staqc-test-188",
  "doc": "Convert Python dict to object?",
  "code": ">>> args = {'a': 1, 'b': 2}\n>>> s = Struct(**args)\n>>> s\n<__main__.Struct instance at 0x01D6A738>\n>>> s.a\n1\n>>> s.b\n2\n"
 },
 {
  "idx": "staqc-test-189",
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "%timeit ((big[:-1] * big[1:]) < 0).sum()\n10 loops, best of 3: 62.1 ms per loop\n"
 },
 {
  "idx": "staqc-test-190",
  "doc": "Network capturing with Selenium/PhantomJS",
  "code": "pip install browsermob-proxy\n"
 },
 {
  "idx": "staqc-test-191",
  "doc": "use scikit-learn to classify into multiple categories",
  "code": "nice day in nyc => New York\nwelcome to london => London\nhello welcome to new york. enjoy it here and london too => New York, London\n"
 },
 {
  "idx": "staqc-test-192",
  "doc": "Can I use one import and expose keywords from multiple python libraries?",
  "code": "class _ALibrary(object):\ndef __init__(self):\n    pass\ndef fun1(self):\n    print 'fun1'`\n"
 },
 {
  "idx": "staqc-test-193",
  "doc": "Secure MySQL login data in a Python client program",
  "code": "name=\"\\\" or UserType=\\\"Admin\"\n"
 },
 {
  "idx": "staqc-test-194",
  "doc": "Loop through dictionary with django",
  "code": "{% for name, v1, v2 in result %}\n{{ v1 }}\n{{ v2 }}\n{% endfor %}\n"
 },
 {
  "idx": "staqc-test-195",
  "doc": "Loop through dictionary with django",
  "code": "result = [('value1', '1', '3'), ('value2', '2', '4')]\n"
 },
 {
  "idx": "staqc-test-196",
  "doc": "Comparing two dictionaries in list in python",
  "code": "dic0    b       is common to next dic\ndic1    b       is common to next dic\ndic2    d       is common to next dic\n"
 },
 {
  "idx": "staqc-test-197",
  "doc": "Comparing two dictionaries in list in python",
  "code": "lst=[{\"a\":2,\"b\":3,\"c\":4},{\"b\":4}]\n[a for a in lst[0] if a in lst[1]]\n['b']\n"
 },
 {
  "idx": "staqc-test-198",
  "doc": "python- combining list and making them a dictionary",
  "code": "d = {i:[elements.pop(0)] for i in one[:-1]}.\nd[one[-1]] = [elements]\n"
 },
 {
  "idx": "staqc-test-199",
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "ln(y) = -x^2 / (2 * sigma^2) + x * mu / sigma^2 - mu^2 / sigma^2 + ln(height)\n"
 },
 {
  "idx": "staqc-test-200",
  "doc": "What's the most efficient way to accumulate dataframes in pyspark?",
  "code": "output_schema = StructType(\n  [df1.schema.fields[0]] + list(chain(*[df.schema.fields[1:] for df in dfs]))\n)\n"
 },
 {
  "idx": "staqc-test-201",
  "doc": "django filter to calculate hours within range",
  "code": " .annotate(\n     start_in_month=Func(F('in_dt'), month_start, function='GREATEST'),\n     end_in_month=Func(F('out_dt'), month_end, function='LEAST')\n )\n"
 },
 {
  "idx": "staqc-test-202",
  "doc": "Multiple Database Config in Django 1.2",
  "code": "class MyModel(models.Model):\n    connection_name=\"asterisk\"\n    #etc...\n"
 },
 {
  "idx": "staqc-test-203",
  "doc": "Match series of (non-nested) balanced parentheses at end of string",
  "code": "\\(                     # opening paren\n([^()]*)               # content, captured into group 1\n\\)                     # closing paren\n(?=                    # look ahead for...\n  (?:\\s*\\([^()]*\\))*   #   a series of parens, separated by whitespace\n  \\s*                  #   possibly more whitespace after\n  $                    #   end of string\n)                      # end of look ahead\n"
 },
 {
  "idx": "staqc-test-204",
  "doc": "Sort Python Dictionary by first four characters in Key",
  "code": "sorted(yourdict.items(), key=lambda item: int(item[0].split()[0]))\n"
 },
 {
  "idx": "staqc-test-205",
  "doc": "Sort Python Dictionary by first four characters in Key",
  "code": "sorted(yourdict, key=lambda k: int(k.split()[0]))\n"
 },
 {
  "idx": "staqc-test-206",
  "doc": "Python | How to create dynamic and expandable dictionaries",
  "code": "def gen_user():\n  return {\"name\":\"foo\", \"age\":22}\n\nuserdata = {\"data\": [gen_user() for i in xrange(0,5)]}\n\n# or fill separated from declaration so you can fill later\nuserdata ={\"data\":None} # None: not initialized\nuserdata[\"data\"]=[gen_user() for i in xrange(0,5)]\n"
 },
 {
  "idx": "staqc-test-207",
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "ABCDEFGHIJKLMNOPQRSTUVWXYZ\nBCDEFGHIJKLMNOPQRSTUVWXYZA\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nDEFGHIJKLMNOPQRSTUVWXYZABC\nEFGHIJKLMNOPQRSTUVWXYZABCD\nFGHIJKLMNOPQRSTUVWXYZABCDE\nGHIJKLMNOPQRSTUVWXYZABCDEF\nHIJKLMNOPQRSTUVWXYZABCDEFG\nIJKLMNOPQRSTUVWXYZABCDEFGH\nJKLMNOPQRSTUVWXYZABCDEFGHI\nKLMNOPQRSTUVWXYZABCDEFGHIJ\nLMNOPQRSTUVWXYZABCDEFGHIJK\nMNOPQRSTUVWXYZABCDEFGHIJKL\nNOPQRSTUVWXYZABCDEFGHIJKLM\nOPQRSTUVWXYZABCDEFGHIJKLMN\nPQRSTUVWXYZABCDEFGHIJKLMNO\nQRSTUVWXYZABCDEFGHIJKLMNOP\nRSTUVWXYZABCDEFGHIJKLMNOPQ\nSTUVWXYZABCDEFGHIJKLMNOPQR\nTUVWXYZABCDEFGHIJKLMNOPQRS\nUVWXYZABCDEFGHIJKLMNOPQRST\nVWXYZABCDEFGHIJKLMNOPQRSTU\nWXYZABCDEFGHIJKLMNOPQRSTUV\nXYZABCDEFGHIJKLMNOPQRSTUVW\nYZABCDEFGHIJKLMNOPQRSTUVWX\nZABCDEFGHIJKLMNOPQRSTUVWXY\n"
 },
 {
  "idx": "staqc-test-208",
  "doc": "Pandas Datframe1 search for match in range of Dataframe2",
  "code": "    d1   d2\n0  1.1  1.9\n1  3.2  4.3\n2  NaN  NaN\n"
 },
 {
  "idx": "staqc-test-209",
  "doc": "Add django model manager code-completion to Komodo",
  "code": "class Site(models.Model):\n    name = models.CharField(max_length=200)\n    prefix = models.CharField(max_length=1)\n    secret = models.CharField(max_length=255)\n\n    def __unicode__(self):\n        return self.name\n"
 },
 {
  "idx": "staqc-test-210",
  "doc": "Sum of all numbers inside a string",
  "code": "print s.split(\",\")\n"
 },
 {
  "idx": "staqc-test-211",
  "doc": "Dictionary As Table In Django Template",
  "code": "rows = [[field[k][i] for k in field.keys()] for i in xrange(2)]\n"
 },
 {
  "idx": "staqc-test-212",
  "doc": "More elegant/Pythonic way of printing elements of tuple?",
  "code": "for i in solution():\n    print i,\n"
 },
 {
  "idx": "staqc-test-213",
  "doc": "Creating a table out of data in python",
  "code": "your_list = ['10', 10, '20', 20]\nprint(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format('Column 1', 'Column 2', 'Column 3', 'Column 4'))\nprint(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format(your_list[0], your_list[1], your_list[2], str(your_list[3])))\n"
 },
 {
  "idx": "staqc-test-214",
  "doc": "Python - list of dicts into function that only accepts *dicts",
  "code": "multi_dicts(*list_of_dicts)\n"
 },
 {
  "idx": "staqc-test-215",
  "doc": "urllib2 multiple Set-Cookie headers in response",
  "code": "import httplib\nfrom StringIO import StringIO\n\nmsg = \\\n\"\"\"Set-Cookie: Foo\nSet-Cookie: Bar\nSet-Cookie: Baz\n\nThis is the message\"\"\"\n\nmsg = StringIO(msg)\n\nmsg = httplib.HTTPMessage(msg)\n\nassert msg['Set-Cookie'] == 'Foo, Bar, Baz'\n"
 },
 {
  "idx": "staqc-test-216",
  "doc": "How to obtain values of request variables using Python and Flask",
  "code": "myvar = request.args.get(\"myvar\")\n"
 },
 {
  "idx": "staqc-test-217",
  "doc": "Breaking up substrings in Python based on characters",
  "code": "['NN', '123..145', '1.0']\n"
 },
 {
  "idx": "staqc-test-218",
  "doc": "Python and appending items to text and excel file",
  "code": "Yvalues = [1, 2, 3, 4, 5]\nfile_out = open('file.csv','wb')\nmywriter=csv.writer(file_out, delimiter = '\\n')\nmywriter.writerow(Yvalues)\nfile_out.close()\n"
 },
 {
  "idx": "staqc-test-219",
  "doc": "Usng the value of a string as a variable name",
  "code": "my_dynamic_vars = dict()\nstring = 'someString'\n\nmy_dynamic_vars.update({string: dict()})\n"
 },
 {
  "idx": "staqc-test-220",
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "['note', 'to', 'from', 'heading', 'body']\n"
 },
 {
  "idx": "staqc-test-221",
  "doc": "Pythonic solution for conditional arguments passing",
  "code": ">>>func(**{'a':7})\n17\n"
 },
 {
  "idx": "staqc-test-222",
  "doc": "Python - Twisted, Proxy and modifying content",
  "code": "$ curl -x localhost:8080 http://example.com\n"
 },
 {
  "idx": "staqc-test-223",
  "doc": "Parsing bits from a 128 byte block of hex in Python",
  "code": "0-0: 10\n1-2: 0000\n3-3: 00\n4-127: 00000002200000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n"
 },
 {
  "idx": "staqc-test-224",
  "doc": "Python: Create Dictionary From List with [0] = Key and [1:]= Values",
  "code": "{'pups': ['pusp', 'upsp', 'upps', 'upsp', 'uspp'], \n'cups': ['cusp', 'cpus', 'cpsu', 'csup', 'cspu']}\n"
 },
 {
  "idx": "staqc-test-225",
  "doc": "removing first four and last four characters of strings in list, OR removing specific character patterns",
  "code": "['hattrick', 'google', 'wampum', 'newcom', 'smithsonian']\n"
 },
 {
  "idx": "staqc-test-226",
  "doc": "How to search & replace in Python?",
  "code": "s = re.sub('(?<=\\d\\d)', '-', s, 1)\n"
 },
 {
  "idx": "staqc-test-227",
  "doc": "Pandas: Adding conditionally",
  "code": "foo = foobar2.clip_lower(0)\nfoo = foo['var1']+foo['var2']-foo['var3']-foo['var4']\n"
 },
 {
  "idx": "staqc-test-228",
  "doc": "Python CSVkit compare CSV files",
  "code": "\nreference,name,house\n2348A,john,37\n5648R,bill,3\nRT48,kate,88\n76A,harry ,433\n"
 },
 {
  "idx": "staqc-test-229",
  "doc": "Short for 'for i in range(1,len(a)):' in python",
  "code": "for i in r(l):\n    ...\n"
 },
 {
  "idx": "staqc-test-230",
  "doc": "How to convert an xml string to a dictionary in Python?",
  "code": "root = ElementTree.XML(xml_string)\nxmldict = XmlDictConfig(root)\n"
 },
 {
  "idx": "staqc-test-231",
  "doc": "How to convert an xml string to a dictionary in Python?",
  "code": "tree = ElementTree.parse('your_file.xml')\nroot = tree.getroot()\nxmldict = XmlDictConfig(root)\n"
 },
 {
  "idx": "staqc-test-232",
  "doc": "Python inheritance - going from base class to derived one",
  "code": "[<class '__main__.Beta'>]\n[]\n"
 },
 {
  "idx": "staqc-test-233",
  "doc": "Sorting a list based on associated scores",
  "code": "from collections import defaultdict # using defaultdict makes the sums easier\n\ncorrelations = defaultdict(int) # default to int (i.e. 0)\n\nfor i1, i2, correl in strScoresDict: # loop through data\n    correlations[i1] += correl # add score for first item\n    correlations[i2] += correl # and second item\n\noutput = sorted(correlations, \n                key=lambda x: correlations[x], \n                reverse=True) # sort keys by value\n"
 },
 {
  "idx": "staqc-test-234",
  "doc": "which random am i looking for to achieve this:",
  "code": "[random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]\n"
 },
 {
  "idx": "staqc-test-235",
  "doc": "how to find the line number where specific text exists?",
  "code": "with open ('test.txt', 'r') as infile:\n    data = infile.readlines()\n    for line, content in enumerate(data, start=1):\n            if content.strip() == 'this is my horse':\n                print line\n"
 },
 {
  "idx": "staqc-test-236",
  "doc": "Customize sphinxdoc theme",
  "code": ".. include:: global.rst\n\n:strike:`This looks like it is outdated.`\n"
 },
 {
  "idx": "staqc-test-237",
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": " print_table(2)\n"
 },
 {
  "idx": "staqc-test-238",
  "doc": "Python App Engine serving files with Google Cloud Storage",
  "code": "<a href=\"/dynserve/<blob_key>.pdf\">PDF download</a>\n"
 },
 {
  "idx": "staqc-test-239",
  "doc": "Reading/Writing out a dictionary to csv file in python",
  "code": "CSV = \"\"\nfor k,v in d.items():\n    line = \"{},{}\\n\".format(k, \",\".join(v))\n    CSV+=line\nprint CSV \n"
 },
 {
  "idx": "staqc-test-240",
  "doc": "How to build a nested list from a flat one in Python?",
  "code": ">>> list(nested(flat, 0))\n['1', ['1-1', ['1-1-1'], '1-2'], '2', ['2-1', '2-2'], '3']\n"
 },
 {
  "idx": "staqc-test-241",
  "doc": "How to get a list of datatypes on Django model?",
  "code": "['AutoField', 'TextField', 'TextField', 'FloatField', 'CharField', 'BooleanField', 'IntegerField', 'ImageField', 'BooleanField'...\n"
 },
 {
  "idx": "staqc-test-242",
  "doc": "stdout from python to stdin java",
  "code": "Scanner in = new Scanner(System.in)\ndata = in.next()\n"
 },
 {
  "idx": "staqc-test-243",
  "doc": "stdout from python to stdin java",
  "code": "i am done\nJava program received: haha\n"
 },
 {
  "idx": "staqc-test-244",
  "doc": "Jenkins and Python",
  "code": "import sys\n\nprint \"Number of arguments\", len(sys.argv)\nfor arg in sys.argv :\n    print arg\n\n# or\n\nprint 'second method'\n\nfor i in range(len(sys.argv)) :\n    print sys.argv[i]\n\n# take the test name given by the Jenkins parameter $Test_Name\ntestName = sys.argv[2] # arg 0 is script name, arg 1 == '-t', arg 2 == '<the provided test name in Jenkins Run Job interface as a string>', ...\nprint testName\n"
 },
 {
  "idx": "staqc-test-245",
  "doc": "Comparing List and get indices in python",
  "code": "mac_list\n\n    mac_address  frequency\n0  20c9d0892feb          2\n1  28e34789c4c2          1\n2  3480b3d51d5f          1\n3  4480ebb4e28c          1\n4  4c60de5dad72          1\n5  4ca56dab4550          1\n"
 },
 {
  "idx": "staqc-test-246",
  "doc": "Selenium Python select the link from 3rd column from a table",
  "code": "<span class=\"linkhover\" title=\"Selenium_LADEMO_CRM_DONOTCHANGE\" style=\"white-space:nowrap;overflow:hidden;text-overflow:ellipsis;empty-cells:show;display:block;color:#00A;cursor:pointer;\">Selenium_CRM_For_Edit_Test</span>\n"
 },
 {
  "idx": "staqc-test-247",
  "doc": "How to check if key is primary psycopg2",
  "code": "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 column_name \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 a           \u2502\n\u2502 b           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"
 },
 {
  "idx": "staqc-test-248",
  "doc": "How can I, on some global keystroke, paste some text to current active application in linux with Python or C++",
  "code": "String [max. 1024 long string]\n        - Sends the string as single characters converted to\n          KeyPress and KeyRelease events based on a\n          character table in chartbl.h (currently only\n          Latin1 is used...)\n"
 },
 {
  "idx": "staqc-test-249",
  "doc": "django one session per user",
  "code": "def set_session_key(self, key):\n    if self.last_session_key and not self.last_session_key == key:\n        Session.objects.get(session_key=self.last_session_key).delete()\n    self.last_session_key = key\n    self.save()  \n"
 },
 {
  "idx": "staqc-test-250",
  "doc": "Drop Duplicate in market data",
  "code": ">>> df.shift()\n   Bid  Ask\n1  NaN  NaN\n2  1.0  1.5\n3  1.0  1.5\n4  1.0  1.5\n5  1.5  2.0\n6  1.5  2.0\n7  2.0  2.5\n8  2.0  2.5\n"
 },
 {
  "idx": "staqc-test-251",
  "doc": "Generate numbers with 3 digits",
  "code": "[\"%03d\" % i for i in range(121)]\n"
 },
 {
  "idx": "staqc-test-252",
  "doc": "How to sort (list/tuple) of lists/tuples?",
  "code": "data.sort(key=lambda tup: tup[1])  # sorts in place\n"
 },
 {
  "idx": "staqc-test-253",
  "doc": "Batch Scripting: Running python script on all directories in a folder",
  "code": "for /D %%d in (*) do script.py %%d\n"
 },
 {
  "idx": "staqc-test-254",
  "doc": "Find all combinations of letters, selecting each letter from a different key in a dictionary",
  "code": "for combo in itertools.product(self.data1, self.data2, self.data3, self.data4):\n    # combo is a tuple of 4 characters.\n"
 },
 {
  "idx": "staqc-test-255",
  "doc": "Find all combinations of letters, selecting each letter from a different key in a dictionary",
  "code": "for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\n    # combo is a tuple of 4 characters.\n"
 },
 {
  "idx": "staqc-test-256",
  "doc": "How to set an attribute to a vector in rpy2",
  "code": "from rpy2.robjects.vectors import FloatVector, IntVector\npot = FloatVector((2.0, 3.2, 4, 5, 6, 7))\nts = IntVector((1,6,7,19,20,30))\npot.slots['times'] = ts\n"
 },
 {
  "idx": "staqc-test-257",
  "doc": "Regex match following substring in string python",
  "code": "txt='''\\\nCall me on my mobile anytime: 555-666-1212 \nThe office is best at 555-222-3333 \nDont ever call me at 555-666-2345 '''\n\nimport re\n\nprint re.findall(r'(?:(mobile|office).{0,15}(\\+?[2-9]\\d{2}\\)?[ -]?\\d{3}[ -]?\\d{4}))', txt)\n"
 },
 {
  "idx": "staqc-test-258",
  "doc": "Convert empty dictionary to empty string",
  "code": ">>> d = {}\n>>> d or ''\n''\n"
 },
 {
  "idx": "staqc-test-259",
  "doc": "How can I change the value of a node in a python dictionary by following a list of keys?",
  "code": ">>> reduce(getitem, lis, DictOfVehiclePrices)\n'cheap'\n"
 },
 {
  "idx": "staqc-test-260",
  "doc": "How can I create a list with the first column?",
  "code": "In [16]: strs=\"\"\"Available formats:\n   ....:     37  :   mp4 [1080x1920]\n   ....:     46  :   webm    [1080x1920]\n   ....:     22  :   mp4 [720x1280]\n   ....:     45  :   webm    [720x1280]\n   ....:     35  :   flv [480x854]\n   ....:     44  :   webm    [480x854]\n   ....:     34  :   flv [360x640]\n   ....:     18  :   mp4 [360x640]\n   ....:     43  :   webm    [360x640]\n   ....:     5   :   flv [240x400]\n   ....:     17  :   mp4 [144x176]\"\"\"\n   ....:     \n\nIn [17]: for line in strs.splitlines():\n   ....:     spl=line.split()\n   ....:     if '18' in  spl:\n   ....:         print line\n   ....:         break\n   ....:         \n    18  :   mp4 [360x640]\n"
 },
 {
  "idx": "staqc-test-261",
  "doc": "Python Quickest way to round every float in nested list of tuples",
  "code": "def re_round(li, _prec=5):\n    for x in li:\n        try:\n            yield round(x, _prec)\n        except TypeError:\n            yield type(x)(re_round(x, _prec))\n"
 },
 {
  "idx": "staqc-test-262",
  "doc": "How can I determine when a user is in the process of entering something as an input in Python?",
  "code": "import sys, tty\ntty.setraw(sys.stdin.fileno())\none_character= sys.stdin.read(1)\n"
 },
 {
  "idx": "staqc-test-263",
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": "def gen_data(levels, size):\n    choices = 'abcdefghijklmnopqrstuvwxyz'\n    levels = np.asarray([l for l in choices[:nlevels]])\n    index = np.random.random_integers(0, levels.size - 1, size)\n    b = levels[index]\n    x = np.arange(1, size + 1)\n    return x, b\n"
 },
 {
  "idx": "staqc-test-264",
  "doc": "Django Admin Panel. Display and Edit Parent Fields in Child's Object (ModelAdmin.inlines reverse)",
  "code": "class ExecutiveAdmin(admin.ModelAdmin):\n    list_display = ('Person_Name', 'Person_Link')\n"
 },
 {
  "idx": "staqc-test-265",
  "doc": "SQLite Python printing in rows?",
  "code": "from itertools import groupby\n\nfor letter, rows in groupby(cur, key=lambda r: r[0][0]):\n    print ' '.join([r[0] for r in rows])\n"
 },
 {
  "idx": "staqc-test-266",
  "doc": "Python BeautifulSoup Mix Matching items in Table",
  "code": "from bs4 import BeautifulSoup\nimport requests\n\nurl = 'http://www.boxofficemojo.com/movies/?page=daily&view=chart&id=hungergames3.htm'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content)\n\nfor tr in soup.find('div', id='chart_container').find_next_sibling('table').find_all('tr')[1:]:\n    print [td.text for td in tr('td')]\n"
 },
 {
  "idx": "staqc-test-267",
  "doc": "how to do an embedded python module for remote sandbox execution?",
  "code": "    sandbox.other_module = __import__('other_module')\n"
 },
 {
  "idx": "staqc-test-268",
  "doc": "Django/jQuery: handling template inheritence and JS files loading",
  "code": "{% extends 'base.html' %}\n{% block content %}\n    ...\n{% endblock %}\n{% block scripts %}\n    <script src=\"jquery.js\"></script>\n    <script src=\"awesome-script.js\"></script>\n    <script>\n        $(document).ready(function(){\n            ...\n        });\n    </script>\n{% endblock %}    \n"
 },
 {
  "idx": "staqc-test-269",
  "doc": "BeautifulSoup my for loop is printing all the data from the td tag. I would like to exclude the last section of the td tag",
  "code": "[{u'Class': u'Regression_TestCase.RegressionProject_TestCase2.RegressionProject_TestCase2',\n  u'Error': u'9',\n  u'Fail': u'1',\n  u'Skip': u'0',\n  u'Success': u'219',\n  u'Total': u'229'}]\n"
 },
 {
  "idx": "staqc-test-270",
  "doc": "How do I add space between two variables after a print in Python",
  "code": "print '{0}  {1}'.format(count, conv)\n"
 },
 {
  "idx": "staqc-test-271",
  "doc": "Django reverse url to onetoonefield on success",
  "code": "user.profile\n"
 },
 {
  "idx": "staqc-test-272",
  "doc": "how to change a node value in python",
  "code": "from xml.etree import ElementTree as et\nxmlstr=\"\"\"\\\n<?xml version=\"1.0\"?>\n<area>\n  <media>\n    <options>\n         <name>Jaipur</name>\n    </options>\n </media>\n</area>\"\"\"\ndoc=et.fromstring(xmlstr)\ndoc.find('.//name').text='Mumbai'\nprint et.tostring(doc)\n"
 },
 {
  "idx": "staqc-test-273",
  "doc": "Getting value of a class in selenium and python",
  "code": "medications = driver.find_elements_by_css_selector(\"input.medMedications\")\n\n# count\nprint len(medications)\n\n# values\nfor medication in medications:\n    print medication.get_attribute(\"value\")\n"
 },
 {
  "idx": "staqc-test-274",
  "doc": "Compare unequal lists",
  "code": ">>> a = [6, 7]\n>>> b = [6, 7, 8]\n>>> for i in b:\n...     if i in a:\n...             print '%d in both sets!' %(i)\n...     else:\n...             print '%d does not match!' %(i)\n... \n6 in both sets!\n7 in both sets!\n8 does not match!\n>>> \n"
 },
 {
  "idx": "staqc-test-275",
  "doc": "Python program: foreign language word-frequency dictionary",
  "code": "import string\nimport collections\n\ndef cleanedup(fh):\n    for line in fh:\n        word = ''\n        for character in line:\n            if character in string.ascii_letters:\n                word += character\n            elif word:\n                yield word\n                word = ''\n\nwith open ('DQ.txt') as doc:\n    wordlist = collections.Counter(cleanedup(doc))\n    print wordlist.most_commond(5)\n"
 },
 {
  "idx": "staqc-test-276",
  "doc": "Python prettytable Sort by Multiple Columns",
  "code": "+-------+-------+\n|  Name | Grade |\n+-------+-------+\n| Alice |   90  |\n|  Bill |   90  |\n|  Joe  |   90  |\n| Sally |  100  |\n+-------+-------+\n"
 },
 {
  "idx": "staqc-test-277",
  "doc": "Create a dovecot SHA1 digest using bash or python or some other linux command-line tool",
  "code": ">>> import hashlib\n>>> import base64\n\n>>> p = hashlib.sha1('password')\n>>> base64.b64encode(p.digest())\n'W6ph5Mm5Pz8GgiULbPgzG37mj9g='\n"
 },
 {
  "idx": "staqc-test-278",
  "doc": "How to convert a python string",
  "code": "codecs.decode(string, 'unicode_escape')\n"
 },
 {
  "idx": "staqc-test-279",
  "doc": "python list manipulation nesting vertically, making it look like a matrix",
  "code": "print zip(*data)\n"
 },
 {
  "idx": "staqc-test-280",
  "doc": "Is it possible to delete an entire Webpage when the user navigates away?",
  "code": "$(window).bind('beforeunload', function() {\n    $.ajax('yourscript.php?currentUser=0814HIFA9032RHBFAP3RU');\n});\n"
 },
 {
  "idx": "staqc-test-281",
  "doc": "Is it possible to delete an entire Webpage when the user navigates away?",
  "code": "<?php\n\n// load your userId (for example, with $_SESSION, but do what you want here)\n$actualUser = $_SESSION['userId'];\n\n// checks if the requested id to delete fits your actual current user's id\nif (isset($_GET['currentUser'] && $_GET['currentUser'] == $actualUser)\n{\n    $user = $_GET['currentUser'];\n    $file = 'user'.$user.'.php';\n\n    unlink($file);\n}\n"
 },
 {
  "idx": "staqc-test-282",
  "doc": "Selecting siblings from html with Python lxml(html) library",
  "code": "for tr in subpage.cssselect('tr.nob-border'):\n    previous = tr.xpath('count(./preceding-sibling::tr)+1')\n    next = tr.xpath('count(./following-sibling::tr[contains(@class, \"nob-border\")][1]/preceding-sibling::tr)+1')\n    tr_in_between = tr.xpath('./following-sibling::tr[position() < $next]', next=next-previous)\n"
 },
 {
  "idx": "staqc-test-283",
  "doc": "How to only read lines in a text file after a certain string using python?",
  "code": "for files in filepath:\n    with open(files, 'r') as f:\n        for line in f:\n            if 'Abstract' in line:                \n                for line in f: # now you are at the lines you want\n                    # do work\n"
 },
 {
  "idx": "staqc-test-284",
  "doc": "Python how to strip white-spaces from xml text nodes",
  "code": "from lxml import etree\n\ntree = etree.parse('xmlfile')\nroot = tree.getroot()\n\nfor elem in root.iter('*'):\n    if elem.text is not None:\n        elem.text = elem.text.strip()\n\nprint(etree.tostring(root))\n"
 },
 {
  "idx": "staqc-test-285",
  "doc": "executing Python script in PHP and exchanging data between the two",
  "code": "// This is the data you want to pass to Python\n$data = array('as', 'df', 'gh');\n\n// Execute the python script with the JSON data\n$result = shell_exec('python /path/to/myScript.py ' . escapeshellarg(json_encode($data)));\n\n// Decode the result\n$resultData = json_decode($result, true);\n\n// This will contain: array('status' => 'Yes!')\nvar_dump($resultData);\n"
 },
 {
  "idx": "staqc-test-286",
  "doc": "OR style permissions for DjangoRestFramework",
  "code": "from rest_framework import permissions\n\nclass HasNiceHatOrHasNicePants(permissions.BasePermission):\n    \"\"\"\n    Permission to check if user has a Nice Hat or has Nice Pants.\n    If both are False do not return anything.\n    \"\"\"\n    def has_permission(self, request, view):\n\n        if request.user.has_nicehat() or request.user.has_nicepants():\n            return True\n"
 },
 {
  "idx": "staqc-test-287",
  "doc": "Data structure for UDP Server parsing JSON objects in python",
  "code": "   while True:\n     data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes\n     ...json decode, etc. ...\n     q.put(...) \n"
 },
 {
  "idx": "staqc-test-288",
  "doc": "How to create a timer on python",
  "code": "from timeit import default_timer\n\nstart = default_timer()\n\n# do stuff\n\nduration = default_timer() - start\n"
 },
 {
  "idx": "staqc-test-289",
  "doc": "Find difference between two multi dimensional lists",
  "code": "[['hall', 5.2, 460, 234], ['line', 5.3, 5.91, 100]]\n[['top', 9.0, 5.1, 2300], ['greg', 1.2, 400, 234]]\n"
 },
 {
  "idx": "staqc-test-290",
  "doc": "pandas count true values in multi-index frame",
  "code": "In [45]: arr[1:]\nOut[45]: array([[ True,  True,  True]], dtype=bool)\n"
 },
 {
  "idx": "staqc-test-291",
  "doc": "Mulitprocess Pools with different functions",
  "code": "from multiprocessing import Pool\nfrom time import sleep\n\ndef square(x):\n    return x * x\n\ndef cube(y):\n    return y * y * y\n\npool = Pool(processes=20)\n\nresult_squares = pool.map_async(f, range(10))\nresult_cubes = pool.map_async(g, range(10))\n"
 },
 {
  "idx": "staqc-test-292",
  "doc": "Having large lists in main scripts, is there anyway to get it out of the main-script and into another module?",
  "code": "sports_questions = [\"What sport did michael jordan play?\", \"blablalba?\", \"and so on\"]\ncomputer_questions = [\"Who founded microsoft?\", \"blabla\", \"many questions\"]\n"
 },
 {
  "idx": "staqc-test-293",
  "doc": "Check Type: How to check if something is a RDD or a dataframe?",
  "code": "from functools import singledispatch\n\n@singledispatch\ndef bar(x):\n    pass \n\n@bar.register(RDD)\ndef _(arg):\n    return \"RDD\"\n\n@bar.register(DataFrame)\ndef _(arg):\n    return \"DataFrame\"\n\nbar(sc.parallelize([]))\n## 'RDD'\n\nbar(sc.parallelize([(\"foo\", 1)]).toDF())\n## 'DataFrame'\n"
 },
 {
  "idx": "staqc-test-294",
  "doc": "How to add in a dictionary the values that have similar keys?",
  "code": "from collections import defaultdict:\n\nout = defaultdict(int)\nfor key, value in original.iteritems():\n    out[key[0].upper()] += value\n"
 },
 {
  "idx": "staqc-test-295",
  "doc": "Django - how to write users and profiles handling in best way?",
  "code": ">>> for u in User.objects.all():\n...  try:\n...   UserProfile(user=u).save() # Add other params as needed.\n...  except:\n...   pass\n"
 },
 {
  "idx": "staqc-test-296",
  "doc": "python BeautifulSoup how get values between tags?",
  "code": "from itertools import takewhile, ifilter\n\ndiv = soup.find('div', class_='layout4-background')\nfor header in div.find_all('h6'):\n    print header.get_text()\n    listings = takewhile(lambda t: t.name == 'ul',\n                         header.find_next_siblings(text=False))\n    for listing in listings:\n        # do something with listing\n"
 },
 {
  "idx": "staqc-test-297",
  "doc": "Waf: How to output a generated file?",
  "code": "VERSION=@VERSION@\nDATADIR=@DATADIR@\n"
 },
 {
  "idx": "staqc-test-298",
  "doc": "Named dictionary in python",
  "code": "for friend in friends:\n  print \"%s - %s\" % (friend[\"message\"], friend[\"phone\"])\n"
 },
 {
  "idx": "staqc-test-299",
  "doc": "Using fping to get ping times in Python",
  "code": "import subprocess\n\nCMD = ['fping', 'param1', 'param2']\n\nresult = subprocess.check_output(CMD)\n"
 },
 {
  "idx": "staqc-test-300",
  "doc": "Elegant Python function to convert CamelCase to snake_case?",
  "code": "first_cap_re = re.compile('(.)([A-Z][a-z]+)')\nall_cap_re = re.compile('([a-z0-9])([A-Z])')\ndef convert(name):\n    s1 = first_cap_re.sub(r'\\1_\\2', name)\n    return all_cap_re.sub(r'\\1_\\2', s1).lower()\n"
 },
 {
  "idx": "staqc-test-301",
  "doc": "Elegant Python function to convert CamelCase to snake_case?",
  "code": ">>> convert('CamelCase')\n'camel_case'\n>>> convert('CamelCamelCase')\n'camel_camel_case'\n>>> convert('Camel2Camel2Case')\n'camel2_camel2_case'\n>>> convert('getHTTPResponseCode')\n'get_http_response_code'\n>>> convert('get2HTTPResponseCode')\n'get2_http_response_code'\n>>> convert('HTTPResponseCode')\n'http_response_code'\n>>> convert('HTTPResponseCodeXYZ')\n'http_response_code_xyz'\n"
 },
 {
  "idx": "staqc-test-302",
  "doc": "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?",
  "code": "In [25]: df.groupby(['id']).mean()\nOut[25]: \n           A         B         C         D  year\nid                                              \n0   0.535093 -1.655569 -0.309651  0.438992  2004\n12 -1.599944  0.283483  0.146981  0.331241  2004\n34  1.627488 -1.154193 -0.228627 -0.188025  2004\n38  0.332428 -0.427696 -1.324072  2.158907  2003\n53 -1.343306 -0.288373  0.544344 -1.361189  2003\n70  0.825812 -0.159454  0.264984 -0.285401  2003\n72  1.928094  0.532387 -0.352155 -0.039304  2004\n"
 },
 {
  "idx": "staqc-test-303",
  "doc": "Is there a mercurial command which can generate a clone without largefiles?",
  "code": "exclude .hglf\n"
 },
 {
  "idx": "staqc-test-304",
  "doc": "Extracting text from webpage, processing with Perl/Python, then rebuilding the page with links added",
  "code": "import urllib\nurl = 'https://www.google.com/'\npage = urllib.urlopen(url)\nprint page.read()    \n#page.read is the url's source code, so you would print the source  code here. \n"
 },
 {
  "idx": "staqc-test-305",
  "doc": "Faster alternative to for loop in for loop",
  "code": "def generate_neighbors(key, alphabet):\n    for i in range(len(key)):\n        left, right = key[:i], key[i+1:]\n        for char in alphabet:\n            if char != key[i]:\n                yield left + char + right\n"
 },
 {
  "idx": "staqc-test-306",
  "doc": "python- finding total number of items of certain range in a list",
  "code": "l = [3.4,4.5,3.2,5.6]\n\nprint(sum(3 <= ele <= 4  for ele in l))\n2\n"
 },
 {
  "idx": "staqc-test-307",
  "doc": "Asynchronous data through Bloomberg's new data API (COM v3) with Python?",
  "code": "ADMIN = 1\nAUTHORIZATION_STATUS = 11\nBLPSERVICE_STATUS = 9\nPARTIAL_RESPONSE = 6\nPUBLISHING_DATA = 13\nREQUEST_STATUS = 4\nRESOLUTION_STATUS = 12\nRESPONSE = 5\nSESSION_STATUS = 2\nSUBSCRIPTION_DATA = 8\nSUBSCRIPTION_STATUS = 3\nTIMEOUT = 10\nTOKEN_STATUS = 15\nTOPIC_STATUS = 14\nUNKNOWN = -1\nfields = ['BID']\ntickers = ['AUD Curncy']\ninterval = '' #'interval=5.0'\n"
 },
 {
  "idx": "staqc-test-308",
  "doc": "Random rounding to integer in Python",
  "code": "import random\nimport math\nimport numpy as np\n\ndef prob_round(x):\n    sign = np.sign(x)\n    x = abs(x)\n    is_up = random.random() < x-int(x)\n    round_func = math.ceil if is_up else math.floor\n    return sign * round_func(x)\n\nx = 6.1\nsum( prob_round(x) for i in range(100) ) / 100.\n=> 6.12\n"
 },
 {
  "idx": "staqc-test-309",
  "doc": "Splitting Strings in Python with Separator variable",
  "code": ">>> import re\n>>> def split_string(source,separators):\n...     return re.split('[{0}]'.format(re.escape(separators)),source)\n... \n>>> split_string(\"the;foo: went to the store\",':;')\n['the', 'foo', ' went to the store']\n"
 },
 {
  "idx": "staqc-test-310",
  "doc": "Retreiving data from a nested deep.copy dictionary made by list comprehension in Python",
  "code": "for row in range(HEIGHT):\n    for col in range(WIDTH):\n        if keygrid[row][col] in stockgrid[row][col]:\n           stockgrid[row][col][keygrid[row][col]]+=1\n"
 },
 {
  "idx": "staqc-test-311",
  "doc": "Python reshape list to ndim array",
  "code": "x = np.reshape(list_data, (100, 28)).T\n"
 },
 {
  "idx": "staqc-test-312",
  "doc": "Build a Pandas pd.tseries.offsets from timedelta",
  "code": ">>> td = datetime.timedelta(hours=1)\n>>> pd.DateOffset(seconds=td.total_seconds())\n<DateOffset: kwds={'seconds': 3600.0}>\n\n>>> to_offset(pd.DateOffset(seconds=td.total_seconds()))\n<DateOffset: kwds={'seconds': 3600.0}>\n"
 },
 {
  "idx": "staqc-test-313",
  "doc": "Specific font_face based on syntax in Sublime Text 2",
  "code": "{\n    \"font_face\": \"Source Code Pro\"\n}\n"
 },
 {
  "idx": "staqc-test-314",
  "doc": "Joinable PriorityQueue in python's asyncio",
  "code": "waiting...\ngot a (1, 2)\ngot a (2, 1)\ngot a (4, 4)\ngot a (5, 0)\ngot a (6, 8)\ngot a (6, 9)\ngot a (8, 3)\ngot a (9, 5)\ngot a (9, 7)\ngot a (10, 6)\ngot a (100, None)\nwaited\n"
 },
 {
  "idx": "staqc-test-315",
  "doc": "Pick values only below a certain threshold",
  "code": "[(1,5.2),\n(2,1.43),\n(3,3.54),\n(4,887),\n(5,0.35)]\n"
 },
 {
  "idx": "staqc-test-316",
  "doc": "How to save big (not huge) dictonaries in Python?",
  "code": ">>> numpy.savez('file.npz', **arrs)\n"
 },
 {
  "idx": "staqc-test-317",
  "doc": "How to request a File in Google Drive",
  "code": "from apiclient import errors\ntry:\n  service = build_service(### Credentials here ###)\n  file = service.files().get(fileId=file_id).execute()\n\n  print 'Title: %s' % file['title']\n  print 'Description: %s' % file['description']\n  print 'MIME type: %s' % file['mimeType']\nexcept errors.HttpError, error:\n  if error.resp.status == 401:\n    # Credentials have been revoked.\n    # TODO: Redirect the user to the authorization URL.\n    raise NotImplementedError()\n"
 },
 {
  "idx": "staqc-test-318",
  "doc": "How to let js make a request from python and preserve the loaded site in place when answered by python",
  "code": "def some_html():\n    return render('my_template.tpl')\n"
 },
 {
  "idx": "staqc-test-319",
  "doc": "How can I use a list comprehension to extend a list in python?",
  "code": "import itertools as it\n\nreturn sum(it.imap(doSomething, originalList), [])\n"
 },
 {
  "idx": "staqc-test-320",
  "doc": "Python Matplotlib: Splitting one Large Graph into several Sub-Graphs (Subplot)",
  "code": "N=3\nsublists_names = [reso_names[x:x+N] for x in range(0, len(reso_names), N)]\nsublists_values = [reso_values[x:x+N] for x in range(0, len(reso_values), N)]\n"
 },
 {
  "idx": "staqc-test-321",
  "doc": "Plone - Override Zope Schema fields",
  "code": "class IEnhancedDocumentViewerSchema(IGlobalDocumentViewerSettings):\n    \"\"\" \n    Use all the fields from the default schema, and add various extra fields.\n    \"\"\"\n\n    folder_location = schema.TextLine(\n        title=u\"Default folder location\",\n        description=u'This folder will be created in the Plone root folder. '\n                    u'Plone client must have write access to directory.',\n        default=u\"files_folder\")\n"
 },
 {
  "idx": "staqc-test-322",
  "doc": "Plone - Override Zope Schema fields",
  "code": "<adapter \n    for=\"Products.CMFPlone.interfaces.IPloneSiteRoot\"\n    provides=\"my.product.interfaces.IEnhancedDocumentViewerSchema\"\n    factory=\".somewhere.CustomSettings\" />\n"
 },
 {
  "idx": "staqc-test-323",
  "doc": "Get last \"column\" after .str.split() operation on column in pandas DataFrame",
  "code": "In [99]: import pandas as pd\n\nIn [100]: d1 = pd.DataFrame({'ticker' : ['spx 5/25/2001 p500', 'spx 5/25/2001 p600', 'spx 5/25/2001 p700']})\n\nIn [101]: d1.ticker.str.split().tolist()\nOut[101]: \n[['spx', '5/25/2001', 'p500'],\n ['spx', '5/25/2001', 'p600'],\n ['spx', '5/25/2001', 'p700']]\n"
 },
 {
  "idx": "staqc-test-324",
  "doc": "how to convert UTF-8 code to symbol characters in python",
  "code": "import shutil\nfrom urllib.request import urlopen\n\nwith urlopen('http://stackoverflow.com') as u, open('so.html', 'wb') as file:\n    shutil.copyfileobj(u, file)\n"
 },
 {
  "idx": "staqc-test-325",
  "doc": "single line if statement - Python",
  "code": "val_if_true if condition else val_if_false\n"
 },
 {
  "idx": "staqc-test-326",
  "doc": "Searching and counting dictionary key value pairs",
  "code": "from collections import Counter\n\nd = {'brown dogs':3, 'dog of white':4, 'white cats':1, 'white cat':9}\nsubstrings = ['dog', 'cat']\n\ncounter = Counter()\n\nfor substring in substrings:\n    for key in d:\n        if substring in key:\n            counter[substring] += d[key]\n\nprint(counter.items())\n"
 },
 {
  "idx": "staqc-test-327",
  "doc": "Scrapy - Follow RSS links",
  "code": "scrapy shell http://blog.scrapy.org/rss.xml\n"
 },
 {
  "idx": "staqc-test-328",
  "doc": "How to apply group by on data frame with neglecting NaN values in Pandas?",
  "code": "df = pd.DataFrame(columns=['xAxis', 'yAxis1', 'yAxis2'])\ndf['xAxis'] = pd.to_datetime(weather['Date'])\ndf['yAxis1'] = weather_stn1['Tavg']\ndf['yAxis2'] = weather_stn2['Tavg']\n\nplot_df = plot_df.groupby(plot_df['xAxis']).mean()\n\nprint plot_df.reset_index()\n"
 },
 {
  "idx": "staqc-test-329",
  "doc": "Writing to a file in a for loop",
  "code": "myfile = open('xyz.txt', 'w')\nmyfile.writelines(var1)\nmyfile.close()\n"
 },
 {
  "idx": "staqc-test-330",
  "doc": "Python: Extending a predefined named tuple",
  "code": ">>> from collections import namedtuple\n>>> ReadElement = namedtuple('ReadElement', 'address value')\n>>> LookupElement = namedtuple('LookupElement', ReadElement._fields + ('lookups',))\n>>> LookupElement._fields\n('address', 'value', 'lookups')\n>>> LookupElement('addr', 'val', 'lookup') \nLookupElement(address='addr', value='val', lookups='lookup')\n"
 },
 {
  "idx": "staqc-test-331",
  "doc": "Convert dataFrame to list",
  "code": "print df\n   a\n0  2\n1  0\n2  1\n3  0\n4  1\n5  0\n\nprint df.values\n[[2]\n [0]\n [1]\n [0]\n [1]\n [0]]\n\nprint df.iloc[:, 0].tolist()\n[2, 0, 1, 0, 1, 0]\n"
 },
 {
  "idx": "staqc-test-332",
  "doc": "Python extract info from a local html file",
  "code": "soup = BeautifulSoup(data)\n\nfor elm in soup.find_all(text=\"PATTERN:\"):\n    print elm.find_parent(\"font\").find_next_sibling(\"font\").get_text(strip=True)\n"
 },
 {
  "idx": "staqc-test-333",
  "doc": "How can I find all subclasses of a given class in Python?",
  "code": "for cls in vars()['Foo'].__subclasses__():\n    print(cls.__base__)\n# <class '__main__.Foo'>\n# <class '__main__.Foo'>\n"
 },
 {
  "idx": "staqc-test-334",
  "doc": "Convert date to second from a reference - Python",
  "code": "from datetime import datetime\nimport pytz\nimport calendar\n\ndt = datetime.now(pytz.utc)\nsecs = calendar.timegm(dt.utctimetuple())\nprint dt, secs\n"
 },
 {
  "idx": "staqc-test-335",
  "doc": "How to write variable and array on the same line for a text file?",
  "code": "thefile.write(\"%s \" % name)\nfor item in thelist:\n  thefile.write(\"%s,\"% item)\n"
 },
 {
  "idx": "staqc-test-336",
  "doc": "Lazy Method for Reading Big File in Python?",
  "code": "def read_in_chunks(file_object, chunk_size=1024):\n    \"\"\"Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1k.\"\"\"\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n\n\nf = open('really_big_file.dat')\nfor piece in read_in_chunks(f):\n    process_data(piece)\n"
 },
 {
  "idx": "staqc-test-337",
  "doc": "Convert column elements to column name in pandas",
  "code": "In [126]:\n\ndf['bid'] = df['bid'].replace('bid', 1)\ndf['bid'] = df['bid'].replace('ask', 2)\ndf\nOut[126]:\n     time   stock  bid  ask\n0   time1  stockA    1  1.0\n1   time2  stockA    2  1.1\n2   time3  stockB    2  2.1\n3   time4  stockB    1  2.0\n"
 },
 {
  "idx": "staqc-test-338",
  "doc": "Python: Read Content of Hidden HTML Table",
  "code": "United States, California\nVa Long Beach Healthcare System\nLong Beach, California, United States, 90822  \nUnited States, Georgia\nGastrointestinal Specialists Of Georgia Pc\nMarietta, Georgia, United States, 30060  \n# .... \nLocal Institution\nTaipei, Taiwan, 100  \nLocal Institution\nTaoyuan, Taiwan, 333  \nUnited Kingdom\nLocal Institution\nLondon, Greater London, United Kingdom, SE5 9RS  \n"
 },
 {
  "idx": "staqc-test-339",
  "doc": "Opposite of set.intersection in python?",
  "code": "a ^ b\n"
 },
 {
  "idx": "staqc-test-340",
  "doc": "How to create a object of variables, and return it, in Python?",
  "code": "mydist = Disk()\nmydist.test1 = \"value\"\n# And so on\n"
 },
 {
  "idx": "staqc-test-341",
  "doc": "Addition of multiple arrays in python",
  "code": ">>> lst = [[1,2,3,5,4,3], \n          [5,7,2,4,6,7],\n          [3,6,2,4,5,9]]\n>>> map(sum, zip(*lst))\n[9, 15, 7, 13, 15, 19]\n"
 },
 {
  "idx": "staqc-test-342",
  "doc": "GIMP Python-fu nested group layers",
  "code": "group = pdb.gimp_layer_group_new(img)\ngroup.name = \"my group\"\n"
 },
 {
  "idx": "staqc-test-343",
  "doc": "How to search a string with the url patterns in django?",
  "code": "from django.core.urlresolvers import resolve\nfrom myapp.views import user_profile_view\n\ntry:\n    my_view = resolve(\"/%s/\" % user_name)\n    if my_view == user_profile_view:\n        # We match the user_profile_view, so that's OK.\n    else:\n        # oops, we have another view that is mapped on that URL\n    # you already have something mapped on this address\nexcept:\n    # app doesn't have such path\n"
 },
 {
  "idx": "staqc-test-344",
  "doc": "How to get the 'cardinal' day of the year in Pandas?",
  "code": "df['C'] = df.groupby(df.index.year).cumcount(1)+1\n"
 },
 {
  "idx": "staqc-test-345",
  "doc": "find unique first top and bottom lines of fastq file from fasta file",
  "code": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGG\n"
 },
 {
  "idx": "staqc-test-346",
  "doc": "Unique duplicate rows with range",
  "code": "function matching_line(array1, array2):\n    if array1[0] = array2[0]\n    ..etc\n"
 },
 {
  "idx": "staqc-test-347",
  "doc": "Getting specific field from chosen Row in Pyspark DataFrame",
  "code": "result.rdd.flatMap(list).first()\n"
 },
 {
  "idx": "staqc-test-348",
  "doc": "Computer Shut Off Python 3.4",
  "code": "#!/usr/bin/python\nimport os\nos.system(\"shutdown -h now\")\n"
 },
 {
  "idx": "staqc-test-349",
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "df.apply(lambda x: '&'.join([str(elem) for elem in x]))\n"
 },
 {
  "idx": "staqc-test-350",
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "entry = models.ForeignKey(Entry)\n"
 },
 {
  "idx": "staqc-test-351",
  "doc": "Re-Construct a png image from a GDK Pixbuf",
  "code": "with open('result.png', 'wb') as png_file:\n    png_file.write(data)\n"
 },
 {
  "idx": "staqc-test-352",
  "doc": "Sort generated numbers using another python generator",
  "code": "self.values[index] = self.generators[index].next()\n"
 },
 {
  "idx": "staqc-test-353",
  "doc": "Sort generated numbers using another python generator",
  "code": "self.values[index] = (self.generators[index].next(), index)\n"
 },
 {
  "idx": "staqc-test-354",
  "doc": "Monitor ZIP File Extraction Python",
  "code": "import zipfile\n\nzf = zipfile.ZipFile('test.zip')\n\nuncompress_size = sum((file.file_size for file in zf.infolist()))\n\nextracted_size = 0\n\nfor file in zf.infolist():\n    extracted_size += file.file_size\n    print \"%s %%\" % (extracted_size * 100/uncompress_size)\n    zf.extract(file)\n"
 },
 {
  "idx": "staqc-test-355",
  "doc": "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?",
  "code": "['A', 'a', 'A0', 'a0', '0', '00', '0A', '00A', '0a', '00a']\n"
 },
 {
  "idx": "staqc-test-356",
  "doc": "How to convert datetime string without timezone to another datetime with timezone in python?",
  "code": "from datetime import datetime, timedelta\nfrom pytz import timezone\n\nAmericaNewYorkTz = timezone('America/New_York')\n\ndef _to_datetime(air_date, air_time):\n    schedule_time = '{}:{}'.format(air_date, air_time)\n    naiveDateTime = datetime.strptime(schedule_time,'%m/%d/%Y:%I:%M %p') \n    localizedDateTime = AmericaNewYorkTz.localize(naiveDateTime, is_dst=None)\n    return localizedDateTime\n\ndt = _to_datetime('05/27/2015', '06:00 AM')\nprint('DateTime:', dt)\n"
 },
 {
  "idx": "staqc-test-357",
  "doc": "python click usage of standalone_mode",
  "code": "from __future__ import print_function\nimport click\n\n@click.command()\n@click.option('--name', help='Enter Name')\n@click.pass_context\ndef gatherarguments(ctx, name):\n    return ctx\n\ndef usectx(ctx):\n    print(\"Name is %s\" % ctx.params['name'])\n\nif __name__ == '__main__':\n    ctx = gatherarguments(standalone_mode=False)\n    print(ctx)\n    usectx(ctx)\n"
 },
 {
  "idx": "staqc-test-358",
  "doc": "Replace single quotes with double quotes in python, for use with insert into database",
  "code": ">>> import re\n>>> s = \"INSERT INTO addresses VALUES ('1','1','CUCKOO'S NEST','CUCKOO'S NEST STREET');\"\n>>> def repl(m):\n    if m.group(1) in ('(', ',') or m.group(2) in (',', ')'):\n        return m.group(0)\n    return m.group(1) + \"''\" + m.group(2)\n\n>>> re.sub(\"(.)'(.)\", repl, s)\n\"INSERT INTO addresses VALUES ('1','1','CUCKOO''S NEST','CUCKOO''S NEST STREET');\"\n"
 },
 {
  "idx": "staqc-test-359",
  "doc": "Split string into array with many char pro items",
  "code": "def split_on_parts(s, *parts):\n    total = 0\n    buildstr = []\n    for p in parts:\n        buildstr.append(s[total:total+p])\n        total += p\n    return buildstr\n\ns = 'hello world'\nprint split_on_parts(s, 3, 3, 3, 3)\nprint split_on_parts(s, 4, 3, 4)\n"
 },
 {
  "idx": "staqc-test-360",
  "doc": "Dynamically pass parameters to function",
  "code": "def pause_wrapper(x, n):\n    def decorator(f):\n        config = [x, time.time()+n]\n        def wrapped(*args, **kwargs):\n            if config[0] == 0:\n                time.sleep(config[1] - time.time())\n                config = [x, time.time() + n]\n\n            return f(*args, **kwargs)\n        return wrapped\n    return decorator\n"
 },
 {
  "idx": "staqc-test-361",
  "doc": "A list as a key for PySpark's reduceByKey",
  "code": ">>> a_list = [1, 2, 3]\n>>> a_list.__hash__ is None\nTrue\n>>> hash(a_list)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n"
 },
 {
  "idx": "staqc-test-362",
  "doc": "Python: Automatically initialize instance variables?",
  "code": "from functools import wraps\nimport inspect\n\ndef initializer(fun):\n   names, varargs, keywords, defaults = inspect.getargspec(fun)\n   @wraps(fun)\n   def wrapper(self, *args, **kargs):\n       for name, arg in zip(names[1:], args) + kargs.items():\n           setattr(self, name, arg)\n       fun(self, *args, **kargs)\n   return wrapper\n"
 },
 {
  "idx": "staqc-test-363",
  "doc": "Insert data from one sorted array into another sorted array",
  "code": "[[ 1  0  0  0  0]\n [ 2  0  0  0  0]\n [ 3  1  0  0  0]\n [ 4  0  0  0  0]\n [ 5 18  0  0  0]\n [ 6  0  0  0  0]\n [ 7  2  0  0  0]\n [ 8  0  0  0  0]]\n"
 },
 {
  "idx": "staqc-test-364",
  "doc": "Rolling mean with customized window with Pandas",
  "code": "pd.rolling_mean(data, window=5, center=True)\n"
 },
 {
  "idx": "staqc-test-365",
  "doc": "regex condition that returns only if a \" [word]\" does not trail at the end",
  "code": "(?<!\\d)\\d{4}-\\d{1,5}(?!\\d)(?! Dog)\n"
 },
 {
  "idx": "staqc-test-366",
  "doc": "Fastest way to remove subsets of lists from a list in Python",
  "code": "sets={frozenset(e) for e in fruits}  \nus=set()\nwhile sets:\n    e=sets.pop()\n    if any(e.issubset(s) for s in sets) or any(e.issubset(s) for s in us):\n        continue\n    else:\n        us.add(e)   \n"
 },
 {
  "idx": "staqc-test-367",
  "doc": "How to generate list combinations in Python",
  "code": ">>> [list(elem) for elem in product([1, 0], repeat =2)]\n[[1, 1], [1, 0], [0, 1], [0, 0]]\n"
 },
 {
  "idx": "staqc-test-368",
  "doc": "Accessing xrange internal structure",
  "code": "from ctypes import *\n\nPyObject_HEAD = [\n    ('ob_refcnt', c_size_t),\n    ('ob_type', c_void_p),\n]\n\nclass XRangeType(Structure):\n    _fields_ = PyObject_HEAD + [\n        ('start', c_long),\n        ('step', c_long),\n        ('len', c_long),\n    ]\n\nrange_obj = xrange(1, 11, 2)\n\nc_range_obj = cast(c_void_p(id(range_obj)), POINTER(XRangeType)).contents\nprint c_range_obj.start, c_range_obj.step, c_range_obj.len\n"
 },
 {
  "idx": "staqc-test-369",
  "doc": "How to create a Dictionary in Python with 2 string keys to access an integer?",
  "code": "dic = {}\ndic['New York'] = {}\ndic['New York']['Chicago'] = 25\n"
 },
 {
  "idx": "staqc-test-370",
  "doc": "Extend Python list \"inline\"",
  "code": "range(15, 30, 3) + [0]\n"
 },
 {
  "idx": "staqc-test-371",
  "doc": "making new column in pandas dataframes based on filter",
  "code": ">>> df['filter'] = (df['a'] >= 20) & (df['b'] >= 20)\n    a   b   c filter\n0   1  50   1  False\n1  10  60  30  False\n2  20  55   1   True\n3   3   0   0  False\n4  10   0   0  False\n"
 },
 {
  "idx": "staqc-test-372",
  "doc": "Arranging keys and values from a dictionary in a csv file - Python",
  "code": "dictionary = {'Alice': ['10', '10'], 'Tom': ['9', '8'], 'Ben': ['10', '9']}\n\nimport csv\nwith open('eggs.csv', 'wb') as csvfile:\n    spamwriter = csv.writer(csvfile, delimiter=',')\n    for item in dictionary.items():\n         spamwriter.writerow(item)\n"
 },
 {
  "idx": "staqc-test-373",
  "doc": "Python binary conversion to hex",
  "code": "''.join(r'\\x{0:02x}'.format(ord(c)) for c in value)\n"
 },
 {
  "idx": "staqc-test-374",
  "doc": "Python binary conversion to hex",
  "code": "\"'{0}'\".format(''.join(r'\\x{:02x}'.format(ord(c)) for c in value))\n"
 },
 {
  "idx": "staqc-test-375",
  "doc": "Django Scheduled Deletion",
  "code": "\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom datetime import datetime, timedelta\n\n@receiver(post_save, sender=MyModel)\ndef model_expiration(sender, instance, created, **kwargs):\n    if created:\n         delete_model.apply_async(\n            args=(instance.pk,), \n            eta=datetime.utcnow() + timedelta(hours=24)\n         )\n"
 },
 {
  "idx": "staqc-test-376",
  "doc": "How to convert pandas single column data frame to series or numpy vector",
  "code": "In [24]: tdf =  pd.DataFrame({'s1' : [0,1,23.4,10,23]})\n\nIn [25]: tdf['s1']\nOut[25]:\n0     0.0\n1     1.0\n2    23.4\n3    10.0\n4    23.0\nName: s1, dtype: float64\n\nIn [26]: tdf['s1'].shape\nOut[26]: (5,)\n"
 },
 {
  "idx": "staqc-test-377",
  "doc": "How to run executable from python and pass it arguments asked for?",
  "code": "import subprocess\n\ndef create_grid(*commands):\n    process = subprocess.Popen(\n        ['grid.exe'],\n        stdout=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        stderr=subprocess.PIPE)\n\n    process.communicate('\\n'.join(commands) + '\\n')\n\nif __name__ == '__main__':\n    create_grid('grid.grd', 'yes', 'not really')\n"
 },
 {
  "idx": "staqc-test-378",
  "doc": "On using a string as an integer counter (aka index) in a for loop",
  "code": "for i, file in enumerate(os.listdir(directoryPath)):\n    if file.endswith(\".csv\"):\n       array1[i] = numpy.genfromtxt(file, delimiter=',')[:,2]\n"
 },
 {
  "idx": "staqc-test-379",
  "doc": "How to loop through object return by SQLALchemy and process each row and display it to HTML",
  "code": "def listallcams():\n   camtab = SVSIpCamReg.query.filter_by(u_id = current_user.id).all()\n   for rec in camtab:\n      dkey = rec.key\n      bdkey=bytes(dkey)\n      f = Fernet(bdkey)\n      bcamurl = bytes(rec.camurl_hash)\n      camurl =f.decrypt(bcamurl)\n      rec.camurl = camurl\n   return render_template('cam/viewallcam.html',allcam = camtab)\n"
 },
 {
  "idx": "staqc-test-380",
  "doc": "Ordering a list according to hierarchy",
  "code": "sorted(a, key=lambda p: map(str.strip, p.split(',')[::-1]))\n"
 },
 {
  "idx": "staqc-test-381",
  "doc": "Trying to convert HSV image to Black and white [opencv]",
  "code": "h,b = skin.shape[:2]    \n\nfor i in xrange(h):\n    for j in xrange(b):\n        if bw_image[i][j] > threshold:\n            new_image[i][j] = 255 #Setting the skin tone to be White\n        else:\n            new_image[i][j] = 0 #else setting it to zero.\n"
 },
 {
  "idx": "staqc-test-382",
  "doc": "How to convert a list of datetime.datetime objects to date in Python?",
  "code": "\n>>> l=('hostzi.com', [datetime.datetime(2009, 5, 12, 13, 4, 12)])\n>>> l[1][0].strftime('%Y/%m/%d')\n'2009/05/12'\n"
 },
 {
  "idx": "staqc-test-383",
  "doc": "Append to several lists inside list",
  "code": ">>> lis_A = [[], [], []]\n>>> vals = [1,2,3]\n>>> [x.append(y) for x, y in zip(lis_A, vals)]\n>>> lis_A\n[[1], [2], [3]]\n"
 },
 {
  "idx": "staqc-test-384",
  "doc": "Loading multiple images from a text file",
  "code": "import cv\nwith open('textFileOfImages.txt','rb') as f:\n    img = [line.strip() for line in f]\n\n#load the images at you leisure\nfor image in img:\n    loadedImage = cv.LoadImage(image)\n    #manipulate image\n"
 },
 {
  "idx": "staqc-test-385",
  "doc": "Loading multiple images from a text file",
  "code": "import os\nimport cv\nwith open('textFileOfImages.txt','rb') as f:\n    img = ['%s/%s'%(os.getcwd(),line.strip()) for line in f]\n"
 },
 {
  "idx": "staqc-test-386",
  "doc": "How can I use a pre-made color map for my heat map in matplotlib?",
  "code": "from pylab import cm\nprint cm.datad.keys()\n"
 },
 {
  "idx": "staqc-test-387",
  "doc": "Generate random string from regex character set",
  "code": "x = list(invRegex.invert('[a-z][0-9]?.'))\ny = list(inverse_regex.ipermute('[a-z][0-9]?.'))\nprint(len(x))\n# 26884\nprint(len(y))\n# 1100\n"
 },
 {
  "idx": "staqc-test-388",
  "doc": "python - increase array size and initialize new elements to zero",
  "code": "import numpy as np\n\nA = np.array([[1, 2 ],[2, 3]])   # Input\nA_new = np.lib.pad(A, ((0,1),(0,2)), 'constant', constant_values=(0)) # Output\n"
 },
 {
  "idx": "staqc-test-389",
  "doc": "Compare list w/ sublist",
  "code": "listb_dict = {item[0]: item[1:] for item in listb}\n"
 },
 {
  "idx": "staqc-test-390",
  "doc": "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array",
  "code": "import numpy as np\ngrid_shape = (4,5)\nN = np.prod(grid_shape)\n\ny = np.add.outer(np.arange(grid_shape[0]),np.arange(grid_shape[1]))\nprint(y)\n\n# [[0 1 2 3 4]\n#  [1 2 3 4 5]\n#  [2 3 4 5 6]\n#  [3 4 5 6 7]]\n"
 },
 {
  "idx": "staqc-test-391",
  "doc": "How do I make a function to accept an argument that is another function?",
  "code": "    elif next == 'exit':\n        exit_game(bear_room)\n"
 },
 {
  "idx": "staqc-test-392",
  "doc": "Fast linear interpolation in Numpy / Scipy \"along a path\"",
  "code": "In [2]: %timeit doit()\n10000 loops, best of 3: 107 \u00b5s per loop\n"
 },
 {
  "idx": "staqc-test-393",
  "doc": "Sqlalchemy: bulk correlated update to link tables",
  "code": "stmt = select([Location.id]).\\\n    where(and_(Location.x==Stopover.x, Location.y==Stopover.y)).limit(1)\n\nconn.execute(Stopover.__table__.update().values(location_id=stmt)\n"
 },
 {
  "idx": "staqc-test-394",
  "doc": "Detagging with regex does not catch nested tags",
  "code": "<(?:[^><]|(?R))*>\n"
 },
 {
  "idx": "staqc-test-395",
  "doc": "Localized random points using numpy and pandas",
  "code": "coordstest = np.vstack([np.random.uniform(150, 220, 20), \n                        np.random.uniform(150, 220, 20)]).T\n"
 },
 {
  "idx": "staqc-test-396",
  "doc": "Call the same method in all objects in Python?",
  "code": "for obj in all_objects:\n    if hasattr(obj, 'gravity'):\n        obj.gravity()\n"
 },
 {
  "idx": "staqc-test-397",
  "doc": "Python - Replacing value of a row in a CSV file",
  "code": "with open('path/to/filename') as filehandler_name:\n    # this is how you open a file for reading\n\nwith open('path/to/filename', 'w') as filehandler_name:\n    # this is how you open a file for (over)writing\n    # note the 'w' argument to the open built-in\n\nimport csv\n# this is the module that handles csv files\n\nreader = csv.reader(filehandler_name)\n# this is how you create a csv.reader object\nwriter = csv.writer(filehandler_name)\n# this is how you create a csv.writer object\n\nfor line in reader:\n    # this is how you read a csv.reader object line by line\n    # each line is effectively a list of the fields in that line\n    # of the file.\n    # # XXXX-XXXX, 0 --> ['XXXX-XXXX', '0']\n"
 },
 {
  "idx": "staqc-test-398",
  "doc": "How to get a list of Xth elements from a list of tuples?",
  "code": ">>> sset = [('foo',1),('bar',3),('zzz',9)]\n>>> x, y = zip(*sset)\n>>> x\n('foo', 'bar', 'zzz')\n>>> y\n(1, 3, 9)\n"
 },
 {
  "idx": "staqc-test-399",
  "doc": "How to sort through keys in a dictionary, adding the values and returning a list of keys if combined values equal a certain number",
  "code": "import itertools\ndef matches(d, target):\n    # First try single items, then couples, then triplets etc.\n    for num in range(1,len(d)+1):\n        # Iterate over all possible combinations of length num\n        for com in itertools.combinations(d.items(), num):\n            # Does the sum of all second items per key/value pair match the target?\n            if sum(item[1] for item in com) == target:\n                # Yield one item at a time, so the caller can decide when to stop\n                yield com\n"
 },
 {
  "idx": "staqc-test-400",
  "doc": "Convert multichar %xx escapes to unicode",
  "code": "u = urllib.unquote(s.decode('utf-8'))\n"
 },
 {
  "idx": "staqc-test-401",
  "doc": "Numpy interconversion between multidimensional and linear indexing",
  "code": "print 'Check C-order'\nfor k in xrange(N):\n    ii = tuple(binassign[:,k])\n    jj = tuple(bassign_rev_C[k,:])\n    print ii==jj,ii,jj\n\nprint 'Check F-order'\nfor k in xrange(N):\n    ii = tuple(binassign[:,k])\n    jj = tuple(bassign_rev_F[k,:])\n    print ii==jj,ii,jj \n"
 },
 {
  "idx": "staqc-test-402",
  "doc": "Creating an iterable of dictionaries from an iterable of tuples",
  "code": "In [12]: keys = ('name', 'location', 'value')\n\nIn [13]: [dict(zip(keys, values)) for values in all_values]\nOut[13]: \n[{'location': 0, 'name': 'a', 'value': 0.1},\n {'location': 1, 'name': 'b', 'value': 0.5},\n {'location': 2, 'name': 'c', 'value': 1.0}]\n"
 },
 {
  "idx": "staqc-test-403",
  "doc": "How do I store multiple copies of the same field in Django?",
  "code": "r = resource(name=\"\")\na1 = author(name=\"ninefingers\")\na2 = author(name=\"jon skeet\", type=\"god\")\nr.authors.add(a1)\nr.authors.add(a2)\nenglish = languages.objects.get(iso_lang_code=\"en-GB\")\nr.add(english)\nr.save()\n"
 },
 {
  "idx": "staqc-test-404",
  "doc": "Multidimensional array in Python",
  "code": "matrix = [[a,b],[c,d],[e,f]]\n"
 },
 {
  "idx": "staqc-test-405",
  "doc": "Reading serial data in realtime in Python",
  "code": "While True:\n    bytesToRead = ser.inWaiting()\n    ser.read(bytesToRead)\n"
 },
 {
  "idx": "staqc-test-406",
  "doc": "Fast way to find index of array in array of arrays",
  "code": "In [15]: x\nOut[15]: \narray([^A^B^C^D], \n      dtype='|V4')\n"
 },
 {
  "idx": "staqc-test-407",
  "doc": "Defining the name of a ManyToOne relationship in Django",
  "code": "class SpecificUserProfile(UserProfile):\n    referrer = models.ForeignKey('self', related_name='referred')\n"
 },
 {
  "idx": "staqc-test-408",
  "doc": "Date formate conversion in Python",
  "code": "d.isoformat(' ')\n"
 },
 {
  "idx": "staqc-test-409",
  "doc": "Python & Beautifulsoup web scraping - select a paragraph with a specific child tag",
  "code": "from bs4 import BeautifulSoup\n\nhtml = \"\"\"<div class='div_name_class'>\n<p>\n   <span class='class_name_1' title='title1'>val1</span>\n   <span class='class_name_1' title='title2'>val2</span>\n</p>\n<p><span class='class_name_2'><em>text of no interest</em></span>text of interest</p>\"\"\"\n\nsoup = BeautifulSoup(html)\np = soup.find('span', attrs={'class': 'class_name_2'}).parent\np.span.em.extract()\nprint p.text\n"
 },
 {
  "idx": "staqc-test-410",
  "doc": "Creating random binary files",
  "code": "import os\n\nwith open('output_file', 'wb') as fout:\n    fout.write(os.urandom(1024)) # replace 1024 with size_kb if not unreasonably large\n"
 },
 {
  "idx": "staqc-test-411",
  "doc": "recursively (or non-recursively) iterating through python array and get the elements",
  "code": "def flatten(lst):\n    if not lst:\n        return\n    elif not isinstance(lst, list):\n        yield lst\n    else:\n        for e in flatten(lst[0]):\n            yield e\n        for e in flatten(lst[1:]):\n            yield e\n\nlist(flatten(ls1))\n=> [1, '1.0.1', 1, '2.0.1', 1, '3.0.11', 1, '4.0.11']\n"
 },
 {
  "idx": "staqc-test-412",
  "doc": "Python multiline string - $ for variables",
  "code": ">>> d = { 'vars': \"variables\", 'example': \"example\" }\n>>> s = \"This is an {example} with {vars}\"\n>>> s.format(**d)\n'This is an example with variables'\n"
 },
 {
  "idx": "staqc-test-413",
  "doc": "Using Random Module to Administer DNA Mutations",
  "code": "import random\ndef mutate(string, mutation, threshold):\n    return ''.join([mutation[char] if random.random() < threshold \n                                       and char in mutation else char\n                                       for char in string])\n"
 },
 {
  "idx": "staqc-test-414",
  "doc": "Creating an OrderedDict from a csv file",
  "code": "import csv\nfrom collections import OrderedDict\n\ndef parse_csv(filename):\n\n    file = open(filename, mode='r')\n\n    csvReader = csv.reader(file)\n\n    # get rid of header row\n    header = next(csvReader)\n    # print(header)\n\n    odict = OrderedDict()\n    for row in csvReader:\n        odict[row[0]] = row[1:]\n        # print(row)\n\n    return odict\n\nparse_csv('example.csv')\n"
 },
 {
  "idx": "staqc-test-415",
  "doc": "How to get the location of a Zope installation from inside an instance?",
  "code": "zope-conf-additional +=\n  <product-config pd.prenotazioni>\n    logfile ${buildout:directory}/var/log/prenotazioni.log\n  </product-config>\n"
 },
 {
  "idx": "staqc-test-416",
  "doc": "Installing OSQA on windows (local system)",
  "code": "mysqladmin create osqa\n"
 },
 {
  "idx": "staqc-test-417",
  "doc": "How do I obtain the reference of a getter/setter method created through @property in Python?",
  "code": "Player.health.fset\nPlayer.health.fget\n"
 },
 {
  "idx": "staqc-test-418",
  "doc": "Search for a key in a nested Python dictionary",
  "code": "idnum = 11\n# The loop and 'if' are good\n# You just had the 'break' in the wrong place\nfor id, idnumber in A.iteritems():\n    if idnum in idnumber.keys(): # you can skip '.keys()', it's the default\n       calculate = some_function_of(idnumber[idnum])\n       break # if we find it we're done looking - leave the loop\n    # otherwise we continue to the next dictionary\nelse:\n    # this is the for loop's 'else' clause\n    # if we don't find it at all, we end up here\n    # because we never broke out of the loop\n    calculate = your_default_value\n    # or whatever you want to do if you don't find it\n"
 },
 {
  "idx": "staqc-test-419",
  "doc": "Getting a pdf from scipy.stats in a generic way",
  "code": "import numpy as np\nimport scipy.stats as stats\n\ndistrNameList = ['beta', 'expon', 'gamma']\nsample = stats.norm(0, 1).rvs(1000)\nabscissas = np.linspace(0,1, 10)\nfor distrName in distrNameList:\n    distr = getattr(stats.distributions, distrName)\n    param = distr.fit(sample)\n    pdf = distr.pdf(abscissas, *param)\n    print(pdf)\n"
 },
 {
  "idx": "staqc-test-420",
  "doc": "getting pixels value in a checkerboard pattern in python",
  "code": "coords=np.ogrid[0:w,0:h]\nidx=(coords[0]+coords[1])%2 == 1\nprint(idx)\nprint(idx.shape)\n# [[False  True False  True]\n#  [ True False  True False]\n#  [False  True False  True]\n#  [ True False  True False]\n#  [False  True False  True]\n#  [ True False  True False]]\n# (6, 4)\n"
 },
 {
  "idx": "staqc-test-421",
  "doc": "Reorder a dictionary to fit a data frame",
  "code": "df = pd.DataFrame.from_dict(d, orient='index').stack().reset_index(1, drop=True).to_frame().reset_index()\ndf.columns = ['name', 'link']\n"
 },
 {
  "idx": "staqc-test-422",
  "doc": "select a specific range from a numpy 2d array to plot values",
  "code": "import numpy as np\n\nx = np.array([1,2,3,4,5])\ny = np.array([100,200,300,400,500])\n\n# b contains true when corresponding value of x is outside 2 < x < 4\nb = np.ma.masked_outside(x, 2, 4).mask\n\n# x2 originates from x, but values 2 < x < 4 are stripped (according to the boolean variables contained in b), the same is done with y2\nx2 = x[~b]\ny2 = y[~b]\n\nprint 'x2', x2\nprint 'y2', y2\n"
 },
 {
  "idx": "staqc-test-423",
  "doc": "Display menu bar items of IE using Python",
  "code": "WM_KEYDOWN = 0x0100\nWM_KEYUP = 0x0101\n\ndef point_to_long(x, y):\n    return (y * 0x10000) + x\n\ndef show_menu(handle):\n    target_pos = point_to_long(30, 40)\n    send_message(window_handle, WM_LBUTTONDOWN, 0, target_pos)\n    send_message(window_handle, WM_LBUTTONUP, 0, target_pos)\n"
 },
 {
  "idx": "staqc-test-424",
  "doc": "Secure MySQL login data in a Python client program",
  "code": "\"SELECT * FROM Users WHERE name=\\\"\".name.\"\\\";\"\n"
 },
 {
  "idx": "staqc-test-425",
  "doc": "Secure MySQL login data in a Python client program",
  "code": "SELECT * FROM Users WHERE name=\"\" or UserType=\"Admin\";\n"
 },
 {
  "idx": "staqc-test-426",
  "doc": "How to iterate through a module's functions",
  "code": "[f for _, f in foo.__dict__.iteritems() if callable(f)]\n"
 },
 {
  "idx": "staqc-test-427",
  "doc": "How to convert text from a file into a list in Python?",
  "code": "<users>\n    <user name=\"yrName\" highscore=\"yrScore\" averagescore=\"yrAverage\" \n          attempt1=\"1\" attempt2=\"2\" attempt3=\"3\">       \n    </user>\n    <user>\n        ...\n</users>\n"
 },
 {
  "idx": "staqc-test-428",
  "doc": "Python argparser. List of dict in INI",
  "code": "class MyConfigParser(ConfigParser.RawConfigParser):\n\n    def get_list_of_tups(self, section, option):\n        value = self.get(section, option)\n        import re\n        couples = re.finditer('\\(\"([a-z0-9]*)\", \"([a-z0-9]*)\"\\)', value)\n        return [(c.group(1), c.group(2)) for c in couples]\n"
 },
 {
  "idx": "staqc-test-429",
  "doc": "Python argparser. List of dict in INI",
  "code": "[section]\ncouples = [(\"somekey1\", \"somevalue1\"), (\"somekey2\", \"somevalue2\"), (\"somekey3\", \"somevalue3\")]\n"
 },
 {
  "idx": "staqc-test-430",
  "doc": "Converting date using to_datetime",
  "code": "In [305]:\npd.to_datetime(20101, format='%Y-%m')\n\nOut[305]:\nTimestamp('1970-01-01 00:00:00.000020101')\n"
 },
 {
  "idx": "staqc-test-431",
  "doc": "First non-null value per row from a list of Pandas columns",
  "code": "In [12]:\ndef func(x):\n    if x.first_valid_index() is None:\n        return None\n    else:\n        return x[x.first_valid_index()]\ndf.apply(func, axis=1)\n\nOut[12]:\n0     1\n1     3\n2     4\n3   NaN\ndtype: float64\n"
 },
 {
  "idx": "staqc-test-432",
  "doc": "Create numpy array based on magnitude of difference between arrays",
  "code": "arr_c = np.where((abs(arr_a - arr_b)/arr_b) > 0.3, 1, 0) \n"
 },
 {
  "idx": "staqc-test-433",
  "doc": "Protection against downloading too big files",
  "code": ">>> r.raw.read(10)\n'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n"
 },
 {
  "idx": "staqc-test-434",
  "doc": "evaluating values of a dictionary",
  "code": ">>> test = {'a': (1, 2, None), 'b':(2, 3, '')}\n>>> all(elem[2] in ('', None) for elem in test.values())\nTrue\n>>> test['c'] = (1, 2, 3)\n>>> all(elem[2] in ('', None) for elem in test.values())\nFalse\n"
 },
 {
  "idx": "staqc-test-435",
  "doc": "Remove double and single square brackets from text file generated from python",
  "code": "with open('/path/to/my_file.txt', 'r') as my_file:\n    text = my_file.read()\n    text = text.replace(\"[\", \"\")\n    text = text.replace(\"]\", \"\")\n\n# If you wish to save the updates back into a cleaned up file\nwith open('/path/to/my_file_clean.txt', 'w') as my_file:\n    my_file.write(text)\n"
 },
 {
  "idx": "staqc-test-436",
  "doc": "Joining Subsequent List Elements - Python",
  "code": "from itertools import groupby\n\na = ['AA', 'BB', 'C', 'D']\nres = [''.join((str(z) for z in y)) for x, y in groupby(a, key = lambda x: len(x) == 2)]\n"
 },
 {
  "idx": "staqc-test-437",
  "doc": "Django: Lookup by length of text field",
  "code": "ModelWithTextField.objects.filter(text_field__iregex=r'^.{7,}$')\n"
 },
 {
  "idx": "staqc-test-438",
  "doc": "How can a Python module single file be installed using pip and PyPI?",
  "code": "def example():\n    # Note: You can use sys.argv here\n    print \"Hi! I'm a command written in python.\"\n"
 },
 {
  "idx": "staqc-test-439",
  "doc": "GNOME configuration database type-inference",
  "code": ">>> import gconf\n>>> client = gconf.Client()\n>>> # Get a value and introspect its type:\n>>> value = client.get('/apps/gnome-terminal/profiles/Default/background_color')\n>>> value.type\n<enum GCONF_VALUE_STRING of type GConfValueType>\n>>> value.get_string()\n'#FFFFFFFFDDDD'\n"
 },
 {
  "idx": "staqc-test-440",
  "doc": "How to send audio wav file generated at the server to client browser?",
  "code": "from cStringIO import StringIO\nfrom flask import make_response\n\nfrom somewhere import generate_wav_file  # TODO your code here\n\n@app.route('/path')\ndef view_method():\n\n    buf = StringIO()\n\n    # generate_wav_file should take a file as parameter and write a wav in it\n    generate_wav_file(buf) \n\n    response = make_response(buf.getvalue())\n    buf.close()\n    response.headers['Content-Type'] = 'audio/wav'\n    response.headers['Content-Disposition'] = 'attachment; filename=sound.wav'\n    return response\n"
 },
 {
  "idx": "staqc-test-441",
  "doc": "List to nested dictionary in python",
  "code": "def nest_me(x, y):\n    \"\"\"\n    Take two arguments and return a one element dict with first\n    argument as a value and second as a key\n    \"\"\"\n    return {y: x}\n\na = ['item1', 'item2', 'item3','item4']\nrev_a = reversed(a) # ['item4', 'item3', 'item2','item1']\nprint reduce(\n    nest_me, # Function applied until the list is reduced to one element list\n    rev_a # Iterable to be reduced\n)\n# {'item1': {'item2': {'item3': 'item4'}}}\n"
 },
 {
  "idx": "staqc-test-442",
  "doc": "List to nested dictionary in python",
  "code": "a = ['item1', 'item2', 'item3','item4']\nprint reduce(lambda x, y: {y: x}, reversed(a))\n"
 },
 {
  "idx": "staqc-test-443",
  "doc": "Sort Python Dictionary by first four characters in Key",
  "code": ">>> sorted(yourdict.items(), key=lambda item: int(item[0].split()[0]))\n[('0 -> 332', 877), ('666 -> 999', 4388), ('1333 -> 1665', 7998), ('3000 -> 3332', 9753), ('3666 -> 3999', 6267), ('4000 -> 4332', 4383), ('5666 -> 5999', 4495), ('6333 -> 6665', 7966)]\n"
 },
 {
  "idx": "staqc-test-444",
  "doc": "Sort Python Dictionary by first four characters in Key",
  "code": ">>> yourdict = {'666 -> 999': 4388, '4000 -> 4332': 4383, '1333 -> 1665': 7998, '5666 -> 5999': 4495, '3666 -> 3999': 6267, '3000 -> 3332': 9753, '6333 -> 6665': 7966, '0 -> 332': 877}\n>>> sorted(yourdict, key=lambda k: int(k.split()[0]))\n['0 -> 332', '666 -> 999', '1333 -> 1665', '3000 -> 3332', '3666 -> 3999', '4000 -> 4332', '5666 -> 5999', '6333 -> 6665']\n"
 },
 {
  "idx": "staqc-test-445",
  "doc": "python multiple 'for' statement in one row",
  "code": "for a, b, c in zip(a_list, b_list, c_list):\n   pass\n"
 },
 {
  "idx": "staqc-test-446",
  "doc": "Summarizing inside a Django template",
  "code": "from django import template\n\nregister = template.Library()\n\n@register.filter\ndef sum_monto(cuentas, op):\n    if op == \"pos\":\n         return sum(c.monto for c in cuentas if c.monto > 0)\n    else\n         return sum(c.monto for c in cuentas if c.monto < 0)\n"
 },
 {
  "idx": "staqc-test-447",
  "doc": "Generate permutations of a list of lists with variable lengths",
  "code": "lsts = ['AG', 'ACG','T']\n"
 },
 {
  "idx": "staqc-test-448",
  "doc": "Developing Python modules - adding them to the Path",
  "code": "src/\n   |-myapp/\n          |-pkg_a/\n                 |-__init__.py\n                 |-foo.py\n          |-pkg_b/\n                 |-__init__.py\n                 |-bar.py\n   |-myapp.py\n"
 },
 {
  "idx": "staqc-test-449",
  "doc": "Pandas Datframe1 search for match in range of Dataframe2",
  "code": "df1 = pd.DataFrame([[1,2],[3,4], [5,6]], columns=[\"d1\", \"d2\"])\ndf2 = pd.DataFrame([[1.1,1.9],[3.2,4.3]], columns=[\"d1\", \"d2\"])\ndf1.apply(temp, axis=1)\n"
 },
 {
  "idx": "staqc-test-450",
  "doc": "List of (date, day_of_week) tuples",
  "code": "dateList = [(d, d.weekday()) for d in dateList]\n"
 },
 {
  "idx": "staqc-test-451",
  "doc": "Filtering in Django by a set of String",
  "code": ">>> Inventary.objects.filter(Q(name__startswith='1.01') | Q(name__startswith='1.02'))\n"
 },
 {
  "idx": "staqc-test-452",
  "doc": "Filtering in Django by a set of String",
  "code": ">>> from django.db.models import Q\n\n>>> values = ['1.01', '1.02']\n\n>>> query = Q()\n>>> for value in values:\n...     query |= Q(name__startswith=value)\n\n>>> Inventary.objects.filter(query)\n"
 },
 {
  "idx": "staqc-test-453",
  "doc": "in python, how do I check to see if keys in a dictionary all have the same value x?",
  "code": "testval = 1\nall(val==testval for val in d.values())   # -> True\n"
 },
 {
  "idx": "staqc-test-454",
  "doc": "Dictionary As Table In Django Template",
  "code": "[u'Birthday:', u'Education', u'Job:', u'Child Sex:']\n"
 },
 {
  "idx": "staqc-test-455",
  "doc": "Nested List of Lists to Single List of tuples",
  "code": ">>> exampleList = [['A', 'B', 'C', 'D'], [1, 2, 3, 4], [10, 20, 30, 40]]\n>>> list(zip(*exampleList))\n[('A', 1, 10), ('B', 2, 20), ('C', 3, 30), ('D', 4, 40)]\n"
 },
 {
  "idx": "staqc-test-456",
  "doc": "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?",
  "code": ">>> function(var1=None, var2=\"fish\", var3=None)\n{'var2': 'fish'}\n"
 },
 {
  "idx": "staqc-test-457",
  "doc": "Python pandas to get specified rows from a CSV file",
  "code": "for chunk in chunks:\n    #do something to each chunk\n"
 },
 {
  "idx": "staqc-test-458",
  "doc": "Converting C style for loop to python",
  "code": "for i in range(m, low - 1, -1):\n"
 },
 {
  "idx": "staqc-test-459",
  "doc": "huge text file (6Gb) search and replace",
  "code": "<text id=\"1\" title=\"title1\">\nbla bla bla bla.........\n</text>\n<text id=\"2\" title=\"title2\">\nbla bla bla bla.........\n</text>\n<text id=\"3\" title=\"title3\">\nbla bla bla bla.........\n</text>\n"
 },
 {
  "idx": "staqc-test-460",
  "doc": "finding nth combination (incremental approach) of letters (list)",
  "code": "def powerprod(iterable):\n    s = list(iterable)\n    for r in itertools.count(1):\n        for c in itertools.product(s, repeat=r):\n            yield c\n"
 },
 {
  "idx": "staqc-test-461",
  "doc": "Returning the value of an index in a python list based on other values",
  "code": "offset = 2\naString = raw_input(\"digit the string to convert: \")\n#aString = \"abz\"\nnewString = \"\"\n\nfor letter in aString:\n    ord_letter = ord(letter)+offset\n    ord_letter_rotated = ((ord_letter - 97) % 26) + 97\n    newString += chr(ord_letter_rotated)\n\nprint newString\n"
 },
 {
  "idx": "staqc-test-462",
  "doc": "reading Unicode string as json object in python",
  "code": "for row in data['store']['rows']:\n    print row\n"
 },
 {
  "idx": "staqc-test-463",
  "doc": "progress bar properties python2.72 pywinauto",
  "code": "window['Progress1'].Texts()\n"
 },
 {
  "idx": "staqc-test-464",
  "doc": "Convert a date string into YYYYMMDD",
  "code": "20091130\n20100331\n20100930\n"
 },
 {
  "idx": "staqc-test-465",
  "doc": "Given two lists of strings, find the total number of strings in the second list which contains any string in the first list as substring",
  "code": ">>> ListA = ['stop', 'kill']\n>>> ListB = ['stoppable', 'killable', 'stopkill']\n\n>>> sum(a.lower() in b.lower() for a in ListA for b in ListB)\n4\n>>> len(set(b for a in ListA for b in ListB if a.lower() in b.lower()))\n3\n"
 },
 {
  "idx": "staqc-test-466",
  "doc": "optparse(): Input validation",
  "code": "parser.add_option(\"-e\", help=\"e desc\", dest=\"e_opt\", action=\"store_true\")\nparser.add_option(\"-d\", help=\"d desc\", dest=\"d_opt\", action=\"store_true\")\n(opts, args) = parser.parse_args()\nif (parser.has_option(\"-e\") and parser.has_option(\"-d\")):\n    print \"Error!  Found both d and e options.  You can't do that!\"\n    sys.exit(1)\n"
 },
 {
  "idx": "staqc-test-467",
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "sudo apt-get install php5-odbc php5-sybase tdsodbc\n"
 },
 {
  "idx": "staqc-test-468",
  "doc": "How to automatically rerun a python program after it finishes? Supervisord?",
  "code": "$ sudo supervisorctl reload\n"
 },
 {
  "idx": "staqc-test-469",
  "doc": "Match C++ Strings and String Literals using regex in Python",
  "code": "r'(?P<prefix>(?:\\bu8|\\b[LuU])?)(?:\"(?P<dbl>[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?P<sngl>[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\')|R\"([^\"(]*)\\((?P<raw>.*?)\\)\\4\"'\n"
 },
 {
  "idx": "staqc-test-470",
  "doc": "Extract text from webpage using either Python or Applescript",
  "code": "set theUrl to \"\"\n\ntell application \"Safari\"\n\n    tell document 1\n\n        do JavaScript \"document.getElementsByClassName('proceed')[0].click()\"\n        delay 1\n        set timeoutCounter to 0\n        repeat until (do JavaScript \"document.readyState\") is \"complete\"\n            set timeoutCounter to timeoutCounter + 1\n\n            delay 0.5\n            if timeoutCounter is greater than 50 then\n                exit repeat\n            end if\n        end repeat\n        set theUrl to (do JavaScript \"document.getElementsByTagName('BODY')[0].getElementsByTagName('b')[0].getElementsByTagName('a').item(0).innerHTML; \")\n\n    end tell\nend tell\nlog theUrl\n"
 },
 {
  "idx": "staqc-test-471",
  "doc": "Extract text from webpage using either Python or Applescript",
  "code": "tell application \"Safari\"\n    set thelink to do JavaScript \"document.links[4].href \" in document 1\nend tell\n"
 },
 {
  "idx": "staqc-test-472",
  "doc": "How to add regression functions in python, or create a new regression function from given coefficients?",
  "code": "np.dot(X_test, summed_params)\n"
 },
 {
  "idx": "staqc-test-473",
  "doc": "Python selenium and fuzzy matching",
  "code": "elem = browser.find_elements_by_tag_name(\"option\") \nfor ele in elem:\n  if ele.get_attribute(\"innerHTML\").find('Red') > -1 and ele.get_attribute(\"innerHTML\").find('wolly') > -1 and ele.get_attribute(\"innerHTML\").find('small') > -1 and ele.get_attribute(\"innerHTML\").find('small') > -1:\n    #TODO\n"
 },
 {
  "idx": "staqc-test-474",
  "doc": "How to search & replace in Python?",
  "code": "i = s.index('-') + 2\ns = s[:i] + '-' + s[i:]\n"
 },
 {
  "idx": "staqc-test-475",
  "doc": "fabric cleanup operation with atexit",
  "code": "fabric$ fab hello -H web01,web02\n>[web01] Executing task 'hello'\n>[web01] run: hostname\n>[web01] out: web01\n>[web01] out: \n>[web02] Executing task 'hello'\n>[web02] run: hostname\n>[web02] out: web02\n>[web02] out: \n>\n>this is at exit command.\n>\n>Done.\n"
 },
 {
  "idx": "staqc-test-476",
  "doc": "Python function that takes an input and spits out a month and how many days it has",
  "code": "import datetime\nimport calendar\n\ndef main():\n    year = datetime.date.today().year\n    userin = int(raw_input(\"Enter a month as number: \"))  # Python 3: `int(input(...))` \n    print '{}, {}'.format(calendar.month_abbr[userin], calendar.monthrange(year, userin)[1])\n"
 },
 {
  "idx": "staqc-test-477",
  "doc": "Using pandas to plot data",
  "code": "Name        A    B  C\nDate                 \n2015-01-02  1  1.5  0\n2015-01-03  2  1.0  0\n2015-01-04  2  5.0  0\n2015-01-31  0  0.0  1\n"
 },
 {
  "idx": "staqc-test-478",
  "doc": "Access a Numpy Recarray via the C-API",
  "code": "field1      0  -0.0919\n            1  -1.4634\n            2   1.0818\n            3  -0.2393\nfield2      0  -0.4911\n            1  -1.0023\n            2   0.9188\n            3  -1.1036\n            4   0.6265\n            5  -0.5615\n            6   0.0289\n            7  -0.2308\nfield3      0   0.5878\n            1   0.7523\n            2  -1.0585\n            3   1.0560\n            4   0.7478\n            5   1.0647\n"
 },
 {
  "idx": "staqc-test-479",
  "doc": "What's the convinient way to evaluate multiple string equality in Python?",
  "code": "def f(A):\n    return A in [\"a\", \"b\", \"c\"]\n"
 },
 {
  "idx": "staqc-test-480",
  "doc": "What's the convinient way to evaluate multiple string equality in Python?",
  "code": "if A in [\"a\", \"b\", \"c\"]:\n    # do the thing\n"
 },
 {
  "idx": "staqc-test-481",
  "doc": "Customize sphinxdoc theme",
  "code": "$ cd my-sphinx-dir\n$ mkdir -p theme/static\n$ touch theme/theme.conf\n$ touch theme/static/style.css\n"
 },
 {
  "idx": "staqc-test-482",
  "doc": "What would be a good regexp for identifying the \"original message\" prefix in gmail?",
  "code": "if re.search(\"On([^,]+,){3}.*?wrote:\", subject, re.IGNORECASE):\n    # Successful match\nelse:\n    # Match attempt failed\n"
 },
 {
  "idx": "staqc-test-483",
  "doc": "List files in ONLY the current directory",
  "code": "files = [f for f in os.listdir('.') if os.path.isfile(f)]\nfor f in files:\n    # do something\n"
 },
 {
  "idx": "staqc-test-484",
  "doc": "Different databases with the same models on Django",
  "code": "MIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'our.custom.middleware.Class',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n)\n"
 },
 {
  "idx": "staqc-test-485",
  "doc": "Parenthesized repetitions in Python regular expressions",
  "code": "m = re.findall(r'TEST\\s\\((?:\\d+\\s?)*\\)', str)\n"
 },
 {
  "idx": "staqc-test-486",
  "doc": "Summing similar elements within a tuple-of-tuples",
  "code": "(('a', 'c', 4), ('b', 'c', 1), ('a', 'b', 10))\n"
 },
 {
  "idx": "staqc-test-487",
  "doc": "Find k smallest pairs in two lists",
  "code": ">>> import heapq\n>>> heapq.nsmallest(3,c,key=sum)\n[(1, 2), (1, 4), (3, 2)]\n"
 },
 {
  "idx": "staqc-test-488",
  "doc": "setDefault for Nested dictionary in python",
  "code": "self.table.setdefault(field,0)\n"
 },
 {
  "idx": "staqc-test-489",
  "doc": "setDefault for Nested dictionary in python",
  "code": "print(len(foo.CompleteAnalysis['A']['value']))\n# 2\n"
 },
 {
  "idx": "staqc-test-490",
  "doc": "Subtracting an integer value from a text file and displaying the result in Python2.7",
  "code": "00:47:12: start interaction\n00:47:18: End interaction\n00:47:20: Start interaction\n00:47:23: End interaction\n00:47:25: Start interaction\n00:47:28: End interaction\n00:47:29: Start interaction\n00:47:31: End interaction\n"
 },
 {
  "idx": "staqc-test-491",
  "doc": "Remove duplicates in python list but remember the index",
  "code": "l = [1, 1, 2, 3]\ninds = []\nseen = set()\nfor i, ele in enumerate(l):\n    if ele not in seen:\n        inds.append(i)\n    seen.add(ele)\n"
 },
 {
  "idx": "staqc-test-492",
  "doc": "Remove duplicates in python list but remember the index",
  "code": "def yield_un(l):\n    seen = set()\n    for i, ele in enumerate(l):\n        if ele not in seen:\n            yield (i,ele)\n        seen.add(ele)\n"
 },
 {
  "idx": "staqc-test-493",
  "doc": "Auto increament the invoice number in django backend for new invoice",
  "code": "def increment_invoice_number():\n    last_invoice = Invoice.objects.all().order_by('id').last()\n    if not last_invoice:\n         return 'MAG0001'\n    invoice_no = last_invoice.invoice_no\n    invoice_int = int(invoice_no.split('MAG')[-1])\n    new_invoice_int = invoice_int + 1\n    new_invoice_no = 'MAG' + str(new_invoice_int)\n    return new_invoice_no\n"
 },
 {
  "idx": "staqc-test-494",
  "doc": "Grammar rule extraction from parsed result",
  "code": ">>> for rule in ptree.productions():\n...     print rule\n... \nS -> VP\nVP -> VB NP ADVP\nVB -> 'get'\nNP -> PRP\nPRP -> 'me'\nADVP -> RB\nRB -> 'now'\n"
 },
 {
  "idx": "staqc-test-495",
  "doc": "How to generate an html directory list using Python",
  "code": "import os\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef dirtree():\n    path = os.path.expanduser(u'~')\n    return render_template('dirtree.html', tree=make_tree(path))\n\nif __name__==\"__main__\":\n    app.run(host='localhost', port=8888, debug=True)\n"
 },
 {
  "idx": "staqc-test-496",
  "doc": "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation",
  "code": "def f(n):\n    ........\n    return .....\n"
 },
 {
  "idx": "staqc-test-497",
  "doc": "Uploading Django projects set up within virtual environment on Github",
  "code": "$ git clone <url> my-project; cd my-project \n$ mkvirtualenv my-env-name\n$ pip install -r requirements.txt\n... continue your work, commit and push push and win at life :D\n"
 },
 {
  "idx": "staqc-test-498",
  "doc": "More efficient solution? Dictionary as sparse vector",
  "code": "d1 = pandas.DataFrame(numpy.array([1, 4]), index=['a', 'b'], dtype=\"int32\")\nd2 = pandas.DataFrame(numpy.array([2, 2]), index=['a', 'c'], dtype=\"int32\")\n\nd1.add(d2, fill_value=0)\n"
 },
 {
  "idx": "staqc-test-499",
  "doc": "Make one list from two list applying constraint",
  "code": "for sublist in C for i in sublist yield i\n|-> yield i for sublist in C for i in sublist\n    |-> i for sublist in C for i in sublist\n"
 },
 {
  "idx": "staqc-test-500",
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [17]: [dct[i] for i in index]\nOut[17]: [40, 30, 20, 10]\n"
 },
 {
  "idx": "staqc-test-501",
  "doc": "Python - Access contents of list after applying Counter from collections module",
  "code": ">>> from collections import Counter\n>>> theList = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\n>>> newList = Counter(theList)\n>>> newList['blue']\n3\n"
 },
 {
  "idx": "staqc-test-502",
  "doc": "How can I compare dates using Python?",
  "code": ">>> int(age.days / 365.24)\n31\n"
 },
 {
  "idx": "staqc-test-503",
  "doc": "Loading a dataset from file, to use with sklearn",
  "code": "import pandas as pd\nmydata = pd.read_csv(filename)\ntarget = mydata[\"Label\"]  #provided your csv has header row, and the label column is named \"Label\"\n\n#select all but the last column as data\ndata = mydata.ix[:,:-1]\n"
 },
 {
  "idx": "staqc-test-504",
  "doc": "How to create linux users via my own GUI application in Python?",
  "code": "useradd -m -p PASSWORD\n"
 },
 {
  "idx": "staqc-test-505",
  "doc": "How to create linux users via my own GUI application in Python?",
  "code": "import os \nimport crypt \n\npassword =\"testpassword\"\nencPass = crypt.crypt(Password,\"salt\")\nos.system(\"useradd -p \"+encPass+\" someuser \")\n"
 },
 {
  "idx": "staqc-test-506",
  "doc": "merging two lists, removing empty strings",
  "code": ">>> [[x or y or 0 for x, y in zip(a, b)] for a, b in zip(L1, L2)]\n[[1, 2, 3], [1, 2, 3]]\n"
 },
 {
  "idx": "staqc-test-507",
  "doc": "How can I quickly compare a list and a set?",
  "code": "l = [1, 1, 3, 2, 5, 7, 8, 3, 2, 1]\nresult = 0 # accumulator for result\nfor e in l:\n  if e in a:\n    result += 1\n  elif e in b:\n    result -= 1\n\nprint result # prints \"2\"\n"
 },
 {
  "idx": "staqc-test-508",
  "doc": "Python module for playing sound data with progress bar?",
  "code": "if current_location >= 1 or fail_event.isSet():\n    break\n"
 },
 {
  "idx": "staqc-test-509",
  "doc": "Calculate weighted average using a pandas/dataframe",
  "code": "In [13]: df['wa'] = df.value / g.value.transform(\"sum\") * df.wt\n"
 },
 {
  "idx": "staqc-test-510",
  "doc": "Python: output for recursively printing out files and folders",
  "code": "['DIR1/',['fileA','fileB','DIR3/',['fileE','fileF']],'DIR2/',['fileC','fileD']]\n"
 },
 {
  "idx": "staqc-test-511",
  "doc": "Read a dense matrix from a file directly into a sparse numpy array?",
  "code": "In [840]: txt=b\"\"\"1,0,0,2,3\n0,0,0,0,0\n4,0,0,0,0\n0,0,0,3,0\n\"\"\".splitlines()\nIn [841]: \nIn [841]: np.loadtxt(txt,delimiter=',',dtype=int)\nOut[841]: \narray([[1, 0, 0, 2, 3],\n       [0, 0, 0, 0, 0],\n       [4, 0, 0, 0, 0],\n       [0, 0, 0, 3, 0]])\n"
 },
 {
  "idx": "staqc-test-512",
  "doc": "Timeout function in Python",
  "code": "from threading import Timer\n\ndef kill_yourself(delay):\n    t = Timer(delay, kill_yourself_now)\n    t.daemon = True # no need to kill yourself if we're already dead\n    t.start()\n"
 },
 {
  "idx": "staqc-test-513",
  "doc": "How do I make pip available from command line mac?",
  "code": "export PATH=$PATH:\"<insert_path_here>\"\n"
 },
 {
  "idx": "staqc-test-514",
  "doc": "Convert empty dictionary to empty string",
  "code": ">>> d = {}\n>>> str(d or '')\n''\n"
 },
 {
  "idx": "staqc-test-515",
  "doc": "Is it possible to map a discontiuous data on disk to an array with python?",
  "code": "shape = (total_length/size,size)\ndata = np.memmap('tmp', dtype='i', mode='r+', order='F', shape=shape)\n"
 },
 {
  "idx": "staqc-test-516",
  "doc": "Return All Matching Lines in a Logfile",
  "code": "import re\nregexp = re.compile(r'\\[(\\d{2}:\\d{2}:\\d{2}\\.xxx\\d{3})\\][\\s]+status[\\s]+XYZ[\\s]+ID:([0-9A-Zx]+)(.+)')\n\nf = open(\"log.txt\", \"r\")\nfor line in f.readlines():\n    print line\n    m = re.match(regexp, line)\n    #print m\n    if m:\n        print m.groups()\n"
 },
 {
  "idx": "staqc-test-517",
  "doc": "How to convert a string that already looks like a list into a list?",
  "code": ">>> eval(\"__import__('sys').version\")\n'2.7.5 (default, Oct 28 2013, 20:45:48) \\n[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)]'\n>>> ast.literal_eval(\"__import__('sys').version\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/ast.py\", line 80, in literal_eval\n    return _convert(node_or_string)\n  File \"/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/ast.py\", line 79, in _convert\n    raise ValueError('malformed string')\nValueError: malformed string\n"
 },
 {
  "idx": "staqc-test-518",
  "doc": "Retrieve position of elements with setting some criteria in numpy",
  "code": "def using_quadratic_loop(data):\n    return np.array([[i,j]\n            for i in range(1,np.shape(data)[0]-1)\n            for j in range(1,np.shape(data)[1]-1)\n            if np.all(data[i-1:i+2,j-1:j+2]==data[i,j])]).T\n"
 },
 {
  "idx": "staqc-test-519",
  "doc": "Download a file and push into MySQL without timing out in Python",
  "code": "# Prepare queue and end signaling handler\nq = queue.Queue()\ndone = threading.Event()\n\n# Function that fetches items from q and puts them into db after\n# certain amount is reached\ndef store_db():\n    items=[]\n\n    # Until we set done\n    while not done.is_set():\n        try:\n            # We may have 500 records and thread be done... prevent deadlock\n            items.append(q.get(timeout=5))\n            if len(items) > 1000:\n                insert_into(items)\n                items = []\n            q.task_done()\n         # If you wait longer then 5 seconds < exception\n         except queue.Empty: pass\n\n    if items:\n        insert_into(items)\n\n# Fetch all data in a loop\ndef continous_reading():\n    # Fetch row\n    q.put(row)\n\n# Start storer thread\nt = threading.Thread(target=store_db)\nt.daemon = True\nt.start()\n\ncontinous_reading()\nq.join() # Wait for all task to be processed\ndone.set() # Signal store_db that it can terminate\nt.join() # to make sure the items buffer is stored into the db\n"
 },
 {
  "idx": "staqc-test-520",
  "doc": "Sorting data from a csv alphabetically, highest to lowest and average",
  "code": "ave_scores = {}\nfor name in sorted(entries):\n    ave_score = total_scores[name] / entries[name]\n    ave_scores[name] = ave_score\n\nfor name,ave_score in sorted(ave_scores.items(), key = itemgetter(1), reversed=True):\n    print(name,ave_score)\n"
 },
 {
  "idx": "staqc-test-521",
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "class Computations(object):\n    def __init__(self, name):\n        self.name = name   # default value for area, circumference, distance to origin\n\n    def __get__(self, instance, cls):\n        if instance is None:\n            print('this is the __get__ if statement running')\n            return self\n        else:\n            print('this is the __get__ else statement running')\n            return instance.__dict__[self.name]\n\n    def __set__(self, instance, value):\n        if hasattr(instance, self.name + '_is_set'):\n            raise ValueError('Cannot set {} again.'.format(self.name[1:]))\n        if isinstance(value, int):\n            raise RuntimeError('Cant set formulas')\n        else:\n            instance.__dict__[self.name] = value\n            setattr(instance, self.name + '_is_set', True)\n"
 },
 {
  "idx": "staqc-test-522",
  "doc": "How to display proper output when using re.findall() in python?",
  "code": ">>> for item in price:\n...     print(item.decode()) # assume utf-8\n... \n1,217.04\n"
 },
 {
  "idx": "staqc-test-523",
  "doc": "Order a NXM Numpy Array according to cumulative sums of each sub-array",
  "code": ">>> a = np.array(v)\n>>> a.sum(axis=1)\narray([10, 14, 39, 59, 17])\n>>> a.sum(axis=1).argsort()\narray([0, 1, 4, 2, 3])\n>>> a[a.sum(axis=1).argsort()[::-1]]\narray([[ 4, 33, 21,  1],\n       [11, 21,  3,  4],\n       [ 2,  4,  6,  5],\n       [ 2,  3,  4,  5],\n       [ 1,  2,  3,  4]])\n"
 },
 {
  "idx": "staqc-test-524",
  "doc": "How do I install pip in python 2.7?",
  "code": "https://pypi.python.org/pypi/setuptools#windows\n"
 },
 {
  "idx": "staqc-test-525",
  "doc": "How do I install pip in python 2.7?",
  "code": "easy_install pip\n"
 },
 {
  "idx": "staqc-test-526",
  "doc": "How to define multi-company-aware models in OpenERP",
  "code": "<field name=\"company_id\" groups=\"base.group_multi_company\"/>\n"
 },
 {
  "idx": "staqc-test-527",
  "doc": "sqlalchemy - elegant way to deal with several optional filters?",
  "code": "def get_query_results(*filters):\n    res = models.Item.query\n    for i, filt in enumerate(filters, 1):\n        if filt is not None:\n            d = {'filter{}'.format(i): filt}\n            res = res.filter(**d)\n    return res.all()\n"
 },
 {
  "idx": "staqc-test-528",
  "doc": "Stop a command line command in script",
  "code": "import subprocess \nproc = subprocess.Popen(['foo', 'bar', 'bar'], stdout=subprocess.PIPE, shell=True)\n"
 },
 {
  "idx": "staqc-test-529",
  "doc": "How to determine tools chosen by waf?",
  "code": "D:\\temp>waf.bat configure build --check-c-compiler=gcc --check-cxx-compiler=g++\nSetting top to                           : D:\\temp\nSetting out to                           : D:\\temp\\build\nChecking for 'gcc' (c compiler)          : c:\\tools\\gcc\\bin\\gcc.exe\nChecking for 'g++' (c++ compiler)        : c:\\tools\\gcc\\bin\\g++.exe\n'configure' finished successfully (0.191s)\nWaf: Entering directory `D:\\temp\\build'\nCompiler is CC_NAME  gcc  CC  ['c:\\\\tools\\\\gcc\\\\bin\\\\gcc.exe']\nCompiler is CXX_NAME gcc  CXX ['c:\\\\tools\\\\gcc\\\\bin\\\\g++.exe']\nWaf: Leaving directory `D:\\temp\\build'\n'build' finished successfully (0.008s)\n"
 },
 {
  "idx": "staqc-test-530",
  "doc": "How to input a line word by word in Python?",
  "code": "with open('filename', 'r') as f:\n    for line in f:\n        # Here is where you do what I said above\n"
 },
 {
  "idx": "staqc-test-531",
  "doc": "Python Decorator 3.0 and arguments to the decorator",
  "code": "from decorator import decorator\ndef substitute_args(arg_sub_dict):\n  @decorator\n  def wrapper(fun, arg):\n    new_arg = arg_sub_dict.get(arg, arg)\n    return fun(new_arg)\n  return wrapper\n"
 },
 {
  "idx": "staqc-test-532",
  "doc": "Clean way to manage parse-dictionaries that contain function names",
  "code": "import json\nd = json.load(open('very_small_dic.txt', 'r'))\nprint(d) # {'somestring': 'myfunction'}\n"
 },
 {
  "idx": "staqc-test-533",
  "doc": "Iterator that supports pushback",
  "code": "class PushbackWrapper(object):\n\n    def __init__(self, iterator):\n        self.__dict__['_iterator'] = iterator\n        self.__dict__['_pushed'] = []\n\n    def next(self):\n        if len(self._pushed):\n            return self._pushed.pop()\n        else:\n            return self._iterator.next()\n\n    def pushback(self, item):\n        self._pushed.append(item)\n\n    def __getattr__(self, attr):\n        return getattr(self._iterator, attr)\n\n    def __setattr__(self, attr, value):\n        return setattr(self._iterator, attr, value)\n"
 },
 {
  "idx": "staqc-test-534",
  "doc": "Iteration Through tuple of dictionaries in Python",
  "code": "Dict = {'1': 'one', '2': 'three'}\n\nTuple = ({'1': 'one', '5': 'five'}, {'4': 'four', '2': 'two'})\nfor d in Tuple:\n    if \"2\" in d:\n        Dict[\"2\"] = d[\"2\"]\n        break # get first match\n"
 },
 {
  "idx": "staqc-test-535",
  "doc": "Loop URL to scrape using beautiful soup python",
  "code": "import requests\nfor i in xrange(2500,7000):\n    page = requests.get(\"http://bvet.bytix.com/plus/trainer/default.aspx?id={}\".format(i))\n    if not page.ok:\n        continue\n    soup = BeautifulSoup(requests.text)\n    for eachuniversity in soup.findAll('fieldset',{'id':'ctl00_step2'}):\n        print re.sub(r'\\s+',' ',','.join(eachuniversity.findAll(text=True)).encode('utf-8'))\n        print '\\n'\n        number = number + 1\n"
 },
 {
  "idx": "staqc-test-536",
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": ">>> from itertools import product\n>>> L = [\"A\", \"B\", \"C\"]\n>>> def f(c): return c.lower()\n... \n>>> fL = [f(x) for x in L]\n>>> for i in product(*zip(L, fL)):\n...     print i\n... \n('A', 'B', 'C')\n('A', 'B', 'c')\n('A', 'b', 'C')\n('A', 'b', 'c')\n('a', 'B', 'C')\n('a', 'B', 'c')\n('a', 'b', 'C')\n('a', 'b', 'c')\n"
 },
 {
  "idx": "staqc-test-537",
  "doc": "Python line read size in bytes",
  "code": ">>> len('asdf')\n4\n>>> import sys\n>>> sys.getsizeof('asdf')\n37\n"
 },
 {
  "idx": "staqc-test-538",
  "doc": "What is a Pythonic way to count dictionary values in list of dictionaries",
  "code": "class DictCounter(object):\n    def __init__(self, list_of_ds):\n        for k,v in list_of_ds[0].items():\n            self.__dict__[k] = collections.Counter([d[k] for d in list_of_ds])\n\n>>> new_things = [{'test': 1, 'count': 1} for i in range(10)]\n>>> for i in new_things[0:5]: i['count']=2\n\n>>> d = DictCounter(new_things)\n>>> d.count\nCounter({1: 5, 2: 5})\n>>> d.test\nCounter({1: 10})\n"
 },
 {
  "idx": "staqc-test-539",
  "doc": "wait() on a group of Popen objects",
  "code": "Output:\n    2340    ['/bin/sleep', '2']\n    2341    ['/bin/sleep', '2']\n    2342    ['/bin/sleep', '3']\nMon Jun  2 18:01:42 2014 scan\nMon Jun  2 18:01:43 2014 scan\nMon Jun  2 18:01:44 2014 scan\nUhoh! Restarting 2 procs\n    2343    ['/bin/sleep', '3']\n    2344    ['/bin/sleep', '2']\nMon Jun  2 18:01:45 2014 scan\nUhoh! Restarting 1 procs\n    2345    ['/bin/sleep', '2']\nMon Jun  2 18:01:46 2014 scan\nUhoh! Restarting 1 procs\n    2346    ['/bin/sleep', '2']\nMon Jun  2 18:01:47 2014 scan\nUhoh! Restarting 2 procs\n    2347    ['/bin/sleep', '3']\n    2349    ['/bin/sleep', '2']\n"
 },
 {
  "idx": "staqc-test-540",
  "doc": "Find occurrence using multiple attributes in ElementTree/Python",
  "code": "x = ElmentTree(file='testdata.xml')\ncases = x.findall(\".//testcase[@name='VHDL_BUILD_Passthrough'][@classname='TestOne']\"\n"
 },
 {
  "idx": "staqc-test-541",
  "doc": "Decimal formatting based on number of digits in integer and decimal parts",
  "code": "In [81]: inputs = [11111.1, 111.11, 11.111, 1.1111, 0.00111, 0.000011]\n\nIn [82]: for inp in inputs:\n    ...:     print('Input = {} -- output = {}'.format(inp, format_float(inp, 4)))\nInput = 11111.1 -- output = 11111\nInput = 111.11 -- output = 111.1\nInput = 11.111 -- output = 11.11\nInput = 1.1111 -- output = 1.111\nInput = 0.00111 -- output = 0.0011\nInput = 1.1e-05 -- output = 0.00001\n"
 },
 {
  "idx": "staqc-test-542",
  "doc": "How can i search a array from a large array by numpy",
  "code": "A[np.in1d(A,B).reshape(A.shape).sum(1) == len(B)]\n"
 },
 {
  "idx": "staqc-test-543",
  "doc": "Removing an element from a list and a corresponding value",
  "code": "from random import randint\n\nmyList = ['a', 'b', 'c']\nmyOtherList = [1, 2, 3]\n\nindex = randint(0, len(myList)-1)\n\ndel myList[index]\ndel myOtherList[index]\n"
 },
 {
  "idx": "staqc-test-544",
  "doc": "Print timestamp for logging in Python",
  "code": "import logging\n\ndef setup_custom_logger(name):\n    formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s',\n                                  datefmt='%Y-%m-%d %H:%M:%S')\n    handler = logging.FileHandler('log.txt', mode='w')\n    handler.setFormatter(formatter)\n    screen_handler = logging.StreamHandler(stream=sys.stdout)\n    screen_handler.setFormatter(formatter)\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n    logger.addHandler(screen_handler)\n    return logger\n\n>>> logger = setup_custom_logger('myapp')\n>>> logger.info('This is a message!')\n2015-02-04 15:07:12 INFO     This is a message!\n>>> logger.error('Here is another')\n2015-02-04 15:07:30 ERROR    Here is another\n"
 },
 {
  "idx": "staqc-test-545",
  "doc": "How to thread multiple subprocess instances in Python 2.7?",
  "code": "from subprocess import Popen, PIPE\n\nfirst = Popen([\"firstCommand\", \"-\"], stdin=PIPE, stdout=PIPE, bufsize=1)\nsecond = Popen([\"secondCommand\", \"-\"], stdin=PIPE, stdout=PIPE, bufsize=1)\nbind(first.stdout, second.stdin, somePythonRoutine)\nwith open(\"finalOutput\", \"wb\") as file:\n    third = Popen([\"thirdCommand\", \"-\"], stdin=PIPE, stdout=file, bufsize=1)\nbind(second.stdout, third.stdin, anotherPythonRoutine)\n\n# provide input for the pipeline\nfirst.stdin.write(b\"foo\")\nfirst.stdin.close()\n\n# wait for it to complete\npipestatus = [p.wait() for p in [first, second, third]]\n"
 },
 {
  "idx": "staqc-test-546",
  "doc": "Python: Read whitespace separated strings from file similar to readline",
  "code": "with open('somefilename') as f:\n    tokenized = read_by_tokens(f)\n\n    # read first two tokens separately\n    first_token = next(tokenized)\n    second_token = next(tokenized)\n\n    for token in tokenized:\n        # loops over all tokens *except the first two*\n        print(token)\n"
 },
 {
  "idx": "staqc-test-547",
  "doc": "Identifying price swings/trends in pandas dataframe with stock quotes",
  "code": "date                  close  high    low     open    volume    swings                                            \n2014-05-09 13:30:00  187.56  187.73  187.54  187.70  1922600     NaN\n2014-05-09 13:31:00  187.49  187.56  187.42  187.55   534400     NaN\n2014-05-09 13:32:00  187.42  187.51  187.35  187.49   224800   -0.35\n2014-05-09 13:33:00  187.55  187.58  187.39  187.40   303700     NaN\n2014-05-09 13:34:00  187.67  187.67  187.53  187.56   438200     NaN\n2014-05-09 13:35:00  187.60  187.71  187.56  187.68   296400    0.36\n2014-05-09 13:36:00  187.41  187.67  187.38  187.60   329900     NaN\n2014-05-09 13:37:00  187.31  187.44  187.28  187.40   404000     NaN\n2014-05-09 13:38:00  187.26  187.37  187.26  187.30   912800     NaN\n2014-05-09 13:39:00  187.22  187.28  187.12  187.25   607700   -0.59\n"
 },
 {
  "idx": "staqc-test-548",
  "doc": "Pythonic way of looping over variable that is either an element or a list",
  "code": "if is_iterable(test):\n    return [do_stuff(x) for x in test]\nelse:\n    return [do_stuff(test)]\n"
 },
 {
  "idx": "staqc-test-549",
  "doc": "Most efficient way to index words in a document?",
  "code": "SELECT `id` FROM `words` WHERE `word` IN ('word1', 'word2', 'word3');\n"
 },
 {
  "idx": "staqc-test-550",
  "doc": "How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached",
  "code": "numbers = itertools.count(1) # all positive integers\nsquares = (x**2 for x in numbers) # all squares of positive integers\ntotals = itertools.accumulate(squares) # all running totals of squares of ...\nbigtotals = itertools.dropwhile(lambda total: total < n, totals) # all ... starting >= n\ntotal = next(bigtotals) # first ... starting >= n\n"
 },
 {
  "idx": "staqc-test-551",
  "doc": "How to use argparse during runtime to conditionally get further input?",
  "code": "auth_parse.parse_args(\"John Smith\")\n"
 },
 {
  "idx": "staqc-test-552",
  "doc": "Python: multidimensional array masking",
  "code": ">>> b_row, b_col = np.vstack([np.unravel_index(b, A.shape) for b in B]).T\n>>> A[b_row, b_col] = 0\n>>> A\narray([[1, 0, 1, 0, 1],\n       [1, 1, 0, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 0, 1]])\n"
 },
 {
  "idx": "staqc-test-553",
  "doc": "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list",
  "code": ">>> mit_courses = set(Course.query.join(\n... University).filter(University.name == 'MIT'))\n>>> [p.name for p in Professor.query if set(\n... p.courses_assisted).intersection(mit_courses)]\n"
 },
 {
  "idx": "staqc-test-554",
  "doc": "accumulating an orderedDict",
  "code": ">>> from collections import OrderedDict\n>>> month_dictionary = OrderedDict((('012013', 3), ('022013', 1), ('032013', 5)))\n>>> total = 0\n>>> for key, value in month_dictionary.iteritems():\n...     total += value\n...     month_dictionary[key] = total\n... \n>>> month_dictionary\nOrderedDict([('012013', 3), ('022013', 4), ('032013', 9)])\n"
 },
 {
  "idx": "staqc-test-555",
  "doc": "Parse XML file into Python object",
  "code": "-------------------\n           Name: some filename.mp3             \n        Encoder: Gogo (after 3.0)              \n        Bitrate: 131                           \n-------------------\n           Name: another filename.mp3          \n        Encoder: iTunes                        \n        Bitrate: 128                           \n\nan alternate way:\n           Name: another filename.mp3  \n"
 },
 {
  "idx": "staqc-test-556",
  "doc": "Matplotlib in Pyside with Qt designer (PySide)",
  "code": "from PySide import QtCore, QtGui\n\nclass Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(533, 497)\n        self.mplvl = QtGui.QWidget(Form)\n        self.mplvl.setGeometry(QtCore.QRect(150, 150, 251, 231))\n        self.mplvl.setObjectName(\"mplvl\")\n        self.vLayout = QtGui.QVBoxLayout()\n        self.mplvl.setLayout(self.vLayout)\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        Form.setWindowTitle(QtGui.QApplication.translate(\"Form\", \"Form\", None, QtGui.QApplication.UnicodeUTF8))\n"
 },
 {
  "idx": "staqc-test-557",
  "doc": "PyImport_ImportModule, possible to load module from memory?",
  "code": "#include <stdio.h>\n#include <Python.h>\nint main(int argc, char *argv[])\n{\n    Py_Initialize();\n    PyRun_SimpleString(\"print('hello from python')\");\n\n    // fake module\n    char *source = \"__version__ = '2.0'\";\n    char *filename = \"test_module.py\";\n\n    // perform module load\n    PyObject *builtins = PyEval_GetBuiltins();\n    PyObject *compile = PyDict_GetItemString(builtins, \"compile\");\n    PyObject *code = PyObject_CallFunction(compile, \"sss\", source, filename, \"exec\");\n    PyObject *module = PyImport_ExecCodeModule(\"test_module\", code);\n\n    PyRun_SimpleString(\"import test_module; print(test_module.__version__)\");\n\n    Py_Finalize();\n    return 0;\n}\n"
 },
 {
  "idx": "staqc-test-558",
  "doc": "Extract data / parse from HTML in PHP / Python",
  "code": "[u'30.36', u'17.17', u'15.22', u'9.82', u'9.82']\n"
 },
 {
  "idx": "staqc-test-559",
  "doc": "Sort list with multiple criteria in python",
  "code": "['0.0.0.0.py', '1.0.0.0.py', '1.1.0.0.py']\n"
 },
 {
  "idx": "staqc-test-560",
  "doc": "Using TCL extensions to set native window style in Tkinter",
  "code": "import string, win32ui, win32con\nfrom Tkinter import *\n\ndef decaption(event):\n    w = event.widget\n    frame = win32ui.CreateWindowFromHandle(string.atoi(w.wm_frame(), 0))\n    frame.ModifyStyle(win32con.WS_CAPTION, 0, win32con.SWP_FRAMECHANGED)\n    w.bind(\"<Map>\", None)\n\nroot = Tk()\nroot.bind(\"<Map>\", decaption)\nroot.mainloop()\n"
 },
 {
  "idx": "staqc-test-561",
  "doc": "How to figure out if a word in spelled in alphabetical order in Python",
  "code": "def isAlphabetical(word):\n    for i in xrange(len(word) - 1):\n        if word[i] > word[i+1]:\n            return False\n    return True\n"
 },
 {
  "idx": "staqc-test-562",
  "doc": "Exclude weekends in python django query set",
  "code": "def get_prep_lookup(self, lookup_type, value):\n    # For \"__month\", \"__day\", and \"__week_day\" lookups, convert the value\n    # to an int so the database backend always sees a consistent type.\n    if lookup_type in ('month', 'day', 'week_day'):\n        return int(value)\n"
 },
 {
  "idx": "staqc-test-563",
  "doc": "How to find number of users, number of users with a profile object, and monthly logins in Django",
  "code": "Profile.objects.all().count()\n"
 },
 {
  "idx": "staqc-test-564",
  "doc": "How to find number of users, number of users with a profile object, and monthly logins in Django",
  "code": "import django.contrib.auth\ndjango.contrib.auth.models.User.objects.all().count()\n"
 },
 {
  "idx": "staqc-test-565",
  "doc": "Two windows: First Login after that main program",
  "code": "class loginWindow(Toplevel):\n    def __init__(self, title, parent):\n        Toplevel.__init__(self, parent)\n        ...\n\n    def login(self):\n       if access:\n            # Close Toplevel window and lunch root window\n            self.destroy()\n            main()\n\n\n\nclass main(Toplevel):\n    def __init__(self, *args, **kwargs):\n        Toplevel.__init__(self, *args, **kwargs)\n        ...\n\n\n\nroot = Tk()\nroot.withdraw()\n\nloginWindow('title', root)\n\nroot.mainloop()  \n"
 },
 {
  "idx": "staqc-test-566",
  "doc": "get function names from a list python",
  "code": "for alarm in alarms:\n    for attr in whitelist:\n        print getattr(alarm, attr)\n"
 },
 {
  "idx": "staqc-test-567",
  "doc": "python BeautifulSoup how get values between tags?",
  "code": ">>> from bs4 import BeautifulSoup\n>>> from itertools import takewhile\n>>> soup = BeautifulSoup('''\\\n... <div class=\"layout4-background\">\n...     <h6 class=\"game\">Game1. How to get all listings below and assign to class\"game\"?</h6>\n...     <ul>\n...         <li class=\"listing\">\n...     </ul>\n...     <ul>\n...         <li class=\"listing\">\n...     </ul>\n...     <ul>\n...         <li class=\"listing\">\n...     </ul>\n...     <h6 class=\"game\">Game2. How to get all listings below and assign to class\"game?</h6>\n...     <ul>\n...         <li class=\"listing\">\n...     </ul>\n...     <h6 class=\"game\">Game3. How to get all listings below and assign to class\"game?</h6>\n...     <ul>\n...         <li class=\"listing\">\n...     </ul>\n... </div>\n... ''')\n>>> div = soup.find('div', class_='layout4-background')\n>>> for header in div.find_all('h6'):\n...     print header.get_text()\n...     listings = takewhile(lambda t: t.name == 'ul',\n...                          header.find_next_siblings(text=False))\n...     print 'Listings found:', len(list(listings))\n... \nGame1. How to get all listings below and assign to class\"game\"?\nListings found: 3\nGame2. How to get all listings below and assign to class\"game?\nListings found: 1\nGame3. How to get all listings below and assign to class\"game?\nListings found: 1\n"
 },
 {
  "idx": "staqc-test-568",
  "doc": "Waf: How to output a generated file?",
  "code": "lib_typelib = bld.new_task_gen(\n  name = 'versionfile',\n  source = 'versionfile.ver',\n  target = 'versionfile.out',\n  rule='/path/to/your/python/script ${SRC} -o ${TGT}')\n"
 },
 {
  "idx": "staqc-test-569",
  "doc": "In IPython how do I create aliases for %magics?",
  "code": "In [5]: %edit -x\nIn [6]: macro xed 5\nIn [7]: store xed\nIn [8]: xed\n"
 },
 {
  "idx": "staqc-test-570",
  "doc": "Fast and pythonic way to find out if a string is a palindrome",
  "code": "def palindrome(s, o):\n    return re.sub(\"[ ,.;:?!]\", \"\", s.lower()) == re.sub(\"[ ,.;:?!]\", \"\", o.lower())[::-1]\n"
 },
 {
  "idx": "staqc-test-571",
  "doc": "Fast and pythonic way to find out if a string is a palindrome",
  "code": "            palindrom       iteratorPalindrome      pythonicPalindrome      palindrome  \n1           0.131656638            0.108762937             0.071676536      0.072031984\n2           0.140950052            0.109713793             0.073781851      0.071860462\n3           0.126966087            0.109586756             0.072349792      0.073776719\n4           0.125113136            0.108729573             0.094633969      0.071474645\n5           0.130878159            0.108602964             0.075770395      0.072455015\n6           0.133569472            0.110276694             0.072811747      0.071764222\n7           0.128642812            0.111065438             0.072170571      0.072285204\n8           0.124896702            0.110218949             0.071898959      0.071841214\n9           0.123841905            0.109278358             0.077430437      0.071747112\n10          0.124083576            0.108184210             0.080211147      0.077391086\n\nAVG         0.129059854            0.109441967             0.076273540      0.072662766\nSTDDEV      0.005387429            0.000901370             0.007030835      0.001781309\n"
 },
 {
  "idx": "staqc-test-572",
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "cimport cpython.ref as cpy_ref\n\ncdef extern from \"src/ITestClass.h\" namespace \"elps\" :\n    cdef cppclass ITestClass:\n        ITestClass(cpy_ref.PyObject *obj)\n        int getA()\n        int override_me()\n        int calculate(int a)\n\ncdef class PyTestClass:\n    cdef ITestClass* thisptr\n\n    def __cinit__(self):\n       ##print \"in TestClass: allocating thisptr\"\n       self.thisptr = new ITestClass(<cpy_ref.PyObject*>self)\n    def __dealloc__(self):\n       if self.thisptr:\n           ##print \"in TestClass: deallocating thisptr\"\n           del self.thisptr\n\n    def getA(self):\n       return self.thisptr.getA()\n\n#    def override_me(self):\n#        return self.thisptr.override_me()\n\n    cpdef int calculate(self, int a):\n        return self.thisptr.calculate(a) ;\n\n\ncdef public api int cy_call_func(object self, char* method, int *error):\n    try:\n        func = getattr(self, method);\n    except AttributeError:\n        error[0] = 1\n    else:\n        error[0] = 0\n        return func()\n"
 },
 {
  "idx": "staqc-test-573",
  "doc": "Analyze and edit links in html code with BeautifulSoup",
  "code": "\n# -*- coding: utf-8 -*-\nfrom bs4 import BeautifulSoup\n\nbody = \"\"\"\n<a href=\"http://good.com\" target=\"_blank\">good link</a>\n<ul>\n                    <li class=\"FOLLOW\">\n                        <a href=\"http://bad.com\" target=\"_blank\">\n                            <em></em>\n                            <span>\n                                <strong class=\"FOLLOW-text\">Follow On</strong>\n                                <strong class=\"FOLLOW-logo\"></strong>\n                            </span>\n                        </a>\n                    </li>\n</ul>\n\n\"\"\"\n\nsoup = BeautifulSoup(body, 'html.parser')\n\nlinks = soup.find_all('a')\nfor link in links:\n    link = link.replace_with('<can_be_link>')\n\nprint soup.prettify(formatter=None)\n"
 },
 {
  "idx": "staqc-test-574",
  "doc": "'Remove' command for ND arrays in Python",
  "code": "a = np.ascontiguousarray(A).view(np.dtype((np.void, A.shape[1]*min(A.strides))))\nb = np.ascontiguousarray(B).view(np.dtype((np.void, B.shape[1]*min(B.strides))))\n\ncheck = np.in1d(a, b)\nC = np.where(check)[0]\nD = A[check]\n\ncheck = np.in1d(b, a)\nE = np.where(check)[0]\n"
 },
 {
  "idx": "staqc-test-575",
  "doc": "Is there a way to create a subplot that contains plots created inside functions?",
  "code": "def random(x, show):\n    variable_x = x\n    result = f(x)\n    show(result)\n\ndef show(result):\n    plt.plot(result, x)\n    plt.show()\n\nresult = random(x, show)\n"
 },
 {
  "idx": "staqc-test-576",
  "doc": "Python replace year mentions like '85 with 1985",
  "code": ">>> re.sub(r\"'(\\d\\d)\", r\"19\\1\", \"Today '45\")\n'Today 1945'\n"
 },
 {
  "idx": "staqc-test-577",
  "doc": "Python sorting array according to date",
  "code": "import re\n\nl = ['',\n     'q//Attachments/Swoop_coverletter_311386_20120103.doc',\n     'q//Attachments/Swoop_RESUME_311386_20091012.doc',\n     'q//Attachments/Swoop_Resume_311386_20100901.doc',\n     'q//Attachments/Swoop_reSume_311386_20120103.doc',\n     'q//Attachments/Swoop_coverletter_311386_20100901.doc',\n     'q//Attachments/Swoop_coverletter_311386_20091012.doc']\n\ndef get_date(line):\n    pattern = '.*_(\\d{8}).doc'\n    m = re.match(pattern, line)\n    if m:\n        return int(m.group(1))\n    else:\n        return -1 # or do something else with lines that contain no date\n\n\nprint sorted(l, key=get_date, reverse=True)\n"
 },
 {
  "idx": "staqc-test-578",
  "doc": "Python reverse integer using recursion",
  "code": "def rev(num):\n    def rec(num, tens):\n        if num < 10:\n            return num        \n        else:\n            return num % 10 * tens + rec(num // 10, tens // 10)\n    return rec(num, 10 ** int(log10(num)))\n"
 },
 {
  "idx": "staqc-test-579",
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "<form method=\"post\"> {% csrf_token %} \n    <div class=\"panel panel-default\"> \n        <div class=\"panel-heading\"> \n            <h3 class=\"panel-title\"> Teacher Information </h3> \n            </div> \n        <div class=\"panel-body\"> \n            {{ user_form }} \n            {{ form }} \n            <button class=\"btn btn-primary\" type=\"submit\">Save</button>\n        </div>\n    </div>\n</form>\n"
 },
 {
  "idx": "staqc-test-580",
  "doc": "Try/Except Every Method in Class?",
  "code": "def Http500Resistant(func):\n    num_retries = 5\n    @functools.wraps(func)\n    def wrapper(*a, **kw):\n        sleep_interval = 2\n        for i in range(num_retries):\n            try:\n                return func(*a, **kw)\n            except apiclient.errors.HttpError, e:\n                if e.resp.status == 500 and i < num_retries-1:\n                    sleep(sleep_interval)\n                    sleep_interval = min(2*sleep_interval, 60)\n                else:\n                    raise e    \n    return wrapper\n\nclass A(object):\n\n    @Http500Resistant\n    def f1(self): ...\n\n    @Http500Resistant\n    def f2(self): ...\n"
 },
 {
  "idx": "staqc-test-581",
  "doc": "Python Pandas removing substring using another column",
  "code": "In [13]: import numpy as np\n         import pandas as pd\n         n = 1000\n         testing  = pd.DataFrame({'NAME':[\n         'FIRST', np.nan, 'NAME2', 'NAME3', \n         'NAME4', 'NAME5', 'NAME6']*n, 'FULL_NAME':['FIRST LAST', np.nan, 'FIRST  LAST', 'FIRST NAME3', 'FIRST NAME4 LAST', 'ANOTHER NAME', 'LAST NAME']*n})\n"
 },
 {
  "idx": "staqc-test-582",
  "doc": "Visual module in python assign objects",
  "code": ">>> s.x = -100\n"
 },
 {
  "idx": "staqc-test-583",
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "def logsumexp_csr_row(x):\n    data = x.data\n    mx = max(np.max(data), 0)\n    tmp = data - mx\n    r = np.exp(tmp, out=tmp).sum()\n    k = X.shape[1] - len(data)\n    return mx + np.log(r + k * np.exp(-mx))\n"
 },
 {
  "idx": "staqc-test-584",
  "doc": "Python full-screen graphics",
  "code": "Tk.attributes(\"-fullscreen\", True)\n"
 },
 {
  "idx": "staqc-test-585",
  "doc": "Plot multiple y-axis AND colorbar in matplotlib",
  "code": "fig.colorbar()\n"
 },
 {
  "idx": "staqc-test-586",
  "doc": "Parsing an equation with custom functions in python",
  "code": "((-(a+b)+(((sin((+x+y))+(z**2))*4)/365.12))-h)\n"
 },
 {
  "idx": "staqc-test-587",
  "doc": "New Python Gmail API - Only Retrieve Messages from Yesterday",
  "code": "message = service.users().messages().list(userId='me').execute()\n"
 },
 {
  "idx": "staqc-test-588",
  "doc": "Track changes of atributes in instance. Python",
  "code": "class MagicWrapper(object):\n    def __init__(self, wrapped):\n        self._wrapped = wrapped\n\n    def __getattr__(self, attr):\n        return getattr(self._wrapped, attr)\n\n    def __setattr__(self, attr, val):\n        if attr == '_wrapped':\n            super(MagicWrapper, self).__setattr__('_wrapped', val)\n        else:\n            setattr(self._wrapped, 'old_' + attr, getattr(self._wrapped, attr))\n            setattr(self._wrapped, attr, val)\n\n\nclass MyObject(object):\n    def __init__(self):\n        self.attr_one = None\n        self.attr_two = 1\n\nobj = MyObject()\nobj = MagicWrapper(obj)\nobj.attr_one = 'new value'\nobj.attr_two = 2\n\nprint obj.old_attr_one\nprint obj.attr_one\nprint obj.old_attr_two\nprint obj.attr_two\n"
 },
 {
  "idx": "staqc-test-589",
  "doc": "Matplotlib artists to stay the same size when zoomed in?",
  "code": "from matplotlib import pyplot as plt\nfrom matplotlib.patches import Polygon\nimport numpy as np\nx = np.linspace(0,5,100)\ny = np.sin(x)\n\nplt.plot(x,y)\nax = plt.gca()\n\npolygon = Polygon([[.1,.1],[.3,.2],[.2,.3]], True, transform=ax.transAxes)\nax.add_patch(polygon)\n\nplt.show()\n"
 },
 {
  "idx": "staqc-test-590",
  "doc": "Cron Job File Creation - Created File Permissions",
  "code": "import os\nos.umask(002)\n"
 },
 {
  "idx": "staqc-test-591",
  "doc": "vectorized implementation for pseudo pivot table in python",
  "code": "Component  1-year concierge assistance  ABS breaks  Air conditioner  \\\nVehicle                                                               \nChrysler                             0           1                0   \nFord                                 0           0                1   \nToyota                               1           1                0   \n\nComponent  air conditioner  airbag  engine with 150 H/P  engine with 250 H/P  \nVehicle                                                                       \nChrysler                 1       1                    0                    1  \nFord                     0       1                    1                    0  \nToyota                   0       1                    0                    0  \n"
 },
 {
  "idx": "staqc-test-592",
  "doc": "Search multiple strings in multiple files",
  "code": "grep -rlf messages.txt dir\n"
 },
 {
  "idx": "staqc-test-593",
  "doc": "Method to find substring",
  "code": "In [1]: m = 'college'\n\nIn [2]: s = 'col'\n\nIn [3]: if any(m[i:i+len(s)] == s for i in range(len(m)-len(s)+1)):\n   ...:     print 'Present'\n   ...: else:\n   ...:     print 'Not present'\n   ...:     \nPresent\n"
 },
 {
  "idx": "staqc-test-594",
  "doc": "Change object's variable from different file",
  "code": "import enemies\n\nclass Encounter:\n    def __init__(self):\n        self.counter = 1\n        self.number = 0\n        self.who = \"We've encountered no one.\"\n\n    def forward(self):\n        if self.counter == 1:\n            enemies.knightofni(self)\n        elif self.counter == 2:\n            enemies.frenchman(self)\n        else:\n            self.number = 42\n            self.who = \"We've found the Grail!\"\n        self.counter += 1\n\nknight = Encounter()\nfor i in range(4):\n    print(str(knight.number) + \" \" + knight.who)\n    knight.forward()\n"
 },
 {
  "idx": "staqc-test-595",
  "doc": "How to write small DSL parser with operator module in python",
  "code": ">>> r1.test( 89,  92,  18,  7,   90,  35, 60 )\nFalse\n"
 },
 {
  "idx": "staqc-test-596",
  "doc": "How to remove a column from a structured numpy array *without copying it*?",
  "code": "In [300]: b[0]['x'] = 3.14\n"
 },
 {
  "idx": "staqc-test-597",
  "doc": "Obtain x'th largest item in a dictionary",
  "code": "import heapq\ny = {'a':55, 'b':33, 'c':67, 'd':12}\nprint heapq.nlargest(n=3, iterable=y, key=y.get)[-1]\n# b\n"
 },
 {
  "idx": "staqc-test-598",
  "doc": "Extracting data from file with differing amounts of columns",
  "code": "awk  -F $'\\t' {print $(NF-1)}' file_name\n"
 },
 {
  "idx": "staqc-test-599",
  "doc": "Python convert single column of data into multiple columns",
  "code": "from io import StringIO\nfrom collections import OrderedDict\n\ndatastring = StringIO(u\"\"\"\\\n# row = 0\n9501.7734375\n9279.390625\n8615.1640625\n# row = 1\n4396.1953125\n4197.1796875\n3994.4296875\n# row = 2\n9088.046875\n8680.6953125\n8253.0546875\n\"\"\")      \n\ncontent = datastring.readlines()\nout = OrderedDict()\nfinal = []\n\nfor line in content:\n    if line.startswith('# row'):\n        header = line.strip('\\n#')\n        out[header] = []\n    elif line not in out[header]:\n        out[header].append(line.strip('\\n'))\n\n\nfor k, v in out.iteritems():\n    temp = (k + ',' + ','.join([str(item) for item in v])).split(',')\n    final.append(temp)\n\nfinal = zip(*final)\nwith open(\"C:/temp/output.csv\", 'w') as fout:\n    for item in final:\n    fout.write('\\t'.join([str(i) for i in item]))\n"
 },
 {
  "idx": "staqc-test-600",
  "doc": "Using Eval in Python to create class variables",
  "code": "setattr(self, 'wavelength', wavelength_val)\n"
 },
 {
  "idx": "staqc-test-601",
  "doc": "How to find first byte of a serial stream with python?",
  "code": "ser.write(bytes([0x05, 0x69, 0x02, 0x0A, 0x86]))\n"
 },
 {
  "idx": "staqc-test-602",
  "doc": "How to find first byte of a serial stream with python?",
  "code": "found = False\nbuffer = '' # what is left from the previous run...\nwhile not found:\n    rd = ser.read(50)\n    buffer += rd\n    sp = buffer.split(chr(107), 1)\n    if len(sp) == 2:\n        pkt = chr(107) + sp[1] # candidate for a valid packet\n        if pkt[1] == chr(105): # \n            while len(pkt) < 107: # TODO add a timeout condition here...\n                rd = ser.read(107 - len(pkt))\n                pkt += rd\n            found = True\n        else:\n            buffer = pkt[1:] # process this further...\n    else: # no 107 found; empty the buffer.\n        buffer = ''\n# Now we have a pkt of 107 bytes and can do whatever we want with it.\n"
 },
 {
  "idx": "staqc-test-603",
  "doc": "setup relationship one-to-one in Flask + SQLAlchemy",
  "code": "p = (db.session.query(Person)\n     .options(db.eagerload(Person.region))\n     .get(1)\n     )\n\nprint(p)\n# below will not trigger any more SQL, because `p.region` is already loaded\nprint(p.region.name)\n"
 },
 {
  "idx": "staqc-test-604",
  "doc": "How do I sort objects inside of objects in JSON? (using Python 2.7)",
  "code": "from collections import OrderedDict\ndata = OrderedDict(zip(('first', 'second', 'last'), (1, 10, 3)))\nprint json.dumps(dict(data)) # {\"second\": 10, \"last\": 3, \"first\": 1}\nprint json.dumps(data) # {\"first\": 1, \"second\": 10, \"last\": 3}\n"
 },
 {
  "idx": "staqc-test-605",
  "doc": "Python BeautifulSoup get text from HTML",
  "code": "In [5]: [p.next_sibling.strip() for p in soup.findAll('p')]\nOut[5]: [u'bbb', u'ddd']\n"
 },
 {
  "idx": "staqc-test-606",
  "doc": "Interleaving two numpy index arrays, one item from each array",
  "code": "a_t = np.vstack((a, np.zeros_like(a)))\nb_t = np.vstack((b, np.ones_like(b)))\n"
 },
 {
  "idx": "staqc-test-607",
  "doc": "Interleaving two numpy index arrays, one item from each array",
  "code": "c[:, np.concatenate(([True], c[1, 1:] != c[1, :-1]))][0]\narray([ 1,  5,  7, 13, 17, 19])\n"
 },
 {
  "idx": "staqc-test-608",
  "doc": "Python get get average of neighbours in matrix with na value",
  "code": "import numpy as np\n\n# Convert to numpy array\narr = np.asarray(a,float)    \n\n# Pad around the input array to take care of boundary conditions\narr_pad = np.lib.pad(arr, (1,1), 'wrap')\n\nR,C = np.where(arr==0)   # Row, column indices for zero elements in input array\nN = arr_pad.shape[1]     # Number of rows in input array\n\noffset = np.array([-N, -1, 1, N])\nidx = np.ravel_multi_index((R+1,C+1),arr_pad.shape)[:,None] + offset\n\narr_out = arr.copy()\narr_out[R,C] = arr_pad.ravel()[idx].sum(1)/4\n"
 },
 {
  "idx": "staqc-test-609",
  "doc": "How to make a time object TZ aware without changing the value?",
  "code": "now_ts = datetime.now(pytz.timezone('Europe/Istanbul'))\nnow_ts > make_aware(campaingObject.publish_end, pytz.timezone('Europe/Istanbul'))\n"
 },
 {
  "idx": "staqc-test-610",
  "doc": "Join unique values into new data frame (python, pandas)",
  "code": "In [56]: a\nOut[56]:\narray(['a', 'b', 'c', 'd'],\n      dtype='<U1')\n\nIn [57]: b\nOut[57]: array([1, 2, 3])\n\nIn [63]: pd.DataFrame(list(product(a,b)), columns=['col1', 'col2'])\nOut[63]:\n   col1  col2\n0     a     1\n1     a     2\n2     a     3\n3     b     1\n4     b     2\n5     b     3\n6     c     1\n7     c     2\n8     c     3\n9     d     1\n10    d     2\n11    d     3\n"
 },
 {
  "idx": "staqc-test-611",
  "doc": "Filtering for multiple strings on f.read",
  "code": "def my_func(word_set):\n    with open('file_name') as f:\n        for line in f:\n            if any(i in line for i in word_set):\n                return True\n        return False\n"
 },
 {
  "idx": "staqc-test-612",
  "doc": "Filtering for multiple strings on f.read",
  "code": "with open('file_name') as f:\n    fi = f.read()\n    if 'string' in fi or 'string2' in fi or 'string3' in fi:\n"
 },
 {
  "idx": "staqc-test-613",
  "doc": "How to find the local minima of a smooth multidimensional array in NumPy efficiently?",
  "code": "print(local_minima_locations)\n# (array([0, 0, 1, 1]), array([0, 4, 1, 3]), array([3, 0, 1, 3]))\nprint(arr[local_minima_locations])\n# [-1 -1 -1 -1]\n"
 },
 {
  "idx": "staqc-test-614",
  "doc": "How to find the local minima of a smooth multidimensional array in NumPy efficiently?",
  "code": "import numpy as np\nimport scipy.ndimage.filters as filters\nimport scipy.ndimage.morphology as morphology\n\ndef detect_local_minima(arr):\n    # http://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array/3689710#3689710\n    \"\"\"\n    Takes an array and detects the troughs using the local maximum filter.\n    Returns a boolean mask of the troughs (i.e. 1 when\n    the pixel's value is the neighborhood maximum, 0 otherwise)\n    \"\"\"\n    # define an connected neighborhood\n    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.morphology.html#generate_binary_structure\n    neighborhood = morphology.generate_binary_structure(len(arr.shape),2)\n    # apply the local minimum filter; all locations of minimum value \n    # in their neighborhood are set to 1\n    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.filters.html#minimum_filter\n    local_min = (filters.minimum_filter(arr, footprint=neighborhood)==arr)\n    # local_min is a mask that contains the peaks we are \n    # looking for, but also the background.\n    # In order to isolate the peaks we must remove the background from the mask.\n    # \n    # we create the mask of the background\n    background = (arr==0)\n    # \n    # a little technicality: we must erode the background in order to \n    # successfully subtract it from local_min, otherwise a line will \n    # appear along the background border (artifact of the local minimum filter)\n    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.morphology.html#binary_erosion\n    eroded_background = morphology.binary_erosion(\n        background, structure=neighborhood, border_value=1)\n    # \n    # we obtain the final mask, containing only peaks, \n    # by removing the background from the local_min mask\n    detected_minima = local_min - eroded_background\n    return np.where(detected_minima)       \n"
 },
 {
  "idx": "staqc-test-615",
  "doc": "Django model form with selected rows",
  "code": "# forms.py\nclass TicketForm(forms.ModelForm):\n    def __init__(self, current_user, *args, **kwargs):\n        super(TicketForm, self).__init__(*args, **kwargs)\n        self.fields['event'].queryset = Event.objects.filter(creator = \n             current_user)\n"
 },
 {
  "idx": "staqc-test-616",
  "doc": "Best way to work out if a path is in an include or exclude list in python",
  "code": "lookup = {'/folder1/folder2/folder3/folder4':'include','/folder1/folder2':'exclude','/folder1':'include'}\n"
 },
 {
  "idx": "staqc-test-617",
  "doc": "Numpy loadtxt load every other column",
  "code": "data = numpy.loadtxt(..., usecols=tuple(xrange(1, numcols, 2)))\n"
 },
 {
  "idx": "staqc-test-618",
  "doc": "Using selenium at hosted app?",
  "code": "firefox = webdriver.Firefox()\n"
 },
 {
  "idx": "staqc-test-619",
  "doc": "How to make a Python function sleep some time while the rest of the game continues?",
  "code": "SHRINKSNAKE = pygame.USEREVENT+0\n"
 },
 {
  "idx": "staqc-test-620",
  "doc": "grouping values for grammar generation in python",
  "code": "#!/usr/bin/python\n\nlol = list()\nmarker = '--->'\nwith open('txt', 'r') as fh:\n    mem = None\n    lo = []\n    for line in fh.readlines():\n        k,v = line.strip().split(marker)\n        k, v = [ x.strip() for x in [k,v]]\n        if not mem or mem == k:\n            lo.append((k,v))\n            mem = k\n        else:\n            lol.append(lo)\n            lo = [(k,v)]\n            mem = k\n    lol.append(lo)\n\nfor i in lol:\n    k,v = zip(*i)\n    print '%s%s %s' % (k[0],marker,' '.join(v))\n"
 },
 {
  "idx": "staqc-test-621",
  "doc": "Getting the row index for a 2D numPy array when multiple column values are known",
  "code": "In []: a= arange(12).reshape(3, 4)\nIn []: a\nOut[]:\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\nIn []: a[2, logical_and(1== a[0, :], 5== a[1, :])]+= 12\nIn []: a\nOut[]:\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8, 21, 10, 11]])\n"
 },
 {
  "idx": "staqc-test-622",
  "doc": "Pair combinations of elements in dictionary without repetition",
  "code": "import itertools\n\ndef pairwise(input):\n    for values in input.itervalues():\n        for pair in itertools.combinations(values.iteritems(), 2):\n            yield dict(pair)\n"
 },
 {
  "idx": "staqc-test-623",
  "doc": "Python: replace multiple values of a Matrix",
  "code": "M = [[0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 5, 1], [0, 1, 0, 0]]\nx=1\n\nwhile (x<=2):\n    if (x==1):\n        y=2\n    else:\n        y=0\n    while (y<=3):\n        M[x][y]=\"x\"\n        y+=1\n    x+=1\n"
 },
 {
  "idx": "staqc-test-624",
  "doc": "Sum corresponding elements of multiple python dictionaries",
  "code": ">>> print dict(c)\n{'a': 3, 'c': 13, 'b': 8, 'd': 20}\n"
 },
 {
  "idx": "staqc-test-625",
  "doc": "Automatically Insert file-modification-time after @date command",
  "code": "INPUT_FILTER = \"perl filemod.pl\"\n"
 },
 {
  "idx": "staqc-test-626",
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": ">>> df[\"close\"].diff().apply(np.sign).fillna(0)\ntime\n2013-09-16 09:30:00    0\n2013-09-16 09:31:00    1\n2013-09-16 15:59:00   -1\n2013-09-16 16:00:00    1\n2013-09-17 09:30:00   -1\n2013-09-17 09:31:00    1\ndtype: float64\n"
 },
 {
  "idx": "staqc-test-627",
  "doc": "Using multiple programs simultaneously in Python",
  "code": "RunSer2Command(lines2[21])\ntime.sleep(1)   \nls_output = subprocess.Popen(['tcpclient.exe','192.168.4.110','8000','10000','1400'],stdin=subprocess.PIPE,stdout=subprocess.PIPE,bufsize=3)\ntime.sleep(2)\nRunSer2Command(lines2[22])\nRunSer2Command(lines2[23])\ntime.sleep(1)\nls_output.communicate(input = '3')\nls_output.wait()\nRunSer2Command(lines2[24])\n"
 },
 {
  "idx": "staqc-test-628",
  "doc": "Plotting Histogram: How can I do it from scratch using data stored in a database?",
  "code": "gnuplot sample.script\n"
 },
 {
  "idx": "staqc-test-629",
  "doc": "Conditional import in a module",
  "code": "if condition:\n    import matplotlib as mlib\nelse:\n    import modifiedmatplotlib as mlib\n"
 },
 {
  "idx": "staqc-test-630",
  "doc": "How to Get Variable from another .py",
  "code": "import sys\nimport subprocess as sp\nimport cPickle\n\nBEGIN = 'pickle_begin'\n\ndef send_and_exit(x):\n    sys.stdout.write(BEGIN + cPickle.dumps(x))\n    sys.stdout.flush()\n    sys.exit(0)\n\ndef execute_and_receive(filename):\n    p = sp.Popen([\"python\", filename], stdout=sp.PIPE)\n    (out, err) = p.communicate()\n    return cPickle.loads(out[out.find(BEGIN) + len(BEGIN):])\n"
 },
 {
  "idx": "staqc-test-631",
  "doc": "Syntax - saving a dictionary as a csv file",
  "code": "my_data = {'time, s': [0,1,2,3], 'x temp, C':[0,10,20,30],\n 'x pressure, kPa': [0,100,200,300]}\nimport csv\nwith open('outfile.csv', 'w') as outfile:\n   writer = csv.writer(outfile)\n   writer.writerow(my_data.keys())\n   writer.writerows(zip(*my_data.values()))\n"
 },
 {
  "idx": "staqc-test-632",
  "doc": "Python/ Pandas CSV Parsing",
  "code": "\"Date\",\"Information\",\"Type\"\n\"2015-12-07\",\"First: Jim, Last: Jones, School: MCAA; First: Jane, Last: Jones,  School: MCAA;\",\"Old\"\n\"2015-12-06\",\"First: Tom, Last: Smith, School: MCAA; First: Tammy, Last: Smith, School: MCAA;\",\"New\"\n"
 },
 {
  "idx": "staqc-test-633",
  "doc": "How to create LinkExtractor rule which based on href in Scrapy",
  "code": "Rule(LinkExtractor(allow=('^http://example.com/category/\\?.*?(?=page=\\d+)', )), callback='parse_item'),\n"
 },
 {
  "idx": "staqc-test-634",
  "doc": "Pivotting via Python and Pandas",
  "code": "print pd.concat([df['ID'], pd.get_dummies(df['Word'])], axis=1)\n   ID  and  it  long  road  take  the  walk\n0   1    0   0     0     0     1    0     0\n1   2    0   0     0     0     0    1     0\n2   3    0   0     1     0     0    0     0\n3   4    0   0     1     0     0    0     0\n4   5    0   0     0     1     0    0     0\n5   6    1   0     0     0     0    0     0\n6   7    0   0     0     0     0    0     1\n7   8    0   1     0     0     0    0     0\n8   9    0   0     0     0     0    0     1\n9  10    0   1     0     0     0    0     0\n"
 },
 {
  "idx": "staqc-test-635",
  "doc": "Django dynamic model fields",
  "code": ">>> instance = Something.objects.create(\n                 name='something',\n                 data={'a': '1', 'b': '2'}\n           )\n>>> instance.data['a']\n'1'        \n>>> empty = Something.objects.create(name='empty')\n>>> empty.data\n{}\n>>> empty.data['a'] = '1'\n>>> empty.save()\n>>> Something.objects.get(name='something').data['a']\n'1'\n"
 },
 {
  "idx": "staqc-test-636",
  "doc": "Regex for location matching - Python",
  "code": "'London, ENG, United Kingdom or Melbourne, VIC, Australia or Palo Alto, CA USA'\n>>> list(map(str.strip, re.split(',|or', x)))\n['London', 'ENG', 'United Kingdom', 'Melbourne', 'VIC', 'Australia', 'Palo Alto', 'CA USA']\n>>> list(map(str.strip, re.split('or', x)))\n['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']\n"
 },
 {
  "idx": "staqc-test-637",
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "  category  number_of_purchase  product_id\n1     cat2                  19          65\n0     cat1                  18          23\n3     cat1                   9          98\n5     cat2                   8         798\n2     cat1                   4          66\n4     cat1                   1         998\n"
 },
 {
  "idx": "staqc-test-638",
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "df = df.groupby('category').apply(lambda x: list(x.product_id)[:2])\nprint df\n"
 },
 {
  "idx": "staqc-test-639",
  "doc": "Restart a script after 6 minutes",
  "code": "start 0 1 2 3 4 5 6 7 8 9 10 11 12 finished\nstart 0 1 2 3 4 5 6 7 8 9 10 finished\nstart 0 1 2 3 4 5 6 7 8 9 10 11 finished\n"
 },
 {
  "idx": "staqc-test-640",
  "doc": "Iterate over model instance field names and values in template",
  "code": "def GetModelData(form, fields):\n    \"\"\"\n    Extract data from the bound form model instance and return a\n    dictionary that is easily usable in templates with the actual\n    field verbose name as the label, e.g.\n\n    model_data{\"Address line 1\": \"32 Memory lane\",\n               \"Address line 2\": \"Brainville\",\n               \"Phone\": \"0212378492\"}\n\n    This way, the template has an ordered list that can be easily\n    presented in tabular form.\n    \"\"\"\n    model_data = {}\n    for field in fields:\n        model_data[form[field].label] = eval(\"form.data.%s\" % form[field].name)\n    return model_data\n\n@login_required\ndef clients_view(request, client_id):\n    client = Client.objects.get(id=client_id)\n    form = AddClientForm(client)\n\n    fields = (\"address1\", \"address2\", \"address3\", \"address4\",\n              \"phone\", \"fax\", \"mobile\", \"email\")\n    model_data = GetModelData(form, fields)\n\n    template_vars = RequestContext(request,\n        {\n            \"client\": client,\n            \"model_data\": model_data\n        }\n    )\n    return render_to_response(\"clients-view.html\", template_vars)\n"
 },
 {
  "idx": "staqc-test-641",
  "doc": "Python lists with irregular format",
  "code": ">>> z = listify([[(1, 0.97456828373415116)],\n                 [(0, 0.91883125256489728), (1, 0.020225186991467976), (2, 0.020314851937259213), (3, 0.020382294889184499), (4, 0.020246413617191008)],\n                 [(2, 0.98493696818505228)]])\n>>> pprint(z)\n[[(0, 0), (1, 0.9745682837341512), (2, 0), (3, 0), (4, 0)],\n [(0, 0.9188312525648973),\n  (1, 0.020225186991467976),\n  (2, 0.020314851937259213),\n  (3, 0.0203822948891845),\n  (4, 0.020246413617191008)],\n [(0, 0), (1, 0), (2, 0.9849369681850523), (3, 0), (4, 0)]]\n"
 },
 {
  "idx": "staqc-test-642",
  "doc": "Store input based on computer and change stored input on command",
  "code": "import os\n#hard code the path to the external file\nexternal_file = 'names.txt'\n#Ask the user's name\nname = raw_input(\"What's your name?\")\n#if file exists, use it to load name, else create a new file\nif not os.path.exists(external_file):\n    with open(external_file, \"a\") as f: # using \"a\" will append to the file\n        f.write(name)\n        f.write(\"\\n\")\n        f.close()\nelse:\n    #if file exists, use it to load name, else ask user\n    with open(external_file, \"r+\") as f:# r+ open a file for reading & writing\n        lines = f.read().split('\\n') # split the names \n        #print lines\n        if name in lines:\n            print \"Hi {}\".format(name)\n        else:\n            f.seek(0,2) # Resolves an issue in Windows\n            f.write(name)\n            f.write(\"\\n\")\n            f.close()\n"
 },
 {
  "idx": "staqc-test-643",
  "doc": "calling class with user input",
  "code": "class football:\n    def __init__(self,qb,num):\n        self.qb = qb\n        self.num = num\n\n    def __str__(self):\n        return self.qb + \", \" + self.num\nteams = {\n\"Niners\" : football(\"Gabbert\", \"02\" ),\n\"Bears\" : football(\"CUTLER, JAY\",\"06\"),\n\"Bengals\" : football (\"Dalton, Andy\",\"14\"),\n\"Bills\" : football (\" Taylor, Tyrod\", \"05\")} #etc\n#I didn't include the whole dictionary for brevity's sake\n\ndef decor(func):\n    def wrap():\n        print(\"===============================\")\n        func()\n        print(\"===============================\")\n    return wrap\n\ndef print_text():\n    print(\"Who\\s your NFL Quarterback? \")\n\ndecorated = decor(print_text)\ndecorated()\n\nteam = input(\"Enter your teams name here:\").capitalize()\nprint(teams[team])\n"
 },
 {
  "idx": "staqc-test-644",
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "def get_sumdf(area_tab):  # perhaps you can name better?\n    actdf,aname = get_data(area_tab)\n    lastq,fcast_yr,projections,yrahead,aname,actdf,merged2,mergederrs,montdist,ols_test,mergedfcst=do_projections(actdf)\n    sumdf=merged2[-2:]\n    sumdf['name']= aname #<<< I'll be doing a few more calculations here as well \n    return sumdf\n\n[get_sumdf(area_tab) for area_tab in areas_tabs]\n"
 },
 {
  "idx": "staqc-test-645",
  "doc": "Finding superstrings in a set of strings in python",
  "code": "for sup in superstrings.copy():\n"
 },
 {
  "idx": "staqc-test-646",
  "doc": "How to log in to a website with urllib?",
  "code": "response = opener.open(post_url, binary_data)\n"
 },
 {
  "idx": "staqc-test-647",
  "doc": "Time - get yesterdays date",
  "code": "#!/usr/bin/env python\nfrom datetime import date, timedelta\n\ntoday = date.today()\nyesterday = today - timedelta(1)\nprint(yesterday.timetuple())\n# -> time.struct_time(tm_year=2015, tm_mon=4, tm_mday=22, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=112, tm_isdst=-1)\n"
 },
 {
  "idx": "staqc-test-648",
  "doc": "How to randomly pick numbers from ranked groups in python, to create a list of specific length",
  "code": ">>> for _ in range(10) : print (select())\n[1, 9, 5, 11, 12, 4]\n[1, 3, 9, 6, 11, 4]\n[1, 3, 9, 5, 6, 12]\n[1, 2, 9, 6, 11, 4]\n[1, 2, 9, 5, 6, 4]\n[2, 9, 5, 6, 11, 4]\n[1, 2, 9, 5, 11, 12]\n[1, 3, 9, 6, 11, 12]\n[3, 9, 6, 11, 12, 4]\n[1, 2, 9, 5, 12, 4]\n"
 },
 {
  "idx": "staqc-test-649",
  "doc": "How to randomly pick numbers from ranked groups in python, to create a list of specific length",
  "code": "from random import choice\na = [1,2,3]\nb = [9]\nc = [5,6]\nd = [11,12,4]\n\nl=a+b+c+d #ordered candidates\n\ndef select():\n    e=set(l)\n    for s in (a,b,c,d,e,e):              # 4 forced choices and 2 frees.\n        e.remove(choice(tuple(s)))       # sets have no index.\n    return [x for x in l if x not in e]\n"
 },
 {
  "idx": "staqc-test-650",
  "doc": "Python: Fastest way of parsing first column of large table in array",
  "code": "sam1_identifiers = set()\nfor line in reader1:\n    sam1_identifiers.add(line[0])\n"
 },
 {
  "idx": "staqc-test-651",
  "doc": "Python: Automatically initialize instance variables?",
  "code": "from functools import wraps\nimport inspect\n\n\ndef initializer(func):\n    \"\"\"\n    Automatically assigns the parameters.\n\n    >>> class process:\n    ...     @initializer\n    ...     def __init__(self, cmd, reachable=False, user='root'):\n    ...         pass\n    >>> p = process('halt', True)\n    >>> p.cmd, p.reachable, p.user\n    ('halt', True, 'root')\n    \"\"\"\n    names, varargs, keywords, defaults = inspect.getargspec(func)\n\n    @wraps(func)\n    def wrapper(self, *args, **kargs):\n        for name, arg in list(zip(names[1:], args)) + list(kargs.items()):\n            setattr(self, name, arg)\n\n        for name, default in zip(reversed(names), reversed(defaults)):\n            if not hasattr(self, name):\n                setattr(self, name, default)\n\n        func(self, *args, **kargs)\n\n    return wrapper\n"
 },
 {
  "idx": "staqc-test-652",
  "doc": "Python: Automatically initialize instance variables?",
  "code": "from functools import wraps\nimport inspect\n\ndef initializer(fun):\n    names, varargs, keywords, defaults = inspect.getargspec(fun)\n    @wraps(fun)\n    def wrapper(self, *args):\n        for name, arg in zip(names[1:], args):\n            setattr(self, name, arg)\n        fun(self, *args)\n    return wrapper\n\nclass process:\n    @initializer\n    def __init__(self, PID, PPID, cmd, FDs, reachable, user):\n        pass\n"
 },
 {
  "idx": "staqc-test-653",
  "doc": "Check if all elements of one array is in another array",
  "code": "A = [1,2,3,4,5,6,7,8,9,0] \n\nB = [4,5,6,7]\nC = [7,8,9,0]\nD = [4,6,7,5]\n\ndef is_slice_in_list(s,l):\n    len_s = len(s) #so we don't recompute length of s on every iteration\n    return any(s == l[i:len_s+i] for i in xrange(len(l) - len_s+1))\n"
 },
 {
  "idx": "staqc-test-654",
  "doc": "Custom Hadoop Configuration for Spark from Python (PySpark)?",
  "code": "public class Configurator {\n\n    static {\n\n        // We initialize needed Hadoop configuration layers default configuration\n        // by loading appropriate classes.\n\n        try {\n            Class.forName(\"org.apache.hadoop.hdfs.DistributedFileSystem\");\n        } catch (ClassNotFoundException e) {\n            LOG.error(\"Failed to initialize HDFS configuartion layer.\");\n        }\n\n        try {\n            Class.forName(\"org.apache.hadoop.mapreduce.Cluster\");\n        } catch (ClassNotFoundException e) {\n            LOG.error(\"Failed to initialize YARN/MapReduce configuartion layer.\");\n        }\n\n        // We do what actually HBase should: default HBase configuration\n        // is added to default Hadoop resources.\n        Configuration.addDefaultResource(\"hbase-default.xml\");\n        Configuration.addDefaultResource(\"hbase-site.xml\");\n    }\n\n    // Just 'callable' handle.\n    public void init() {\n    }\n\n}\n"
 },
 {
  "idx": "staqc-test-655",
  "doc": "How to make POS n-grams more effective?",
  "code": "CPU(s): 2 Hexa core Intel Xeon CPU E5-2430 v2s (-HT-MCP-SMP-) cache: 30720 KB flags: (lm nx sse sse2 sse3 sse4_1 sse4_2 ssse3 vmx) \nClock Speeds: 1: 2500.036 MHz\n"
 },
 {
  "idx": "staqc-test-656",
  "doc": "Getting the number of digits (Python)",
  "code": "num = 127\norder = len(str(num))\nprint(order) # prints 3\n"
 },
 {
  "idx": "staqc-test-657",
  "doc": "How to isolate group nodes in maya with python",
  "code": "selection = filter(is_group, selection)\n"
 },
 {
  "idx": "staqc-test-658",
  "doc": "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?",
  "code": "palette1.description = \"This is palette 1.\"\n"
 },
 {
  "idx": "staqc-test-659",
  "doc": "How to count number of repeated keys in several dictionaries?",
  "code": "from collections import Counter\nfrom itertools import chain\n\ndicts = [\n    {1: 'url1', 3: 'url2', 7: 'url3', 5: 'url4'},\n    {1: 'url1', 7: 'url3'},\n    {5: 'url4', 10: 'url5'},\n]\n\nresult = Counter(chain.from_iterable(d.items() for d in dicts))\nresult = {k:[n,v] for ((k,v),n) in result.items()}\n\nprint dict(result)\n"
 },
 {
  "idx": "staqc-test-660",
  "doc": "Pythonic way to split comma separated numbers into pairs",
  "code": ">>> s = ','.join(str(i) for i in range(10))\n>>> s\n'0,1,2,3,4,5,6,7,8,9'\n>>> t = [int(i) for i in s.split(',')]\n>>> t\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> p = zip(t[::2], t[1::2])\n>>> p\n[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]\n>>>\n"
 },
 {
  "idx": "staqc-test-661",
  "doc": "Turning binary string into an image with PIL",
  "code": "value = \"0110100001100101011011000110110001101111\"*10**5\n\ndef using_fromarray():\n    carr = np.array([(255,255,255), (0,0,0)], dtype='uint8')\n    data = carr[np.array(map(int, list(value)))].reshape(-1, 8, 3)\n    img = Image.fromarray(data, 'RGB')\n    return img\n\ndef using_putdata():\n    cmap = {'0': (255,255,255),\n            '1': (0,0,0)}\n\n    data = [cmap[letter] for letter in value]\n    img = Image.new('RGB', (8, len(value)//8), \"white\")\n    img.putdata(data)\n    return img\n"
 },
 {
  "idx": "staqc-test-662",
  "doc": "Return the largest value of a given element of tuple keys in a dictionary",
  "code": "from operator import itemgetter\nlargest_key = max(my_dict, key=itemgetter(1))\n"
 },
 {
  "idx": "staqc-test-663",
  "doc": "Return the largest value of a given element of tuple keys in a dictionary",
  "code": "my_dict = {\n    'a': {\n            1: value_1,\n            2: value_3\n         }\n    'b': {\n            1: value_2,\n            2: value_5\n         }\n    'c': {\n            3: value_4\n         }\n}\n"
 },
 {
  "idx": "staqc-test-664",
  "doc": "How to print c_ubyte_Array object in Python",
  "code": ">>> class Person(Structure): _fields_ = [(\"name\", c_ubyte * 8), ('age', c_ubyte)]\n... \n>>> smith = Person((c_ubyte * 8)(*bytearray('Mr Smith')), 9)\n>>> smith.age\n9\n>>> cast(smith.name, c_char_p).value\n'Mr Smith\\t'\n"
 },
 {
  "idx": "staqc-test-665",
  "doc": "Key Value For Loop Template - Django Inquiry",
  "code": "values = [{'k':'v'},{'k1':'v1'},...]\n"
 },
 {
  "idx": "staqc-test-666",
  "doc": "exit from ipython",
  "code": "In [1]: type(exit).__repr__ = lambda s: setattr(s.shell, 'exit_now', True) or ''\n"
 },
 {
  "idx": "staqc-test-667",
  "doc": "regex - how to recognise a pattern until a second one is found",
  "code": ">>> show_p=re.compile(\"(.*)\\.s(\\d*)e(\\d*).*?([^\\.]*)$\")\n>>> x=\"tv_show.s01e01.episode_name.avi\"\n>>> show_p.match(x).groups()\n('tv_show', '01', '01', 'avi')\n>>> x=\"tv_show.s2e1.episode_name.avi\"\n>>> show_p.match(x).groups()\n('tv_show', '2', '1', 'avi')\n>>> x='some.other.tv.show.s04e05.episode_name.avi'\n>>> show_p.match(x).groups()\n('some.other.tv.show', '04', '05', 'avi')\n>>>  \n"
 },
 {
  "idx": "staqc-test-668",
  "doc": "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?",
  "code": "\nimport numpy as np\nfrom scipy import stats\nnp.random.seed(2016)\nh, w = 3, 4\n\nx=np.random.random_integers(4,9,(h,w))\ny=np.random.random_integers(4,9,(h,w))\n\nresult = np.ones((h,w))\nfor row in range(h):\n    result[row,:] = np.array([stats.binom_test(x[row,_], x[row,_]+y[row,_]) \n                              for _ in range(w)])\n\nbinom_test = np.vectorize(stats.binom_test)\nresult2 = binom_test(x, x+y)\n\nassert np.allclose(result, result2)\nprint(result2)\n"
 },
 {
  "idx": "staqc-test-669",
  "doc": "How to update entire column with values in list using Sqlite3",
  "code": "curr.executemany('UPDATE test SET myCol= ?', ((val,) for val in myList))\n"
 },
 {
  "idx": "staqc-test-670",
  "doc": "Line breaks with lists",
  "code": "print('Add as many items to the basket as you want. When you are done, enter \"nothing\".')\nprint('What do you want to put into the basket now?')\nbasket = [ line for line in iter(lambda:input(\"Please enter an item to add\"), \"nothing\")]\n\nprint('There are {} items in the basket: '.format(len(basket)))\nfor ind,item in enumerate(basket,1):\n    print(\"Item{}: {} \".format(ind,item))\n"
 },
 {
  "idx": "staqc-test-671",
  "doc": "making new column in pandas dataframes based on filter",
  "code": ">>> df['filter'].astype(object).replace({False: 'fail', True: 'pass'})\n0    fail\n1    fail\n2    pass\n3    fail\n4    fail\n"
 },
 {
  "idx": "staqc-test-672",
  "doc": "making binned boxplot in matplotlib with numpy and scipy in Python",
  "code": "(hist_data, bin_edges) = histogram(my_array[:,0], weights=my_array[:,1])\n"
 },
 {
  "idx": "staqc-test-673",
  "doc": "Is there a better way to convert from decimal to binary in python?",
  "code": "'{0:0=#10b}'.format(my_num)[2:]\n# '00001010'\n"
 },
 {
  "idx": "staqc-test-674",
  "doc": "python - Nested list in dict to csv files",
  "code": "import csv\nimport itertools\n\ncsv_dict = {'label1': ['val1', 'val2', 'val3'],\n            'label2': ['otherval1', 'otherval2'],\n            'label3': ['yetanotherval1']}\nkeys = csv_dict.keys()\ncsvrows = itertools.izip_longest(*[csv_dict[k] for k in keys], fillvalue='dummy')\n\nwith open('out.csv', 'w') as csvfile:\n    csvwriter = csv.writer(csvfile, delimiter=';',\n                            quotechar='\\\\', quoting=csv.QUOTE_MINIMAL)\n    csvwriter.writerow(keys)\n    for row in csvrows:\n        csvwriter.writerow(row)\n"
 },
 {
  "idx": "staqc-test-675",
  "doc": "matplotlib wireframe plot / 3d plot howTo",
  "code": "def visualizeSignals(self, imin, imax):\n\n    times = self.time[imin:imax]\n    nrows = (int)((times[(len(times)-1)] - times[0])/self.mod) + 1\n\n    fig = plt.figure('2d profiles')\n    ax = fig.gca(projection='3d')\n    for i in range(nrows-1):\n        x = self.mat1[i][0] + self.mod * i\n        y = np.array(self.mat1T[i])\n        z = np.array(self.mat2[i])\n        ax.plot(y, z, zs = x, zdir='z')\n\n    plt.show()\n"
 },
 {
  "idx": "staqc-test-676",
  "doc": "Python: Extracting Sentences From Line - Regex Needed Based on Criteria",
  "code": "{Hello there|Hello|Howdy} Dr. Munchauson you {gentleman|fine fellow}!\nWhat {will|shall|should} we {eat|have} for lunch?\nPeas by the {thousand|hundred|1000} said Dr. Munchauson; {that|is} what he said.\n\nnewline\nBut there are no {misters|doctors} here good sir!\nHelp us if there is an emergency.\n\nnewline\nI am the {very last|last} sentence for this {instance|example}.\n"
 },
 {
  "idx": "staqc-test-677",
  "doc": "Advance a file object more than one line as a way of skipping blank lines and lines containing strings",
  "code": "from itertools import islice\nnext(islice(file_object, times_to_advance, times_to_advance), None)\n"
 },
 {
  "idx": "staqc-test-678",
  "doc": "Use regex backreferences to create array",
  "code": ">>> [re.search(r'^\\t(.*)\\t.*: (.*)$',i).groups() for i in my_list]\n[('Location', 'Date'), ('Location2', 'Date2')]\n"
 },
 {
  "idx": "staqc-test-679",
  "doc": "Python Joining csv files where key is first column value",
  "code": "john,red,34\nandrew,green,18\ntonny,black,50,driver,new york\njack,yellow,27\nphill,orange,45,scientist,boston\nkurt,blue,29\nmike,pink,61\n"
 },
 {
  "idx": "staqc-test-680",
  "doc": "Python Joining csv files where key is first column value",
  "code": "import csv\nfrom collections import OrderedDict\n\nwith open('b.csv', 'rb') as f:\n    r = csv.reader(f)\n    dict2 = {row[0]: row[1:] for row in r}\n\nwith open('a.csv', 'rb') as f:\n    r = csv.reader(f)\n    dict1 = OrderedDict((row[0], row[1:]) for row in r)\n\nresult = OrderedDict()\nfor d in (dict1, dict2):\n    for key, value in d.iteritems():\n        result.setdefault(key, []).extend(value)\n\nwith open('ab_combined.csv', 'wb') as f:\n    w = csv.writer(f)\n    for key, value in result.iteritems():\n        w.writerow([key] + value)\n"
 },
 {
  "idx": "staqc-test-681",
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "s = set(range(0, 100))\nlast5 = []\n"
 },
 {
  "idx": "staqc-test-682",
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "if len(last5) > 5:\n    last5.pop(0)\n"
 },
 {
  "idx": "staqc-test-683",
  "doc": "Averaging out sections of a multiple row array in Python",
  "code": ">>> D\narray([[  1. ,   2.5,   4.5],\n       [ 50. ,  35. ,  15. ]])\n"
 },
 {
  "idx": "staqc-test-684",
  "doc": "Averaging out sections of a multiple row array in Python",
  "code": "bins = np.arange(0, 7, 2)     # include the end\nn = np.histogram(A, bins)[0]  # number of columns in each bin\na_mean = np.histogram(A, bins, weights=A)[0]/n\nb_mean = np.histogram(A, bins, weights=B)[0]/n\nD = np.vstack([a_mean, b_mean])\n"
 },
 {
  "idx": "staqc-test-685",
  "doc": "Averaging out sections of a multiple row array in Python",
  "code": "import numpy as np\nA = [1,2,3,4,5]\nB = [50,40,30,20,10]\nC = np.vstack((A,B)) # float so that I can use np.nan\n\ni = np.arange(0, 6, 2)[:, None]\nselections = np.logical_and(A >= i, A < i+2)[None]\n\nD, selections = np.broadcast_arrays(C[:, None], selections)\nD = D.astype(float)     # allows use of nan, and makes a copy to prevent repeated behavior\nD[~selections] = np.nan # exclude these elements from mean\n\nD = np.nanmean(D, axis=-1)\n"
 },
 {
  "idx": "staqc-test-686",
  "doc": "Pandas: add dataframes to dataframe - match on index and column value",
  "code": "df = pd.concat([df1,df2,df3])\n#             id  value1  value2\n# 2015-05-01   1      13     NaN\n# 2015-05-01   2      14     NaN\n# 2015-05-02   1      15     NaN\n# 2015-05-02   2      16     NaN\n# 2015-05-01   1     NaN       4\n# 2015-05-02   1     NaN       5\n# 2015-05-01   2     NaN       7\n# 2015-05-02   2     NaN       8\n"
 },
 {
  "idx": "staqc-test-687",
  "doc": "Remove elements of one list from another, while keeping duplicates",
  "code": ">>> from collections import Counter\n>>> a = ['a', 'a', 'b', 'c', 'c', 'c', 'd', 'e', 'f']\n>>> b = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> Counter(a) - Counter(b)\nCounter({'c': 2, 'a': 1})\n>>> list((Counter(a) - Counter(b)).elements())\n['a', 'c', 'c']\n"
 },
 {
  "idx": "staqc-test-688",
  "doc": "Pandas Python: How to create lapse since today column?",
  "code": "In [43]: datetime.now() - df['Date']\nOut[43]:\n0   38 days, 00:08:44.917269\n1   39 days, 00:08:44.917269\n2   39 days, 05:22:44.917269\n"
 },
 {
  "idx": "staqc-test-689",
  "doc": "Pandas: Dealing with Boolean in Pivot Table",
  "code": "In [13]:\ndf.ix[:,:'q3'].apply(pd.Series.value_counts)\n\nOut[13]:\n       q1  q2  q3\nTrue    4   3   4\nFalse   2   3   2\n"
 },
 {
  "idx": "staqc-test-690",
  "doc": "Automatic conversion to boost shared_ptr in boost python",
  "code": ">>> class Egg:\n...     x = 1\n...     y = 2\n... \n>>> import example\n>>> example.by_value(Egg())\nSpam()\nSpam(const Spam&)\nby_value()\n~Spam()\n~Spam()\n>>> example.by_const_ref(Egg())\nSpam()\nby_cref()\n~Spam()\n>>> example.by_ref(Egg())\nSpam()\nby_ref()\n~Spam()\n>>> example.by_ptr(Egg())\nSpam()\nby_ptr()\n~Spam()\n"
 },
 {
  "idx": "staqc-test-691",
  "doc": "Returning all keys that have the same corresponding value in a dictionary with python",
  "code": "keys = [x for x,y in posValueD.items() if y == posValueD[aiMove2]]\n"
 },
 {
  "idx": "staqc-test-692",
  "doc": "python - increase array size and initialize new elements to zero",
  "code": "In [38]: A\nOut[38]: \narray([[1, 2],\n       [2, 3]])\n\nIn [39]: A_new = np.zeros(new_shape,dtype = A.dtype)\n\nIn [40]: A_new[0:A.shape[0],0:A.shape[1]] = A\n\nIn [41]: A_new\nOut[41]: \narray([[1, 2, 0, 0],\n       [2, 3, 0, 0],\n       [0, 0, 0, 0]])\n"
 },
 {
  "idx": "staqc-test-693",
  "doc": "Nested Regular Expression in Python for",
  "code": "r'WHATEVER AND (%s) (%s)' % (r1.pattern, 'hello')\n"
 },
 {
  "idx": "staqc-test-694",
  "doc": "Compare list w/ sublist",
  "code": "lista_set = set(lista)\nfor item in listb:\n    if item[0] in lista_set:\n        print item\n"
 },
 {
  "idx": "staqc-test-695",
  "doc": "Elegant way of reducing list by averaging?",
  "code": "In [10]: %time a=reduce(list(np.arange(1000000))) #chosen answer\nCPU times: user 6.38 s, sys: 0.08 s, total: 6.46 s\nWall time: 6.39 s\n\nIn [11]: %time c=np.convolve(list(np.arange(1000000)), [.5,.5], mode='valid')[::2]\nCPU times: user 0.59 s, sys: 0.01 s, total: 0.60 s\nWall time: 0.61 s\n"
 },
 {
  "idx": "staqc-test-696",
  "doc": "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array",
  "code": "print(np.argsort(idx).reshape(grid_shape[0],-1))\n# [[ 0  1  3  6 10]\n#  [ 2  4  7 11 14]\n#  [ 5  8 12 15 17]\n#  [ 9 13 16 18 19]]\n"
 },
 {
  "idx": "staqc-test-697",
  "doc": "dict of internal keys",
  "code": "['red', 'orange', 'yellow']\n"
 },
 {
  "idx": "staqc-test-698",
  "doc": "Get system metrics using PowerShell",
  "code": "False\n"
 },
 {
  "idx": "staqc-test-699",
  "doc": "Python time measure function",
  "code": "@timing\ndef do_work():\n  #code\n"
 },
 {
  "idx": "staqc-test-700",
  "doc": "How to filter through pandas pivot table.",
  "code": ">>> df.loc[pd.IndexSlice[:, 3, 5], :]\n\n          v1  v2\ni1 i2 i3        \n1  3  5   10  20\n"
 },
 {
  "idx": "staqc-test-701",
  "doc": "Beautiful Soup [Python] and the extracting of text in a table",
  "code": "text = first_td.renderContents()\n"
 },
 {
  "idx": "staqc-test-702",
  "doc": "Beautiful Soup - Class contains 'a' and not contains 'b'",
  "code": ">>> soup.find_all(\"tr\", class_=\"viewLicense\")\n[<tr class=\"viewLicense inactive\"></tr>, <tr class=\"viewLicense\"></tr>]\n"
 },
 {
  "idx": "staqc-test-703",
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": "def voxel_adjacency(voxel_communities):\n    n_voxels = voxel_communities.size\n    comm_labels = sorted(set(voxel_communities))\n    comm_counts = [(voxel_communities == l).sum() for l in comm_labels]\n\n    blocks = numpy.zeros((n_voxels, n_voxels), dtype=bool)\n    start = 0\n    for c in comm_counts:\n        blocks[start:start + c, start:start + c] = 1\n        start += c\n\n    ix = numpy.empty_like(voxel_communities)\n    ix[voxel_communities.argsort()] = numpy.arange(n_voxels)\n    blocks[:] = blocks[ix,:]\n    blocks[:] = blocks[:,ix]\n    return blocks\n"
 },
 {
  "idx": "staqc-test-704",
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": "    blocks[:] = blocks[ix,:]\n    blocks[:] = blocks[:,ix]\n    return blocks\n"
 },
 {
  "idx": "staqc-test-705",
  "doc": "How can I check if a string has the same characters? Python",
  "code": "len(str1) == len(str2) and sorted(str1) == sorted(str2)\n"
 },
 {
  "idx": "staqc-test-706",
  "doc": "How to perform a 'one-liner' assignment on all elements of a list of lists in python",
  "code": "lol = [[1,3],[3,4]]\nfrom operator import setitem\n\nmap(lambda x: setitem(x, 1, -2), lol)\nprint(lol)\n[[1, -2], [3, -2]]\n"
 },
 {
  "idx": "staqc-test-707",
  "doc": "Localized random points using numpy and pandas",
  "code": "coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], \n               [[10,0],[0,10]], 200) for i in range(10)])\n"
 },
 {
  "idx": "staqc-test-708",
  "doc": "parse blocks of text from text file using Python",
  "code": "txt = open(files[0]).read()           # read the file into a big string\nbefore, after = txt.split('1:', 1)    # split the file on the first \"1:\"\nafter_lines = after.split('\\n')       # create lines from the after text\nlines_to_save = after_lines[:19]      # grab the first 19 lines after \"1:\"\n"
 },
 {
  "idx": "staqc-test-709",
  "doc": "parse blocks of text from text file using Python",
  "code": "out_text = \"1:\"                       # add back \"1:\"\nout_text += \"\\n\".join(lines_to_save)  # add all 19 lines with newlines between them\nout_text += \"\\n\"                      # add a newline at the end\n\nopen(\"outputfile.txt\", \"w\").write(out_text)\n"
 },
 {
  "idx": "staqc-test-710",
  "doc": "Python - Replacing value of a row in a CSV file",
  "code": "import csv, os\n\nwith open('path/to/filename') as inf, open('path/to/filename_temp', 'w') as outf:\n    reader = csv.reader(inf)\n    writer = csv.writer(outf)\n    for line in reader:\n        if line[1] == '0':\n           ...\n        ... # as above\n\nos.remove('path/to/filename')\nos.rename('path/to/filename_temp', 'path/to/filename')\n"
 },
 {
  "idx": "staqc-test-711",
  "doc": "Running program/function in background in Python",
  "code": "$ python script.py\n$ \n$ \n$ Done!\n"
 },
 {
  "idx": "staqc-test-712",
  "doc": "Fasted Python way to bulk csv convert outside of using pandas",
  "code": "import numpy\nimport timeit\n\n\ndef makebigfile(outname):\n    data = numpy.random.standard_normal((100000, 7))\n    numpy.savetxt(outname, data, delimiter=\",\")\n\n\ndef csvdump(files, original=True):\n\n        date, time, opens, high, low, close, vol = numpy.genfromtxt(str(files)+'.csv', unpack=True, delimiter=',')\n        if original:\n            for line in high:\n                x=str(1/line)\n                outr=open(str(files)+\"inverse-original.txt\", \"a\")\n                outr.write(x)\n                outr.write('\\n')\n        else:\n            numpy.savetxt(str(files)+\"inverse-savetxt.txt\",1/high)\n\n\n\nmakebigfile('foo.txt')\n\n\nprint timeit.timeit(stmt='__main__.csvdump(\"foo\",True)',setup='import __main__',number=1000)\nprint timeit.timeit(stmt='__main__.csvdump(\"foo\",False)',setup='import __main__',number=1000)\n"
 },
 {
  "idx": "staqc-test-713",
  "doc": "Python: How to call a class in the same file",
  "code": "class One:\n    @staticmethod\n    def get():\n        return 1\n\nclass Two:\n    def __init__(self):\n        val = One.get()\n"
 },
 {
  "idx": "staqc-test-714",
  "doc": "How can I sort a 2D list?",
  "code": "[('A', 'B', 'C', 'D'),\n ('0', '2', '3', '1'),\n ('0', '2', '3', '1')]\n"
 },
 {
  "idx": "staqc-test-715",
  "doc": "Convert multichar %xx escapes to unicode",
  "code": "u = urllib.unquote(s).decode('utf-8')\n"
 },
 {
  "idx": "staqc-test-716",
  "doc": "Convert multichar %xx escapes to unicode",
  "code": "u = urllib.unquote(u.encode('utf-8')).decode('utf-8')\n"
 },
 {
  "idx": "staqc-test-717",
  "doc": "Get object attribute in class based view",
  "code": "class AutoContextMixin:\n\n    def get_context_data(self, **kwargs):\n        context = super(AutoContextMixin, self).get_context_data(**kwargs)\n        for key in dir(self):\n            value = getattr(self, key)\n            if isinstance(value, str) and not key.startswith('_'):\n                context[key] = value\n        return context \n\nclass FooUpdate(AutoContextMixin, UpdateView):\n    model = Foo\n    page_title = 'foo-objects name should go here'\n"
 },
 {
  "idx": "staqc-test-718",
  "doc": "Python and the modulus operator with very large numbers",
  "code": "def isprime(n):\n    if n % 1 != 0:\n        return True\n    else:\n        for j in range(2, math.ceil(math.sqrt(n))):\n            if n % j != 0:\n                return False\n        return True\n"
 },
 {
  "idx": "staqc-test-719",
  "doc": "Call a C++ project main() in Python in Visual Studio?",
  "code": "subprocess.Popen(['myCppprogram.exe', 'foo', 'bar'], ...)\n"
 },
 {
  "idx": "staqc-test-720",
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "B'(t) = (a*t+b, c*t+d)\nV = (e, f)\n"
 },
 {
  "idx": "staqc-test-721",
  "doc": "Reading input from raw_input() without having the prompt overwritten by other threads in Python",
  "code": "$ ./threads_input.py\nInterrupting text!\nInterrupting text!\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nnaparte family. No, I warn you, that if you do not tell me we are at war,\n"
 },
 {
  "idx": "staqc-test-722",
  "doc": "How to find the list in a list of lists whose sum of elements is the greatest?",
  "code": "max(x, key=sum)\n"
 },
 {
  "idx": "staqc-test-723",
  "doc": "How to find the list in a list of lists whose sum of elements is the greatest?",
  "code": ">>> def mymaxfunction(item):\n...     return sum(map(int, item))\n...\n>>> max([['1', '2', '3'], ['7', '8', '9']], key=mymaxfunction)\n['7', '8', '9']\n"
 },
 {
  "idx": "staqc-test-724",
  "doc": "Growing matrices columnwise in NumPy",
  "code": ">>> M[:3,:3]\n  array([[ 9.,  3.,  1.],\n         [ 9.,  6.,  8.],\n         [ 9.,  7.,  5.]])\n"
 },
 {
  "idx": "staqc-test-725",
  "doc": "How to arrange the order of data and file using requests to post multipart/form-data?",
  "code": "Content-Type: multipart/form-data; boundary=6f9d948e26f140a289a9e8297c332a91\n\n--0ca5f18576514b069c33bc436ce6e2cd\nContent-Disposition: form-data; name=\"up\"; filename=\"aa.png\"\nContent-Type: image/png\n\n[ .. image data .. ]\n\n--0ca5f18576514b069c33bc436ce6e2cd\nContent-Disposition: form-data; name=\"exp\"\n\npython\n--0ca5f18576514b069c33bc436ce6e2cd\nContent-Disposition: form-data; name=\"ptext\"\n\ntext\n--0ca5f18576514b069c33bc436ce6e2cd\nContent-Disposition: form-data; name=\"board\"\n\nPictures\n--0ca5f18576514b069c33bc436ce6e2cd--\n"
 },
 {
  "idx": "staqc-test-726",
  "doc": "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks",
  "code": "lookup = {'name1': 'xxx-xxx-xxxx',\n          'name2': 'yyy-yyy-yyyy'}\n\nwith open('data.csv') as data_file, open('out.csv', 'w') as out_file:\n    for row in data_file:\n        if any(num in row for num in lookup.values()):\n            out_file.write(row)\n"
 },
 {
  "idx": "staqc-test-727",
  "doc": "How to create a double dictionary in Python?",
  "code": "In [8]: results = {}\n\nIn [9]: for k, v in names.iteritems():\n   ...:     results[k] = {'month': v}\n   ...:     if dates.has_key(k):\n   ...:         results[k]['day'] = dates[k]\n   ...:\n   ...:\n\nIn [10]: results\nOut[10]:\n{'George': {'day': '21/03', 'month': 'march'},\n 'Mary': {'day': '2/02', 'month': 'february'},\n 'Peter': {'month': 'may'},\n 'Steven': {'day': '14/03', 'month': 'april'},\n 'Will': {'day': '7/01', 'month': 'january'}}\n"
 },
 {
  "idx": "staqc-test-728",
  "doc": "Python: Keep track of current column in text file",
  "code": "cur_column = 5\nfor line in Input:\n    line = line.rstrip() \n    fields = line.split(\"\\t\")   \n    for col in fields[cur_colum:]:\n       ...\n       ...\n\ncur_column += 1 # done processing current column, increment value to next column\n"
 },
 {
  "idx": "staqc-test-729",
  "doc": "Check if all elements in nested iterables evaluate to False",
  "code": "if not any(any(inner) for inner in x):\n"
 },
 {
  "idx": "staqc-test-730",
  "doc": "How to find the all text files from the path and combine all the lines in that text files to one text file",
  "code": "import os\n\nfile_contents = []\nfor file in os.listdir(\"directory_to_search\"):\n    if file.endswith(\".txt\"):\n        with open('input.txt', 'rb') as f:\n            file_contents.append(\" \".join(line.strip() for line in f))\n"
 },
 {
  "idx": "staqc-test-731",
  "doc": "Python how to use Counter on objects according to attributes",
  "code": "from collections import Counter\nfrom operator import attrgetter\n\nclass Record(object):\n    def __init__(self, **kwargs):\n        for key, value in kwargs.iteritems():\n             setattr(self, key, value)\n\nrecords = [Record(uid='001', url='www.google.com', status=200),\n           Record(uid='002', url='www.google.com', status=404),\n           Record(uid='339', url='www.ciq.com',    status=200)]\n\ndef count_attr(attr, records):\n    \"\"\" Returns Counter keyed by unique values of attr in records sequence. \"\"\"\n    get_attr_from = attrgetter(attr)\n    return Counter(get_attr_from(r) for r in records)\n\nfor attr in ('status', 'url'):\n    print('{!r:>8}: {}'.format(attr, count_attr(attr, records)))\n"
 },
 {
  "idx": "staqc-test-732",
  "doc": "Secure MySQL login data in a Python client program",
  "code": "SELECT * FROM Users WHERE name=?\n"
 },
 {
  "idx": "staqc-test-733",
  "doc": "Python argparser. List of dict in INI",
  "code": "[section]\nkey = value\nkey2 = value2\nkey3 = value3\n"
 },
 {
  "idx": "staqc-test-734",
  "doc": "Read a number in a word from a file in python",
  "code": "import re\n\nnumber_regex = r'#define\\s+VERSION_M[AJIN]+OR\\s+(\\d+)'\n\nwith open(\"guidefs.h\") as f:\n    your_text = f.read()\n    all_numbers = re.findall(number_regex, your_text)\n    # This will return ['2', '1']\n"
 },
 {
  "idx": "staqc-test-735",
  "doc": "Execute code when extending a class in Python",
  "code": ">>> type(Extend1)\n<class '__main__.Meta'>\n"
 },
 {
  "idx": "staqc-test-736",
  "doc": "in python, how to manipulate namespace of an instance",
  "code": "import foo\n\nclass bar_mock(object):\n    @staticmethod\n    def get_data():\n        return 'test'\n\nif __name__ == '__main__':\n    foo.bar = bar_mock\n    d = foo.Data()\n    print d.val    # prints 'test'\n"
 },
 {
  "idx": "staqc-test-737",
  "doc": "Python-like list comprehension in Java",
  "code": "public static <T> void applyToListInPlace(List<T> list, Func<T, T> f) {\n    ListIterator<T> itr = list.listIterator();\n    while (itr.hasNext()) {\n        T output = f.apply(itr.next());\n        itr.set(output);\n    }\n}\n// ...\nList<String> myList = ...;\napplyToListInPlace(myList, new Func<String, String>() {\n    public String apply(String in) {\n        return in.toLowerCase();\n    }\n});\n"
 },
 {
  "idx": "staqc-test-738",
  "doc": "django filter to calculate hours within range",
  "code": "# XXX - magic number of months\nfor month in range(1, 13):\n    for wraparound in models.InOut.objects.filter(\n        Q(in_dt__month=month) and ~Q(out_dt__month=month)\n    )\n        year = wraparound.in_dt.year\n        next_month = (month % 12) + 1\n        month_end = datetime(year, next_month, calendar.monthrange(year, month)[1], 23, 59, 59, 999999, tz)\n        next_month_start = datetime(year, next_month, 1, 0, 0, 0, 0, tz)\n\n        models.InOut.objects.bulk_create([\n            models.InOut(user=wraparound.user, in_dt=wraparound.in_dt, out_dt=month_end),\n            models.InOut(user=wraparound.user, in_dt=next_month_start, out_dt=wraparound.out_dt)\n        ])\n        wraparound.delete()\n"
 },
 {
  "idx": "staqc-test-739",
  "doc": "django filter to calculate hours within range",
  "code": "month_start = datetime(year, month, 1, 0, 0, 0, 0, tz);\nnext_month = (month % 12) + 1\nnext_month_start = datetime(year, next_month, 1, 0, 0, 0, 0, tz)\n\nmodels.InOut.objects.filter(\n    (\n        Q(in_dt__gte=month_start) and Q(in_dt__lt=next_month_start))\n        | (Q(out_dt__gte=month_start) and Q(out_dt__lt=next_month_start)\n    )\n ).annotate(\n     start_in_month=Func(F('in_dt'), month_start, function='MAX'),\n     end_in_month=Func(F('out_dt'), month_end, function='MIN')\n ).aggregate(worked=Sum(F('end_in_month') - F('start_in_month'))\n"
 },
 {
  "idx": "staqc-test-740",
  "doc": "How many times is a particular row present?",
  "code": "In [39]: hashed = df.apply(lambda x: hash(str(x.values)), axis=1)\n\nIn [40]: hashed\nOut[40]: \n0    4112993419872972622\n1    4112993419872972622\n2    4112993419872972622\n3    7113020419917972579\n4    6113011419891972603\n5    6113011419891972603\ndtype: int64\n"
 },
 {
  "idx": "staqc-test-741",
  "doc": "Multiple Database Config in Django 1.2",
  "code": "from django.db import connections\n\nclass DBRouter(object):\n    \"\"\"A router to control all database operations on models in\n    the contrib.auth application\"\"\"\n\n    def db_for_read(self, model, **hints):\n        if hasattr(model,'connection_name'):\n            return model.connection_name\n        return None\n\n    def db_for_write(self, model, **hints):\n        if hasattr(model,'connection_name'):\n            return model.connection_name\n        return None\n\n    def allow_syncdb(self, db, model):\n        if hasattr(model,'connection_name'):\n            return model.connection_name\n        return None\n"
 },
 {
  "idx": "staqc-test-742",
  "doc": "student t confidence interval in python",
  "code": "from scipy.stats import t\n\n\ndef StudentTCI(loc, scale, df, alpha=0.95):\n    return t.interval(alpha, df, loc, scale)\n\nprint StudentTCI(1, 2, 10)\nprint StudentTCI(1, 2, 10, 0.99)\n"
 },
 {
  "idx": "staqc-test-743",
  "doc": "Best way to make a counter based on time",
  "code": "import time\n\ndef make_ticker():\n    start = time.time()\n    def elapsed():\n        now = time.time()\n        return now-start\n    return elapsed\n"
 },
 {
  "idx": "staqc-test-744",
  "doc": "Django: Lookup by length of text field",
  "code": "ModelWithTextField.objects.raw('SELECT * FROM model_with_text_field WHERE LEN_FUNC_NAME(text_field) > 7')\n"
 },
 {
  "idx": "staqc-test-745",
  "doc": "Open txt file, skip first lines and then monitor a given column of data",
  "code": "inputFile = open(path,'r')\nhead_lines = 4\nfor n, line in enumerate(inputFile):\n    if n > head_lines:\n       cols = line.split()\n       if len(cols) == 9:               \n           variableX = cols[7]\n           # do whatever you need with variableX\ninputFile.close()\n"
 },
 {
  "idx": "staqc-test-746",
  "doc": "Python Pandas Use if-else to populate new column",
  "code": "df['col3'] = (df.col2 > 0).astype('int')\n"
 },
 {
  "idx": "staqc-test-747",
  "doc": "capturing the usernames after List: tag",
  "code": "def func(lis):\n    return ''.join(lis).translate(None, ':'+whitespace)\n\nlis = [x.split() for x in re.split(r'(?<=\\w):',ph.strip(), re.DOTALL)]\ndic = {}\nfor x, y in zip(lis[:-1], lis[1:-1]):\n    dic[x[-1]] = func(y[:-1]).split(',')\ndic[lis[-2][-1]] = func(lis[-1]).split(',')\n\nprint dic['List']\nprint dic['Members']\nprint dic['alias']\n"
 },
 {
  "idx": "staqc-test-748",
  "doc": "Pyramid authorization for stored items",
  "code": "config.add_view(route_name='item_options', view='.views.options_view',\n                permission='view', renderer='item_options.mako')\n"
 },
 {
  "idx": "staqc-test-749",
  "doc": "Using mimetools.Message in urllib2.urlopen",
  "code": ">>> msg = resp.info()\n>>> msg.getheaders('Set-Cookie')\n['PREF=ID=5975a5ee255f0949:FF=0:TM=1305336283:LM=1305336283:S=1vkES6eF4Yxd-_oM; expires=Mon, 13-May-2013 01:24:43 GMT; path=/; domain=.google.com.au', 'NID=46=lQVFZg6yKUsoWT529Hqp5gA8B_CKYd2epPIbANmw_J0UzeMt2BhuMF-gtmGsRhenUTeajKz2zILXd9xWpHWT8ZGvDcmNdkzaGX-L_-sKyY1w4e2l3DKd80JzSkt2Vp-H; expires=Sun, 13-Nov-2011 01:24:43 GMT; path=/; domain=.google.com.au; HttpOnly']\n"
 },
 {
  "idx": "staqc-test-750",
  "doc": "Store all stdout to file while still displaying it on screen",
  "code": "import sys\n\nclass Logger(file):\n    def __init__(self,*a,**kw):\n        # copy original stdout to instance\n        self.stdout = sys.stdout\n        return super(Logger,self).__init__(*a,**kw)\n\n    def write(self,data):\n        self.stdout.write(data) # to screen\n        return super(Logger,self).write(data) #to file\n\n    def writelines(self,lines):\n        for line in lines: self.write(line)\n\n    def close(self):\n        # return it back\n        sys.stdout = self.stdout\n\n\n\nsome_list = ['elem1', 'elem2']\n\nfor elem in some_list:\n    with Logger(\"/tmp/1/{}.log\".format(elem), \"w\") as sys.stdout:\n    # Do lots of stuff that print messages.\n        print 'lots of stuff for', elem\n\n\n\nprint 'Code finished'\n"
 },
 {
  "idx": "staqc-test-751",
  "doc": "Creating a table out of data in python",
  "code": "str(your_list[3])\n"
 },
 {
  "idx": "staqc-test-752",
  "doc": "Reading files in parallel in python",
  "code": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom StringIO import StringIO\n\n# for this example, each \"file\" has 3 lines instead of 100000\nf1 = '1\\t10\\n2\\t11\\n3\\t12'\nf2 = '1\\t13\\n2\\t14\\n3\\t15'\nf3 = '1\\t16\\n2\\t17\\n3\\t18'\n\nfiles = [f1, f2, f3]\n\n# data is a list of dictionaries mapping population to average age\n# i.e. data[0][10000] contains the average age in location 0 (files[0]) with\n# population of 10000.\ndata = []\n\nfor i,filename in enumerate(files):\n    f = StringIO(filename)\n    # f = open(filename, 'r')\n    data.append(dict())\n\n    for line in f:\n        population, average_age = (int(s) for s in line.split('\\t'))\n        data[i][population] = average_age\n\nprint data\n\n# gather custom statistics on the data\n\n# i.e. here's how to calculate the average age across all locations where\n# population is 2:\nnum_locations = len(data)\npop2_avg = sum((data[loc][2] for loc in xrange(num_locations)))/num_locations\nprint 'Average age with population 2 is', pop2_avg, 'years old'\n"
 },
 {
  "idx": "staqc-test-753",
  "doc": "How can I send an MMS via a GSM/GPRS modem connected to a linux computer?",
  "code": "AT+CMMSINIT # Initialize the MMS method\nAT+CMMSCURL=\"some.url.com\" # the MMS center URL\nAT+CMMSCID=1 # Set bearer\nAT+CMMSPROTO=\"1.1.1.1\",8080 # MMS Proxy information\nAT+SAPBR=3,1,\"Contype\",\"GPRS\" # How you are sending\nAT+SAPBR=3,1,\"APN\",\"foobar\" # Set the APN\nAT+SAPBR=1,1 # Activate the bearer context\n"
 },
 {
  "idx": "staqc-test-754",
  "doc": "finding nth combination (incremental approach) of letters (list)",
  "code": "from itertools import product, islice\n\ndef max_sum_n_pow_lower_x(x, n):\n    \"\"\" returns tuple of number of summand and maximal sum\n        of form `n` + `n`**2 + `n`**3  not greater than `x` \"\"\"\n    i, c, s = 1, 0, 0\n    while s < x:\n       i *= n\n       c += 1\n       s += i\n    return c-1, s-i\n\ndef get_nth_pow(iterable, n):\n    l = list(iterable)\n    repeat, start_from = max_sum_n_pow_lower_x(n, len(l))\n    prod = itertools.product(l, repeat=repeat+1)\n    return ''.join(list(islice(prod, n-start_from))[-1])\n"
 },
 {
  "idx": "staqc-test-755",
  "doc": "NLTK convert tokenized sentence to synset format",
  "code": "from nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag, word_tokenize\n\nsentence = \"I am going to buy some gifts\"\ntagged = pos_tag(word_tokenize(sentence))\n\nsynsets = []\nlemmatzr = WordNetLemmatizer()\n\nfor token in tagged:\n    wn_tag = penn_to_wn(token[1])\n    if not wn_tag:\n        continue\n\n    lemma = lemmatzr.lemmatize(token[0], pos=wn_tag)\n    synsets.append(wn.synsets(lemma, pos=wn_tag)[0])\n\nprint synsets\n"
 },
 {
  "idx": "staqc-test-756",
  "doc": "Encoding in Python - non-English characters into a URL",
  "code": "In[16]: urllib.urlencode([('postnr',4320),('vejnavn', 'Bispeg\u00e5rdsvej'), ('husnr',2)])\nOut[16]: 'postnr=4320&vejnavn=Bispeg%C3%A5rdsvej&husnr=2'\n"
 },
 {
  "idx": "staqc-test-757",
  "doc": "Date removed from x axis on overlaid plots matplotlib",
  "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nn = 100\ndates = pd.date_range(start = \"2015-01-01\", periods = n, name = \"yearDate\")\n\ndfs = []\n\nfor i in range(3):\n    df = pd.DataFrame(data = np.random.random(n)*(i + 1), index = dates,\n                      columns = [\"DataFrame #\" + str(i) ] )\n    df.df_name = str(i)\n    dfs.append(df)\n\ndf = pd.concat(dfs, axis = 1)\ndf.plot()\n"
 },
 {
  "idx": "staqc-test-758",
  "doc": "Date removed from x axis on overlaid plots matplotlib",
  "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# make up some data\nn = 100\ndates = pd.date_range(start = \"2015-01-01\", periods = n, name = \"yearDate\")\n\ndfs = []\n\nfor i in range(3):\n    df = pd.DataFrame(data = np.random.random(n)*(i + 1), index = dates,\n                      columns = [\"FishEffort\"] )\n    df.df_name = str(i)\n    dfs.append(df)\n\n# plot it directly using matplotlib instead of through the DataFrame\nfig = plt.figure()\nax = fig.add_subplot()\n\nfor df in dfs:\n    plt.plot(df.index,df[\"FishEffort\"], label = df.df_name)\n\nplt.legend()\nplt.show()\n"
 },
 {
  "idx": "staqc-test-759",
  "doc": "Grouping in Python",
  "code": "from collections import defaultdict\n\nd = defaultdict(int)\n\nfor item in batting:\n  d[item['teamID']] += item.get('R', 0) or 0\n\nfor team, r_sum in sorted(d.items(), key=lambda x: x[0]):\n  print team, r_sum\n"
 },
 {
  "idx": "staqc-test-760",
  "doc": "Using a string as a variable name",
  "code": "def post(self):\n    var_list = ['var1', 'var2']\n    result_list = []\n    for var in var_list:\n        result_list.append(self.request.get(var))\n    return result_list # etc.\n"
 },
 {
  "idx": "staqc-test-761",
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "avg = y.mean(axis=(1, 3))\n"
 },
 {
  "idx": "staqc-test-762",
  "doc": "Pythonic solution for conditional arguments passing",
  "code": ">>> def func(a=0,b=10):\n...  return a+b\n...\n>>> args = {'a':15,'b':15}\n>>> func(**args)\n30\n>>> args={'a':15}\n>>> func(**args)\n25\n>>> args={'b':6}\n>>> func(**args)\n6\n>>> args = {}\n>>> func(**args)\n10\n"
 },
 {
  "idx": "staqc-test-763",
  "doc": "Drawing a clamped uniform cubic B-spline using Cairo",
  "code": "class CubicBSpline(object):\n    [...]\n    def clamped(self):\n        new_points = [self.points[0]] * 3 + self.points + [self.points[-1]] * 3\n        return CubicBSpline(new_points)\n"
 },
 {
  "idx": "staqc-test-764",
  "doc": "Pipe delimiter file, but no pipe inside data",
  "code": "foo|\"bar|baz\"|spam\n"
 },
 {
  "idx": "staqc-test-765",
  "doc": "How to find combinations of a list in a Dictionary?",
  "code": ">>> from itertools import permutations\n>>> yourdictionary = {(1,3,2):'text',(3,1,2):'text'}\n>>> yourlist = [1, 2, 3]\n>>> print any(tuple(perm) in yourdictionary for perm in permutations(yourlist))\nTrue\n>>> yourdictionary = {frozenset([1, 2, 3]): 'text', frozenset([4, 5, 6]): 'othertext'}\n>>> frozenset(yourlist) in yourdictionary\nTrue\n>>> frozenset([2, 3]) in yourdictionary\nFalse\n"
 },
 {
  "idx": "staqc-test-766",
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "cnxn = pyodbc.connect('DRIVER=freetds;SERVER=FOOBAR;PORT=1433;DATABASE=T2;UID=FOO;PWD=bar;TDS_Version=8.0;')\n"
 },
 {
  "idx": "staqc-test-767",
  "doc": "Extract text from webpage using either Python or Applescript",
  "code": "do JavaScript \"document.getElementsByClassName('proceed')[0].click()\" in document 1\n"
 },
 {
  "idx": "staqc-test-768",
  "doc": "Largest weakly connected component in networkX",
  "code": "In [1]: import networkx as nx\n\nIn [2]: G = nx.DiGraph()\n\nIn [3]: G.add_path([1,2,3,4])\n\nIn [4]: G.add_path([10,11,12])\n"
 },
 {
  "idx": "staqc-test-769",
  "doc": "how to dynamically read a specific cell value in a table using selenium and python",
  "code": "find_element_by_csss_selector('button.btn-success')\n"
 },
 {
  "idx": "staqc-test-770",
  "doc": "how to dynamically read a specific cell value in a table using selenium and python",
  "code": "from selenium import webdriver\nimport re\n\ndriver = webdriver.PhantomJS()\ndriver.set_window_size(1120, 550) #For bug\ndriver.get(\"http://localhost:8000\")\n\npattern = r\"\"\" \n    \\s*         #Match whitespace, 0 or more times, followed by...\n    (\\d+)       #a digit, one or more times, captured, followed by\n    \\s*         #whitespace, 0 or more times, followed by...\n    [|]         #vertical bar, followed by...\n    \\s*         #whitespace, 0 or more times, followed by...\n    \\d+         #a digit, one or more times\n\"\"\"\nregex = re.compile(pattern, re.X)\n\ntrs = driver.find_elements_by_xpath('//table[@id=\"ambassadors-for-assignment\"]/tbody/tr')\ntarget_columns = [3, 4]\n\nfor target_column in target_columns:\n    for tr in trs:\n        target_column_xpath = './td[{}]'.format(target_column)  #VARY COLUMN HERE ***\n        td = tr.find_element_by_xpath(target_column_xpath)\n        match_obj = re.match(regex, td.text)\n\n        if match_obj and match_obj.group(1) == '0':\n            button_xpath = './/button[contains(concat(\" \", normalize-space(@class), \" \"), \" btn-success \")]' \n            success_button = tr.find_element_by_xpath(button_xpath)\n            #success_button.click()\n\n            print \"column {}:\".format(target_column)\n            print match_obj.group(0)\n            print success_button.get_attribute('class')\n            print\n"
 },
 {
  "idx": "staqc-test-771",
  "doc": "Represent a class as a dict or list",
  "code": "In [1]: class A(object):\n   ...:     def __init__(self):\n   ...:        self.pairs = ((1,2),(2,3))\n   ...:     def __iter__(self):\n   ...:         return iter(self.pairs)\n   ...:     \n\nIn [2]: a = A()\n\nIn [3]: dict(a)\nOut[3]: {1: 2, 2: 3}\n"
 },
 {
  "idx": "staqc-test-772",
  "doc": "Python 3.x.x one variable spread across multiple .py files",
  "code": "# part2.py\n# gvars is defined later\ndef scream():\n print(gvars.sound)\n\n\n# part1.py\nimport part2\n\nclass GameVariables:\n    pass\n\nif __name__==\"__main__\":\n    gvars = GameVariables()\n    part2.gvars = gvars\n    gvars.sound = \"Yooo\"\n    part2.scream()\n    gvars.sound = \"Whaa\"\n    part2.scream()\n\n#output\nYooo\nWhaa\n"
 },
 {
  "idx": "staqc-test-773",
  "doc": "Converting string to datetime object in Python (GAE)?",
  "code": "In [89]: datetime.datetime.strptime(re.sub(r'\\w+ (\\d+)\\w+ of(.+)\\s+\\( (.+) \\)',r'\\1 \\2 \\3','Sunday 31st of July 2005 ( 02:05:50 PM )'),'%d %B %Y %I:%M:%S %p')\nOut[89]: datetime.datetime(2005, 7, 31, 14, 5, 50)\n"
 },
 {
  "idx": "staqc-test-774",
  "doc": "How to set the alpha value for each element of a numpy array",
  "code": "plt.imshow(np.dstack([ca_map, alpha], ...)\n"
 },
 {
  "idx": "staqc-test-775",
  "doc": "What would be a good regexp for identifying the \"original message\" prefix in gmail?",
  "code": "On([^,]+,){3}.*?wrote:\n"
 },
 {
  "idx": "staqc-test-776",
  "doc": "Django Python Shell",
  "code": "import os\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproj.settings\")\nfrom myapp.models import Stuff\n# ...\n"
 },
 {
  "idx": "staqc-test-777",
  "doc": "how to print a dict which has japanese word using python ",
  "code": "{0: 'Velmi \\xc5\\xbelu\\xc5\\xa5ou\\xc4\\x8dk\\xc3\\xbd k\\xc5\\xaf\\xc5\\x88'}\n{0: Velmi \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148}\nVelmi \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148\n"
 },
 {
  "idx": "staqc-test-778",
  "doc": "Automatically numbering and referencing Sphinx tables",
  "code": ".. _table:\n\n.. table Supertable\n\n    +--------+----+\n    |Foo     |Bar |\n    +--------+----+\n"
 },
 {
  "idx": "staqc-test-779",
  "doc": "Parallelize DictVectorizer Creation",
  "code": "from sklearn.feature_extraction FeatureHasher\nimport scipy\n\nvect = FeatureHasher(n_features=4, non_negative=True)\n\n# thread 1 \nl1 = [{'foo': 1, 'bar': 2}]\nX1 = vect.fit_transform(l1) \n# thread 2\nl2 = [{'foo': 3, 'baz': 1}]\nX2 = vect.fit_transform(l2)\n"
 },
 {
  "idx": "staqc-test-780",
  "doc": "Finding common elements from two lists of lists",
  "code": "tot_items_b = sum(1 for x in b for y in x) #total items in b\n"
 },
 {
  "idx": "staqc-test-781",
  "doc": "Getting Every File in a Directory, Python",
  "code": "for name in os.listdir(\".\"):\n    if name.endswith(\".txt\"):\n        print(name)\n"
 },
 {
  "idx": "staqc-test-782",
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['count'] = pandas.Series(range(len(df))\n"
 },
 {
  "idx": "staqc-test-783",
  "doc": "call function through variable or without parentheses in python",
  "code": "class EvaluatingName(object):\n    def __init__(self, callable):\n        self._callable = callable\n    def __call__(self):\n        return self._callable()\n    def __repr__(self):\n        return repr(self())\n\nls = EvaluatingName(os.getcwd)\n"
 },
 {
  "idx": "staqc-test-784",
  "doc": "How to create a dictionary with columns given as keys and values",
  "code": " edges = open('romEdges.txt')\n dict = {line[:1]:line[1:].split() for line in edges}\n print dict\n edges.close()\n"
 },
 {
  "idx": "staqc-test-785",
  "doc": "Build slice objetcs from subscript notation",
  "code": ">>> slice(1, 2)\nslice(1, 2, None)\n>>> slice(1, 2, 3)\nslice(1, 2, 3)\n>>>\n"
 },
 {
  "idx": "staqc-test-786",
  "doc": "Send data from c program to python program using pipe?",
  "code": "#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n\nint main (void)\n{\n    // Array to send\n    int arr[] = {2,4,6,8};\n    int len = 4;\n\n    // Create FIFO\n    char filename[] = \"fifo.tmp\";\n\n    int s_fifo = mkfifo(filename, S_IRWXU);\n    if (s_fifo != 0)\n    {\n        printf(\"mkfifo() error: %d\\n\", s_fifo);\n        return -1;\n    }\n\n    FILE * wfd = fopen(filename, \"w\");\n    if (wfd < 0)\n    {\n        printf(\"open() error: %d\\n\", wfd);\n        return -1;\n    }\n\n    // Write to FIFO\n    for (int i=0; i<len; i++)\n    {\n        int s_write = fprintf(wfd, \"%d \", arr[i]);\n\n        if (s_write < 0)\n        {\n            printf(\"fprintf() error: %d\\n\", s_write);\n            break;\n        }\n    }\n\n    // Close and delete FIFO\n    fclose(wfd);\n    unlink(filename);\n}\n"
 },
 {
  "idx": "staqc-test-787",
  "doc": "How do you check when a file is done being copied in Python?",
  "code": "while True:\n    newfiles = check_for_new_files()\n    process(newfiles)\n    time.sleep(pollinterval)\n"
 },
 {
  "idx": "staqc-test-788",
  "doc": "django-mptt get_descendants for a list of nodes",
  "code": "   from django.db.models import Q \n   import operator \n   def get_queryset_descendants(nodes, include_self=False): \n       if not nodes: \n           return Node.tree.none() \n       filters = [] \n       for n in nodes: \n           lft, rght = n.lft, n.rght \n           if include_self: \n               lft -=1 \n               rght += 1 \n           filters.append(Q(tree_id=n.tree_id, lft__gt=lft, rght__lt=rght)) \n       q = reduce(operator.or_, filters) \n       return Node.tree.filter(q) \n"
 },
 {
  "idx": "staqc-test-789",
  "doc": "How do I add a method to a class from a third-party Python module without editing the original module",
  "code": "from mpl_toolkits.basemap import Basemap, _cylproj, _pseudocyl\n"
 },
 {
  "idx": "staqc-test-790",
  "doc": "Find dictionary keys with duplicate values",
  "code": ">>> some_dict = {\"firstname\":\"Albert\",\"nickname\":\"Albert\",\"surname\":\"Likins\",\"username\":\"Angel\"}\n>>> rev_multidict = {}\n>>> for key, value in some_dict.items():\n...     rev_multidict.setdefault(value, set()).add(key)\n"
 },
 {
  "idx": "staqc-test-791",
  "doc": "How to handle multiple user type in Django",
  "code": "from django.contrib.auth.decorators import user_passes_test\n@user_pass_test(lambda u: u.get_profile().type == 'client')\ndef view_for_client(request):\n    ...\n"
 },
 {
  "idx": "staqc-test-792",
  "doc": "How to handle multiple user type in Django",
  "code": "from django.contrib.auth.models import User\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User)\n    type = models.CharField(max_length=15)\n"
 },
 {
  "idx": "staqc-test-793",
  "doc": "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?",
  "code": "def __gt__(self, other): # is self greater than other?\n    return self.value > other.value # compare value attribute\n"
 },
 {
  "idx": "staqc-test-794",
  "doc": "Executing different queries using mysql-python",
  "code": "...\nCONNECTION = MySQLdb.connect(host=..., port=...,\n                             user=..., passwd=..., db=...,\n                             cursorclass=MySQLdb.cursors.DictCursor,\n                             charset = \"utf8\")\ncursor = CONNECTION.cursor()\ncursor.execute(\"SELECT ... FROM ... WHERE ... AND some_field=%s\", (\"first\", \"amazing\", \"topic\"))\nfirst_result = cursor.fetchall()\n\ncursor.execute(\"SELECT ... FROM ... WHERE ... AND some_field=%s\", ((\"first\", \"amazing\", \"topic\")))\nsecond_result = cursor.fetchall()\n\ncursor.close()\n...\n"
 },
 {
  "idx": "staqc-test-795",
  "doc": "Drop Duplicate in market data",
  "code": ">>> df\n   Bid  Ask\n1  1.0  1.5\n2  1.0  1.5\n3  1.0  1.5\n4  1.5  2.0\n5  1.5  2.0\n6  2.0  2.5\n7  2.0  2.5\n8  2.0  3.0\n>>> df[(df != df.shift()).any(axis=1)]\n   Bid  Ask\n1  1.0  1.5\n4  1.5  2.0\n6  2.0  2.5\n8  2.0  3.0\n"
 },
 {
  "idx": "staqc-test-796",
  "doc": "Drop Duplicate in market data",
  "code": ">>> (df != df.shift()).any(axis=1)\n1     True\n2    False\n3    False\n4     True\n5    False\n6     True\n7    False\n8     True\ndtype: bool\n"
 },
 {
  "idx": "staqc-test-797",
  "doc": "How to find the index value of a variable in SPSS Python",
  "code": "varObj = datasetObj.varlist['ID']\n"
 },
 {
  "idx": "staqc-test-798",
  "doc": "How to find the index value of a variable in SPSS Python",
  "code": "varIndex = datasetObj.varlist['ID'].index\n"
 },
 {
  "idx": "staqc-test-799",
  "doc": "How to find the index value of a variable in SPSS Python",
  "code": "# Create a Variable object, specifying the variable by name\nvarObj = datasetObj.varlist['bdate']\n# Create a Variable object, specifying the variable by index\nvarObj = datasetObj.varlist[3]\n"
 },
 {
  "idx": "staqc-test-800",
  "doc": "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy",
  "code": "2.0480375425\n1.89065215839\n======================================================================\n2.0480375425\n1.89065215839\n"
 },
 {
  "idx": "staqc-test-801",
  "doc": "Python list and time",
  "code": "from datetime import datetime\ntime_list = []\ntime_list.append(datetime.now().timestamp())\n"
 },
 {
  "idx": "staqc-test-802",
  "doc": "Get the big-endian byte sequence of integer in Python",
  "code": "pip install pyjwkest\n"
 },
 {
  "idx": "staqc-test-803",
  "doc": "Numpy: averaging many datapoints at each time step",
  "code": "Create test data\nimport pandas as pd\nimport numpy as np\n\ntimes = np.random.randint(0,10,size=50)\nvalues = np.sin(times) + np.random.random_sample((len(times),))\ns = pd.Series(values, index=times)\ns.plot(linestyle='.', marker='o')\n"
 },
 {
  "idx": "staqc-test-804",
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [270]: int_colors = rgb2int(color)\nIn [270]: int_colors\nOut[270]: \narray([[      0, 8388736],\n       [  32896,     128],\n       [  32768, 8421376],\n       [8421504, 8388608]], dtype=uint32)\n"
 },
 {
  "idx": "staqc-test-805",
  "doc": "Beautiful Soup - how to fix broken tags",
  "code": "fixedString = re.sub(\">\\s*(\\!--|\\!DOCTYPE|\\\n                           a|abbr|acronym|address|applet|area|\\\n                           b|base|basefont|bdo|big|blockquote|body|br|button|\\\n                           caption|center|cite|code|col|colgroup|\\\n                           dd|del|dfn|dir|div|dl|dt|\\\n                           em|\\\n                           fieldset|font|form|frame|frameset|\\\n                           head|h1|h2|h3|h4|h5|h6|hr|html|\\\n                           i|iframe|img|input|ins|\\\n                           kbd|\\\n                           label|legend|li|link|\\\n                           map|menu|meta|\\\n                           noframes|noscript|\\\n                           object|ol|optgroup|option|\\\n                           p|param|pre|\\\n                           q|\\\n                           s|samp|script|select|small|span|strike|strong|style|sub|sup|\\\n                           table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\\\n                           u|ul|\\\n                           var)>\", \"><\\g<1>>\", s)\nbs = BeautifulSoup(fixedString)\n"
 },
 {
  "idx": "staqc-test-806",
  "doc": "Making a tree shape.",
  "code": "def tree(head, stem):\n    for i in xrange(1, head+1, 2):\n        print ('*'*i).center(head)\n    x = (head/2) if (head/2)%2 else (head/2)-1\n    for _ in xrange(stem):\n        print ('*'*x).center(head)\n\n>>> tree(12, 2)\n     *      \n    ***     \n   *****    \n  *******   \n *********  \n*********** \n   *****    \n   *****    \n>>> tree(14, 4)\n      *       \n     ***      \n    *****     \n   *******    \n  *********   \n ***********  \n************* \n   *******    \n   *******    \n   *******    \n   *******    \n"
 },
 {
  "idx": "staqc-test-807",
  "doc": "Translating regex match groups",
  "code": ">>> for name in pdfnames(names):\n...     print name\n... \n/Adobe Green\n/PANTONE 5757 CV\n/paired()parentheses\n/The_Key_of_F#_Minor\n/AB\n/Name1\n/ASomewhatLongerName\n/A;Name_With-Various***Characters?\n/1.2\n/$$\n/@pattern\n/.notdef\n"
 },
 {
  "idx": "staqc-test-808",
  "doc": "Slicing based on dates Pandas Dataframe",
  "code": "In [84]:\n\nidx = df[df['preciptotal'] > 1].index[0]\ndf.iloc[idx-3: idx+4]\nOut[84]:\n        date  store_nbr  units  preciptotal\n0 2014-10-11          1      0         0.00\n1 2014-10-12          1      0         0.01\n2 2014-10-13          1      2         0.00\n3 2014-10-14          1      1         2.13\n4 2014-10-15          1      0         0.00\n5 2014-10-16          1      0         0.87\n6 2014-10-17          1      3         0.01\n"
 },
 {
  "idx": "staqc-test-809",
  "doc": "Initialize list with same bool value",
  "code": ">>> my_list = [[10]] * 3\n>>> my_list\n[[10], [10], [10]]\n>>> my_list[0][0] = 5\n>>> my_list\n[[5], [5], [5]]\n"
 },
 {
  "idx": "staqc-test-810",
  "doc": "Accept a single string instead of normal parameters",
  "code": ">>> a = Time('now')\n>>> print vars(a)\n{'sec': 20, 'hour': 15, 'min': 18}\n>>>\n>>> a = Time(hours=19, minutes=4, seconds=5)\n>>> print vars(a)\n{'sec': 5, 'hour': 19, 'min': 4}\n"
 },
 {
  "idx": "staqc-test-811",
  "doc": "Python: use regular expression to remove the white space from all lines",
  "code": "r = re.compile(r\"^\\s+\", re.MULTILINE)\nr.sub(\"\", \"a\\n b\\n c\") # \"a\\nb\\nc\"\n\n# or without compiling (only possible for Python 2.7+ because the flags option\n# didn't exist in earlier versions of re.sub)\n\nre.sub(r\"^\\s+\", \"\", \"a\\n b\\n c\", flags = re.MULTILINE)\n\n# but mind that \\s includes newlines:\nr.sub(\"\", \"a\\n\\n\\n\\n b\\n c\") # \"a\\nb\\nc\"\n"
 },
 {
  "idx": "staqc-test-812",
  "doc": "Combine dict with same keys into one dict with list",
  "code": "def merge_books(books):\n    merged = {}\n\n    for book in books:\n        authorId = book['authorId']\n\n        # Create article attribute\n        book['articles'] = [{\n            'articles.id': book['articles.id'],\n            'authorId':    book['authorId'],\n            'Title':       book['Title'],\n        }]\n\n        # Remove redundant information\n        del book['articles.id']\n        del book['authorId']\n        del book['Title']\n\n        if authorId in merged:\n            merged[authorId]['articles'].append(book['articles'][0])\n        else:\n            merged[authorId] = book\n\n    # Convert dict into a tuple, but why not a list?\n    return tuple(merged.values())\n"
 },
 {
  "idx": "staqc-test-813",
  "doc": "Python: How to remove a list containing Nones from a list of lists?",
  "code": "my_new_list = [i for i in myList if i.count(None) < 4]\n\n[OUTPUT]\n[[3, 4, None, None, None]]\n"
 },
 {
  "idx": "staqc-test-814",
  "doc": "Writing to a specific column of a text file in python",
  "code": "arr = ['ABCD', 1, 'P', '15-06-2015', 0, 'Name of the account']\nprint \"{:16}{:<3}{:3}{:29}{:<3}{:40}\".format(*arr)\n"
 },
 {
  "idx": "staqc-test-815",
  "doc": "Filling gaps for cumulative sum with Pandas",
  "code": "In [21]: df.pivot_table(values=\"incoming\", index=pd.DatetimeIndex(df.date).to_period(\"M\"), columns=\"goods\", aggfunc=\"sum\")\nOut[21]:\ngoods     a   b   c\n2014-01   0  30 NaN\n2014-02  30 NaN  10\n2014-03 NaN  70 NaN\n2014-05 NaN  40  50\n2014-06  20 NaN NaN\n"
 },
 {
  "idx": "staqc-test-816",
  "doc": "How to place a matplotlib plot into an html container using mpld3 and flask",
  "code": "$('.btn-primary').on('click', function(){\n  var qu = {\"plot_type\":$(this).find('input').attr('id')}\n  $(this).addClass('active').siblings().removeClass('active');\n  $.ajax({\n    type: \"POST\",\n    async:true,\n    contentType: \"application/json; charset=utf-8\",\n    url: \"/query\",\n    data: JSON.stringify(qu),\n    success: function (data) {\n     var graph = $(\"#container\");\n     graph.html(data);\n     $(\"#container\").show();\n     },\n   dataType: \"html\"\n  });  \n}); \n"
 },
 {
  "idx": "staqc-test-817",
  "doc": "Beautiful soup, html table parsing",
  "code": "rows = soup.find('tbody').findAll('tr')\n\nfor row in rows:\n    cells = row.findAll('td')\n\n    output = []\n\n    for i, cell in enumerate(cells):\n        if i == 0:\n            output.append(cell.text.strip())\n        elif cell.find('img'):\n            output.append(cell.find('img')['title'])\n        elif cell.find('input'):\n            output.append(cell.find('input')['value'])\n    print output\n"
 },
 {
  "idx": "staqc-test-818",
  "doc": "How to dynamically create classes inside a module-level initialize() method in Python",
  "code": "Base = declarative_base()\n\nclass Something(Base):\n    pass\n\ndef initialize(engine):\n    Something.__table__ = Table('something', Base.metadata, autoload_with=engine)\n"
 },
 {
  "idx": "staqc-test-819",
  "doc": "How can I quickly compare a list and a set?",
  "code": "a = set((1, 3))\nb = set((2, 5))\n"
 },
 {
  "idx": "staqc-test-820",
  "doc": "How do I calculate the numeric value of a string with unicode components in python?",
  "code": "import unicodedata\ndef eval_unicode(s):\n    #sum all the unicode fractions\n    u = sum(unicodedata.numeric(i) for i in s if unicodedata.category(i)==\"No\")\n    #eval the regular digits (with optional dot) as a float, or default to 0\n    n = float(\"\".join(i for i in s if i.isdigit() or i==\".\") or 0)\n    return n+u\n"
 },
 {
  "idx": "staqc-test-821",
  "doc": "Update dictionary in xml from csv file in python",
  "code": "xml_dict.update(csv_dict)\n# xml_dict = {'ABC': '1|3|5', 'FFK': '33', 'AAC': '1|1|1', 'AAK': '1|2|8', 'DAK': '5|1|3'}\n"
 },
 {
  "idx": "staqc-test-822",
  "doc": "Iterator for all lexicographically ordered variable strings up to length n",
  "code": "from itertools import product, takewhile\ndef new(max_len_string, alphabet=range(2)):\n    alphabet = list(alphabet)\n    zero = alphabet[0]\n    for p in product(alphabet, repeat=max_len_string):\n        right_zeros = sum(1 for _ in takewhile(lambda x: x==zero, reversed(p)))\n        base = p[:-right_zeros]\n        yield from filter(None, (base+(zero,)*i for i in range(right_zeros)))\n        yield p\n"
 },
 {
  "idx": "staqc-test-823",
  "doc": "How to speed-up python nested loop?",
  "code": "In [62]: %timeit old_function(close, volume, INTERVAL_LENGTH)\n1 loops, best of 3: 53.1 s per loop\n"
 },
 {
  "idx": "staqc-test-824",
  "doc": "How to speed-up python nested loop?",
  "code": "In [61]: %timeit new_function(close, volume, INTERVAL_LENGTH)\n1 loops, best of 3: 15.7 s per loop\n"
 },
 {
  "idx": "staqc-test-825",
  "doc": "Put the result of simple tag into a variable",
  "code": "@register.assignment_tag\ndef get_current_time(format_string):\n    return datetime.datetime.now().strftime(format_string)\n"
 },
 {
  "idx": "staqc-test-826",
  "doc": "Creating a 2d Grid in Python",
  "code": "def transpose(g):\n    return zip(*g)\n"
 },
 {
  "idx": "staqc-test-827",
  "doc": "How to insert arrays into a database?",
  "code": "CREATE TABLE `dog_measurement_data` (\n  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  `dog_measurement_id` INT UNSIGNED NOT NULL,\n  `frame` INT UNSIGNED,\n  `sensor_row` INT UNSIGNED,\n  `sensor_col` INT UNSIGNED,\n  `value` NUMBER\n);\n"
 },
 {
  "idx": "staqc-test-828",
  "doc": "Faster way to read Excel files to pandas dataframe",
  "code": "#write vbscript to file\nvbscript=\"\"\"if WScript.Arguments.Count < 3 Then\n    WScript.Echo \"Please specify the source and the destination files. Usage: ExcelToCsv <xls/xlsx source file> <csv destination file> <worksheet number (starts at 1)>\"\n    Wscript.Quit\nEnd If\n\ncsv_format = 6\n\nSet objFSO = CreateObject(\"Scripting.FileSystemObject\")\n\nsrc_file = objFSO.GetAbsolutePathName(Wscript.Arguments.Item(0))\ndest_file = objFSO.GetAbsolutePathName(WScript.Arguments.Item(1))\nworksheet_number = CInt(WScript.Arguments.Item(2))\n\nDim oExcel\nSet oExcel = CreateObject(\"Excel.Application\")\n\nDim oBook\nSet oBook = oExcel.Workbooks.Open(src_file)\noBook.Worksheets(worksheet_number).Activate\n\noBook.SaveAs dest_file, csv_format\n\noBook.Close False\noExcel.Quit\n\"\"\";\n\nf = open('ExcelToCsv.vbs','w')\nf.write(vbscript.encode('utf-8'))\nf.close()\n"
 },
 {
  "idx": "staqc-test-829",
  "doc": "authentication in python script to run as root",
  "code": "Script not started as root. Running sudo..\n[sudo] password for bob:\nRunning. Your euid is 0\n"
 },
 {
  "idx": "staqc-test-830",
  "doc": "Reorder Columns by String Variable",
  "code": "import csv \n\nlabels = [\n    \"Reading Comprehension\", \"Sentence Skills\", \"Arithmetic\",\n    \"College Level Math\", \"Elementary Algebra\"\n]\n\nwith open('output.csv', 'wb') as outfile, \\\n     open('input.csv', 'rb') as infile:\n    writer = csv.writer(outfile)\n    reader = csv.reader(infile) \n\n    for row in reader: \n        head = row[:5]\n        tail = []\n        for label in labels:\n            tail.append(next((i for i in row[5:] if i.startswith(label)), \"\"))\n        writer.writerow(head + tail)\n"
 },
 {
  "idx": "staqc-test-831",
  "doc": "Python - Print a value without intterupting a loop/function",
  "code": "import signal\n\nclass Reporter(object):\n    def __init__(self):\n        self.retval = []\n\n    def handler(self,signum,frame):\n        print self.retval\n\nr = Reporter()\nsignal.signal(signal.SIGINT,r.handler)\n"
 },
 {
  "idx": "staqc-test-832",
  "doc": "Python - Print a value without intterupting a loop/function",
  "code": "import signal\nimport sys\n\ncount = 0\n\ndef handler(signum,frame):\n    global count\n    print \"Value of 'i' is\",i\n    count += 1\n    if count >= 2:\n        sys.exit(0)\n\nsignal.signal(signal.SIGINT,handler)\ni = 0\nwhile True:\n    i += 1\n"
 },
 {
  "idx": "staqc-test-833",
  "doc": "Python, remove specific columns from file",
  "coden*    Row   * Instance * test_string * test_string * test_string * test_string * test_string * test_string * test_string * string__722 * string__722 * string__722 * string__722 * string__722 * string__722 * string__722 * string__720 * string__720 * string__720 * string__720 * string__720 * string__720 * string__720 * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * string__718 * string__718 * string__718 * string__718 * string__718 * string__718 * string__718 * string__719 * string__719 * string__719 * string__719 * string__719 * string__719 * string__719 * string__723 * string__723 * string__723 * string__723 * string__723 * string__723 * string__723 * string__721 * string__721 * string__721 * string__721 * string__721 * string__721 * string__721 * another_str * another_str * another_str * another_str * another_str * another_str * another_str * another_str * another_str *\nn*        0 *        0 *           0 *    50331648 * test_string *           2 *           1 *          13 * 5.76460e+18 *           0 *    50331648 * string__722 *           2 *           1 *         606 * 5.83666e+18 *           0 *    50331648 * string__720 *           2 *           1 *         575 * 5.83666e+18 *           0 *    50331648 * HCAL_SlowDa *           2 *           1 *          36 * 5.76460e+18 *           0 *    50331648 * string__718 *           2 *           1 *         529 * 5.83666e+18 *           0 *    50331648 * string__719 *           2 *           1 *         529 * 5.83666e+18 *           0 *    50331648 * string__723 *           2 *           1 *         529 * 5.83666e+18 *           0 *    50331648 * string__721 *           2 *           1 *         529 * 5.83666e+18 *           0 *    50331648 *      212135 *       15080 *           1 *           1 *        3340 *        1057 * 1.399999976 *\n*        0 *        1 *           0 *    50331648 *             *           2 *           1 *          13 *           0 *           0 *    50331648 *             *           2 *           1 *         606 *       53440 *           0 *    50331648 *             *           2 *           1 *         575 *       53440 *           0 *    50331648 *             *           2 *           1 *          36 *           0 *           0 *    50331648 *             *           2 *           1 *         529 *       53440 *           0 *    50331648 *             *           2 *           1 *         529 *       53440 *           0 *    50331648 *             *           2 *           1 *         529 *       53440 *           0 *    50331648 *             *           2 *           1 *         529 *       53440 *           0 *    50331648 *      212135 *             *           1 *           1 *        3340 *        1057 * 1.399999976 *\n*        0 *        2 *           0 *    50331648 *             *           2 *           1 *          13 *  4294970636 *           0 *    50331648 *             *           2 *           1 *         606 * 1.09780e+16 *           0 *    50331648 *             *           2 *           1 *         575 * 1.09780e+16 *           0 *    50331648 *             *           2 *           1 *          36 * 2.70217e+16 *           0 *    50331648 *             *           2 *           1 *         529 * 1.09780e+16 *           0 *    50331648 *             *           2 *           1 *         529 * 1.09780e+16 *           0 *    50331648 *             *           2 *           1 *         529 * 1.09780e+16 *           0 *    50331648 *             *           2 *           1 *         529 * 1.09780e+16 *           0 *    50331648 *      212135 *             *           1 *           1 *        3340 *        1057 * 1.399999976 *\n*        0 *        3 *           0 *    50331648 *             *           2 *           1 *          13 *   352321545 *           0 *    50331648 *             *           2 *           1 *         606 * 2.30610e+18 *           0 *    50331648 *             *           2 *           1 *         575 * 2.30610e+18 *           0 *    50331648 *             *           2 *           1 *          36 * 7.30102e+18 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *      212135 *             *           1 *           1 *        3340 *        1057 * 1.399999976 *\n*        0 *        4 *           0 *    50331648 *             *           2 *           1 *          13 *           0 *           0 *    50331648 *             *           2 *           1 *         606 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         575 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *          36 * 2.82590e+16 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *             *           2 *           1 *         529 * 1.15294e+19 *           0 *    50331648 *      212135 *             *           1 *           1 *        3340 *        1057 * 1.399999976 *\n"
 },
 {
  "idx": "staqc-test-834",
  "doc": "Spearman rank correlation in Python with ties",
  "code": ">>> scipy.stats.spearmanr([0.3, 0.2, 0.2], [0.5, 0.6, 0.4])\n(0.0, 1.0)\n"
 },
 {
  "idx": "staqc-test-835",
  "doc": "How to display proper output when using re.findall() in python?",
  "code": "#!/usr/bin/env python3\nimport cgi\nfrom html.parser import HTMLParser\nfrom urllib.request import urlopen\n\nurl = 'http://finance.yahoo.com/q?s=GOOG'\n\ndef is_price_tag(tag, attrs):\n    return tag == 'span' and dict(attrs).get('id') == 'yfs_l84_goog'\n\nclass Parser(HTMLParser):\n    \"\"\"Extract tag's text content from html.\"\"\"\n    def __init__(self, html, starttag_callback):\n        HTMLParser.__init__(self)\n        self.contents = []\n        self.intag = None\n        self.starttag_callback = starttag_callback\n        self.feed(html)\n\n    def handle_starttag(self, tag, attrs):\n        self.intag = self.starttag_callback(tag, attrs)\n    def handle_endtag(self, tag):\n        self.intag = False\n    def handle_data(self, data):\n        if self.intag:\n            self.contents.append(data)\n\n# download and convert to Unicode\nresponse = urlopen(url)\n_, params = cgi.parse_header(response.headers.get('Content-Type', ''))\nhtml = response.read().decode(params['charset'])\n\n# parse html (extract text from the price tag)\ncontent = Parser(html, is_price_tag).contents[0]\nprint(content)\n"
 },
 {
  "idx": "staqc-test-836",
  "doc": "map array of numbers to rank efficiently in Python",
  "code": ">>> d = np.arange(1000)\n>>> random.shuffle(d)\n>>> %timeit rank1(d)\n100 loops, best of 3: 1.97 ms per loop\n>>> %timeit rank2(d)\n1 loops, best of 3: 226 ms per loop\n\n>>> d = np.arange(10000)\n>>> random.shuffle(d)\n>>> %timeit rank1(d)\n10 loops, best of 3: 32 ms per loop\n>>> %timeit rank2(d)\n1 loops, best of 3: 24.4 s per loop\n\n>>> d = np.arange(100000)\n>>> random.shuffle(d)\n>>> %timeit rank1(d)\n1 loops, best of 3: 433 ms per loop\n\n>>> d = np.arange(2000000)\n>>> random.shuffle(d)\n>>> %timeit rank1(d)\n1 loops, best of 3: 11.2 s per loop\n"
 },
 {
  "idx": "staqc-test-837",
  "doc": "Python Socket Listening",
  "code": "import socket\nimport threading\nimport sys\nhost = ''\nport = 50000\n\nclass client(threading.Thread):\n    def __init__(self, conn):\n        super(client, self).__init__()\n        self.conn = conn\n        self.data = \"\"\n\n    def run(self):\n        while True:\n            self.data = self.data + self.conn.recv(1024)\n            if self.data.endswith(u\"\\r\\n\"):\n                print self.data\n                self.data = \"\"\n\n    def send_msg(self,msg):\n        self.conn.send(msg)\n\n    def close(self):\n        self.conn.close()\n\nclass connectionThread(threading.Thread):\n    def __init__(self, host, port):\n        super(connectionThread, self).__init__()\n        try:\n            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.s.bind((host,port))\n            self.s.listen(5)\n        except socket.error:\n            print 'Failed to create socket'\n            sys.exit()\n        self.clients = []\n\n    def run(self):\n        while True:\n            conn, address = self.s.accept()\n            c = client(conn)\n            c.start()\n            c.send_msg(u\"\\r\\n\")\n            self.clients.append(c)\n            print '[+] Client connected: {0}'.format(address[0])\n\n\n\ndef main():\n    get_conns = connectionThread(host, port)\n    get_conns.start()\n    while True:\n        try:\n            response = raw_input() \n            for c in get_conns.clients:\n                c.send_msg(response + u\"\\r\\n\")\n        except KeyboardInterrupt:\n            sys.exit()\n\nif __name__ == '__main__':\n    main()\n"
 },
 {
  "idx": "staqc-test-838",
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "from PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nimport sys\n\nclass Model(QAbstractTableModel):\n    def __init__(self, parent=None, *args):\n        QAbstractTableModel.__init__(self, parent, *args)\n        self.items = ['Item_A_001','Item_A_002','Item_B_001','Item_B_002']\n\n    def rowCount(self, parent=QModelIndex()):\n        return len(self.items)       \n    def columnCount(self, parent=QModelIndex()):\n        return 1\n\n    def data(self, index, role):\n        if not index.isValid(): return QVariant()\n        elif role != Qt.DisplayRole:\n            return QVariant()\n\n        row=index.row()\n        if row<len(self.items):\n            return QVariant(self.items[row])\n        else:\n            return QVariant()\n\nclass Proxy(QSortFilterProxyModel):\n    def __init__(self):\n        super(Proxy, self).__init__()\n        self.filterActive = False\n\n    def setView(self, view):\n        self._view = view\n\n    def filterAcceptsRow(self, row, parent):\n        if self.filterActive and '_B_' in self.sourceModel().data(self.sourceModel().index(row, 0), Qt.DisplayRole).toPyObject():\n            self._view.selectRow(row)\n        return True\n\nclass MyWindow(QWidget):\n    def __init__(self, *args):\n        QWidget.__init__(self, *args)\n\n        tableModel=Model(self)               \n\n        proxyModel=Proxy()\n        proxyModel.setSourceModel(tableModel)\n\n        self.tableview=QTableView(self) \n        self.tableview.setModel(proxyModel)\n        self.tableview.horizontalHeader().setStretchLastSection(True)\n        self.tableview.setSelectionMode(QAbstractItemView.MultiSelection)\n\n        proxyModel.setView(self.tableview)\n\n        button=QPushButton(self)\n        button.setText('Select Items with B')\n        button.clicked.connect(self.clicked)\n\n        layout = QVBoxLayout(self)\n        layout.addWidget(self.tableview)\n        layout.addWidget(button)\n        self.setLayout(layout)\n\n    def clicked(self, arg):\n        proxyModel=self.tableview.model()\n        self.tableview.clearSelection()\n        proxyModel.filterActive = True\n        proxyModel.invalidateFilter()\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MyWindow()\n    w.show()\n    sys.exit(app.exec_())\n"
 },
 {
  "idx": "staqc-test-839",
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "def clicked(self, arg):\n    proxyModel=self.tableview.model()\n    self.tableview.clearSelection()\n    proxyModel.filterActive = True\n    proxyModel.invalidateFilter()\n"
 },
 {
  "idx": "staqc-test-840",
  "doc": "How to convert a python string",
  "code": ">>> '\\\\\\\\n'.decode('string_escape')\n'\\\\n'\n>>> '\\\\\\\\n'.replace('\\\\n', '\\n').replace('\\\\\\\\', '\\\\')\n'\\\\\\n'\n>>> '\\\\\\\\n'.replace('\\\\\\\\', '\\\\').replace('\\\\n', '\\n')\n'\\n'\n"
 },
 {
  "idx": "staqc-test-841",
  "doc": "repeat arange with numpy",
  "code": "def junuxx(a) :\n    b = np.array([], dtype=np.uint8)\n    for x in a:\n        b = np.append(b, np.arange(x))\n    return b\n\ndef mr_e(a) :\n    return reduce(lambda x, y: x + range(y), a, [])\n"
 },
 {
  "idx": "staqc-test-842",
  "doc": "Simple loop for all elements of an etree object?",
  "code": "from xml.etree.ElementTree as etree\n\nxml_string = \"\"\"<elem>\n    <variable id=\"getthis\" />\n    <if>\n        <variable id=\"alsoGetThis\" />\n    </if>\n    </elem>\"\"\"\n\ne = etree.fromstring(xml_string)\n\nfor node in e:\n    print node\n"
 },
 {
  "idx": "staqc-test-843",
  "doc": "Flask : How to update and render a variable periodically?",
  "code": "#!/bin/sh\n\ngunicorn -k flask_sockets.worker app:app\n"
 },
 {
  "idx": "staqc-test-844",
  "doc": "Selenium scraping with multiple urls",
  "code": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nimport pandas as pd\n\n\nurls = [\n    'http://www.oddsportal.com/hockey/austria/ebel-2014-2015/results/#/page/',\n    'http://www.oddsportal.com/hockey/austria/ebel-2013-2014/results/#/page/'\n]\n\ndata = []\n\ndriver = webdriver.PhantomJS()\ndriver.implicitly_wait(10)\nwait = WebDriverWait(driver, 10)\n\nfor url in urls:\n    for page in range(1, 8):\n        driver.get(url + str(page))\n        # wait for the page to load\n        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"div#tournamentTable tr.deactivate\")))\n\n        for match in driver.find_elements_by_css_selector(\"div#tournamentTable tr.deactivate\"):\n            home, away = match.find_element_by_class_name(\"table-participant\").text.split(\" - \")\n            date = match.find_element_by_xpath(\".//preceding::th[contains(@class, 'first2')][1]\").text\n\n            if \" - \" in date:\n                date, event = date.split(\" - \")\n            else:\n                event = \"Not specified\"\n\n            data.append({\n                \"home\": home.strip(),\n                \"away\": away.strip(),\n                \"date\": date.strip(),\n                \"event\": event.strip()\n            })\n\ndriver.close()\n\ndf = pd.DataFrame(data)\nprint(df)\n"
 },
 {
  "idx": "staqc-test-845",
  "doc": "Pre-tick specific checkbox in z3c.form list",
  "code": "from z3c.form.browser.checkbox import CheckBoxFieldWidget\nfrom z3c.form.form import Form\n\nclass EmailPreferenceForm(Form):\n\n    fields = z3c.form.field.Fields(IEmailPreference)\n    fields['email_optin'].widgetFactory = CheckBoxFieldWidget\n"
 },
 {
  "idx": "staqc-test-846",
  "doc": "Ensuring that my program is not doing a concurrent file write",
  "code": "import os\nimport time\n\n'''Find if a file was modified in the last x seconds given by writeFrequency.'''\ndef isFileBeingWrittenInto(filename, \n                       writeFrequency = 180, overheadTimePercentage = 20):\n\n    overhead = 1+float(overheadTimePercentage)/100 # Add some buffer time\n    maxWriteFrequency = writeFrequency * overhead\n    modifiedTimeStart = os.stat(filename).st_mtime # Time file last modified\n    time.sleep(writeFrequency)                     # wait writeFrequency # of secs\n    modifiedTimeEnd = os.stat(filename).st_mtime   # File modification time again\n    if 0 < (modifiedTimeEnd - modifiedTimeStart) <= maxWriteFrequency:\n        return True\n    else:\n        return False\n\nif not isFileBeingWrittenInto('fileForSafeWrites.txt'):\n    handle = open('fileForSafeWrites.txt', 'a')\n    handle.write(\"Text written safely when no one else is writing to the file\")\n    handle.close()\n"
 },
 {
  "idx": "staqc-test-847",
  "doc": "YAML list -> Python generator?",
  "code": "#/usr/bin/env python\n\nimport ruamel.yaml\n\ndef list_elements(fp, depth=0):\n    buffer = None\n    in_header = True\n    list_element_match = ' ' * depth + '- '\n    for line in fp:\n        if line.startswith('---'):\n            in_header = False\n            continue\n        if in_header:\n            continue\n        if line.startswith(list_element_match):\n            if buffer is None:\n                buffer = line\n                continue\n            yield ruamel.yaml.load(buffer)[0]\n            buffer = line\n            continue\n        buffer += line\n    if buffer:\n       yield ruamel.yaml.load(buffer)[0]\n\n\nwith open(\"foobar.yaml\") as fp:\n   for element in list_elements(fp):\n       print(str(element))\n"
 },
 {
  "idx": "staqc-test-848",
  "doc": "how do I concatenate 3 lists using a list comprehension?",
  "code": "for thing in itertools.chain(list1, list2, list3):\n    do_stuff(thing)\n"
 },
 {
  "idx": "staqc-test-849",
  "doc": "how do I concatenate 3 lists using a list comprehension?",
  "code": "allList = [x for x in itertools.chain(list1, list2, list3)]\n"
 },
 {
  "idx": "staqc-test-850",
  "doc": "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]",
  "code": "Code\nimport math, sys\n\ndef stringcount(v):\n    \"\"\"mac\"\"\"    \n    return len(bin(v)) - 3\n\ndef log_2(v):\n    \"\"\"mac\"\"\"    \n    return int(round(math.log(v, 2), 0)) # 2**101 generates 100.999999999\n\ndef log_e(v):\n    \"\"\"bp on mac\"\"\"    \n    return int(round(math.log(v)/0.69314718055994529, 0))  # 0.69 == log(2)\n\ndef bitcounter(v):\n    \"\"\"John Y on mac\"\"\"\n    r = 0\n    while v > 1 :\n        v >>= 1\n        r += 1\n    return r\n\ndef olgn(n) :\n    \"\"\"outis\"\"\"\n    if n < 1:\n        return -1\n    low = 0\n    high = sys.getsizeof(n)*8 # not the best upper-bound guesstimate, but...\n    while True:\n        mid = (low+high)//2\n        i = n >> mid\n        if i == 1:\n            return mid\n        if i == 0:\n            high = mid-1\n        else:\n            low = mid+1\n\ndef hashlookup(v):\n    \"\"\"mac on brone -- limit: v < 2**131\"\"\"\n#    def prepareTable(max_log2=130) :\n#        hash_table = {}\n#        for p in range(1, max_log2) :\n#            hash_table[2**p] = p\n#        return hash_table\n\n    global hash_table\n    return hash_table[v] \n\ndef lookup(v):\n    \"\"\"brone -- limit: v < 2**11\"\"\"\n#    def prepareTable(max_log2=10) :\n#        log2s_table=[0]*((1<<max_log2)+1)\n#        for i in range(max_log2+1):\n#            log2s_table[1<<i]=i\n#        return tuple(log2s_table)\n\n    global log2s_table\n    return log2s_table[v]\n\ndef bitwise(v):\n    \"\"\"Mark Byers -- limit: v < 2**32\"\"\"\n    b = (0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000)\n    S = (1, 2, 4, 8, 16)\n    r = 0\n    for i in range(4, -1, -1) :\n        if (v & b[i]) :\n            v >>= S[i];\n            r |= S[i];\n    return r\n\ndef unrolled_bitwise(v):\n    \"\"\"x4u on Mark Byers -- limit:   v < 2**33\"\"\"\n    r = 0;\n    if v > 0xffff : \n        v >>= 16\n        r = 16;\n    if v > 0x00ff :\n        v >>=  8\n        r += 8;\n    if v > 0x000f :\n        v >>=  4\n        r += 4;\n    if v > 0x0003 : \n        v >>=  2\n        r += 2;\n    return r + (v >> 1)\n\ndef ilog(v):\n    \"\"\"Gregory Maxwell - (Original code: B. Terriberry) -- limit: v < 2**32\"\"\"\n    ret = 1\n    m = (not not v & 0xFFFF0000) << 4;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xFF00) << 3;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xF0) << 2;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xC) << 1;\n    v >>= m;\n    ret |= m;\n    ret += (not not v & 0x2);\n    return ret - 1;\n\n\n# following table is equal to \"return hashlookup.prepareTable()\" \nhash_table = {...} # numbers have been cut out to avoid cluttering the post\n\n# following table is equal to \"return lookup.prepareTable()\" - cached for speed\nlog2s_table = (...) # numbers have been cut out to avoid cluttering the post\n"
 },
 {
  "idx": "staqc-test-851",
  "doc": "Python - read BeautifulSoup snippet by row? (or other ways of scraping the data I want)",
  "code": "<p class=\"secondary\">\n              Some address and street\n              <br />\n              City, State, ZIP\n              (some) phone-number\n             </p>\n"
 },
 {
  "idx": "staqc-test-852",
  "doc": "Using TCL extensions to set native window style in Tkinter",
  "code": "import string, win32ui, win32con\nfrom Tkinter import *\nw = Tk()\nframe = win32ui.CreateWindowFromHandle(string.atoi(w.wm_frame(), 0))\nframe.ModifyStyle(win32con.WS_CAPTION, 0, win32con.SWP_FRAMECHANGED)\n"
 },
 {
  "idx": "staqc-test-853",
  "doc": "How do I assign a variable to an object name?",
  "code": "d = dict()\n\nfor record in result:\n    objectname = 'Customer' + str(record[0])\n    customername = str(record[1])\n    d[objectname] = Customer(customername)\n\nprint d\n"
 },
 {
  "idx": "staqc-test-854",
  "doc": "Special End-line characters/string from lines read from text file, using Python",
  "code": "from random import randrange, choice\n\n\n# this part is to create an exemple file with newline being :;:\nalphabet = 'abcdefghijklmnopqrstuvwxyz '\nch = ':;:'.join(''.join(choice(alphabet) for nc in xrange(randrange(0,40)))\n                for i in xrange(50))\nwith open('fofo.txt','wb') as g:\n    g.write(ch)\n\n\n# this generator function is an iterator for a file\n# if nl receives an argument whose bool is True,\n# the newlines :;: are returned in the lines\n\ndef liner(filename,eol,lenchunk,nl=0):\n    # nl = 0 or 1 acts as 0 or 1 in splitlines()\n    L = len(eol)\n    NL = len(eol) if nl else 0\n    with open(filename,'rb') as f:\n        chunk = f.read(lenchunk)\n        tail = ''\n        while chunk:\n            last = chunk.rfind(eol)\n            if last==-1:\n                kept = chunk\n                newtail = ''\n            else:\n                kept = chunk[0:last+L]   # here: L\n                newtail = chunk[last+L:] # here: L\n            chunk = tail + kept\n            tail = newtail\n            x = y = 0\n            while y+1:\n                y = chunk.find(eol,x)\n                if y+1: yield chunk[x:y+NL] # here: NL\n                else: break\n                x = y+L # here: L\n            chunk = f.read(lenchunk)\n        yield tail\n\n\n\nfor line in liner('fofo.txt',':;:'):\n    print line\n"
 },
 {
  "idx": "staqc-test-855",
  "doc": "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?",
  "code": "In [12]: df = DataFrame(randn(10,4),columns=list('ABCD'))\n\nIn [13]: df['year'] = 2003\n\nIn [14]: df['id'] = [12,34,12,34,72,0,38,53,70,70]\nIn [16]: df.loc[:5,'year'] = 2004\n\nIn [17]: df\nOut[17]: \n          A         B         C         D  year  id\n0 -1.917262  0.228599 -0.463695  0.776567  2004  12\n1  2.064658 -0.716104 -1.399685  0.402077  2004  34\n2 -1.282627  0.338368  0.757658 -0.114086  2004  12\n3  1.190319 -1.592282  0.942431 -0.778128  2004  34\n4  1.928094  0.532387 -0.352155 -0.039304  2004  72\n5  0.535093 -1.655569 -0.309651  0.438992  2004   0\n6  0.332428 -0.427696 -1.324072  2.158907  2003  38\n7 -1.343306 -0.288373  0.544344 -1.361189  2003  53\n8  0.959273 -0.420134  0.691108 -0.469833  2003  70\n9  0.692352  0.101226 -0.161140 -0.100968  2003  70\n"
 },
 {
  "idx": "staqc-test-856",
  "doc": "How to determine type of nested data structures in Python?",
  "code": "1 : int\n2.3 : float\nNone : (none)\nFalse : bool\n'hello' : str\n[1, 2, 3] : list<int>\n['a', 'b'] : list<str>\n[1, 'h'] : list<?>\n(False, 1, '2') : tuple<bool, int, str>\nset([2.3, 1.2, 3.4]) : set<float>\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] : list<list<int>>\n[(1, 'a'), (2, 'b')] : list<tuple<int, str>>\n{1: 'b', 2: 'c'} : dict<int, str>\n[<__main__.Foo object at 0x101de6c50>] : list<Foo>\n"
 },
 {
  "idx": "staqc-test-857",
  "doc": "Faster alternative to for loop in for loop",
  "code": ">>> alphabet = set('abcdef01234567890')\n>>> compute_neighborhoods(data, alphabet)\n>>> data\n{'0a': [4, []],\n '1f': [9, [6]],\n '27': [3, [1]],\n '32': [8, [5, 6]],\n '3f': [6, [8, 9]],\n '47': [1, [3]],\n '7c': [2, []],\n 'a1': [0, []],\n 'c8': [7, []],\n 'e2': [5, [8]]}\n"
 },
 {
  "idx": "staqc-test-858",
  "doc": "Weighted random choice from a variable length text file",
  "code": "import bisect\nimport random\ntry:\n    from itertools import accumulate     # Python >= 3.2\nexcept ImportError:\n    def accumulate(weights):\n        accumulator = 0\n        for w in weights:\n            accumulator += w\n            yield accumulator\n\ndef count(iterable):\n    return sum(1 for elem in iterable)\n\ndef get_nth(iterable, n):\n    assert isinstance(n, int), \"n must be an integer, got %r\" % type(n)\n    assert n > 0, \"n must be greater than 0, got %r\" % n\n    for i, elem in enumerate(iterable, 1):\n        if i == n:\n            return elem\n\ndef weighted_select(filename):\n    with open(filename) as f:\n        n = count(f)\n        if n == 0:\n            return None\n\n        # set up cumulative distribution\n        weights = range(n, 0, -1)\n        cumulative_dist = list(accumulate(weights))\n\n        # select line number\n        x = random.random() * cumulative_dist[-1]\n        selected_line = bisect.bisect(cumulative_dist, x)\n\n        # retrieve line from file\n        f.seek(0)\n        return get_nth(f, selected_line + 1)    # N.B. +1 for nth line\n"
 },
 {
  "idx": "staqc-test-859",
  "doc": "A way to get the path to the user installed packages on Linux and OS X operating systems? (Usable for Python versions between 2.5 - 2.7)",
  "code": "import os\nimport sys\nfrom distutils.errors import DistutilsPlatformError\n\n\nPREFIX = os.path.normpath(sys.prefix)\nEXEC_PREFIX = os.path.normpath(sys.exec_prefix)\n\n\ndef get_python_version():\n    \"\"\"Return a string containing the major and minor Python version,\n    leaving off the patchlevel.  Sample return values could be '1.5'\n    or '2.2'.\n    \"\"\"\n    return sys.version[:3]\n\ndef get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    \"\"\"Return the directory containing the Python library (standard or\n    site additions).\n\n    If 'plat_specific' is true, return the directory containing\n    platform-specific modules, i.e. any module from a non-pure-Python\n    module distribution; otherwise, return the platform-shared library\n    directory.  If 'standard_lib' is true, return the directory\n    containing standard Python library modules; otherwise, return the\n    directory for site-specific modules.\n\n    If 'prefix' is supplied, use it instead of sys.prefix or\n    sys.exec_prefix -- i.e., ignore 'plat_specific'.\n    \"\"\"\n    if prefix is None:\n        prefix = plat_specific and EXEC_PREFIX or PREFIX\n\n    if os.name == \"posix\":\n        libpython = os.path.join(prefix,\n                                 \"lib\", \"python\" + get_python_version())\n        if standard_lib:\n            return libpython\n        else:\n            return os.path.join(libpython, \"site-packages\")\n\n    elif os.name == \"nt\":\n        if standard_lib:\n            return os.path.join(prefix, \"Lib\")\n        else:\n            if get_python_version() < \"2.2\":\n                return prefix\n            else:\n                return os.path.join(prefix, \"Lib\", \"site-packages\")\n\n    elif os.name == \"os2\":\n        if standard_lib:\n            return os.path.join(prefix, \"Lib\")\n        else:\n            return os.path.join(prefix, \"Lib\", \"site-packages\")\n\n    else:\n        raise DistutilsPlatformError(\n            \"I don't know where Python installs its library \"\n            \"on platform '%s'\" % os.name)\n"
 },
 {
  "idx": "staqc-test-860",
  "doc": "Pygame draw anti-aliased thick line",
  "code": "UL = (center_L1[0] + (length / 2.) * cos(angle) - (thickness / 2.) * sin(angle),\n      center_L1[1] + (thickness / 2.) * cos(angle) + (length / 2.) * sin(angle))\nUR = (center_L1[0] - (length / 2.) * cos(angle) - (thickness / 2.) * sin(angle),\n      center_L1[1] + (thickness / 2.) * cos(angle) - (length / 2.) * sin(angle))\nBL = (center_L1[0] + (length / 2.) * cos(angle) + (thickness / 2.) * sin(angle),\n      center_L1[1] - (thickness / 2.) * cos(angle) + (length / 2.) * sin(angle))\nBR = (center_L1[0] - (length / 2.) * cos(angle) + (thickness / 2.) * sin(angle),\n      center_L1[1] - (thickness / 2.) * cos(angle) - (length / 2.) * sin(angle))\n"
 },
 {
  "idx": "staqc-test-861",
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "Full Example\n########################\n# models.py\n########################\nFEMALE = 'F'\nMALE = 'M'\n\nclass Teacher(models.Model):\n    \"\"\"\n    Halaqat teachers information\n    \"\"\"\n    GENDER_CHOICES = (\n        (MALE, _('Male')),\n        (FEMALE, _('Female')),\n    )\n    gender = models.CharField(max_length=1, verbose_name=_('Gender'),\n                              choices=GENDER_CHOICES)\n    civil_id = models.CharField(max_length=12, verbose_name=_('Civil ID'))\n    phone_number = models.CharField(max_length=15,\n                                    verbose_name=_('Phone Number'))\n    job_title = models.CharField(max_length=15, verbose_name=_('Title'))\n    user = models.OneToOneField(to=User, related_name='teacher_profile')\n\n    def enable(self):\n        \"\"\"\n        Enable teacher profile\n        :return:\n        \"\"\"\n        self.user.is_active = True\n        self.user.save()\n\n    def disable(self):\n        \"\"\"\n        Disable teacher profile\n        :return:\n        \"\"\"\n        self.user.is_active = False\n        self.user.save()\n\n    def get_absolute_url(self):\n        return reverse('teacher_details', args=(self.pk,))\n\n########################\n# views.py\n########################\nclass TeacherCreation(SuccessMessageMixin, CreateView):\n    \"\"\"\n    Creates new teacher\n    \"\"\"\n    template_name = 'back_office/teacher_form.html'\n    form_class = TeacherForm\n    model = Teacher\n    second_form_class = UserCreationForm\n    success_message = 'Teacher profile saved successfully'\n\n    def get_context_data(self, **kwargs):\n        context = super(TeacherCreation, self).get_context_data(**kwargs)\n\n        context['user_form'] = self.second_form_class\n\n        return context\n\n    def form_valid(self, form):\n        user_form = UserCreationForm(self.request.POST)\n        if user_form.is_valid():\n            user = user_form.save()\n            teacher = form.save(commit=False)\n            teacher.user_id = user.id\n            teacher.save()\n        return HttpResponseRedirect(self.get_success_url())\n\nclass TeacherUpdate(SuccessMessageMixin, UpdateView):\n    \"\"\"\n    Update teacher profile\n    \"\"\"\n    model = Teacher\n    template_name = 'back_office/teacher_form.html'\n    form_class = TeacherForm\n    second_form_class = UserChangeForm\n    success_message = 'Teacher profile saved successfully'\n\n    def get_context_data(self, **kwargs):\n        context = super(TeacherUpdate, self).get_context_data(**kwargs)\n\n        context['user_form'] = self.second_form_class(self.request.POST or None, instance=self.object.user)\n\n        return context\n\n    def form_valid(self, form):\n        user_form = UserChangeForm(self.request.POST, instance=self.object.user)\n        if user_form.is_valid():\n            user_form.save()\n        return super(TeacherUpdate, self).form_valid(form)\n\n########################\n# teacher_form.html\n########################\n{% extends 'back_office/back_office_base.html' %}\n{% load crispy_forms_tags %}\n{% block title %}\n    New Teacher Form\n{% endblock %}\n{% block container %}\n    <form method=\"post\">{% csrf_token %}\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">Teacher Information</h3>\n            </div>\n            <div class=\"panel-body\">\n                {{ user_form|crispy }}\n                {{ form|crispy }}\n                <button class=\"btn btn-primary\" type=\"submit\">\n                    <span class=\"glyphicon glyphicon-floppy-disk\" aria-hidden=\"true\"></span>\n                            Save\n                </button>\n            </div>\n        </div>\n    </form>\n{% endblock %}\n"
 },
 {
  "idx": "staqc-test-862",
  "doc": "Pandas dataframe : Multiple Time/Date columns to single Date index",
  "code": "         date          brand  sales\n0  2014-01-31    PrinterBlue    242\n1  2014-02-28    PrinterBlue    670\n2  2014-03-31    PrinterBlue    142\n3  2014-04-30    PrinterBlue    571\n4  2014-05-31    PrinterBlue    826\n5  2014-06-30    PrinterBlue    515\n6  2014-07-31    PrinterBlue    568\n7  2014-08-31    PrinterBlue     90\n8  2014-09-30    PrinterBlue    652\n9  2014-10-31    PrinterBlue    488\n10 2014-11-30    PrinterBlue    671\n11 2014-12-31    PrinterBlue    767\n12 2014-01-31  PrinterBetter    294\n13 2014-02-28  PrinterBetter     77\n14 2014-03-31  PrinterBetter     59\n15 2014-04-30  PrinterBetter    373\n16 2014-05-31  PrinterBetter    228\n17 2014-06-30  PrinterBetter    708\n18 2014-07-31  PrinterBetter     16\n19 2014-08-31  PrinterBetter    542\n20 2014-09-30  PrinterBetter    577\n21 2014-10-31  PrinterBetter    141\n22 2014-11-30  PrinterBetter    358\n23 2014-12-31  PrinterBetter    290\n"
 },
 {
  "idx": "staqc-test-863",
  "doc": "Comparing items in large list - finding items differing in 1 letter by length - Python",
  "code": "from collections import defaultdict\nfrom itertools import izip, tee\nimport os\nimport sys\n\n# http://en.wikipedia.org/wiki/Hamming_distance#Algorithm_example\ndef hamming_distance(s1, s2):\n    \"\"\" Count number of mismatched characters in equal length strings. \"\"\"\n    if not isinstance(s1, basestring): raise ValueError('s1 is not a string')\n    if not isinstance(s2, basestring): raise ValueError('s2 is not a string')\n    if len(s1) != len(s2): raise ValueError('string lengths do not match')\n    return sum(a != b for a, b in izip(s1, s2))\n\ndef pairwise(iterable):  # itertools recipe\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return izip(a, b)\n\ninp = sys.argv[1]  # Input file\n\nunique = defaultdict(list)\nwith open(inp, 'rb') as file:\n    for fields in (line.strip().split('-') for line in file):\n        id = '-'.join(fields[:-1])  # recombine all but last field into an id\n        unique[id].append(fields[-1])  # accumulate ending fields with same id\n\nfor id in sorted(unique):\n    final_fields = unique[id]\n    final_fields.sort(key=lambda field: len(field))  # sort by length\n    print id + ':' + '-'.join(final_fields)\n    if len(final_fields) > 1:  # at least one pair to compare for mismatches?\n        for a, b in pairwise(final_fields):\n            if len(a) == len(b) and hamming_distance(a, b) < 2:\n                print '  {!r} and {!r} differ by < 2 characters'.format(a, b)\n"
 },
 {
  "idx": "staqc-test-864",
  "doc": "Insert nested value in mongodb using python",
  "code": "for message in mbox:\n    post = { \n       'From' : message['From'],\n       'To' : message['To'],\n       'Date' : message['Date'],\n       'Subject' : message['subject'],\n       'Body' : getbody(message)\n    }\n    stackf = getattachements(message)\n    if len(stackf) > 0:\n        mapped = map(lambda x: { \"OrginalName\": x[0], \"ExportPath\": x[1] }, stackf )\n        post['Attachement'] = mapped\n\n    collection.insert_one(post)\n"
 },
 {
  "idx": "staqc-test-865",
  "doc": "Changing number representation in IDLE",
  "code": ">>> help(sys.displayhook)\nHelp on built-in function displayhook in module sys:\n\ndisplayhook(...)\n    displayhook(object) -> None\n\n    Print an object to sys.stdout and also save it in builtins._\n"
 },
 {
  "idx": "staqc-test-866",
  "doc": "Delete \"usr/lib/python2.7\" byMistake, how to fix it?",
  "code": "$ dpkg -S /usr/lib/python2.7\npython-qgis, python-gdal, python-psycopg2, python-pyspatialite, youtube-dl, virtualbox, duplicity, bzr-git, bzr-builddeb, debconf, ipython, libpython2.7-minimal:i386, libpython2.7-dev:i386, tahoe-lafs, seascope, samba, qbzr, python2.7, python-zope.interface, python-zfec, python-yaml, python-xdg, python-xapian, python-wxversion, python-wxgtk2.8, python-ws4py, python-webob, python-wadllib, python-vipscc, python-utidylib, python-usb, python-urllib3, python-tz, python-twisted, python-twisted-words, python-twisted-web, python-twisted-runner, python-twisted-news, python-twisted-names, python-twisted-mail, python-twisted-lore, python-twisted-core, python-twisted-conch, python-twisted-bin, python-tk, python-tdb, python-talloc, python-support, python-subversion, python-sphinx, python-software-properties, python-six, python-sip, python-simplejson, python-simplegeneric, python-setuptools, python-setools, python-serial, python-sepolicy, python-sepolgen, python-semanage, python-selinux, python-secretstorage, python-scipy, python-samba, python-routes, python-roman, python-requests, python-repoze.lru, python-reportlab, python-reportlab-accel, python-renderpm, python-radare2, python-qt4, python-qt4-gl, python-qscintilla2, python-pyvorbis, python-pytools, python-pysqlite2, python-pyside.qtxml, python-pyside.qtwebkit, python-pyside.qtuitools, python-pyside.qttest, python-pyside.qtsvg, python-pyside.qtsql, python-pyside.qtscript, python-pyside.qtopengl, python-pyside.qtnetwork, python-pyside.qthelp, python-pyside.qtgui, python-pyside.qtdeclarative, python-pyside.qtcore, python-pyside.phonon, python-pyparsing, python-pyopencl, python-pygments, python-pygame, python-pycurl, python-pycryptopp, python-pyaudio, python-pyasn1, python-poppler-qt4, python-ply, python-pkg-resources, python-pivy, python-pip, python-pil, python-pexpect, python-paramiko, python-pam, python-openssl, python-opengl, python-opencv, python-ogg, python-oauthlib, python-oauth, python-numpy, python-ntdb, python-newt, python-nevow, python-networkx, python-netifaces, python-mysqldb, python-musicbrainz, python-mock, python-mechanize, python-markupsafe, python-markdown, python-mako, python-magic, python-lxml, python-libxml2, python-ldb, python-lazr.uri, python-lazr.restfulclient, python-launchpadlib, python-keyring, python-jinja2, python-ipy, python-imaging, python-httplib2, python-html5lib, python-gtk2, python-gst0.10, python-gst0.10-rtsp, python-gpgme, python-gobject-2, python-glade2, python-gi, python-freenect, python-foolscap, python-feedparser, python-fastimport, python-eyed3, python-enchant, python-egenix-mxtools, python-egenix-mxdatetime, python-ecdsa, python-dulwich, python-docutils, python-docopt, python-dnspython, python-distro-info, python-distlib, python-decorator, python-debian, python-dbus, python-dateutil, python-cssutils, python-cssselect, python-crypto, python-configobj, python-colorama, python-collada, python-cherrypy3, python-chardet, python-bzrlib, python-bluez, python-beautifulsoup, python-audit, python-apt, python-apsw, policycoreutils, mercurial, mercurial-common, lsb-release, iotop, hugin-tools, hplip, frescobaldi, libpython2.7:i386, libpython2.7-stdlib:i386, dblatex, cython, cfv, bzr-upload, bzr-search, bzr-pipeline, bzr-loom, bzr-explorer: /usr/lib/python2.7\n"
 },
 {
  "idx": "staqc-test-867",
  "doc": "Updating a dict which is stored in an array",
  "code": "In [89]: from collections import Counter\n\nIn [90]: s=r'So I have an array of words, stored as key value pairs. Now I am trying to count the frequency of words in an array of strings, tokens. I have tried the following but this doesnt find the index of x as it is only a string. I do not have the corresponding value, if any, of x in tokens array. Is there any way to directly access it rather than adding one more loop to find it first?'\n\nIn [91]: tokens=s.split()\n\nIn [92]: c=Counter(tokens)\n\nIn [93]: print c\nCounter({'of': 5, 'I': 4, 'the': 4, 'it': 3, 'have': 3, 'to': 3, 'an': 2, 'as': 2, 'in': 2, 'array': 2, 'find': 2, 'x': 2, 'value,': 1, 'words': 1, 'do': 1, 'there': 1, 'is': 1, 'am': 1, 'frequency': 1, 'if': 1, 'string.': 1, 'index': 1, 'one': 1, 'directly': 1, 'tokens.': 1, 'any': 1, 'access': 1, 'only': 1, 'array.': 1, 'way': 1, 'doesnt': 1, 'Now': 1, 'words,': 1, 'more': 1, 'a': 1, 'corresponding': 1, 'tried': 1, 'than': 1, 'adding': 1, 'strings,': 1, 'but': 1, 'tokens': 1, 'So': 1, 'key': 1, 'first?': 1, 'not': 1, 'trying': 1, 'pairs.': 1, 'count': 1, 'this': 1, 'Is': 1, 'value': 1, 'rather': 1, 'any,': 1, 'stored': 1, 'following': 1, 'loop': 1})\n\nIn [94]: c['of']\nOut[94]: 5\n"
 },
 {
  "idx": "staqc-test-868",
  "doc": "Merge every Every 6 dictionary into single dictionary of List",
  "code": "lst=[\n{'field_id': u'36908'},{'field_name': u'Code'},{'field_value': u'900321'},\n{'field_id': u'36909'},{'field_name': u'Description'}, {'field_value': u'TIG 2.4MM TUNGSTEN (EACH ROD)'},\n{'field_id': u'36910'}, {'field_name': u'Quantity'}, {'field_value': u'2'},\n{'field_id': u'36911'}, {'field_name': u'Price'}, {'field_value': u'21.00'},\n{'field_id': u'36912'}, {'field_name': u'Line Total'}, {'field_value': u'42.00'},\n{'field_id': u'36908'}, {'field_name': u'Code'}, {'field_value': u'92.01.15.08'},\n{'field_id': u'36909'}, {'field_name': u'Description'}, {'field_value': u'BINZEL .8MM MIG TIPS MB15'},\n{'field_id': u'36910'}, {'field_name': u'Quantity'}, {'field_value': u'6'},\n{'field_id': u'36911'}, {'field_name': u'Price'}, {'field_value': u'2.60'},\n{'field_id': u'36912'}, {'field_name': u'Line Total'}, {'field_value': u'15.60'}]\n\nnew_lst=[] # List to save output\ndic={} # Temporary dictionary to create output dictionary \ncount=0 # Count variable to count the list element\ndef iterating_list(lst): # Function to iterate over list\n    for value in lst:\n        yield value\niterating=iterating_list(lst)\n\nfor value in iterating :\n    if value.get('field_name'): # If `field_name` matches in the given lists \n    #By default get method return `None` when there is no given key\n        dic.update({value.get('field_name'):next(iterating).get('field_value')})\n        count+=1\n    if count==5: # Resetting when count reaches to 5 \n        count=0\n        new_lst.append(dic)\n        dic={}\nprint new_lst\n"
 },
 {
  "idx": "staqc-test-869",
  "doc": "Sum grouped Pandas dataframe by single column",
  "code": "print test.groupby(['GroupID','Sample','SampleMeta']).sum().reset_index(level=2)\n\n               SampleMeta  Value\nGroupID Sample                  \n1       S1        S1_meta      2\n2       S2        S2_meta      1\n"
 },
 {
  "idx": "staqc-test-870",
  "doc": "Pyyaml - Using different styles for keys and integers and strings",
  "code": "main:\n  directory:\n    options:\n      directive: options\n      item:\n        options: Stuff OtherStuff MoreStuff\n  directoryindex:\n    item:\n      directoryindex: stuff.htm otherstuff.htm morestuff.html\n  fileetag:\n    item:\n      fileetag: Stuff\n  keepalive:\n    item:\n      keepalive: Stuff\n  keepalivetimeout:\n    item:\n      keepalivetimeout: 400\n"
 },
 {
  "idx": "staqc-test-871",
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": ">>> x = list((v[:3], v[3:]) for v in l)\n>>> x\n[('foo', 'bar'), ('foo', 'foo'), ('foo', 'bar'), ('bar', 'foo')]\n"
 },
 {
  "idx": "staqc-test-872",
  "doc": "Executing Ipython Script from System Shell",
  "code": "#! ipython\n"
 },
 {
  "idx": "staqc-test-873",
  "doc": "Populating a table in PyQt with file attributes",
  "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nfrom PyQt4 import QtCore, QtGui\n\n\nclass MainWindow(QtGui.QWidget):\n\n    def __init__(self, parent=None):\n\n        self.fileheader_fields=(\n            \"filetype\",\"fileversion\",\"numframes\",\n            \"framerate\",\"resolution\",\"numbeams\",\n            \"samplerate\",\"samplesperchannel\",\"receivergain\",\n            \"windowstart\",\"winlengthsindex\",\"reverse\",\n            \"serialnumber\",\"date\",\"idstring\",\"ID1\",\"ID2\",\n            \"ID3\",\"ID4\",\"framestart\",\"frameend\",\"timelapse\",\n            \"recordInterval\",\"radioseconds\",\"frameinterval\",\"userassigned\"\n        )\n        # just for test\n        self.fileheader = {field: 'value of ' + field \n                           for field in self.fileheader_fields}\n        super(MainWindow, self).__init__(parent)\n        self.table_widget = QtGui.QTableWidget()\n        layout = QtGui.QVBoxLayout()\n        layout.addWidget(self.table_widget)\n        self.setLayout(layout)\n        self.populate()\n\n    def populate(self):\n        self.table_widget.setRowCount(len(self.fileheader_fields))\n        self.table_widget.setColumnCount(2)\n        self.table_widget.setHorizontalHeaderLabels(['name', 'value'])\n        for i, field in enumerate(self.fileheader_fields):\n            name = QtGui.QTableWidgetItem(field)\n            value = QtGui.QTableWidgetItem(self.fileheader[field])\n            self.table_widget.setItem(i, 0, name)\n            self.table_widget.setItem(i, 1, value)\n\n\nif __name__ == \"__main__\":\n    app = QtGui.QApplication(sys.argv)\n    wnd = MainWindow()\n    wnd.resize(640, 480)\n    wnd.show()\n    sys.exit(app.exec_())\n"
 },
 {
  "idx": "staqc-test-874",
  "doc": "Base-2 (Binary) Representation Using Python",
  "code": "def bin(x):\n    if x == 0: \n        return '0' #Special case: Don't strip leading zero if no other digits\n    elif x < 0:\n        sign='-'\n        x*=-1\n    else:\n        sign = ''\n    l=[]\n    while x:\n        l.append(_conv_table[x & 0xff])\n        x >>= 8\n    return sign + ''.join(reversed(l)).lstrip(\"0\")\n"
 },
 {
  "idx": "staqc-test-875",
  "doc": "python mock patch top level packages",
  "code": "m = mock_open()\nwith patch('__main__.open', m, create=True):\n"
 },
 {
  "idx": "staqc-test-876",
  "doc": "Finding matching submatrices inside a matrix",
  "code": "c = signal.fftconvolve(a, numpy.fliplr(numpy.flipud(b)), 'valid')\n"
 },
 {
  "idx": "staqc-test-877",
  "doc": "Choosing a box of data points from a plot",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RectangleSelector\n\ndef main():\n    x, y, z = np.random.random((3, 100))\n    z *= 10\n    fig, axes = plt.subplots(figsize=(6, 8), nrows=2, sharex=True)\n    axes[0].scatter(x, y, color='black')\n    axes[1].scatter(x, z, color='black')\n    axes[0].set(ylabel='Y')\n    axes[1].set(xlabel='X', ylabel='Y')\n\n    highlighter = Highlighter(axes, x, y, z)\n    plt.show()\n\n    selected_regions = highlighter.mask\n    print x[~selected_regions], y[~selected_regions], z[~selected_regions]\n\nclass Highlighter(object):\n    def __init__(self, axes, x, y, z):\n        self.axes = axes\n        self.canvas = axes[0].figure.canvas\n        self.x, self.y, self.z = x, y, z\n        self.mask = np.zeros(x.shape, dtype=bool)\n\n        self._highlights = [ax.scatter([], [], s=200, color='yellow', zorder=10)\n                               for ax in axes]\n\n        self._select1 = RectangleSelector(axes[0], self.select_xy, useblit=True)\n        self._select2 = RectangleSelector(axes[1], self.select_xz, useblit=True)\n\n    def select_xy(self, event1, event2):\n        self.mask |= self.inside(event1, event2, self.x, self.y)\n        self.update()\n\n    def select_xz(self, event1, event2):\n        self.mask |= self.inside(event1, event2, self.x, self.z)\n        self.update()\n\n    def update(self):\n        xy = np.column_stack([self.x[self.mask], self.y[self.mask]])\n        self._highlights[0].set_offsets(xy)\n\n        xz = np.column_stack([self.x[self.mask], self.z[self.mask]])\n        self._highlights[1].set_offsets(xz)\n\n        self.canvas.draw()\n\n    def inside(self, event1, event2, x, y):\n        x0, x1 = sorted([event1.xdata, event2.xdata])\n        y0, y1 = sorted([event1.ydata, event2.ydata])\n        return (x > x0) & (x < x1) & (y > y0) & (y < y1)\n\nmain()\n"
 },
 {
  "idx": "staqc-test-878",
  "doc": "Choosing a box of data points from a plot",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import RectangleSelector\n\ndef main():\n    x, y = np.random.random((2, 100))\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, color='black')\n    highlighter = Highlighter(ax, x, y)\n    plt.show()\n\n    selected_regions = highlighter.mask\n    # Print the points _not_ selected\n    print x[~selected_regions], y[~selected_regions]\n\nclass Highlighter(object):\n    def __init__(self, ax, x, y):\n        self.ax = ax\n        self.canvas = ax.figure.canvas\n        self.x, self.y = x, y\n        self.mask = np.zeros(x.shape, dtype=bool)\n\n        self._highlight = ax.scatter([], [], s=200, color='yellow', zorder=10)\n\n        self.selector = RectangleSelector(ax, self, useblit=True)\n\n    def __call__(self, event1, event2):\n        self.mask |= self.inside(event1, event2)\n        xy = np.column_stack([self.x[self.mask], self.y[self.mask]])\n        self._highlight.set_offsets(xy)\n        self.canvas.draw()\n\n    def inside(self, event1, event2):\n        \"\"\"Returns a boolean mask of the points inside the rectangle defined by\n        event1 and event2.\"\"\"\n        # Note: Could use points_inside_poly, as well\n        x0, x1 = sorted([event1.xdata, event2.xdata])\n        y0, y1 = sorted([event1.ydata, event2.ydata])\n        mask = ((self.x > x0) & (self.x < x1) &\n                (self.y > y0) & (self.y < y1))\n        return mask\n\nmain()\n"
 },
 {
  "idx": "staqc-test-879",
  "doc": "Smart filter with python",
  "code": "#!/usr/bin/env python\nimport re\nfrom trieMatch import PrefixMatch # https://gist.github.com/736416\n\npm = PrefixMatch(['YELLOW', 'GREEN', 'RED', ]) # huge list of 10 000 members\n# if list is static, it might be worth picking \"pm\" to avoid rebuilding each time\n\nf = open(\"huge_file.txt\", \"r\") ## file with > 100 000 lines\nlines = f.readlines()\nf.close()\n\nregexp = re.compile(r'^.*?fruit=([A-Z]+)')\nfiltered = (line for line in lines if pm.match(regexp.match(line).group(1)))\n"
 },
 {
  "idx": "staqc-test-880",
  "doc": "Delete newline / return carriage in file output",
  "code": "aqua:test$ cat wordlist.txt \nTesting\n\nThis\n\nWordlist\n\nWith\n\nReturns\n\nBetween\n\nLines\n"
 },
 {
  "idx": "staqc-test-881",
  "doc": "How to add date and time information to time series data using python numpy or pandas",
  "code": ">>> x = pd.Series(np.random.randint(8,24,23892344)) # make some random data\n>>> when = pd.date_range(start=pd.datetime(2013,1,1),freq='S',periods=len(x))\n>>> when\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00, ..., 2013-10-04 12:45:43]\nLength: 23892344, Freq: S, Timezone: None\n"
 },
 {
  "idx": "staqc-test-882",
  "doc": "Sort generated numbers using another python generator",
  "code": ">>> import heapq\n>>> list(heapq.merge(l1, l2, l3))\n[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]\n"
 },
 {
  "idx": "staqc-test-883",
  "doc": "Two corresponding y-axis",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib import scale as mscale\nfrom matplotlib import transforms as mtransforms\n\nclass MagScale(mscale.ScaleBase):\n    name = 'mag'\n\n    def __init__(self, axis, **kwargs):\n        mscale.ScaleBase.__init__(self)\n        self.thresh = None #thresh\n\n    def get_transform(self):\n        return self.MagTransform(self.thresh)\n\n    def set_default_locators_and_formatters(self, axis):\n        pass\n\n    class MagTransform(mtransforms.Transform):\n        input_dims = 1\n        output_dims = 1\n        is_separable = True\n\n        def __init__(self, thresh):\n            mtransforms.Transform.__init__(self)\n            self.thresh = thresh\n\n        def transform_non_affine(self, mag):\n            return 10**((np.array(mag) -1)/(-2.5))\n\n        def inverted(self):\n            return MagScale.InvertedMagTransform(self.thresh)\n\n    class InvertedMagTransform(mtransforms.Transform):\n        input_dims = 1\n        output_dims = 1\n        is_separable = True\n\n        def __init__(self, thresh):\n            mtransforms.Transform.__init__(self)\n            self.thresh = thresh\n\n        def transform_non_affine(self, flux):\n            return -2.5 * np.log10(np.array(flux)) + 1.\n\n        def inverted(self):\n            return MagScale.MagTransform(self.thresh)\n\n\n\ndef flux_to_mag(flux):\n    return  -2.5 * np.log10(flux) + 1\n\n\nmscale.register_scale(MagScale)\n"
 },
 {
  "idx": "staqc-test-884",
  "doc": "insert into sqlite table with unique column",
  "code": "import sqlite3\n\ndef insert_or_replace():\n    # https://sqlite.org/lang_insert.html\n    connection=sqlite3.connect(':memory:')\n    cursor=connection.cursor()\n    cursor.execute('CREATE TABLE foo (bar INTEGER UNIQUE, baz INTEGER)')\n    cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))\n    cursor.execute('INSERT OR REPLACE INTO foo (bar,baz) VALUES (?, ?)',(1,3))\n    cursor.execute('SELECT * from foo')\n    data=cursor.fetchall()\n    print(data)\n    # [(1, 3)]\n\n\ndef on_conflict():\n    # https://sqlite.org/lang_insert.html\n    connection=sqlite3.connect(':memory:')\n    cursor=connection.cursor()\n    cursor.execute('CREATE TABLE foo (bar INTEGER UNIQUE, baz INTEGER)')\n    cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))\n    cursor.execute('INSERT OR IGNORE INTO foo (bar,baz) VALUES (?, ?)',(1,3))\n    cursor.execute('SELECT * from foo')\n    data=cursor.fetchall()\n    print(data)\n    # [(1, 2)]    \n\ninsert_or_replace()\non_conflict()\n"
 },
 {
  "idx": "staqc-test-885",
  "doc": "Numpy union arrays in order",
  "code": "In [1]: a = numpy.arange(0, 30000, 3)\nIn [2]: b = numpy.arange(1, 30000, 3)\nIn [3]: c = numpy.arange(2, 30000, 3)\nIn [4]: def f(a, b, c):\n   ...:     d = numpy.empty((len(a), 3), dtype=a.dtype)\n   ...:     d[:, 0], d[:, 1], d[:, 2] = a, b, c\n   ...:     return d.ravel()\n   ...: \nIn [5]: def g(a, b, c):\n   ...:     return numpy.vstack((a, b, c)).T.ravel()\n   ...: \nIn [6]: %timeit f(a, b, c)\n10000 loops, best of 3: 34.4 us per loop\nIn [7]: %timeit g(a, b, c)\n10000 loops, best of 3: 177 us per loop\n"
 },
 {
  "idx": "staqc-test-886",
  "doc": "Django Multiple Caches - How to choose which cache the session goes in?",
  "code": "from django.conf import settings\nfrom django.contrib.sessions.backends.db import SessionStore as DBStore\nfrom django.core.cache import get_cache\n\nclass SessionStore(DBStore):\n    \"\"\"\n    Implements cached, database backed sessions.  Now with control over the cache!\n    \"\"\"\n\n    def __init__(self, session_key=None):\n        super(SessionStore, self).__init__(session_key)\n        self.cache = get_cache(getattr(settings, 'SESSION_CACHE_ALIAS', 'default'))\n\n    def load(self):\n        data = self.cache.get(self.session_key, None)\n        if data is None:\n            data = super(SessionStore, self).load()\n            self.cache.set(self.session_key, data, settings.SESSION_COOKIE_AGE)\n        return data\n\n    def exists(self, session_key):\n        return super(SessionStore, self).exists(session_key)\n\n    def save(self, must_create=False):\n        super(SessionStore, self).save(must_create)\n        self.cache.set(self.session_key, self._session, settings.SESSION_COOKIE_AGE)\n\n    def delete(self, session_key=None):\n        super(SessionStore, self).delete(session_key)\n        self.cache.delete(session_key or self.session_key)\n\n    def flush(self):\n        \"\"\"\n        Removes the current session data from the database and regenerates the\n        key.\n        \"\"\"\n        self.clear()\n        self.delete(self.session_key)\n        self.create()\n"
 },
 {
  "idx": "staqc-test-887",
  "doc": "Converting and reshaping a list into a DataFrame in Pandas",
  "code": "In [10]: x_sublists = [x[i:i+3] for i in range(0, len(x), 3)]\n\nIn [11]: pd.DataFrame(x_sublists [1:], columns=x_sublists [0])\nOut[11]: \n   Phase            Formula                Sat Indx\n0  Calcite          CaCO3            0.840931478691\n1  Aragonite        CaCO3            0.697161631298\n2  H2O(g)           H2O              -1.51011433303\n3  CO2(g)           CO2              -1.55228705787\n4  Gypsum           CaSO4:2H2O        -2.9936491424\n5  Anhydrite        CaSO4            -3.21352846684\n6  Portlandite      Ca(OH)2          -10.7380672515\n7  H2(g)            H2                        -22.6\n8  O2(g)            O2                -37.987869775\n9  CH4(g)           CH4              -66.1697168119\n"
 },
 {
  "idx": "staqc-test-888",
  "doc": "How do I index n sets of 4 columns to plot multiple plots using matplotlib?",
  "code": ">>> from datarray.datarray import DataArray as DA\n>>> D1 = DA(D, [rows, cols])\n\n>>> D1.axes\n      (Axis(name='rows', index=0, labels=['row0', 'row1', 'row2', 'row3', \n           'row4', 'row5', 'row6', 'row7']), Axis(name='cols', index=1, \n           labels=['col0', 'col1', 'col2', 'col3', 'col4']))\n\n>>> # now you can use R-like syntax to reference a NumPy data array by column:\n>>> D1[:,'col1']\n      DataArray([8, 5, 0, 7, 8, 9, 9, 4])\n      ('rows',)\n"
 },
 {
  "idx": "staqc-test-889",
  "doc": "(python) How to create static text in curses",
  "code": "import sys\nimport curses\n\n\ncurses.initscr()\n\nif not curses.has_colors():\n    curses.endwin()\n    print \"no colors\"\n    sys.exit()\nelse:\n    curses.start_color()\n\ncurses.noecho()    # don't echo the keys on the screen\ncurses.cbreak()    # don't wait enter for input\ncurses.curs_set(0) # don't show cursor.\n\nRED_TEXT = 1\ncurses.init_pair(RED_TEXT, curses.COLOR_RED, curses.COLOR_BLACK)\n\nwindow = curses.newwin(20, 20, 0, 0)\nwindow.box()\nstaticwin = curses.newwin(5, 10, 1, 1)\nstaticwin.box()\n\nstaticwin.addstr(1, 1, \"test\", curses.color_pair(RED_TEXT))\n\ncur_x = 10\ncur_y = 10\nwhile True:\n    window.addch(cur_y, cur_x, '@')\n    window.refresh()\n    staticwin.box()\n    staticwin.refresh()\n    inchar = window.getch()\n    window.addch(cur_y, cur_x, ' ')\n    # W,A,S,D used to move around the @\n    if inchar == ord('w'):\n        cur_y -= 1\n    elif inchar == ord('a'):\n        cur_x -= 1\n    elif inchar == ord('d'):\n        cur_x += 1\n    elif inchar == ord('s'):\n        cur_y += 1\n    elif inchar == ord('q'):\n        break\ncurses.endwin()\n"
 },
 {
  "idx": "staqc-test-890",
  "doc": "(python) How to create static text in curses",
  "code": "staticwin.clear()   #clean the window\nstaticwin.addstr(1, 1, \"insert-text-here\", curses.color_pair(RED_TEXT))\nstaticwin.box()     #re-draw the box\nstaticwin.refresh()\n"
 },
 {
  "idx": "staqc-test-891",
  "doc": "ScraperWiki/Python: filtering out records when property is false",
  "code": "P93JX VSDC\nFV36RL Bootstrappers\nCi76fP Eli_Regalado\nUN56fn JasonPalmer1971\niQ3H6zR GNOTP\nQr04eB fcnewtech\nsE79dW melindaveee\nud08GT MariaPanlilio\nc9B8EE akibantech\nay26th Thepinkleash\n"
 },
 {
  "idx": "staqc-test-892",
  "doc": "ScraperWiki/Python: filtering out records when property is false",
  "code": "import scraperwiki\nimport simplejson\nimport urllib2\nimport re\n\nQUERY = 'sw4'\nRESULTS_PER_PAGE = '100'\nNUM_PAGES = 10\n\npostcode_match = re.compile('(?<![0-9A-Z])([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {0,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)(?![0-9A-Z])', re.I)\n\nfor page in range(1, NUM_PAGES+1):\n    base_url = 'http://search.twitter.com/search.json?q=%s&rpp=%s&page=%s' \\\n         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)\n    try:\n        results_json = simplejson.loads(scraperwiki.scrape(base_url))\n        for result in results_json['results']:\n            #print result\n            data = {}\n            data['id'] = result['id']\n            data['text'] = result['text']\n            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])\n            data['from_user'] = result['from_user']\n            data['created_at'] = result['created_at']\n            if data['location'] and postcode_match.search(data['text']):\n                print data['location'], data['text']\n                scraperwiki.sqlite.save([\"id\"], data)\n    except:\n        print 'Oh dear, failed to scrape %s' % base_url\n        break\n"
 },
 {
  "idx": "staqc-test-893",
  "doc": "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?",
  "code": "class Palette(list):\n    def __init__(self, *args, **kwargs):\n        super(Palette, self).__init__(args)\n        self.name = kwargs.pop('name', None)\n        self.description = kwargs.pop('description', None)\n        self.extend(kwargs.pop('colors', []))\n        if kwargs:\n            raise TypeError('{} does not take {} as argument(s)'.format(\n                type(self).__name__, ', '.join(kwargs)))\n"
 },
 {
  "idx": "staqc-test-894",
  "doc": "Output touch position from custom kivy widget to labels",
  "code": "from kivy.config import Config\nConfig.set('graphics', 'width', '1000')\nConfig.set('graphics', 'height', '500')\nConfig.set('graphics', 'resizable', 0)\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.lang import Builder\nfrom kivy.properties import ObjectProperty\nfrom kivy.graphics import Color, Ellipse, Line\n\nBuilder.load_file('hueLayout.kv')\n\nclass ColorLoopWidget(Widget):\n    xlabel = ObjectProperty()\n    ylabel = ObjectProperty()\n    def on_touch_down(self, touch):\n        with self.canvas:\n            self.canvas.clear()\n            d = 10\n            Ellipse(pos=(touch.x - d/2, touch.y - d/2), size=(d,d))\n            touch.ud['line'] = Line(points=(touch.x, touch.y))\n            self.xlabel.text = 'x: '+str(touch.x)\n            self.ylabel.text = 'y: '+str(touch.y)\n\n##    def on_touch_move(self, touch):\n##        touch.ud['line'].points += [touch.x, touch.y]\n\n\n\nclass HueLayout(Widget):\n    colorloopwidget = ObjectProperty()\n    xlabel = ObjectProperty()\n    ylabel = ObjectProperty()\n\n##    def on_touch_down():\n##        ColorLoopWidget.on_touch_down()\n##\n##    def on_touch_move():\n##        ColorLoopWidget.on_touch_move()\n\n    def clear_canvas(self):\n        self.colorloopwidget.canvas.clear()\n\n\nclass HueApp(App):\n    def build(self):\n        return HueLayout()\n\nif __name__ == '__main__':\n    HueApp().run()\n"
 },
 {
  "idx": "staqc-test-895",
  "doc": "Insert values in lists following a pattern",
  "code": "Output\nThere was no next tuple\n[(1, 6), (6, 66), (66, 72), (72, 78), (78, 138), (138, 146), (146, 1), (147, 154), (154, 208), (208, 217), (217, 225), (225, 279), (279, 288), (300, 400), (400, 146)]\n"
 },
 {
  "idx": "staqc-test-896",
  "doc": "sound way to feed commands to twisted ssh after reactor.run()",
  "code": "from twisted.application.service import Service\n\nclass ThingDoer(Service):\n    def startService(self):\n        print \"The reactor is running now.\"\n"
 },
 {
  "idx": "staqc-test-897",
  "doc": "How to change the date/time in Python for all modules?",
  "code": ">>> import datetime\n>>> datetime.datetime.now()\ndatetime.datetime(2010, 4, 17, 14, 5, 35, 642000)\n>>> import time\n>>> def mytime(): return 120000000.0\n...\n>>> time.time = mytime\n>>> datetime.datetime.now()\ndatetime.datetime(1973, 10, 20, 17, 20)\n"
 },
 {
  "idx": "staqc-test-898",
  "doc": "QTableView item selection based on a QStandardItem data attribute",
  "code": "myMatPlotView.selectionchanged.connect(myTableView.matplotSelected)\n"
 },
 {
  "idx": "staqc-test-899",
  "doc": "R's relevel() and factor variables in linear regression in pandas",
  "code": "                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      a   R-squared:                       1.000\nModel:                            OLS   Adj. R-squared:                  1.000\nMethod:                 Least Squares   F-statistic:                 2.149e+25\nDate:                Sun, 22 Mar 2015   Prob (F-statistic):           1.64e-13\nTime:                        05:57:33   Log-Likelihood:                 200.74\nNo. Observations:                   7   AIC:                            -389.5\nDf Residuals:                       1   BIC:                            -389.8\nDf Model:                           5                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\n------------------------------------------------------------------------------\nIntercept     -1.6000   6.11e-13  -2.62e+12      0.000        -1.600    -1.600\nb              1.6000   1.59e-13   1.01e+13      0.000         1.600     1.600\nc             -0.6000   6.36e-14  -9.44e+12      0.000        -0.600    -0.600\nblue         1.11e-16   3.08e-13      0.000      1.000     -3.91e-12  3.91e-12\norange      7.994e-15   3.87e-13      0.021      0.987     -4.91e-12  4.93e-12\nred         4.829e-15   2.75e-13      0.018      0.989     -3.49e-12   3.5e-12\n==============================================================================\nOmnibus:                          nan   Durbin-Watson:                   0.203\nProb(Omnibus):                    nan   Jarque-Bera (JB):                0.752\nSkew:                           0.200   Prob(JB):                        0.687\nKurtosis:                       1.445   Cond. No.                         85.2\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
 },
 {
  "idx": "staqc-test-900",
  "doc": "Detecting geographic clusters",
  "code": "# pyclusters.py\n# May-02-2013\n# -John Taylor\n\n# latlng.tsv is located at http://pastebin.com/cyvEdx3V\n# use the \"RAW Paste Data\" to preserve the tab characters\n\nimport math\nfrom collections import defaultdict\n\n# See also: http://www.geomidpoint.com/example.html\n# See also: http://www.movable-type.co.uk/scripts/latlong.html\n\nto_rad = math.pi / 180.0  # convert lat or lng to radians\nfname = \"latlng.tsv\"      # file format: LAT\\tLONG\nthreshhold_dist=20        # adjust to your needs\nthreshhold_locations=20   # minimum # of locations needed in a cluster\nearth_radius_km = 6371\n\ndef coord2cart(lat,lng):\n    x = math.cos(lat) * math.cos(lng)\n    y = math.cos(lat) * math.sin(lng)\n    z = math.sin(lat)\n    return (x,y,z)\n\ndef cart2corrd(x,y,z):\n    lon = math.atan2(y,x)\n    hyp = math.sqrt(x*x + y*y)\n    lat = math.atan2(z,hyp)\n    return(lat,lng)\n\ndef dist(lat1,lng1,lat2,lng2):\n    global to_rad, earth_radius_km\n\n    dLat = (lat2-lat1) * to_rad\n    dLon = (lng2-lng1) * to_rad\n    lat1_rad = lat1 * to_rad\n    lat2_rad = lat2 * to_rad\n\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.sin(dLon/2) * math.sin(dLon/2) * math.cos(lat1_rad) * math.cos(lat2_rad)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a)); \n    dist = earth_radius_km * c\n    return dist\n\ndef bounding_box(src, neighbors):\n    neighbors.append(src)\n    # nw = NorthWest se=SouthEast\n    nw_lat = -360\n    nw_lng = 360\n    se_lat = 360\n    se_lng = -360\n\n    for (y,x) in neighbors:\n        if y > nw_lat: nw_lat = y\n        if x > se_lng: se_lng = x\n\n        if y < se_lat: se_lat = y\n        if x < nw_lng: nw_lng = x\n\n    # add some padding\n    pad = 0.5\n    nw_lat += pad\n    nw_lng -= pad\n    se_lat -= pad\n    se_lng += pad\n\n    #print(\"answer:\")\n    #print(\"nw lat,lng : %s %s\" % (nw_lat,nw_lng))\n    #print(\"se lat,lng : %s %s\" % (se_lat,se_lng))\n\n    # sutiable for r's map() function\n    return (se_lat,nw_lat,nw_lng,se_lng)\n\ndef sitesDist(site1,site2): \n    # just a helper to shorted list comprehensioin below \n    return dist(site1[0],site1[1], site2[0], site2[1])\n\ndef load_site_data():\n    global fname\n    sites = defaultdict(tuple)\n\n    data = open(fname,encoding=\"latin-1\")\n    data.readline() # skip header\n    for line in data:\n        line = line[:-1]\n        slots = line.split(\"\\t\")\n        lat = float(slots[0])\n        lng = float(slots[1])\n        lat_rad = lat * math.pi / 180.0\n        lng_rad = lng * math.pi / 180.0\n        sites[(lat,lng)] = (lat,lng) #(lat_rad,lng_rad)\n    return sites\n\ndef main():\n    color_list = ( \"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"brown\", \"pink\", \"purple\" )\n    color_idx = 0\n    sites_dict = {}\n    sites = load_site_data()\n    for site in sites: \n        #for each site put it in a dictionarry with its value being an array of neighbors \n        sites_dict[site] = [x for x in sites if x != site and sitesDist(site,x) < threshhold_dist] \n\n    print(\"\")\n    print('map(\"state\", plot=T)') # or use: county instead of state\n    print(\"\")\n\n\n    results = {}\n    for site in sites: \n        j = len(sites_dict[site])\n        if j >= threshhold_locations:\n            coord = bounding_box( site, sites_dict[site] )\n            results[coord] = coord\n\n    for bbox in results:\n        yx=\"ylim=c(%s,%s), xlim=c(%s,%s)\" % (results[bbox]) #(se_lat,nw_lat,nw_lng,se_lng)\n\n        # important!\n        # if you want an individual map for each cluster, uncomment this line\n        #print('map(\"county\", plot=T, fill=T, col=palette(), %s)' % yx)\n        if len(color_list) == color_idx:\n            color_idx = 0\n        rect='rect(%s,%s, %s,%s, col=c(\"%s\"))' % (results[bbox][2], results[bbox][0], results[bbox][3], results[bbox][1], color_list[color_idx])\n        color_idx += 1\n        print(rect)\n    print(\"\")\n\n\nmain()\n"
 },
 {
  "idx": "staqc-test-901",
  "doc": "Filtering histogram edges and counts",
  "code": "np.random.seed(0)\nvalues = np.random.uniform(0, 100, 10)\nvalues.sort()\n>>> values\narray([ 38.34415188,  42.36547993,  43.75872113,  54.4883183 ,\n        54.88135039,  60.27633761,  64.58941131,  71.51893664,\n        89.17730008,  96.36627605])\n\n# Histogram using e.g. 10 buckets\nperc, edges = np.histogram(values, bins=10,\n                           weights=np.zeros_like(values) + 100./values.size)\n\n>>> perc\narray([ 30.,   0.,  20.,  10.,  10.,  10.,   0.,   0.,  10.,  10.])\n\n>>> edges\narray([ 38.34415188,  44.1463643 ,  49.94857672,  55.75078913,\n        61.55300155,  67.35521397,  73.15742638,  78.9596388 ,\n        84.76185122,  90.56406363,  96.36627605])\n\nm = 0; M = 50\nmask = (m <= edges) & (edges < M)\n>>> mask\narray([ True,  True,  True, False, False, False, False, False, False,\n       False, False], dtype=bool)\n\n>>> edges[mask]\narray([ 38.34415188,  44.1463643 ,  49.94857672])\n\n>>> perc[mask[:-1]][:-1]\narray([ 30.,   0.])\n\nm = 40; M = 60\nmask = (m < edges) & (edges < M)\n>>> edges[mask]\narray([ 44.1463643 ,  49.94857672,  55.75078913])\n>>> perc[mask[:-1]][:-1]\narray([  0.,  20.])\n"
 },
 {
  "idx": "staqc-test-902",
  "doc": "Merge some part of the list together using python",
  "code": "words = {}\n"
 },
 {
  "idx": "staqc-test-903",
  "doc": "Update a Pyspark DF Column based on an Array in another column",
  "code": "+------+-----+--------+--------------------+------+-----+----------+\n|    id|table|    user|          changeDate|value2|value|      name|\n+------+-----+--------+--------------------+------+-----+----------+\n|555555| TAB2| user11 | 2016-01-24 19:10...|   100| null|      null|\n|  1111| TAB1| user01 | 2015-12-31 13:12...|  null| 0.34| 'newName'|\n+------+-----+--------+--------------------+------+-----+----------+\n"
 },
 {
  "idx": "staqc-test-904",
  "doc": "Pandas -- how to iterate through a list of dates which filter a DataFrame",
  "code": "print df\n        date   group  number   \n0 2013-02-01  group1  -0.098765\n1 2013-02-02  group2   0.519878\n2 2013-02-03  group1  -0.098765\n3 2013-02-04  group3   1.960784\n4 2013-02-05  group3   2.859412\n5 2013-02-06  group2   1.960784\n6 2013-02-07  group1  -0.696594\n"
 },
 {
  "idx": "staqc-test-905",
  "doc": "SCons to generate variable number of targets",
  "code": "$ scons\nscons: Reading SConscript files ...\nscons: done reading SConscript files.\nscons: Building targets ...\necho \"int a(){}\" > build/a\necho \"int b(){}\" > build/b\necho \"int c(){}\" > build/c\necho \"int d(){}\" > build/d\necho \"int g(){}\" > build/g\nmy_action([\"build/a.c\", \"build/b.c\", \"build/c.c\", \"build/d.c\", \"build/g.c\"], [\"src/source.txt\", \"build/a\", \"build/b\", \"build/c\", \"build/d\", \"build/g\"])\ngcc -o build/a.o -c build/a.c\ngcc -o build/b.o -c build/b.c\ngcc -o build/c.o -c build/c.c\ngcc -o build/d.o -c build/d.c\ngcc -o build/g.o -c build/g.c\nar rc build/libfunctions.a build/a.o build/b.o build/c.o build/d.o build/g.o\nranlib build/libfunctions.a\nscons: done building targets.\n"
 },
 {
  "idx": "staqc-test-906",
  "doc": "How do I define custom function to be called from IPython's prompts?",
  "code": "# Input prompt.  '\\#' will be transformed to the prompt number\nc.PromptManager.in_template = br'{color.Green}\\# {color.LightBlue}~\\u{color.Green}:\\w{color.LightBlue} {git_branch_and_st} \\$\\n>>> '\n\n# Continuation prompt.\nc.PromptManager.in2_template = br'... '\n"
 },
 {
  "idx": "staqc-test-907",
  "doc": "Modifying a recursive function that counts no. of paths, to get sequence of all paths",
  "code": "def generate_paths(depth, x=0, y=0):\n    if x == depth:\n        yield ((x, y),)\n    else:\n        for path in generate_paths(depth, x+1, y):\n            yield ((x, y),) + path\n        for path in generate_paths(depth, x+1, y+1):\n            yield ((x, y),) + path\n"
 },
 {
  "idx": "staqc-test-908",
  "doc": "Compare values in 2 columns and output the result in a third column in pandas",
  "code": "df['output'] = (df.groupby('a_id')\n               .apply(lambda x : x['b_received'].isin(x['c_consumed']).astype('i4'))\n               .reset_index(level='a_id', drop=True))\n"
 },
 {
  "idx": "staqc-test-909",
  "doc": "Remove following duplicates in a tuple",
  "code": "x not in seen and not seen.add(x)\n"
 },
 {
  "idx": "staqc-test-910",
  "doc": "Reordering same characters such that the characters are at least distance d from each other",
  "code": "import collections\nimport math\n\ndef printMyString():\n  # get inputs\n  myStr = raw_input(\"enter string: \")\n  dist = int(raw_input(\"enter dist: \"))\n\n  #create a dict, where each key is a character from myStr and corresponding value is its frequency\n  counter = collections.Counter(list(myStr))\n\n  # create an empty list where we will fill our characters to get final string\n  o = ['-']*len(myStr)\n\n  # get the most common character\n  most_common_char_freq = counter.most_common(1)[0][1]\n\n  # sep is the maximum distance at which repeated instances of the most frequent character m can be located from each other in the final string.\n  sep = int(math.ceil(len(myStr)*1.0/most_common_char_freq))\n\n  # if sep is less than given distance, then it is not possible to have such a string.\n\n  if(sep < dist):\n    print \"such a string is not possible\"\n    return\n  #print \"sep\", sep\n\n\n  j = 0 # this marks index at which we can write into the list\n\n  # while we still have characters left, we will continue to fill our output list o \n  while len(counter) > 0:\n   current_most_common_char = counter.most_common(1)[0][0]       # get the most common character left in counter        \n   current_most_common_char_freq = counter.most_common(1)[0][1]   \n\n   #print \"most common: \", current_most_common_char\n   while o[j] != '-':  # Go to the next position in the output list where a character is yet to be written.\n     j += 1  \n     if(j == len(o)):  # We are out of places to write, this is bad!\n      # print \"breaking, o = \", o\n      return\n\n   for i in range(current_most_common_char_freq): # For multiple occurences of the current most freq char, we write them one after the other, a distance of 'sep' apart\n    #print o\n    if (j+i*sep) >= len(o): # If we have to go beyond the length of the output list/string to write a character, then such a string is not possible\n      #print \"not possible, o, char is \", o, current_most_common_char\n      print \"such a string is not possible\"\n      return\n    o[j+i*sep] = current_most_common_char # Write to the output list\n    #print \"updated o: \", o\n\n   del counter[current_most_common_char] # remove the most common character. lets move on to next one in the loop.\n   j += 1 # update before moving on\n\n  print ''.join(o) # merge the characters in the output list to get final string\n\nprintMyString()\n"
 },
 {
  "idx": "staqc-test-911",
  "doc": "Sqlalchemy: bulk correlated update to link tables",
  "code": ">>> stmt = select([addresses.c.email_address]).\\\n...             where(addresses.c.user_id == users.c.id).\\\n...             limit(1)\n>>> conn.execute(users.update().values(fullname=stmt)) \n"
 },
 {
  "idx": "staqc-test-912",
  "doc": "Calculate number of jumps in Dijkstra's algorithm?",
  "code": "import numpy as np\ncimport numpy as np\nimport cython\n\n@cython.wraparound(False)\n@cython.boundscheck(False)\ncpdef dijkway3(int[:, ::1] m, int i, int j):\n    cdef list wayarr = []\n    while (i != j) & (j >= 0):\n        wayarr.append(j)\n        j = m[i,j]\n    return wayarr\n\n@cython.wraparound(False)\n@cython.boundscheck(False)\ndef jumpvec3(int[:, ::1] pmat, int node):\n    cdef np.ndarray jumps\n    cdef int[::1] jumps_buf\n    cdef int i, j, r, n\n    cdef list dway\n    jumps = np.zeros(len(pmat), int)\n    jumps_buf = jumps\n    jumps[node] = -999\n\n    for i in range(len(jumps)):\n        if jumps_buf[i] != 0:\n            continue\n        r = i\n        dway = dijkway3(pmat, node, r)\n        n = len(dway)\n        for j in range(n):\n            jumps_buf[<int>dway[j]] = n - j\n    return jumps\n"
 },
 {
  "idx": "staqc-test-913",
  "doc": "Iterating through large lists with potential conditions in Python",
  "code": "totals['quantity'] = sum([e.quantity for e in entries if EntryMatches(e)])\n"
 },
 {
  "idx": "staqc-test-914",
  "doc": "Order a list of dictionaries in python",
  "code": ">>> res = [{'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '5.0',   'cpucore_00': '0.399414', 'datetime': '1438887255'}, \n...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '9.375', 'cpucore_00': '1.597656', 'datetime': '1438887250'}, \n...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '3.195312', 'cpucore_00': '0.0', 'datetime': '1438887240'}, \n...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '5.59375', 'cpucore_00': '1.0', 'datetime': '1438887245'}]\n>>> sorted(res, key=lambda x: x[\"datetime\"], reverse=True)\n[{'cpucore_00': '0.399414',\n  'cpucore_sum': '5.0',\n  'cpunumber': '40.0',\n  'datetime': '1438887255',\n  'servername': 'f02wn01'},\n {'cpucore_00': '1.597656',\n  'cpucore_sum': '9.375',\n  'cpunumber': '40.0',\n  'datetime': '1438887250',\n  'servername': 'f02wn01'},\n {'cpucore_00': '1.0',\n  'cpucore_sum': '5.59375',\n  'cpunumber': '40.0',\n  'datetime': '1438887245',\n  'servername': 'f02wn01'},\n {'cpucore_00': '0.0',\n  'cpucore_sum': '3.195312',\n  'cpunumber': '40.0',\n  'datetime': '1438887240',\n  'servername': 'f02wn01'}]\n"
 },
 {
  "idx": "staqc-test-915",
  "doc": "How does one parse a file to a 2d array whilst maintaining data types in Python?",
  "code": "data = []\nwith open('text.txt', 'r') as fp:\n  for line in (l.split() for l in fp):\n    line[1:] = [float(x) for x in line[1:]]\n    data.append(line)\n"
 },
 {
  "idx": "staqc-test-916",
  "doc": "Align LaTeX math text in matplotlib text box",
  "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport matplotlib.offsetbox as offsetbox\nfrom matplotlib import rc\n\nrc('text', usetex=True)\n\n# Figure top-level container. Weird size is because\n# this is part of a larger code.\nfig = plt.figure(figsize=(30, 25))\ngs = gridspec.GridSpec(10, 12)\nax_t = plt.subplot(gs[4:6, 10:12])\n\n# Some mock values.\ncp_r = [0.001, 8.3, 0.18, 15.2, 5000, 0.3]\ncp_e = [0.0005, 0.2, 0.11, 0.3, 200, 0.1]\n\n# Remove axis from frame.\nax_t.axis('off')\n\n# Text lines.\ntext1 = r'\\begin{eqnarray*} '\ntext2 = r'y &=& ' + str(cp_r[0]) + '\\pm ' + str(cp_e[0]) + '\\\\\\\\'\ntext3 = r'\\log(ret) &=& ' + str(cp_r[1]) + '\\pm ' + str(cp_e[1]) + '\\\\\\\\'\ntext4 = r'A_{{(B-C)}} &=& ' + str(cp_r[2]) + '\\pm ' + str(cp_e[2]) + '\\\\\\\\'\ntext5 = r'(n-N)_o &=& ' + str(cp_r[3]) + '\\pm ' + str(cp_e[3]) + '\\\\\\\\'\ntext6 = r'K_{{\\odot}} &=& ' + str(cp_r[4]) + '\\pm ' + str(cp_e[4]) + '\\\\\\\\'\ntext7 = r'd_{{frac}} &=& ' + str(cp_r[5]) + '\\pm ' + str(cp_e[5])\ntext8 = r'\\end{eqnarray*}'\ntext = text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8\n\n# Draw text box.\nob = offsetbox.AnchoredText(text, pad=1, loc=6, prop=dict(size=13))\nob.patch.set(alpha=0.85)\nax_t.add_artist(ob)\n\nplt.savefig('out.png', dpi=300)\n"
 },
 {
  "idx": "staqc-test-917",
  "doc": "Align LaTeX math text in matplotlib text box",
  "code": "import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport matplotlib.offsetbox as offsetbox\ncustom_preamble = {\n    \"text.usetex\": True,\n    \"text.latex.preamble\": [\n        r\"\\usepackage{amsmath}\", # for the align enivironment\n        ],\n    }\nplt.rcParams.update(custom_preamble)\n\n# Figure top-level container. Weird size is because\n# this is part of a larger code.\nfig = plt.figure(figsize=(30, 25))\ngs = gridspec.GridSpec(10, 12)\nax_t = plt.subplot(gs[4:6, 10:12])\n\n# Some mock values.\ncp_r = [0.001, 8.3, 0.18, 15.2, 5000, 0.3]\ncp_e = [0.0005, 0.2, 0.11, 0.3, 200, 0.1]\n\n# Remove axis from frame.\nax_t.axis('off')\n\n# Text lines.\ntext1 = r'\\begin{align*} '\ntext2 = r'y &= ' + str(cp_r[0]) + '\\pm ' + str(cp_e[0]) + '\\\\\\\\'\ntext3 = r'\\log(ret) &= ' + str(cp_r[1]) + '\\pm ' + str(cp_e[1]) + '\\\\\\\\'\ntext4 = r'A_{{(B-C)}} &= ' + str(cp_r[2]) + '\\pm ' + str(cp_e[2]) + '\\\\\\\\'\ntext5 = r'(n-N)_o &= ' + str(cp_r[3]) + '\\pm ' + str(cp_e[3]) + '\\\\\\\\'\ntext6 = r'K_{{\\odot}} &= ' + str(cp_r[4]) + '\\pm ' + str(cp_e[4]) + '\\\\\\\\'\ntext7 = r'd_{{frac}} &= ' + str(cp_r[5]) + '\\pm ' + str(cp_e[5])\ntext8 = r'\\end{align*}'\ntext = text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8\n\n# Draw text box.\nob = offsetbox.AnchoredText(text, pad=1, loc=6, prop=dict(size=13))\nob.patch.set(alpha=0.85)\nax_t.add_artist(ob)\n\nplt.savefig('out.png', dpi=300)\n"
 },
 {
  "idx": "staqc-test-918",
  "doc": "Proxy Check in python",
  "code": "import urllib2\nimport socket\n\ndef is_bad_proxy(pip):    \n    try:\n        proxy_handler = urllib2.ProxyHandler({'http': pip})\n        opener = urllib2.build_opener(proxy_handler)\n        opener.addheaders = [('User-agent', 'Mozilla/5.0')]\n        urllib2.install_opener(opener)\n        req=urllib2.Request('http://www.example.com')  # change the URL to test here\n        sock=urllib2.urlopen(req)\n    except urllib2.HTTPError, e:\n        print 'Error code: ', e.code\n        return e.code\n    except Exception, detail:\n        print \"ERROR:\", detail\n        return True\n    return False\n\ndef main():\n    socket.setdefaulttimeout(120)\n\n    # two sample proxy IPs\n    proxyList = ['125.76.226.9:80', '213.55.87.162:6588']\n\n    for currentProxy in proxyList:\n        if is_bad_proxy(currentProxy):\n            print \"Bad Proxy %s\" % (currentProxy)\n        else:\n            print \"%s is working\" % (currentProxy)\n\nif __name__ == '__main__':\n    main()\n"
 },
 {
  "idx": "staqc-test-919",
  "doc": "Python Class Based Decorator with parameters that can decorate a method or a function",
  "code": "@MyDecorator(\"some other func!\")\ndef some_other_function():\n    print \"in some other function!\"\n"
 },
 {
  "idx": "staqc-test-920",
  "doc": "Python: How to \"perfectly\" override a dict",
  "code": "import collections\n\n\nclass TransformedDict(collections.MutableMapping):\n    \"\"\"A dictionary that applies an arbitrary key-altering\n       function before accessing the keys\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        self.store = dict()\n        self.update(dict(*args, **kwargs))  # use the free update to set keys\n\n    def __getitem__(self, key):\n        return self.store[self.__keytransform__(key)]\n\n    def __setitem__(self, key, value):\n        self.store[self.__keytransform__(key)] = value\n\n    def __delitem__(self, key):\n        del self.store[self.__keytransform__(key)]\n\n    def __iter__(self):\n        return iter(self.store)\n\n    def __len__(self):\n        return len(self.store)\n\n    def __keytransform__(self, key):\n        return key\n"
 },
 {
  "idx": "staqc-test-921",
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "import csv\n"
 },
 {
  "idx": "staqc-test-922",
  "doc": "How to override OSX's version of numpy when I import in Python 2.7?",
  "code": "sudo ln -s /usr/bin/python /usr/local/bin/python\n"
 },
 {
  "idx": "staqc-test-923",
  "doc": "Create a list property in Python",
  "code": "import collections\n\n\nclass PrivateList(collections.MutableSequence):\n    def __init__(self, initial=None):\n        self._list = initial or []\n\n    def __repr__(self):\n        return repr(self._list)\n\n    def __getitem__(self, item):\n        print(\"Accessed element {}\".format(item))\n        return self._list[item]\n\n    def __setitem__(self, key, value):\n        print(\"Set element {} to {}\".format(key, value))\n        self._list[key] = value\n\n    def __delitem__(self, key):\n        print(\"Deleting element {}\".format(key))\n        del self._list[key]\n\n    def __len__(self):\n        print(\"Getting length\")\n        return len(self._list)\n\n    def insert(self, index, item):\n        print(\"Inserting item {} at {}\".format(item, index))\n        self._list.insert(index, item)\n\n\nclass Foo(object):\n    def __init__(self, a_list):\n        self.list = PrivateList(a_list)\n"
 },
 {
  "idx": "staqc-test-924",
  "doc": "How to access members of an rdf list with rdflib (or plain sparql)",
  "code": "rdflib.plugin.register('sparql', rdflib.query.Processor,\n                       'rdfextras.sparql.processor', 'Processor')\nrdflib.plugin.register('sparql', rdflib.query.Result,\n                       'rdfextras.sparql.query', 'SPARQLQueryResult')\n\nquery = \"\"\"\nSELECT ?seq_index ?name ?surname WHERE {\n     <http://www.ncbi.nlm.nih.gov/pubmed/18273724> bib:authors ?seq .\n     ?seq ?seq_index ?seq_bnode .\n     ?seq_bnode foaf:givenname ?name .\n     ?seq_bnode foaf:surname ?surname .\n}\n\"\"\"\nfor row in sorted(g.query(query, initNs=dict(rdf=RDF,foaf=FOAF,bib=BIB)),\n                                                  key=lambda x:int(x[0][44:])):\n    print \"Author(%s) %s %s\"%(row[0][44:],row[1],row[2])\n"
 },
 {
  "idx": "staqc-test-925",
  "doc": "Multidimensional array in Python",
  "code": "class Matrix(object):\n    def __init__(self, *dims):\n        self._shortcuts = [i for i in self._create_shortcuts(dims)]\n        self._li = [None] * (self._shortcuts.pop())\n        self._shortcuts.reverse()\n\n    def _create_shortcuts(self, dims):\n        dimList = list(dims)\n        dimList.reverse()\n        number = 1\n        yield 1\n        for i in dimList:\n            number *= i\n            yield number\n\n    def _flat_index(self, index):\n        if len(index) != len(self._shortcuts):\n            raise TypeError()\n\n        flatIndex = 0\n        for i, num in enumerate(index):\n            flatIndex += num * self._shortcuts[i]\n        return flatIndex\n\n    def __getitem__(self, index):\n        return self._li[self._flat_index(index)]\n\n    def __setitem__(self, index, value):\n        self._li[self._flat_index(index)] = value\n"
 },
 {
  "idx": "staqc-test-926",
  "doc": "Truncating multi-indexed dataframe",
  "code": "                                  val1\nLocation Date                gas      \nA        2013-01-01 00:00:00 no2     0\n         2013-01-01 00:00:05 o3      1\n         2013-01-01 00:00:10 so2     2\nB        2013-01-01 00:00:00 no2     3\n         2013-01-01 00:00:05 o3      4\n         2013-01-01 00:00:10 so2     5\n"
 },
 {
  "idx": "staqc-test-927",
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "a*c + b*d\n"
 },
 {
  "idx": "staqc-test-928",
  "doc": "summing nested dictionary entries",
  "code": "VALID_KEYS = [\"Central Spectrum\", \"Full Frame\"]\nresults = {}\nfor key_1 in data.keys():\n    # key_1 is '20101021', '20101004'...\n\n    for key_2 in data[key_1].keys():\n        # key_2 is '4x4', '4x2'...\n        if key_2 not in results:\n            results[key_2] = dict.fromkeys(VALID_KEYS, 0)\n        for key_3 in data[key_1][key_2].keys():\n            # key_3 is 'Central Spectrum', 'Full Frame', 'Custom'...\n            if key_3 in VALID_KEYS:\n                results[key_2][key_3] += data[key_1][key_2][key_3]\nprint results\n"
 },
 {
  "idx": "staqc-test-929",
  "doc": "Put all files with same name in a folder",
  "code": ">>> import os\n>>> import re\n>>> pat = r'(\\d+)(?:_\\d+)?_(\\w+?)[\\._].*'\n>>> from collections import defaultdict\n>>> dict_date = defaultdict(lambda : defaultdict(list))\n>>> for fil in os.listdir(path):\n    if os.path.isfile(os.path.join(path, fil)):\n        date, animal = re.match(pat, fil).groups()\n        dict_date[date][animal].append(fil)\n\n\n>>> dict_date['20120807']\ndefaultdict(<type 'list'>, {'first': ['20120807_first_day_pic.jpg', '20120807_first_day_sheet.jpg', '20120807_first_day_sheet2.jpg']})\n"
 },
 {
  "idx": "staqc-test-930",
  "doc": "Pandas number of business days between a DatetimeIndex and a Timestamp",
  "code": "import pandas as pd\nimport numpy as np\ndrg = pd.date_range('2000-07-31', '2015-08-05', freq='B')\ntimestamp = pd.Timestamp('2015-08-05', 'B')\n\ndef using_astype(drg, timestamp):\n    A = drg.values.astype('<M8[D]')\n    B = timestamp.asm8.astype('<M8[D]')\n    return np.busday_count(A, B)\n\ndef using_datetimes(drg, timestamp):\n    A = [d.date() for d in drg]\n    B = pd.Timestamp('2015-08-05', 'B').date()\n    return np.busday_count(A, B)\n"
 },
 {
  "idx": "staqc-test-931",
  "doc": "remove newline and whitespace parse XML with python Xpath",
  "code": "Putting an entire chapter on one page sounds bloated, but consider this &mdash; my longest chapter so far would be 75 printed pages, and it loads in under 5 seconds&hellip; On dialup.\nPutting an entire chapter on one page sounds bloated, but consider this &mdash; my longest chapter so far would be 75 printed pages, and it loads in under 5 seconds&hellip; On dialup.\nPutting an entire chapter on one page sounds bloated, but consider this &mdash; my longest chapter so far would be 75 printed pages, and it loads in under 5 seconds&hellip; On dialup.\nThe accessibility orthodoxy does not permit people to question the value of features that are rarely useful and rarely used.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\nThese notes will eventually become part of a tech talk on video encoding.\n"
 },
 {
  "idx": "staqc-test-932",
  "doc": "How to assign scipy.sparse matrix to NumPy array via indexing?",
  "code": "scipy.sparse.dok_matrix.__array__ = scipy.sparse.dok_matrix.toarray\na[:] = s\n"
 },
 {
  "idx": "staqc-test-933",
  "doc": "check if variable is dataframe",
  "code": "if isinstance(obj, basestring):\n    i_am_string(obj)\n"
 },
 {
  "idx": "staqc-test-934",
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport itertools\n\ndef main():\n    def run(x, data, func, threshold=0):\n        model = [func(x, y, threshold=threshold) for y in data.T]\n        sigma, mu, height = [np.array(item) for item in zip(*model)]\n        prediction = gaussian(x, sigma, mu, height)\n\n        plt.figure()\n        plot(x, data, linestyle='none', marker='o', markersize=4)\n        plot(x, prediction, linestyle='-', lw=2)\n\n    x, data = generate_data(256, 6, noise=100)\n    threshold = 50\n\n    run(x, data, weighted_invert, threshold=threshold)\n    plt.title('Weighted by Y-Value')\n\n    run(x, data, invert, threshold=threshold)\n    plt.title('Un-weighted Linear Inverse'\n\n    plt.show()\n\ndef invert(x, y, threshold=0):\n    mask = y > threshold\n    x, y = x[mask], y[mask]\n\n    # Fit a 2nd order polynomial to the log of the observed values\n    A, B, C = np.polyfit(x, np.log(y), 2)\n\n    # Solve for the desired parameters...\n    sigma, mu, height = poly_to_gauss(A,B,C)\n    return sigma, mu, height\n\ndef poly_to_gauss(A,B,C):\n    sigma = np.sqrt(-1 / (2.0 * A))\n    mu = B * sigma**2\n    height = np.exp(C + 0.5 * mu**2 / sigma**2)\n    return sigma, mu, height\n\ndef weighted_invert(x, y, weights=None, threshold=0):\n    mask = y > threshold\n    x,y = x[mask], y[mask]\n    if weights is None:\n        weights = y\n    else:\n        weights = weights[mask]\n\n    d = np.log(y)\n    G = np.ones((x.size, 3), dtype=np.float)\n    G[:,0] = x**2\n    G[:,1] = x\n\n    model,_,_,_ = np.linalg.lstsq((G.T*weights**2).T, d*weights**2)\n    return poly_to_gauss(*model)\n\ndef generate_data(numpoints, numcurves, noise=None):\n    np.random.seed(3)\n    x = np.linspace(0, 500, numpoints)\n\n    height = 7000 * np.random.random(numcurves)\n    mu = 1100 * np.random.random(numcurves) \n    sigma = 100 * np.random.random(numcurves) + 0.1\n    data = gaussian(x, sigma, mu, height)\n\n    if noise is None:\n        noise = 0.1 * height.max()\n    noise = noise * (np.random.random(data.shape) - 0.5)\n    return x, data + noise\n\ndef gaussian(x, sigma, mu, height):\n    data = -np.subtract.outer(x, mu)**2 / (2 * sigma**2)\n    return height * np.exp(data)\n\ndef plot(x, ydata, ax=None, **kwargs):\n    if ax is None:\n        ax = plt.gca()\n    colorcycle = itertools.cycle(mpl.rcParams['axes.color_cycle'])\n    for y, color in zip(ydata.T, colorcycle):\n        #kwargs['color'] = kwargs.get('color', color)\n        ax.plot(x, y, color=color, **kwargs)\n\nmain()\n"
 },
 {
  "idx": "staqc-test-935",
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport itertools\n\ndef main():\n    x, data = generate_data(256, 6)\n    model = [invert(x, y) for y in data.T]\n    sigma, mu, height = [np.array(item) for item in zip(*model)]\n    prediction = gaussian(x, sigma, mu, height)\n\n    plot(x, data, linestyle='none', marker='o')\n    plot(x, prediction, linestyle='-')\n    plt.show()\n\ndef invert(x, y):\n    # Use only data within the \"peak\" (20% of the max value...)\n    key_points = y > (0.2 * y.max())\n    x = x[key_points]\n    y = y[key_points]\n\n    # Fit a 2nd order polynomial to the log of the observed values\n    A, B, C = np.polyfit(x, np.log(y), 2)\n\n    # Solve for the desired parameters...\n    sigma = np.sqrt(-1 / (2.0 * A))\n    mu = B * sigma**2\n    height = np.exp(C + 0.5 * mu**2 / sigma**2)\n    return sigma, mu, height\n\ndef generate_data(numpoints, numcurves):\n    np.random.seed(3)\n    x = np.linspace(0, 500, numpoints)\n\n    height = 100 * np.random.random(numcurves)\n    mu = 200 * np.random.random(numcurves) + 200\n    sigma = 100 * np.random.random(numcurves) + 0.1\n    data = gaussian(x, sigma, mu, height)\n\n    noise = 5 * (np.random.random(data.shape) - 0.5)\n    return x, data + noise\n\ndef gaussian(x, sigma, mu, height):\n    data = -np.subtract.outer(x, mu)**2 / (2 * sigma**2)\n    return height * np.exp(data)\n\ndef plot(x, ydata, ax=None, **kwargs):\n    if ax is None:\n        ax = plt.gca()\n    colorcycle = itertools.cycle(mpl.rcParams['axes.color_cycle'])\n    for y, color in zip(ydata.T, colorcycle):\n        ax.plot(x, y, color=color, **kwargs)\n\nmain()\n"
 },
 {
  "idx": "staqc-test-936",
  "doc": "Is there a standard way to store XY data in python?",
  "code": "In [200]: t = np.arange(10)\n\nIn [202]: dt = np.dtype([('t',int),('pos',[('x',float),('y',float)])])\n\nIn [203]: alldata = np.array(zip(t, zip(x,y)), dtype=dt)\n\nIn [204]: alldata\nOut[204]: \narray([(0, (0.27432965895978034, 0.03480825417655464)),\n       (1, (0.10231729328413885, 0.3311112896885462)),\n       (2, (0.8772436117544331, 0.47852682944121905)),\n       (3, (0.242917693323785, 0.5069173543271597)),\n       (4, (0.4758342768022188, 0.04048957803763753)),\n       (5, (0.7071064160212163, 0.27331443495117813)),\n       (6, (0.8587869470252278, 0.619939454616135)),\n       (7, (0.28840423235739054, 0.11954319357707233)),\n       (8, (0.22084849730366296, 0.39880927226467255)),\n       (9, (0.429156126283989, 0.1919732064591556))], \n      dtype=[('t', '<i8'), ('pos', [('x', '<f8'), ('y', '<f8')])])\n\nIn [205]: alldata['t']\nOut[205]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [206]: alldata['pos']\nOut[206]: \narray([(0.27432965895978034, 0.03480825417655464),\n       (0.10231729328413885, 0.3311112896885462),\n       (0.8772436117544331, 0.47852682944121905),\n       (0.242917693323785, 0.5069173543271597),\n       (0.4758342768022188, 0.04048957803763753),\n       (0.7071064160212163, 0.27331443495117813),\n       (0.8587869470252278, 0.619939454616135),\n       (0.28840423235739054, 0.11954319357707233),\n       (0.22084849730366296, 0.39880927226467255),\n       (0.429156126283989, 0.1919732064591556)], \n      dtype=[('x', '<f8'), ('y', '<f8')])\n\nIn [207]: alldata['pos']['x']\nOut[207]: \narray([ 0.27432966,  0.10231729,  0.87724361,  0.24291769,  0.47583428,\n        0.70710642,  0.85878695,  0.28840423,  0.2208485 ,  0.42915613])\n"
 },
 {
  "idx": "staqc-test-937",
  "doc": "Calling/Passing dictionary objects in python",
  "code": "def dict_function(self):\n    return {\n        'sky': 'blue'\n        'clouds': 'white'\n        'grass': 'green'\n    }\n"
 },
 {
  "idx": "staqc-test-938",
  "doc": "Insertions algorithm in sequence python",
  "code": "12345\n18889992345\n"
 },
 {
  "idx": "staqc-test-939",
  "doc": "How to append the second return value, directly to a list, in Python",
  "code": "def get_stuff():\n    return 'a string', [1,2,3,5]\n\nall_stuff = [6,7]\nall_stuff.extend(get_stuff()[1])\n"
 },
 {
  "idx": "staqc-test-940",
  "doc": "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?",
  "code": "html = '''\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Overview\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"http://www.google.com\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Overview</span></a></li>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Overview\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Overview</span></a></li>\n'''\nsoup = BeautifulSoup(html)\na_tag = soup.find('a', attrs={'href': re.compile(r'^http.*')})\n"
 },
 {
  "idx": "staqc-test-941",
  "doc": "Making an object's attributes iterable",
  "code": "results = q.fetch(5)\nfor p in results:\n    for attribute in vars(p).keys()\n        print '%s = %s' % (attribute, str(getattr(p, attribute)))\n"
 },
 {
  "idx": "staqc-test-942",
  "doc": "How to parse XML file from European Central Bank with Python",
  "code": ">>> import requests\n>>> r = requests.get('http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml', stream=True)\n>>> from xml.etree import ElementTree as ET\n>>> tree = ET.parse(r.raw)\n>>> root = tree.getroot()\n>>> namespaces = {'ex': 'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'}\n>>> for cube in root.findall('.//ex:Cube[@currency]', namespaces=namespaces):\n...     print(cube.attrib['currency'], cube.attrib['rate'])\n... \nUSD 1.3180\nJPY 128.66\nBGN 1.9558\nCZK 25.825\nDKK 7.4582\nGBP 0.85330\nHUF 298.87\nLTL 3.4528\nLVL 0.7016\nPLN 4.3289\nRON 4.5350\nSEK 8.6927\nCHF 1.2257\nNOK 7.9090\nHRK 7.4905\nRUB 43.2260\nTRY 2.5515\nAUD 1.4296\nBRL 2.9737\nCAD 1.3705\nCNY 8.0832\nHKD 10.2239\nIDR 13088.24\nILS 4.7891\nINR 78.1200\nKRW 1521.52\nMXN 17.5558\nMYR 4.2222\nNZD 1.7004\nPHP 57.707\nSGD 1.6790\nTHB 41.003\nZAR 13.4906\n"
 },
 {
  "idx": "staqc-test-943",
  "doc": "How to parse XML file from European Central Bank with Python",
  "code": "namespaces = {'ex': 'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'} # add more as needed\n\nfor cube in root.findall('.//ex:Cube[@currency]', namespaces=namespaces):\n    print(cube.attrib['currency'], cube.attrib['rate'])\n"
 },
 {
  "idx": "staqc-test-944",
  "doc": "Python Pandas Use if-else to populate new column",
  "code": ">>> np.where(df['col2'] > 0, 4, -1)\narray([-1,  4, -1, -1,  4, -1,  4])\n"
 },
 {
  "idx": "staqc-test-945",
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "# This function takes a string with commas separating raw user input, and\n# returns a list of valid tags made by sanitizing the strings between the\n# commas.\ndef parseTags(str):\n    # First, we split the string on commas.\n    rawTags = str.split(',')\n\n    # Then, we sanitize each of the tags.  If sanitizing gives us back None,\n    # then the tag was invalid, so we leave those cases out of our final\n    # list of tags.  We can use None as the predicate because sanitizeTag\n    # will never return '', which is the only falsy string.\n    return filter(None, map(sanitizeTag, rawTags))\n\n# This function takes a single proto-tag---the string in between the commas\n# that will be turned into a valid tag---and sanitizes it.  It either\n# returns an alphanumeric string (if the argument can be made into a valid\n# tag) or None (if the argument cannot be made into a valid tag; i.e., if\n# the argument contains only whitespace and/or punctuation).\ndef sanitizeTag(str):\n    # First, we turn non-alphanumeric characters into whitespace.  You could\n    # also use a regular expression here; see below.\n    str = ''.join(c if c.isalnum() else ' ' for c in str)\n\n    # Next, we split the string on spaces, ignoring leading and trailing\n    # whitespace.\n    words = str.split()\n\n    # There are now three possibilities: there are no words, there was one\n    # word, or there were multiple words.\n    numWords = len(words)\n    if numWords == 0:\n        # If there were no words, the string contained only spaces (and/or\n        # punctuation).  This can't be made into a valid tag, so we return\n        # None.\n        return None\n    elif numWords == 1:\n        # If there was only one word, that word is the tag, no\n        # post-processing required.\n        return words[0]\n    else:\n        # Finally, if there were multiple words, we camel-case the string:\n        # we lowercase the first word, capitalize the first letter of all\n        # the other words and lowercase the rest, and finally stick all\n        # these words together without spaces.\n        return words[0].lower() + ''.join(w.capitalize() for w in words[1:])\n"
 },
 {
  "idx": "staqc-test-946",
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "str = re.sub(r'[^A-Za-z0-9]', ' ', str)\n"
 },
 {
  "idx": "staqc-test-947",
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "str = re.sub(r'\\W|_', ' ', str, flags=re.UNICODE)\n"
 },
 {
  "idx": "staqc-test-948",
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "from sqlalchemy import TypeDecorator, type_coerce, String\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.sql.expression import BinaryExpression\nimport operator\nclass IsDistinctFrom(BinaryExpression):\n    pass\n\n@compiles(IsDistinctFrom, \"postgresql\")\ndef pg_is_distinct_from(element, compiler, **kw):\n    return \"%s IS DISTINCT FROM %s\" % (\n                    compiler.process(element.left, **kw),\n                    compiler.process(element.right, **kw),\n                )\n\n@compiles(IsDistinctFrom, \"mysql\")\ndef mysql_is_distinct_from(element, compiler, **kw):\n    return \"%s <=> %s\" % (\n                    compiler.process(element.left, **kw),\n                    compiler.process(element.right, **kw),\n                )\n\nclass AdvancedNullComparisons(TypeDecorator):\n    impl = String\n\n    class comparator_factory(TypeDecorator.Comparator):\n        def __ne__(self, other):\n            expr = type_coerce(self.expr, String)\n            # this step coerces a literal into a SQL expression,\n            # this can be done without the private API here but the private\n            # function does the most thorough job, this could also be made\n            # public\n            other = self._check_literal(expr, operator.ne, other)\n            return IsDistinctFrom(self.expr, other, operator.ne)\n"
 },
 {
  "idx": "staqc-test-949",
  "doc": "Binning data based on one column in 2D array and estimate mean in each bin using cython",
  "code": "def bincount(digitized, Weights):\n   out = zeros(digitized.max() + 1)\n   for i, w = zip(digitized, Weights):\n       out[i] += w\n   return out\n"
 },
 {
  "idx": "staqc-test-950",
  "doc": "huge text file (6Gb) search and replace",
  "code": "use strict;\nuse warnings;\n\nuse IO::Handle;\n\nSTDOUT->autoflush;\n\nopen my $in_xml,    '<', 'input.xml'  or die \"Failed to open XML file: $!\";\nopen my $in_titles, '<', 'titles.txt' or die \"Failed to open titles file: $!\";\nopen my $out_xml,   '>', 'output.xml' or die \"Failed to open output file: $!\";\n\nwhile (my $xml_line = <$in_xml>) {\n\n  if ( $xml_line =~ /<text/ ) {\n\n    my ($id1) = $xml_line =~ /id=\"(\\d+)\"/;\n    unless (defined $id1) {\n      chomp;\n      die sprintf qq{Error in input XML file at line %d: %s\\n-}, $in_xml->input_line_number, $_;\n    }\n    printf \"Processing ID %d\\n\", $id1 unless $id1 % 500;\n\n    my $title_line = <$in_titles>;\n    my ($id2, $title) = $title_line =~ /^(\\d+)\\s+(.+)/;\n    unless (defined $id2) {\n      chomp $title_line;\n      die sprintf qq{Error in input titles file at line %d: %s\\n-}, $in_titles->input_line_number, $title_line;\n    }\n\n    unless ($id1 == $id2) {\n      die sprintf \"ID mismatch %d <=> %d\\nXML file line %d\\ntitles file line %d\\n-\",\n          $id1, $id2, $in_xml->input_line_number, $in_titles->input_line_number\n    }\n\n    $xml_line =~ s/>/ title=\"$title\">/;\n  }\n\n  print $out_xml $xml_line;\n}\n\nclose $out_xml or die \"Failed to close output file: $!\";\n"
 },
 {
  "idx": "staqc-test-951",
  "doc": "Other ways to replace single character",
  "code": "import __main__\nfrom itertools import permutations\nfrom time import time\n\ndef replace1(txt, pos, new_char):\n    return txt[:pos] + new_char + txt[pos+1:]\n\ndef replace2(txt, pos, new_char):\n    return '{0}{1}{2}'.format(txt[:pos], new_char, txt[pos+1:])\n\ndef replace3(txt, pos, new_char):\n    return ''.join({pos: new_char}.get(idx, c) for idx, c in enumerate(txt))\n\ndef replace4(txt, pos, new_char):    \n    txt = list('12345')\n    txt[pos] = new_char\n    ''.join(txt)\n\ndef replace5(txt, pos, new_char):\n    return '%s%s%s' % (txt[:pos], new_char, txt[pos+1:])\n\n\nwords = [''.join(x) for x in permutations('abcdefgij')]\n\nfor i in range(1, 6):\n    func = getattr(__main__, 'replace{}'.format(i))\n\n    start = time()\n    for word in words:\n        result = func(word, 2, 'X')\n    print time() - start\n"
 },
 {
  "idx": "staqc-test-952",
  "doc": "Python-Flask: Pass data to machine learning python script and get results back",
  "code": "from flask import Flask\nfrom flask import render_template, abort, jsonify, request,redirect, json\nfrom my_app.machine_learning import analyzer\napp = Flask(__name__)\napp.debug = True\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/learning', methods=['POST'])\ndef learning():\n    data = json.loads(request.data)\n    # data == {\"userInput\": \"whatever text you entered\"}\n    response = analyzer(data)\n    return jsonify(response)\n\n\nif __name__ == '__main__':\n    app.run()\n"
 },
 {
  "idx": "staqc-test-953",
  "doc": "Pipe delimiter file, but no pipe inside data",
  "code": "import csv\nimport os\n\noutputfile = inputfile + '.tmp'\nwith open(inputfile, 'rb') as inf, open(outputfile, 'wb') as outf:\n    reader = csv.reader(inf)\n    writer = csv.writer(outf, delimiter='|')\n    writer.writerows(reader)\nos.remove(inputfile)\nos.rename(outputfile, inputfile)\n"
 },
 {
  "idx": "staqc-test-954",
  "doc": "removing first four and last four characters of strings in list, OR removing specific character patterns",
  "code": "['hattrick', 'google', 'wampum', 'newcom']\n"
 },
 {
  "idx": "staqc-test-955",
  "doc": "Programming contest like input validator",
  "code": "class SizedInput(object):\n    def __init__(self,label=\"input\",map_fn=str):\n        self.map_fn = map_fn\n        self.label = label\n        self._rval = None\n    def _proc(self,sz,tokens):\n        if len(tokens) < sz:\n            msg = \"Insufficient arguments for %s (expected %s got %s)\"\n            raise Exception(msg%(self.label,sz,len(tokens) )    )\n\n        return (self.map_fn(x) for x in tokens[:sz]), tokens[sz:]\n    def parse(self,input_tokens):\n        sz = int(input_tokens[0])\n        self._rval,rest = self._proc(sz,input_tokens[1:])\n        return list(self._rval),rest\n    def GetValue():\n        return self._rval\n    def __call__(self,input_tokens):\n        return self.parse(input_tokens)\n\nclass MatrixInput(SizedInput):\n    def _proc(self,sz,tokens):\n        result, rest = SizedInput._proc(self,sz**2,tokens) #call super function with new size\n        result = zip(*[iter(result)]*sz)  #this looks fancy but it just resizes 1d to 2d\n            return result,rest          \n\ndef validateSchema(schema,input_tokens):\n    rest = input_tokens\n    results = {}\n    for schema_item in schema:\n        results[schema_item.label] ,rest = schema_item(rest)\n    if rest:\n        print \"Warning : %d unconsumed tokens!\"\n    return results\n"
 },
 {
  "idx": "staqc-test-956",
  "doc": "how to search values in a file and replace",
  "code": "list_to_search =['TRC_BTM', 'TRC_HCI', 'TRC_L2CAP']\nmyDict = {'TRC_BTM': '6', 'TRC_HCI': '6', 'TRC_L2CAP': '6'}\n\nfilename ='file.conf'\n\nwith open(filename, 'rb+') as f:\n\n    while True:         \n        line = f.readline()\n        if not line: break          \n        for key in list_to_search:\n            if key in line:\n                f.seek(-len(line),1)\n                f.write(key + '=' + myDict[key] + '\\n')\n                f.flush()\n"
 },
 {
  "idx": "staqc-test-957",
  "doc": "Automatically numbering and referencing Sphinx tables",
  "code": ":ref:`table`\n"
 },
 {
  "idx": "staqc-test-958",
  "doc": "How to pass javascript variable to macros in jinja2 template",
  "code": "<body>\n    <button onclick=\"js_fn('{{ py_fn('some_string') }}')\">Click me</button>\n    <script>\n        function js_fn(variable) {\n            alert(variable);\n        }\n    </script>\n</body>\n"
 },
 {
  "idx": "staqc-test-959",
  "doc": "Scrapy xpath get text of an element that starts with <",
  "code": ">>> from bs4 import BeautifulSoup\n>>> soup = BeautifulSoup(raw, \"html.parser\")\n>>> print soup.prettify()\n<div class=\"details_wrapper\">\n <div class=\"detail\">\n  <b>\n   Recommended length of visit:\n  </b>\n  &lt;1 hour\n </div>\n <div class=\"detail\">\n  <b>\n   Fee:\n  </b>\n  No\n </div>\n</div>\n"
 },
 {
  "idx": "staqc-test-960",
  "doc": "syntactic whitespaces with pyparsing's operatorPrecedence",
  "code": "[[['a', ':', 'b'], '->', ['c', ':', ['d', 'e']]]]\n"
 },
 {
  "idx": "staqc-test-961",
  "doc": "Integrating a vector field (a numpy array) using scipy.integrate",
  "code": "xyarr = np.array(zip(x.flatten(),y.flatten()))\ndfun = lambda p,t: [interp.griddata(xyarr,vx.flatten(),np.array([p]))[0], interp.griddata(xyarr,vy.flatten(),np.array([p]))[0]]\n"
 },
 {
  "idx": "staqc-test-962",
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "          FName     LName    id UsedFName UsedLName  Usedid\n0        Tanvir   Hossain  2001    Tanvir   Hossain    2001\n1         Nadia      Alam  2002    Tanvir   Hossain    2001\n2           Pia     Naime  2003    Tanvir   Hossain    2001\n3        Koethe  Talukdar  2004    Koethe  Talukdar    2005\n4        Manual   Hausman  2005    Koethe  Talukdar    2005\n5   Constantine      Pape   NaN       Max     Weber    2007\n6       Andreas       Kai  2006       Max     Weber    2007\n7           Max     Weber  2007    Manual   Hausman    2005\n8         Weber       Mac  2008    Manual   Hausman    2005\n9         Plank      Ingo  2009    Manual   Hausman    2005\n10       Tanvir   Hossain  2001       Pia     Naime    2003\n11        Weber       Mac  2008       Pia     Naime    2003\n12       Manual   Hausman  2005    Tanvir   Hossain    2001\n13          Max     Weber  2007    Tanvir   Hossain    2001\n14        Nadia      Alam  2002    Manual   Hausman    2005\n15        Weber       Mac  2008    Manual   Hausman    2005\n16          Pia     Naime  2003    Koethe  Talukdar    2005\n17          Pia     Naime  2003    Koethe  Talukdar    2005\n18  Constantine      Pape   NaN    Koethe  Talukdar    2005\n19       Koethe  Talukdar  2004    Koethe  Talukdar    2005\n20       Koethe  Talukdar  2005    Manual   Hausman    2005\n21          NaN       NaN   NaN    Manual   Hausman    2005\n22          NaN       NaN   NaN    Manual   Hausman    2005\n23          NaN       NaN   NaN    Manual   Hausman    2005\n24          NaN       NaN   NaN    Manual   Hausman    2005\n25          NaN       NaN   NaN    Manual   Hausman    2005\n26          NaN       NaN   NaN    Manual   Hausman    2005\n27          NaN       NaN   NaN    Manual   Hausman    2005\n"
 },
 {
  "idx": "staqc-test-963",
  "doc": "Efficiently displaying a stacked bar graph",
  "code": "import numpy as np\nfrom itertools import izip, cycle\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\nN = 100\n\nfake_data = {}\nfor j in range(97, 104):\n    lab = chr(j)\n    fake_data[lab] = np.cumsum(np.random.rand(N) > np.random.rand(1))\n\ncolors = cycle(['r', 'g', 'b', 'm', 'c', 'Orange', 'Pink'])\n\n# fig, ax = plt.subplots(1, 1, tight_layout=True) # if your mpl is newenough\nfig, ax = plt.subplots(1, 1) # other wise\nax.set_xlabel('time')\nax.set_ylabel('counts')\ncum_array = np.zeros(N*2 - 1) # to keep track of the bottoms\nx = np.vstack([arange(N), arange(N)]).T.ravel()[1:] # [0, 1, 1, 2, 2, ..., N-2, N-2, N-1, N-1]\nhands = []\nlabs = []\nfor k, c in izip(sorted(fake_data.keys()), colors):\n    d = fake_data[k]\n    dd = np.vstack([d, d]).T.ravel()[:-1]  # double up the data to match the x values [x0, x0, x1, x1, ... xN-2, xN-1]\n    ax.fill_between(x, dd + cum_array, cum_array,  facecolor=c, label=k, edgecolor='none') # fill the region\n    cum_array += dd                       # update the base line\n    # make a legend entry\n    hands.append(matplotlib.patches.Rectangle([0, 0], 1, 1, color=c)) # dummy artist\n    labs.append(k)                        # label\n\nax.set_xlim([0, N - 1]) # set the limits \nax.legend(hands, labs, loc=2)             #add legend\nplt.show()                                #make sure it shows\n"
 },
 {
  "idx": "staqc-test-964",
  "doc": "Django Form with extra information",
  "code": "class MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n    def clean_date_created(self):\n        if self.cleaned_fields['date_created'] != self.instance.date_created:\n            raise ValidationError, 'date_created has been tampered'\n        self.cleaned_fields['date_created']\n"
 },
 {
  "idx": "staqc-test-965",
  "doc": "Recognising objects in images using HAAR cascade and OpenCV",
  "code": "void findNeedles( const std::vector<cv::Point> & needle_contour, const cv::Mat & haystack_binarized)\n{\n    int nfound = 0;\n    std::vector<std::vector<cv::Point>> contours;\n    cv::findContours(haystack_binarized, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_NONE);\n    for (size_t i = 0; i < contours.size(); i++)\n    {\n        // pre-filter for size:\n        if ( ( contours[i].size() < needle_contour.size()/2 )\n          || ( contours[i].size() > needle_contour.size()*2 ) )\n          continue;\n\n        double d = cv::matchShapes(contours[i],needle_contour,CV_CONTOURS_MATCH_I2,0);\n        if ( d < 8.4 ) // heuristic value, experiments needed !!\n        {\n            cv::drawContours(haystack_binarized, contours, i, 128, 3);\n            nfound ++;\n        }\n    }\n    cerr << nfound << \" objects found\" << endl;\n    cv::imshow(\"haystack\",haystack_binarized);\n    //imwrite(\"hay.png\",haystack_binarized);\n    cv::waitKey();\n}\n\n\nint main()\n{\n    // 1. get the contour of our needle:\n    Mat needle = imread(\"needle.png\",0);\n    Mat needle_b; \n    threshold(needle,needle_b,120,255,1); \n    imshow(\"needle\",needle_b);\n\n    std::vector<std::vector<cv::Point>> needle_conts;\n    cv::findContours(needle_b, needle_conts, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_NONE);\n    if ( needle_conts.size() == 0 )\n    {\n        std::cout << \" no contour Found\" << std::endl;\n        return -1;\n    }\n    std::vector<cv::Point> needle_contour = needle_conts[0];\n\n    // 2. check a positive sample:\n    Mat haypos = imread(\"hay_pos.png\",0);\n    Mat haypos_b; \n    threshold(haypos,haypos_b,120,255,1);\n    findNeedles(needle_contour, haypos_b);\n\n    // 3. check a negative sample:\n    Mat hayneg = imread(\"hay_neg.png\",0);\n    Mat hayneg_b; \n    threshold(hayneg,hayneg_b,120,255,1);\n    findNeedles(needle_contour, hayneg_b);\n\n    return 0;\n}\n"
 },
 {
  "idx": "staqc-test-966",
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "#Directory containing ArcGIS Install files\ninstallDir = arcpy.GetInstallInfo(\"desktop\")[\"InstallDir\"]\n#Path to XML schema for FGDC\ntranslator = os.path.join(installDir, \"Metadata/Translator/ARCGIS2FGDC.xml\")\n#Export your metadata\narcpy.ExportMetadata_conversion(featureClassPath, translator, tempXmlExportPath)\n"
 },
 {
  "idx": "staqc-test-967",
  "doc": "renaming pcraster mapstack",
  "code": "#! /usr/bin/env python\n# Rename PCRaster map stack with names following prefix.yyymmmdd to stack with valid\n# PCRaster time step numbers\n# Johan van der Knijff\n#\n# Example input stack:\n#\n# precip.19810101\n# precip.19810102\n# precip.19810103\n# precip.19810104\n# precip.19810105\n#\n# Then run script with following arguments:\n#\n# python renpcrstack.py precip 1\n#\n# Result:\n#\n# precip00.001\n# precip00.002\n# precip00.003\n# precip00.004\n# precip00.005\n#\n\nimport sys\nimport os\nimport argparse\nimport math\nimport datetime\nimport glob\n\n# Create argument parser\nparser = argparse.ArgumentParser(\n    description=\"Rename map stack\")\n\ndef parseCommandLine():\n    # Add arguments\n    parser.add_argument('prefix',\n                        action=\"store\",\n                        type=str,\n                        help=\"prefix of input map stack (also used as output prefix)\")\n    parser.add_argument('stepStartOut',\n                        action=\"store\",\n                        type=int,\n                        help=\"time step number that is assigned to first map in output stack\")\n\n    # Parse arguments\n    args = parser.parse_args()\n\n    return(args)\n\ndef dateToJulianDay(date):\n\n    # Calculate Julian Day from date\n    # Source: https://en.wikipedia.org/wiki/Julian_day#Converting_Julian_or_Gregorian_calendar_date_to_Julian_day_number\n\n    a = (14 - date.month)/12\n    y = date.year + 4800 - a\n    m = date.month +12*a - 3\n\n    JulianDay = date.day + math.floor((153*m + 2)/5) + 365*y + math.floor(y/4) \\\n        - math.floor(y/100) + math.floor(y/400) - 32045\n\n    return(JulianDay)\n\ndef genStackNames(prefix,start,end, stepSize):\n    # Generate list with names of all maps\n    # map name is made up of 11 characters, and chars 8 and 9 are\n    # separated by a dot. Name starts with prefix, ends with time step\n    # number and all character positions in between are filled with zeroes\n\n    # define list that will contain map names\n    listMaps = []\n\n    # Count no chars prefix\n    charsPrefix = len(prefix)\n\n    # Maximum no chars needed for suffix (end step)\n    maxCharsSuffix = len(str(end))\n\n    # No of free positions between pre- and suffix\n    noFreePositions = 11 - charsPrefix - maxCharsSuffix\n\n    # Trim prefix if not enough character positions are available \n    if noFreePositions < 0:\n        # No of chars to cut from prefix if 11-char limit is exceeded\n        charsToCut = charsPrefix + maxCharsSuffix - 11\n        charsToKeep = charsPrefix - charsToCut\n\n        # Updated prefix\n        prefix = prefix[0:charsToKeep]\n\n        # Updated prefix length\n        charsPrefix = len(prefix)\n\n    # Generate name for each step\n\n    for i in range(start,end + 1,stepSize):\n\n        # No of chars in suffix for this step\n        charsSuffix = len(str(i))\n\n        # No of zeroes to fill\n        noZeroes = 11 - charsPrefix - charsSuffix\n\n        # Total no of chars right of prefix\n        charsAfterPrefix = noZeroes + charsSuffix\n\n        # Name of map\n\n        thisName = prefix + (str(i)).zfill(charsAfterPrefix)\n        thisFile = thisName[0:8]+\".\" + thisName[8:11]\n\n        listMaps.append(thisFile)\n\n    return listMaps    \n\ndef main():\n    # Parse command line arguments\n    args = parseCommandLine()\n    prefix = args.prefix\n    stepStartOut = args.stepStartOut\n\n    # Glob pattern for input maps: prefix + dot + 8 char extension\n    pattern = prefix + \".????????\"\n\n    # Get list of all input maps based on glob pattern\n    mapsIn = glob.glob(pattern)\n\n    # Set time format\n    tfmt = \"%Y%m%d\"\n\n    # Set up dictionary that will act as lookup table between Julian Days (key) \n    # and Date string\n    jDayDate = {}\n\n    for map in mapsIn:\n        baseNameIn = os.path.splitext(map)[0]\n        dateIn = os.path.splitext(map)[1].strip(\".\")\n\n        # Convert to date / time format\n        dt = datetime.datetime.strptime(dateIn, tfmt)\n\n        # Convert date to Julian day number\n        jDay = int(dateToJulianDay(dt))\n\n        # Store as key-value pair in dictionary\n        jDayDate[jDay] = dateIn\n\n    # Number of input maps (equals number of key-value pairs)\n    noMaps = len(jDayDate)\n\n    # Create list of names for output files \n    mapNamesOut = genStackNames(prefix, stepStartOut, noMaps + stepStartOut -1, 1)\n\n    # Iterate over Julian Days (ascending order)\n\n    i = 0\n\n    for key in sorted(jDayDate):\n        # Name of input file\n        fileIn = prefix + \".\"+ jDayDate[key]\n\n        # Name of output file\n        fileOut = mapNamesOut[i]\n\n        # Rename file\n        os.rename(fileIn, fileOut)\n\n        print(\"Renamed \" + fileIn + \" ---> \" + fileOut)\n\n        i += 1\n\nmain()\n"
 },
 {
  "idx": "staqc-test-968",
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [11]: dct = {3:40, 2:30, 1:20, 0:10}\n\nIn [9]: arr = np.array([10,20,30,40])\n\nIn [12]: arr[3]\nOut[12]: 40\n\nIn [13]: dct[3]\nOut[13]: 40\n"
 },
 {
  "idx": "staqc-test-969",
  "doc": "How many factors in an integer",
  "code": "def factors(n):\n    result = []\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n\n    return result\n"
 },
 {
  "idx": "staqc-test-970",
  "doc": "More efficient way to make unicode escape codes",
  "code": "In [18]: f = open('data.txt', 'wb')\n\nIn [19]: %timeit f.write(s.encode('unicode_escape'))\nThe slowest run took 224.43 times longer than the fastest. This could mean that an intermediate result is being cached.\n100000 loops, best of 3: 1.55 \u00b5s per loop\n\nIn [20]: %timeit f.write(s.encode('ascii','backslashreplace'))\nThe slowest run took 9.13 times longer than the fastest. This could mean that an intermediate result is being cached.\n100000 loops, best of 3: 2.37 \u00b5s per loop\n\nIn [21]: f.close()\n"
 },
 {
  "idx": "staqc-test-971",
  "doc": "Is there an easy way to tell which line number a file pointer is on?",
  "code": "class FileLineWrapper(object):\n    def __init__(self, f):\n        self.f = f\n        self.line = 0\n    def close(self):\n        return self.f.close()\n    def readline(self):\n        self.line += 1\n        return self.f.readline()\n"
 },
 {
  "idx": "staqc-test-972",
  "doc": "Conditionally and interatively calculate column based on value of three columns",
  "code": "xyzdict = {\"xx\":0.25,\n          \"xy\":0.25,\n          \"xz\":0.5,\n          \"yx\":0.33,\n          \"yy\":0.33,\n          \"yz\":0.33,\n          \"zx\":0.5,\n          \"zy\":0.5}\n"
 },
 {
  "idx": "staqc-test-973",
  "doc": "Finding groups of increasing numbers in a list",
  "code": "from itertools import groupby, tee, cycle\n\nx = [17, 17, 19, 20, 21, 22, 0, 1, 2, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 28, 29, 30, 31, 32, 33, 34, 35,\n     36, 1, 2, 3, 4,34,54]\n\n\ndef sequences(l):\n    x2 = cycle(l)\n    next(x2)\n    grps = groupby(l, key=lambda j: j + 1 == next(x2))\n    for k, v in grps:\n        if k:\n            yield tuple(v) + (next((next(grps)[1])),)\n\n\nprint(list(sequences(x)))\n\n[(19, 20, 21, 22), (0, 1, 2), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (28, 29, 30, 31, 32, 33, 34, 35, 36), (1, 2, 3, 4)]\n"
 },
 {
  "idx": "staqc-test-974",
  "doc": "SQLAlchemy ON DUPLICATE KEY UPDATE",
  "code": "from sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.sql.expression import Insert\n\n@compiles(Insert)\ndef append_string(insert, compiler, **kw):\n    s = compiler.visit_insert(insert, **kw)\n    if 'append_string' in insert.kwargs:\n        return s + \" \" + insert.kwargs['append_string']\n    return s\n\n\nmy_connection.execute(my_table.insert(append_string = 'ON DUPLICATE KEY UPDATE foo=foo'), my_values)\n"
 },
 {
  "idx": "staqc-test-975",
  "doc": "How to speed-up python nested loop?",
  "code": "import numpy as np\n\nARRAY_LENGTH = 500000\nINTERVAL_LENGTH = 15\nclose = np.arange(ARRAY_LENGTH, dtype=np.float)\nvolume = np.arange(ARRAY_LENGTH, dtype=np.float)\n\ndef old_function(close, volume, INTERVAL_LENGTH):\n    results = []\n    for i in xrange(len(close) - INTERVAL_LENGTH):\n        for j in xrange(i+1, i+INTERVAL_LENGTH):\n            ret = close[j] / close[i]\n            vol = sum( volume[i+1:j+1] )\n            if (ret > 1.0001) and (ret < 1.5) and (vol > 100):\n                results.append( (i, j, ret, vol) )\n    return results\n\n\ndef new_function(close, volume, INTERVAL_LENGTH):\n    results = []\n    for i in xrange(close.size - INTERVAL_LENGTH):\n        vol = volume[i+1:i+INTERVAL_LENGTH].cumsum()\n        ret = close[i+1:i+INTERVAL_LENGTH] / close[i]\n\n        filter = (ret > 1.0001) & (ret < 1.5) & (vol > 100)\n        j = np.arange(i+1, i+INTERVAL_LENGTH)[filter]\n\n        tmp_results = zip(j.size * [i], j, ret[filter], vol[filter])\n        results.extend(tmp_results)\n    return results\n\ndef new_function2(close, volume, INTERVAL_LENGTH):\n    vol, ret = [], []\n    I, J = [], []\n    for k in xrange(1, INTERVAL_LENGTH):\n        start = k\n        end = volume.size - INTERVAL_LENGTH + k\n        vol.append(volume[start:end])\n        ret.append(close[start:end])\n        J.append(np.arange(start, end))\n        I.append(np.arange(volume.size - INTERVAL_LENGTH))\n\n    vol = np.vstack(vol)\n    ret = np.vstack(ret)\n    J = np.vstack(J)\n    I = np.vstack(I)\n\n    vol = vol.cumsum(axis=0)\n    ret = ret / close[:-INTERVAL_LENGTH]\n\n    filter = (ret > 1.0001) & (ret < 1.5) & (vol > 100)\n\n    vol = vol[filter]\n    ret = ret[filter]\n    I = I[filter]\n    J = J[filter]\n\n    output = zip(I.flat,J.flat,ret.flat,vol.flat)\n    return output\n\nresults = old_function(close, volume, INTERVAL_LENGTH)\nresults2 = new_function(close, volume, INTERVAL_LENGTH)\nresults3 = new_function(close, volume, INTERVAL_LENGTH)\n\n# Using sets to compare, as the output \n# is in a different order than the original function\nprint set(results) == set(results2)\nprint set(results) == set(results3)\n"
 },
 {
  "idx": "staqc-test-976",
  "doc": "Get permutation with specified degree by index number",
  "code": "import itertools\n\nmemostirling1 = {(0, 0): 1}\ndef stirling1(n, k):\n    ans = memostirling1.get((n, k))\n    if ans is None:\n        if not 1 <= k <= n: return 0\n        ans = (n - 1) * stirling1(n - 1, k) + stirling1(n - 1, k - 1)\n        memostirling1[(n, k)] = ans\n    return ans\n\ndef cyclecount(prefix):\n    c = 0\n    visited = [False] * len(prefix)\n    for (i, j) in enumerate(prefix):\n        while j < len(prefix) and not visited[j]:\n            visited[j] = True\n            if j == i:\n                c += 1\n                break\n            j = prefix[j]\n    return c\n\ndef extcount(n, dset, prefix):\n    c = cyclecount(prefix)\n    return sum(stirling1(n - len(prefix), n - d - c) for d in dset)\n\ndef unrank(n, dset, rnk):\n    assert rnk >= 0\n    choices = set(range(n))\n    prefix = []\n    while choices:\n        for i in sorted(choices):\n            prefix.append(i)\n            count = extcount(n, dset, prefix)\n            if rnk < count:\n                choices.remove(i)\n                break\n            del prefix[-1]\n            rnk -= count\n        else:\n            assert False\n    return tuple(prefix)\n\ndef rank(n, dset, perm):\n    assert n == len(perm)\n    rnk = 0\n    prefix = []\n    choices = set(range(n))\n    for j in perm:\n        choices.remove(j)\n        for i in sorted(choices):\n            if i < j:\n                prefix.append(i)\n                rnk += extcount(n, dset, prefix)\n                del prefix[-1]\n        prefix.append(j)\n    return rnk\n\ndef degree(perm):\n    return len(perm) - cyclecount(perm)\n\ndef test(n, dset):\n    for (rnk, perm) in enumerate(perm for perm in itertools.permutations(range(n)) if degree(perm) in dset):\n        assert unrank(n, dset, rnk) == perm\n        assert rank(n, dset, perm) == rnk\n\ntest(7, {2, 3, 5})\n"
 }
]