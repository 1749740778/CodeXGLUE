[
 {
  "idx": 1,
  "doc": "How do I sort a complex dictionary by a key, which resides deep the dictionary?",
  "code": "my_dict = {}\nmy_dict[#key] = # your instance\n",
  "label": 0
 },
 {
  "idx": 2,
  "doc": "How can I change the value of a node in a python dictionary by following a list of keys?",
  "code": ">>> reduce(getitem, lis[:-1], DictOfVehiclePrices)[lis[-1]] = 'cheap'\n",
  "label": 0
 },
 {
  "idx": 3,
  "doc": "Return All Matching Lines in a Logfile",
  "code": "[1242248375] SERVICE ALERT: myhostname.com;DNS: Recursive;CRITICAL\n",
  "label": 0
 },
 {
  "idx": 4,
  "doc": "Return All Matching Lines in a Logfile",
  "code": "print \"ID is : \", m.groups()[1]\n",
  "label": 0
 },
 {
  "idx": 5,
  "doc": "How can I determine when a user is in the process of entering something as an input in Python?",
  "code": "import sys, termios\ntermios.tcsetattr(sys.stdin.fileno(),termios.TCSADRAIN, previous_mode )\n",
  "label": 0
 },
 {
  "idx": 6,
  "doc": "sqlite SQL query for unprocessed rows",
  "code": "SELECT *\n  FROM TABLE_A a\n WHERE NOT EXISTS(SELECT NULL\n                    FROM TABLE_A$foo f\n                   WHERE a.id = f.id\n                     AND a.value1 = f.value1\n                     AND a.value2 = f.value2)\n",
  "label": 1
 },
 {
  "idx": 7,
  "doc": "How to find ngram frequency of a column in a pandas dataframe?",
  "code": "                frequency\ngood            3\npathetic        1\naverage movie   1\nmovie bad       2\nwatch           1\ngood movie      1\nwatch good      3\ngood acting     2\nmust            1\nmovie good      2\npathetic avoid  1\nbad acting      1\naverage         1\nmust watch      1\nacting          1\nbad             1\nmovie           1\navoid           1\n",
  "label": 0
 },
 {
  "idx": 8,
  "doc": "making regex capture group optional in url for a tornado app",
  "code": "class QuestionHandler(RequestHandler):\n    def get(self, id):\n        # Display the question\n\n    def post(self, id):\n        # Validates the answer\n        answer = self.get_argument('answer')\n\napplication = Application([\n    (r'/(\\d+)', QuestionHandler),\n])\n",
  "label": 1
 },
 {
  "idx": 9,
  "doc": "How to apply an array of functions to a value using list comprehension?",
  "code": ">>> functions = [lambda x: x + 2, lambda x: x * 2]\n>>> reduce(lambda x, y: y(x), functions, 1)\n6\n",
  "label": 1
 },
 {
  "idx": 10,
  "doc": "GMail API - Get last message of a thread",
  "code": "{\n \"messages\": [\n  {\n   \"id\": \"14e92e929dcc2df2\",\n   \"internalDate\": \"1436983830000\" \n  },\n  {\n   \"id\": \"14e92e94a2645355\",\n   \"internalDate\": \"1436983839000\"\n  },\n  {\n   \"id\": \"14e92e95cfa0651d\",\n   \"internalDate\": \"1436983844000\"\n  },\n  {\n   \"id\": \"14e92e9934505214\",\n   \"internalDate\": \"1436983857000\" // <-- This is it!\n  }\n ]\n}\n",
  "label": 0
 },
 {
  "idx": 11,
  "doc": "Django, topic model with subtopics",
  "code": "apple = Topic.objects.filter(tag='Apple')\nsub_topics = apple.sub_topics.all() ## Gets all sub_topics.\n",
  "label": 0
 },
 {
  "idx": 12,
  "doc": "regex/python to find and replace specific number within string",
  "code": "[ 17 plane_17 \\ 23 25 19 99 150 248 \\ noname ]\n",
  "label": 0
 },
 {
  "idx": 13,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "# Testing code\nif __name__ == '__main__':\n\n    circle = Circle(x=3, y=4, r=5)\n    print('circumference', circle.circumference)\n\n    print('try setting circumference')\n    circle.circumference = 12.5\n",
  "label": 0
 },
 {
  "idx": 14,
  "doc": "Insert into a large table in psycopg using a dictionary",
  "code": "d = dict(foo=10,bar=20,baz=30)\n\ncur.execute(\n    \"insert into testins (%s) values (%s)\" \n        % (','.join(d), ','.join('%%(%s)s' % k for k in d)),\n    d)\n",
  "label": 1
 },
 {
  "idx": 15,
  "doc": "how to do an embedded python module for remote sandbox execution?",
  "code": "    exec 'import other_module' in sandbox.__dict__\n",
  "label": 1
 },
 {
  "idx": 16,
  "doc": "variable length of %s with the % operator in python",
  "code": "%\n- if left justified\n* or integer - min width (if '*', insert variable length in data tuple)\n.* or .integer - max width (if '*', insert variable length in data tuple)\n",
  "label": 1
 },
 {
  "idx": 17,
  "doc": "Suppressing the output in libsvm (python)",
  "code": "import svmutil\nparam = svmutil.svm_parameter('-q')\n...\n",
  "label": 1
 },
 {
  "idx": 18,
  "doc": "How to separate a single list into multiple list in python",
  "code": "foods = ['I_want_ten_orange_cookies', 'I_want_four_orange_juices', 'I_want_ten_lemon_cookies', 'I_want_four_lemon_juices']\n\norange=[]\nlemon=[]\n\nfor food in foods:\n    if 'orange' in food.split('_'):\n        orange.append(food)\n    elif 'lemon' in food.split('_'):\n        lemon.append(food) \n",
  "label": 1
 },
 {
  "idx": 19,
  "doc": "Django/jQuery: handling template inheritence and JS files loading",
  "code": "<script src=\"jquery.js\"></script>\n<script src=\"awesome-script.js\"></script>\n<script>\n    $(document).ready(function(){\n        ...\n    });\n</script>\n",
  "label": 0
 },
 {
  "idx": 20,
  "doc": "how to properly loop through two files comparing strings in both files against each other",
  "code": "total_sentiment = sum(scores.get(word,0) for word in text.split())\n",
  "label": 0
 },
 {
  "idx": 21,
  "doc": "Iterate through a list of numpy arrays",
  "code": "for i in list_of_arrays:\n    print total(i)\n",
  "label": 0
 },
 {
  "idx": 22,
  "doc": "Complete a task during certain time frames within a python script",
  "code": "global clearscreen\n",
  "label": 0
 },
 {
  "idx": 23,
  "doc": "Execute a string as a command",
  "code": "def fun():\n    print \"in fun\"\n\neval(\"fun()\")\n\nx=\"fun()\"\neval(x)\n",
  "label": 1
 },
 {
  "idx": 24,
  "doc": "Getting value of a class in selenium and python",
  "code": "medications = driver.find_elements_by_xpath(\"//input[contains(@id, 'Medications']\")\n",
  "label": 0
 },
 {
  "idx": 25,
  "doc": "Python: List comprehension list of lists",
  "code": "[map(lambda x:x+1 ,group) for group in x]\n",
  "label": 1
 },
 {
  "idx": 26,
  "doc": "How to add/remove said a curve to/from a plot in Python with Matplotlib",
  "code": "self.h.set_ydata(newdata)\n",
  "label": 0
 },
 {
  "idx": 27,
  "doc": "Scrapy:newbie attempts to pass the null value",
  "code": "if len(ranking_list) > 0:\n    print ranking_list \n",
  "label": 1
 },
 {
  "idx": 28,
  "doc": "Python script to loop through all files in directory, delete any that are less than 200 kB in size",
  "code": "import os, os.path\n\nfor root, _, files in os.walk(dirtocheck):\n    for f in files:\n        fullpath = os.path.join(root, f)\n        if os.path.getsize(fullpath) < 200 * 1024:\n            os.remove(fullpath)\n",
  "label": 1
 },
 {
  "idx": 29,
  "doc": "python create empty object of arbitrary type?",
  "code": "23\n",
  "label": 0
 },
 {
  "idx": 30,
  "doc": "Compare rows then take rows out if neccessary",
  "code": "In [98]: df.Distance.cummax()\nOut[98]:\n0    19626207\n1    20174412\n2    20175112\n3    20175112\n4    20175112\n5    20175112\n6    20175112\n7    20195112\n8    21127633\n9    21127633\nName: Distance, dtype: object\n",
  "label": 0
 },
 {
  "idx": 31,
  "doc": "PyQt4 Local Directory view with option to select folders",
  "code": "model = CheckableDirModel()\ntree = QtGui.QTreeView()\ntree.setModel(model)\n",
  "label": 0
 },
 {
  "idx": 32,
  "doc": "Django: how to change label using formset extra?",
  "code": "<form method=\"POST\">\n{% csrf_token %}\n{{ machine_form }}\n</form>\n",
  "label": 0
 },
 {
  "idx": 33,
  "doc": "How can I pack images? -Pygame -PyInstaller",
  "code": "import base64\n\nwith open(img_input, \"rb\") as f:\n    with open(img_output_b64, \"wb\") as f2:\n        f2.write(base64.b64encode(f.read()))\n",
  "label": 0
 },
 {
  "idx": 34,
  "doc": "how to exclude the non numerical integers from a data frame in Python",
  "code": "df3 = df1.select_dtypes(include = ['int64', 'float64'])\nprint(df3)\n",
  "label": 1
 },
 {
  "idx": 35,
  "doc": "Render part of the template in Flask",
  "code": "hello = get_template_attribute('_cider.html', 'hello')\nreturn hello('World')\n",
  "label": 0
 },
 {
  "idx": 36,
  "doc": "How to restart a python script after it finishes",
  "code": "while true ; do\n    yourpythonscript.py\ndone\n",
  "label": 1
 },
 {
  "idx": 37,
  "doc": "Python how to strip white-spaces from xml text nodes",
  "code": "<Person><name>My Name</name>\n<Address>My Address</Address>\n</Person>\n",
  "label": 0
 },
 {
  "idx": 38,
  "doc": "Python - Comparing two lists of sets",
  "code": "common = l1.intersection(l2)  # common will give common elements\nprint len(common) # this will give you the number of elements in common.\n",
  "label": 0
 },
 {
  "idx": 39,
  "doc": "Matching y axis points together",
  "code": "m = cm.ScalarMappable(cmap=cm.jet)\nm.set_array(number)\nplt.colorbar(m)\n",
  "label": 0
 },
 {
  "idx": 40,
  "doc": "Scraping website that uses javascript",
  "code": "import requests\n\nurl = 'http://stats.nba.com/stats/playergamelog'\n\nparams = {\n    'Season': '2013-14',\n    'SeasonType': 'Regular Season',\n    'LeagueID': '00',\n    'PlayerID': '2544',\n    'pageNo': '1',\n    'rowsPerPage': '100'\n}\nresponse = requests.post(url, data=params)\n\nprint response.json()\n",
  "label": 1
 },
 {
  "idx": 41,
  "doc": "How to treat a hex as string?",
  "code": ">>> str(0x61cc1000)\n'1640763392'  # int value of the hex number as a string\n",
  "label": 0
 },
 {
  "idx": 42,
  "doc": "Atomic increment of a counter in django",
  "code": "Counter.objects.get_or_create(name = name)\nCounter.objects.filter(name = name).update(count = F('count')+1)\n",
  "label": 1
 },
 {
  "idx": 43,
  "doc": "accumulating an orderedDict",
  "code": "total = 0\nfor key, value in month_dictionary.iteritems():\n    total += value\n    month_dictionary[key] = total\n",
  "label": 1
 },
 {
  "idx": 44,
  "doc": "how to join multiple sorted files in Python alphabetically?",
  "code": "import heapq\nimport contextlib\n\nwith contextlib.ExitStack() as stack:\n    files = [stack.enter_context(open(fn)) for fn in inFiles]\n    with open('output', 'w') as f:\n        f.writelines(heapq.merge(*files))\n",
  "label": 1
 },
 {
  "idx": 45,
  "doc": "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]",
  "code": "hashlookup:     0.01s     100%\nstringcount:    0.03s     264%\nlog_e:          0.04s     315%\nlog_2:          0.04s     383%\nolgn:           0.18s    1585%\nbitcounter:     1.41s   12393%\n",
  "label": 0
 },
 {
  "idx": 46,
  "doc": "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]",
  "code": "log_e:          0.00s     100%\nlog_2:          0.01s     118%\nstringcount:    0.02s     354%\nolgn:           0.03s     707%\nbitcounter:     1.73s   37695%\n",
  "label": 0
 },
 {
  "idx": 47,
  "doc": "Python array from CSV file",
  "code": ">>> import yaml\n>>> fname = \"data.yaml\"\n>>> with open(fname) as f:\n...     cfg = yaml.load(f)\n...\n>>> cfg\n{'MyHome': ['10.0.0.3', '10.0.0.9', '10.0.0.234']}\n",
  "label": 0
 },
 {
  "idx": 48,
  "doc": "PyPI API - How to get stable package version",
  "code": "$ python v.py\nDjango==1.9\n",
  "label": 0
 },
 {
  "idx": 49,
  "doc": "Add [] around numbers in strings",
  "code": ">>> import re\n>>> inputstring = \"pixel1blue pin10off output2high foo9182bar\"\n>>> re.sub(r'(\\d+)', r'[\\1]', inputstring)\n'pixel[1]blue pin[10]off output[2]high foo[9182]bar'\n",
  "label": 1
 },
 {
  "idx": 50,
  "doc": "Sort list with multiple criteria in python",
  "code": "filenames = [\n    '1.0.0.0.py',\n    '0.0.0.0.py',\n    '1.1.0.0.py'\n]\n\nprint sorted(filenames, key=lambda f: map(int, f.split('.')[:-1]))\n",
  "label": 1
 },
 {
  "idx": 51,
  "doc": "Import object from module of same name using __import__",
  "code": "obj = __import__(\"mymod\", ...).mymod\n",
  "label": 0
 },
 {
  "idx": 52,
  "doc": "Adding docstrings to namedtuples?",
  "code": ">>> print nt.Point.__doc__\n A point in 2d space \n",
  "label": 0
 },
 {
  "idx": 53,
  "doc": "Adding docstrings to namedtuples?",
  "code": "A point in 3d space\n",
  "label": 0
 },
 {
  "idx": 54,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "from distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext': build_ext},\n    ext_modules = [\n    Extension(\"elps\", \n              sources=[\"elps.pyx\", \"src/ITestClass.cpp\"],\n              libraries=[\"elp\"],\n              language=\"c++\",\n              )\n    ]\n)\n",
  "label": 0
 },
 {
  "idx": 55,
  "doc": "What is the proper way to perform a contextual search against NoSQL key-value pairs?",
  "code": "j = { name : \"mongo\" };\nt = { x : 3 };\ndb.things.save(j);\ndb.things.save(t);\n",
  "label": 0
 },
 {
  "idx": 56,
  "doc": "Extracting Text from Parsed HTML with Python",
  "code": "Slackware Linux 13.0 [x86 DVD ISO]  \nSlackware Linux 14.0 [x86 DVD ISO]  \nSlackware Linux 15.0 [x86 DVD ISO]  \n",
  "label": 0
 },
 {
  "idx": 57,
  "doc": "How do you get a directory listing sorted by creation date in python?",
  "code": "$ python stat_creation_date.py\nThu Feb 11 13:31:07 2009 stat_creation_date.py\n",
  "label": 0
 },
 {
  "idx": 58,
  "doc": "Python Pandas removing substring using another column",
  "code": "In [14]: %timeit testing ['NEW'] = [''.join(str(e).split(k)) for e, k in zip(testing.FULL_NAME.astype('str'), testing.NAME.astype('str'))]\n100 loops, best of 3: 7.24 ms per loop\n",
  "label": 0
 },
 {
  "idx": 59,
  "doc": "Python Pandas removing substring using another column",
  "code": "In [16]: %timeit testing['NEW1'] = testing.apply(address_remove, axis=1)\n10 loops, best of 3: 166 ms per loop\n",
  "label": 0
 },
 {
  "idx": 60,
  "doc": "How to replace Python function while supporting all passed in parameters",
  "code": ">>> def rep(*args):\n    print(*args, sep=' -- ')\n\n>>> def ori(*args):\n    print(args)\n\n>>> ori('dfef', 32)\n('dfef', 32)\n>>> ori = rep\n>>> ori('dfef', 32)\ndfef -- 32\n",
  "label": 0
 },
 {
  "idx": 61,
  "doc": "How to replace Python function while supporting all passed in parameters",
  "code": "f = replacement_f\n",
  "label": 1
 },
 {
  "idx": 62,
  "doc": "Pygame How to use walking animations",
  "code": "images = ['data/down1.png','data/down2.png','data/down3.png']\n",
  "label": 0
 },
 {
  "idx": 63,
  "doc": "Modifying HTML using python html package",
  "code": "from bs4 import BeautifulSoup\n\nhtml_table_string = \"\"\"\n<table>\n    <tr>\n        <td>Something else</td>\n    </tr>\n</table>\n\"\"\"\ntable = BeautifulSoup(html_table_string, \"html.parser\")\n\n# Select first td element and set it's content to 'Something'\ntable.select_one('td').string = 'Something'  # or table.find('td').string = 'Something'\n\nprint(table.prettify())\n",
  "label": 1
 },
 {
  "idx": 64,
  "doc": "Splitting Strings in Python with Separator variable",
  "code": ">>> split_string(\"Before the rain ... there was lightning and thunder.\", \" .\")\n['Before', 'the', 'rain', 'there', 'was', 'lightning', 'and', 'thunder', '']\n",
  "label": 0
 },
 {
  "idx": 65,
  "doc": "Python reshape list to ndim array",
  "code": "np.reshape([0, 0, 1, 1, 2, 2, 3, 3], (4, 2)).T\n# array([[0, 1, 2, 3],\n#        [0, 1, 2, 3]])\n\nnp.reshape([0, 0, 1, 1, 2, 2, 3, 3], (2, 4))\n# array([[0, 0, 1, 1],\n#        [2, 2, 3, 3]])\n",
  "label": 0
 },
 {
  "idx": 66,
  "doc": "Django Templates: Is there a way to query a specific object based on its property (instead of iterating over all)?",
  "code": "sometemplate.html\n{%load my_tags %}\n...\n{% for user in users|where_id:10 %}\n....\n",
  "label": 0
 },
 {
  "idx": 67,
  "doc": "Merge every Every 6 dictionary into single dictionary of List",
  "code": "[{u'Price': u'21.00', u'Code': u'900321', u'Description': u'TIG 2.4MM TUNGSTEN (EACH ROD)', u'Line Total': u'42.00', u'Quantity': u'2'},\n{u'Price': u'2.60', u'Code': u'92.01.15.08', u'Description': u'BINZEL .8MM MIG TIPS MB15', u'Line Total': u'15.60', u'Quantity': u'6'}]\n",
  "label": 0
 },
 {
  "idx": 68,
  "doc": "Change object's variable from different file",
  "code": "enemies.knightofni(self)\n",
  "label": 0
 },
 {
  "idx": 69,
  "doc": "Change object's variable from different file",
  "code": "def knightofni(obj):\n    obj.number = 1\n    obj.who = \"We've encountered Knight of Ni.\"\n\ndef frenchman(obj):\n    obj.number = 4\n    obj.who = \"We've encountered French.\"\n",
  "label": 0
 },
 {
  "idx": 70,
  "doc": "How to remove a column from a structured numpy array *without copying it*?",
  "code": "In [301]: a[0]\nOut[301]: (3.14, 13.5, 1248, -2)\n",
  "label": 0
 },
 {
  "idx": 71,
  "doc": "How do you create a list of values in Python within a certain range?",
  "code": ">>>[ 'IT'+str(x).zfill(5) for x in range(10) ]\n['IT00000', 'IT00001', 'IT00002', 'IT00003', 'IT00004', 'IT00005', 'IT00006', 'IT00007', 'IT00008', 'IT00009']\n",
  "label": 1
 },
 {
  "idx": 72,
  "doc": "to delete records from a file in python",
  "code": "foo\nbar\n55 foobar\n44 foo\n",
  "label": 0
 },
 {
  "idx": 73,
  "doc": "How to get a vector from a list in list in python?",
  "code": "f = list(Comprehension(e)[2][1])\n",
  "label": 0
 },
 {
  "idx": 74,
  "doc": "Using Eval in Python to create class variables",
  "code": "self.wavelength = wavelength_val\n",
  "label": 0
 },
 {
  "idx": 75,
  "doc": "XPATH: If there is element with certain value assume \"phone\" then get it's sibling value",
  "code": ">>> from scrapy.selector import Selector\n>>> selector = Selector(response)\n>>> selector.css('td:contains(\"Phone\") + td').re(r'(\\d[\\d ]+\\d)')\n[u'020 641512']\n>>> \n",
  "label": 1
 },
 {
  "idx": 76,
  "doc": "Search with employee_id in openerp?",
  "code": "context=\"{'search_default_employee_id':employee_id}\"\n",
  "label": 1
 },
 {
  "idx": 77,
  "doc": "Searching and counting dictionary key value pairs",
  "code": "[('dog', 7), ('cat', 10)]\n",
  "label": 0
 },
 {
  "idx": 78,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "from PyQt4 import QtCore, QtGui, Qt\nimport cPickle\nimport pickle\n",
  "label": 0
 },
 {
  "idx": 79,
  "doc": "Sum of calculation in a variable",
  "code": "def calc(x=0, y=0, z=0):\n    expression = raw_input('Enter an expression: ')\n\n    return eval(expression, None, locals())\n",
  "label": 1
 },
 {
  "idx": 80,
  "doc": "How to import classes defined in __init__.py",
  "code": "from . import settings # or just 'import settings' on old Python versions\nclass Helper(object):\n      pass\n",
  "label": 0
 },
 {
  "idx": 81,
  "doc": "Pandas dataframe - transform column values into individual columns",
  "code": "BC XY UV    b    c\n0   x  u  222  111\n1   x  v  444  333\n2   y  u   22   11\n3   y  v   44   33\n",
  "label": 0
 },
 {
  "idx": 82,
  "doc": "Replacing strings in specific positions into a text and then rewriting all the text",
  "code": "file2.write(newline)\n",
  "label": 0
 },
 {
  "idx": 83,
  "doc": "Replacing strings in specific positions into a text and then rewriting all the text",
  "code": "newline = \" \".join(spl)\n",
  "label": 0
 },
 {
  "idx": 84,
  "doc": "regex to find a specific pattern in python",
  "code": "import re\n\ntext = \"\"\"\nNovember 5 - December 10\nSeptember 23 - December 16\n\"\"\"\n\nmatches = re.findall(\"\\w+\\s\\d+\\s\\-\\s\\w+\\s\\d+\", text)\nprint matches\n",
  "label": 1
 },
 {
  "idx": 85,
  "doc": "Convert date to second from a reference - Python",
  "code": "print calendar.timegm(datetime(1970, 1, 1, 0, 0, 0, tzinfo=pytz.utc).utctimetuple())\n",
  "label": 0
 },
 {
  "idx": 86,
  "doc": "passing arrays with ctypes",
  "code": "Output\n[0, 1, 2, 3, 4]\n",
  "label": 0
 },
 {
  "idx": 87,
  "doc": "How to create a object of variables, and return it, in Python?",
  "code": "class Disk(object):\n    def __init__(self, test1=None, test2=None, test3=None):\n        self.test1 = test1\n        self.test2 = test2\n        self.test3 = test3\n",
  "label": 0
 },
 {
  "idx": 88,
  "doc": "How to plot real-time graph, with both axis dependent on time?",
  "code": "def get_y():\n     t = 0\n     while t <= Tc:\n         y = -0.5 * g * t**2 + h \n         yield y\n         t += step\n",
  "label": 0
 },
 {
  "idx": 89,
  "doc": "How does python prevent a class from being subclassed?",
  "code": ">>> class Bar(Foo):\n...     pass\n... \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 5, in __new__\nTypeError: type 'Foo' is not an acceptable base type\n",
  "label": 0
 },
 {
  "idx": 90,
  "doc": "Python .csv writer",
  "code": "url =[urlparse(u).netloc for u in file (ipath, \"r+b\")]\n",
  "label": 0
 },
 {
  "idx": 91,
  "doc": "How to Get Variable from another .py",
  "code": "from communicate import *\nx = execute_and_receive(\"2.py\")\ny = x + 2\n",
  "label": 0
 },
 {
  "idx": 92,
  "doc": "Matrix triple product with theano",
  "code": "theano.dot(A[:, None, :] * B[None, :, :], C.T)\n",
  "label": 1
 },
 {
  "idx": 93,
  "doc": "Python (Maya) pass flags as variables",
  "code": "cmds.ls(long=True, type='mesh') \n",
  "label": 1
 },
 {
  "idx": 94,
  "doc": "I dont know how to add Proxy to my Phantomjs script",
  "code": "params = CASPER +' '+ saStr + ' ' + SCRIPT\n",
  "label": 0
 },
 {
  "idx": 95,
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "category\ncat1         23&98\ncat2        65&798\ndtype: object\n",
  "label": 0
 },
 {
  "idx": 96,
  "doc": "Delete newline / return carriage in file output",
  "code": "wf.write('\\n')\n",
  "label": 0
 },
 {
  "idx": 97,
  "doc": "Accessing an additional profile from templates",
  "code": "{{ request.user.userreferralprofile.y }}\n",
  "label": 1
 },
 {
  "idx": 98,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "pd.concat([get_sumdf(area_tab) for area_tab in areas_tabs])\n",
  "label": 0
 },
 {
  "idx": 99,
  "doc": "Randomize a generator",
  "code": "random.sample(itertools.combinations(a_large_set, 3), 10)\n",
  "label": 0
 },
 {
  "idx": 100,
  "doc": "Lazy class property decorator",
  "code": "foo called for class <class '__main__.Test'>\n42\n42\n",
  "label": 0
 },
 {
  "idx": 101,
  "doc": "python click usage of standalone_mode",
  "code": "./clickme.py --name something\n<click.core.Context object at 0x7fb671a51690>\nName is something\n",
  "label": 0
 },
 {
  "idx": 102,
  "doc": "Relating/adding data to a django object list",
  "code": "{% for team in teams %}\n    team win percentage = {{ team.team_win_percent }}\n    team lose percentage = {{ team.team_lose_percent }}\n\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 103,
  "doc": "EPSG:900913 to WGS 84 projection",
  "code": " ST_Transform(geom,4326)\n",
  "label": 1
 },
 {
  "idx": 104,
  "doc": "List database tables with SQLAlchemy",
  "code": "from sqlalchemy import create_engine\nengine = create_engine(\"postgresql://u:p@host/database\")\n",
  "label": 0
 },
 {
  "idx": 105,
  "doc": "Python - how to ignore escape chars in regexp",
  "code": ">>> s1 = r'STR(\"<some_string>\")'\n>>> s2 = r'STR(\"test \\\") string\")'\n>>> re.findall(r'STR\\(\"(.+?)(?<!\\\\)\"\\)', s1)\n['<some_string>']\n>>> re.findall(r'STR\\(\"(.+?)(?<!\\\\)\"\\)', s2)\n['test \\\\\") string']\n",
  "label": 1
 },
 {
  "idx": 106,
  "doc": "How to convert string timezones in form (Country/city) into datetime.tzinfo",
  "code": "import datetime, pytz\nzoneName = 'America/New_York'\nnow = datetime.datetime.now(pytz.timezone(zoneName))\n",
  "label": 1
 },
 {
  "idx": 107,
  "doc": "Python - compare columns in a text file, loop and pop lists",
  "code": "unique_ids=set(data['Third col'])    \n\nwhile True:                        \n    try:    \n        print ', '.join([data[e].pop(0) for e in header])\n    except IndexError:\n        break     \nprint 'Unique IDs:', len(unique_ids)         \n",
  "label": 0
 },
 {
  "idx": 108,
  "doc": "Selecting Tags With Multiple Part Class in BeautifulSoup",
  "code": "from bs4 import BeautifulSoup\n\nhtml = \"\"\"\n<div>\n     <div class=\"A\">test1</div>\n     <div class=\"A B\">test2</div>\n     <div class=\"A X Y\">test3</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html, \"lxml\")\n\ndef filter_function(elm):\n    return elm and \"class\" in elm.attrs and \"A\" in elm[\"class\"] and \"Y\" not in elm[\"class\"]\n\nfor div in soup.find_all(filter_function):\n    print(div.text)\n",
  "label": 1
 },
 {
  "idx": 109,
  "doc": "Python: obtain multidimensional matrix as results from a function",
  "code": "array([[ 2.2,  2.4],\n       [ 4.2,  4.4]])\n",
  "label": 0
 },
 {
  "idx": 110,
  "doc": "How do I get Python2.x `map` functionality in Python3.x?",
  "code": "a=['a1']\nb=['b1','b2','b3']\nc=['c1','c2']\n\nprint(list(map2x(None, a, b, c)))\n",
  "label": 0
 },
 {
  "idx": 111,
  "doc": "How do I get Python2.x `map` functionality in Python3.x?",
  "code": "[('a1', 'b1', 'c1'), (None, 'b2', 'c2'), (None, 'b3', None)]\n",
  "label": 0
 },
 {
  "idx": 112,
  "doc": "find an empty value gap in a list and allocate a group of strings",
  "code": "['text', 'text', '', '', 'text', 'text', 'text', 'text', 'text', 'text']\n",
  "label": 0
 },
 {
  "idx": 113,
  "doc": "How to find and select a table in html code with xpath",
  "code": "tables = root.xpath('.//table[preceding-sibling::h3[text()=\"Impact\"]]')\n",
  "label": 1
 },
 {
  "idx": 114,
  "doc": "How to find and select a table in html code with xpath",
  "code": "tables = root.xpath('.//h3[text()=\"Impact\"]/following-sibling::table')\n",
  "label": 1
 },
 {
  "idx": 115,
  "doc": "How to generate list combinations in Python",
  "code": ">>> map(list, product([1, 0], repeat=2))\n[[1, 1], [1, 0], [0, 1], [0, 0]]\n",
  "label": 1
 },
 {
  "idx": 116,
  "doc": "Starting/stopping a background Python process wtihout nohup + ps aux grep + kill",
  "code": "mynohup myscript.py             # will automatically continue running in\n                                # background even if I log out\n\n# two days later, even if I logged out / logged in again the meantime\nmykill myscript.py\n",
  "label": 0
 },
 {
  "idx": 117,
  "doc": "MySQL select all components of a product",
  "code": "SELECT t2.alt_bilesen\n  FROM urunler_seviyeler t1\n  JOIN urunler_seviyeler t2\n    ON t2.parcano = t1.alt_bilesen\n WHERE t1.parcano = 'E40'\n",
  "label": 0
 },
 {
  "idx": 118,
  "doc": "Iterating over related objects in Django: loop over query set or use one-liner select_related (or prefetch_related)",
  "code": "newsletters = Newsletter.objects.prefetch_related('article_set').all()\\\n                    .order_by('-year', '-number')\n\nreturn render_to_response('newsletter/newsletter_list.html',\n                          {'newsletter_list': newsletters})\n",
  "label": 0
 },
 {
  "idx": 119,
  "doc": "Insert tree kind of data taken from a database into a python dictionary",
  "code": "{'A': {'AA': {'AAA': {}, 'AAB': {}}, 'AB': {'ABA': {}, 'ABB': {}}}}\n",
  "label": 0
 },
 {
  "idx": 120,
  "doc": "Parse list to other list",
  "code": "Output\n[('40.0188044212', '-75.0547647126'), ('39.9610355788', '-75.1725011285')]\n",
  "label": 0
 },
 {
  "idx": 121,
  "doc": "Python - Split a list of integers into positive and negative",
  "code": ">>> B=filter(lambda x:x<0,A)\n>>> C=filter(lambda x:x>0,A)\n>>> B\n[-3, -2, -5, -7]\n>>> C\n[1, 8, 4, 6]\n",
  "label": 1
 },
 {
  "idx": 122,
  "doc": "Python - Split a list of integers into positive and negative",
  "code": ">>> B,C=[i for i in A if i<0 ],[j for j in A if j>0]\n>>> B\n[-3, -2, -5, -7]\n>>> C\n[1, 8, 4, 6]\n",
  "label": 1
 },
 {
  "idx": 123,
  "doc": "Scrape 'dictionary' type object from top of HTML file (bunch of text, not in a class)",
  "code": "{u'features': [{u'name': u'Material', u'description': u'[shell] 86% polyester, ... u'Zippered back pocket\\r', u'Reflective details']}\n",
  "label": 0
 },
 {
  "idx": 124,
  "doc": "Django ImageField upload_to path",
  "code": "{% for img in your_object %}\n<img src=\"{{ img.image.url }}\" >\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 125,
  "doc": "Arranging keys and values from a dictionary in a csv file - Python",
  "code": "Ben     ['10', '9']\nAlice   ['10', '10']\nTom     ['9', '8']\n",
  "label": 0
 },
 {
  "idx": 126,
  "doc": "Combining lists and performing a check",
  "code": "{% for attendee, verified, from_user in attendees_list %}\n",
  "label": 0
 },
 {
  "idx": 127,
  "doc": "Abort a running task in Celery within django",
  "code": "abortable_async_result = AbortableAsyncResult(myTaskId)\nabortable_async_result.abort()\n",
  "label": 0
 },
 {
  "idx": 128,
  "doc": "Python: how to create a list from elements that don't meet a certain condition",
  "code": "small_names = []\n\nfor n in names:\n    if len(n) <= 4:\n        small_names.append(n)\n",
  "label": 1
 },
 {
  "idx": 129,
  "doc": "Joining fields values",
  "code": "print(A.array)\n# [1]\n\nprint(B.array)\n# [1, 2, 3]\n\nprint(C.array)\n# [1, 2, 3, 4]\n",
  "label": 0
 },
 {
  "idx": 130,
  "doc": "Python & Numpy - create dynamic, arbitrary subsets of ndarray",
  "code": "filter_matrix = np.array(filterColumns)\ncombination_array = np.array(combination)\nbool_matrix = filter_matrix == combination_array[newaxis, :]   #not sure of the newaxis position\nsubset = raw_data[bool_matrix]\n",
  "label": 0
 },
 {
  "idx": 131,
  "doc": "Sorting a List by frequency of occurrence in a list",
  "code": "from collections import Counter\nprint [item for items, c in Counter(a).most_common() for item in [items] * c]\n# [5, 5, 5, 5, 3, 3, 3, 4, 4, 4, 1, 1, 2]\n",
  "label": 1
 },
 {
  "idx": 132,
  "doc": "To sum column with condition",
  "code": "{'11': 9.7756, '10': 9.791699999999999, '12': 9.7925}\n",
  "label": 0
 },
 {
  "idx": 133,
  "doc": "SCons to generate variable number of targets",
  "code": "env = Environment()\n\ndirname = 'build'\nVariantDir(dirname, 'src', duplicate=0)\n\nExport('env')\n\nSConscript(dirname+'/SConscript')\n",
  "label": 0
 },
 {
  "idx": 134,
  "doc": "Returning all keys that have the same corresponding value in a dictionary with python",
  "code": ">>> a = {'a':1, 'b':2, 'c':2}\n>>> [x for x,y in a.items() if y == 2]\n['c', 'b']\n",
  "label": 1
 },
 {
  "idx": 135,
  "doc": "What is the standard way to add N seconds to datetime.time in Python?",
  "code": " 09:11:55.775695\n 09:16:55\n",
  "label": 0
 },
 {
  "idx": 136,
  "doc": "Simple OOP: Python, saving object names via __init__ v2",
  "code": "123\n12\n1\n",
  "label": 0
 },
 {
  "idx": 137,
  "doc": "Simple OOP: Python, saving object names via __init__ v2",
  "code": "lis = []\nclass Object():\n    def __init__(self, var):\n        self.something = var \n        lis.append(self)  #here self is the reference to the instance being created and you can save it in a list to access it later\nxxx = Object('123')\nxx = Object('12')\nx = Object('1')\n\nfor x in lis:\n    print(x.something)\n",
  "label": 1
 },
 {
  "idx": 138,
  "doc": "Using variable as keyword passed to **kwargs in Python",
  "code": "update_field(\"joe@me.com\", \"name\", \"joe\")\n",
  "label": 0
 },
 {
  "idx": 139,
  "doc": "How do I make a function to accept an argument that is another function?",
  "code": "    elif con_ext == 'no':\n        stage()\n",
  "label": 0
 },
 {
  "idx": 140,
  "doc": "csv to sparse matrix in python",
  "code": "[[32] [21, 23, 32] [23, 53, 82] [82] [46] [75] [] [86] [28] []]\n",
  "label": 0
 },
 {
  "idx": 141,
  "doc": "How can I scrape data from a text table using Python?",
  "code": "Name: JOHN W. WOODS           \nChairman, President, & Chief Executive Officer of AmSouth & AmSouth Bank N.A.\n\nName: C. STANLEY ...\n",
  "label": 0
 },
 {
  "idx": 142,
  "doc": "How to iterate through a list of lists in python?",
  "code": "documents = [sub_list[0] for sub_list in documents]\n",
  "label": 1
 },
 {
  "idx": 143,
  "doc": "Saving an Element in an Array Permanently",
  "code": "import json\nli = []\ndef getinput(li):\n    li.append(raw_input(\"Type in a string: \"))\n",
  "label": 0
 },
 {
  "idx": 144,
  "doc": "parse blocks of text from text file using Python",
  "code": "open(files[0]).read().split('1:', 1)[1].split('\\n')[:19]\n",
  "label": 0
 },
 {
  "idx": 145,
  "doc": "In python, return value only when the function is used in an assignment",
  "code": "def f_with_return():\n    return 'something'\n\ndef f_without_return():\n    f_with_return()  # ignores the return value!\n    print \"I won't return something\"\n",
  "label": 0
 },
 {
  "idx": 146,
  "doc": "two dimensional array for encryption in python",
  "code": ">>> table['7834']\n'13'\n",
  "label": 0
 },
 {
  "idx": 147,
  "doc": "How to resize subfigures when using ImageGrid from Matplotlib",
  "code": "plt.figtext(0.0,0.85,'(a)',size=20)\nplt.figtext(0.0,0.45,'(b)',size=20)\n",
  "label": 0
 },
 {
  "idx": 148,
  "doc": "how to write two elements into one row in Python",
  "code": "x= [['first sentence'],['second sentence'],['third sentence']]\ny= [1,0,1]\n\nfor zx,zy in zip(x, y):\n    print('{}, {}'.format(zx[0], zy))\n",
  "label": 1
 },
 {
  "idx": 149,
  "doc": "Python3 Rename files in a directory importing the new names from a txt file",
  "code": "0000.1.0000.1234567\n0000.1.0000.1234568\n0000.1.0000.1234569\n",
  "label": 0
 },
 {
  "idx": 150,
  "doc": "Python word length function example needed",
  "code": "'||'.join(['eggs','and','ham'])\n# returns 'eggs||and||ham'\n",
  "label": 0
 },
 {
  "idx": 151,
  "doc": "Deleting consonants from a string in Python",
  "code": "iiii\n",
  "label": 0
 },
 {
  "idx": 152,
  "doc": "Deleting consonants from a string in Python",
  "code": "def eliminate_consonants(x):\n    for char in x:\n        if char in 'aeiou':\n            print(char,end = \"\")\n",
  "label": 1
 },
 {
  "idx": 153,
  "doc": "Create a list property in Python",
  "code": "[1, 2, 3]\nAccessed element 1\n2\nSet element 1 to 12\n[1, 12, 3]\n",
  "label": 0
 },
 {
  "idx": 154,
  "doc": "Getting crawled information in dictionary format",
  "code": "dict(i.strip().split('\\n') for i in text.split('\\n\\n') if len(i.strip().split('\\n')) == 2)\n",
  "label": 1
 },
 {
  "idx": 155,
  "doc": "How to associate some value in model with ForeignKey?",
  "code": "product = Product.objects.get(name='Cactus')\nprice = product.pricing_set.get(currency__name='USD')\n",
  "label": 0
 },
 {
  "idx": 156,
  "doc": "Python: How to remove whitespace from number in a string",
  "code": "re.sub(r'(?<=\\d)\\s+(?=\\d)', r'', string)\n",
  "label": 1
 },
 {
  "idx": 157,
  "doc": "How do I take an integer from a list intending to use it?",
  "code": ">>> one[-1]\n4\n",
  "label": 1
 },
 {
  "idx": 158,
  "doc": "summing nested dictionary entries",
  "code": "{\n    u'1x1': {'Central Spectrum': 10, 'Full Frame': 9},\n    u'4x4': {'Central Spectrum': 10, 'Full Frame': 10},\n    u'4x2': {'Central Spectrum': 10, 'Full Frame': 10}\n}\n",
  "label": 0
 },
 {
  "idx": 159,
  "doc": "How to print JSON with keys in numeric order (i.e. as if the string keys were integers)",
  "code": "'{\"2\": \"two\", \"11\": \"eleven\"}'\n",
  "label": 0
 },
 {
  "idx": 160,
  "doc": "Python thread-safe access without blocking or uncontrolled queue growth?",
  "code": "def handleRequest():\n    results = Buffer.onUserRequest()\n    # Format a response, using the results\n    if not results:\n        return 'No data available'  # or any other useful error message\n    return response(results[0][0], results[0][1])\n",
  "label": 0
 },
 {
  "idx": 161,
  "doc": "How do I check if a network is contained in another network in Python?",
  "code": "is_subnet_of(\"10.11.12.0/24\", \"10.11.0.0/16\")   # => True\n",
  "label": 0
 },
 {
  "idx": 162,
  "doc": "How to avoid getting imaginary/complex number python",
  "code": "abs(z)\n",
  "label": 1
 },
 {
  "idx": 163,
  "doc": "Parsing through a file",
  "code": "[(function_a, function_b, function_c)[line.split('\\t').index('?')]() for line in fileinput.readlines()]\n",
  "label": 1
 },
 {
  "idx": 164,
  "doc": "Remove unwanted commas from CSV using Python",
  "code": "import csv\n\nwith open('14144315.csv', 'rb') as csvfile:\n    rowreader = csv.reader(csvfile, delimiter=',', quotechar='`')\n    for row in rowreader:\n        print row\n",
  "label": 1
 },
 {
  "idx": 165,
  "doc": "Remove unwanted commas from CSV using Python",
  "code": "1,`Flat 5, Park Street`\n",
  "label": 0
 },
 {
  "idx": 166,
  "doc": "Sorting a list of list of tuples based on the sum of first field in the tuple in Python",
  "code": "for l in big_list:\n    l.sort(key=lambda x: s[x[1]])\n",
  "label": 0
 },
 {
  "idx": 167,
  "doc": "Dumping multiple variables to disk in Json. One variable per line",
  "code": "with open(p_out, 'wb') as fp:\n    json.dump(my_dictionary, fp, indent=0)\n",
  "label": 1
 },
 {
  "idx": 168,
  "doc": "Creating a Distance Matrix?",
  "code": "          xcord ycord\nBoston      5   7\nPhoenix     7   3\nNew York    8   1\n",
  "label": 0
 },
 {
  "idx": 169,
  "doc": "Creating a Distance Matrix?",
  "code": "          Boston    Phoenix     New York\nBoston    0.000000  4.472136    6.708204\nPhoenix   4.472136  0.000000    2.236068\nNew York  6.708204  2.236068    0.000000\n",
  "label": 0
 },
 {
  "idx": 170,
  "doc": "Changing prompt working directory via Python script",
  "code": "@echo off\npython xdir.py %* >%TEMP%\\__xdir.cmd\ncall %TEMP%\\__xdir.cmd\n",
  "label": 0
 },
 {
  "idx": 171,
  "doc": "Sending email with html in Django 1.7",
  "code": "Hi {{ first_name }}.\n\n    This is your {{ email }}\n\nThank you\n",
  "label": 0
 },
 {
  "idx": 172,
  "doc": "How to merge item in list",
  "code": ">>> a\n[[1, 2, 3], [4, 5, 6]]\n>>> result=[]\n>>> for i in a:\n    result+=i\n\n\n>>> result\n[1, 2, 3, 4, 5, 6]\n>>>\n",
  "label": 1
 },
 {
  "idx": 173,
  "doc": "How to merge item in list",
  "code": "[1, 2, 3, 4, 5, 6]\n",
  "label": 0
 },
 {
  "idx": 174,
  "doc": "How to merge item in list",
  "code": "[1, 2, 3, 4, 5, 6]\n",
  "label": 0
 },
 {
  "idx": 175,
  "doc": "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)",
  "code": "from string import ascii_lowercase\nimport itertools\n\ndef iter_all_strings():\n    size = 1\n    while True:\n        for s in itertools.product(ascii_lowercase, repeat=size):\n            yield \"\".join(s)\n        size +=1\n\nfor s in iter_all_strings():\n    print s\n    if s == 'bb':\n        break\n",
  "label": 1
 },
 {
  "idx": 176,
  "doc": "Load all third party scripts using requests or mechanize in Python",
  "code": "In [30]: images = [img['src'] for img in soup.findAll('img') if img.has_key('src')]\n\nIn [31]: images[:5]\nOut[31]:\n['http://l.yimg.com/dh/ap/default/130925/My_Yahoo_Defatul_HP_ad_300x250.jpeg',\n 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',\n 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',\n 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png',\n 'http://l.yimg.com/os/mit/media/m/base/images/transparent-95031.png']\n",
  "label": 0
 },
 {
  "idx": 177,
  "doc": "numpy: most efficient frequency counts for unique values in an array",
  "code": "import numpy as np\nx = np.array([1,1,1,2,2,2,5,25,1,1])\ny = np.bincount(x)\nii = np.nonzero(y)[0]\n",
  "label": 1
 },
 {
  "idx": 178,
  "doc": "Python how to use Counter on objects according to attributes",
  "code": "'status': Counter({200: 2, 404: 1})\n   'url': Counter({'www.google.com': 2, 'www.ciq.com': 1})\n",
  "label": 0
 },
 {
  "idx": 179,
  "doc": "Extract a value out of n",
  "code": ">>> range(10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
  "label": 0
 },
 {
  "idx": 180,
  "doc": "Python pandas idxmax for multiple indexes in a dataframe",
  "code": "g = df.groupby(df.index)\ng.apply(func)\n",
  "label": 0
 },
 {
  "idx": 181,
  "doc": "Extracting URL parameters into Pandas DataFrame",
  "code": ">>> pd.DataFrame({p: [d[p][0] if p in d else None for d in params] \n                  for p in ['param1', 'param2', 'param3', 'param4']})\n   param1  param2  param3  param4\n0   apple  tomato  carrot    None\n1  banana    None  potato   berry\n2    None   apple  tomato  carrot\n",
  "label": 1
 },
 {
  "idx": 182,
  "doc": "How to read folder structure and assign it to datastructure?",
  "code": "files = {folder1: [file1, file2], folder2: [file3], ...}\n",
  "label": 0
 },
 {
  "idx": 183,
  "doc": "Secure MySQL login data in a Python client program",
  "code": "SELECT * FROM Users WHERE name=\"AlecTeal\";\n",
  "label": 0
 },
 {
  "idx": 184,
  "doc": "How can I group objects by their date in Django?",
  "code": "[{'2010-01-02': [<__main__.Article object at 0xb76c4fec>, <__main__.Article object at 0xb76c604c>]}, {'2010-02-03': [<__main__.Article object at 0xb76c602c>]}, {'2011-03-02': [<__main__.Article object at 0xb76c606c>]}]\n",
  "label": 0
 },
 {
  "idx": 185,
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "ln(y) = A * x^2 + B * x + C\n",
  "label": 0
 },
 {
  "idx": 186,
  "doc": "Django - access foreign key data in an annotated query",
  "code": "from django.contrib.auth.models import User\nfrom django.db import models\n\nclass Relationship(models.Model):\n    from_user = models.ForeignKey(User, related_name='from_users')\n    to_user = models.ForeignKey(User, related_name='to_users')\n",
  "label": 0
 },
 {
  "idx": 187,
  "doc": "in python, how to manipulate namespace of an instance",
  "code": "import bar\n\nclass Data(object):\n    def __init__(self):\n        self.val = bar.get_data()\n\nif __name__ == '__main__':\n    d = Data()\n    print d.val    # prints 'bar'\n",
  "label": 0
 },
 {
  "idx": 188,
  "doc": "Calling variables from other files in Python",
  "code": "file2.py\ndef action(name):\n    print name \n",
  "label": 0
 },
 {
  "idx": 189,
  "doc": "What's the most efficient way to accumulate dataframes in pyspark?",
  "code": "transformed_dfs = [df.select(*[\n  lit(None).cast(c.dataType).alias(c.name) if c.name not in df.columns \n  else col(c.name)\n  for c in output_schema.fields\n]) for df in dfs]\n",
  "label": 0
 },
 {
  "idx": 190,
  "doc": "Python: Alter elements of a list",
  "code": "bool_list[:] = [False] * len(bool_list)\n",
  "label": 1
 },
 {
  "idx": 191,
  "doc": "Python: Alter elements of a list",
  "code": "bool_list[:] = [False for item in bool_list]\n",
  "label": 1
 },
 {
  "idx": 192,
  "doc": "Override python logging for test efficiency",
  "code": "logging.disable(logging.CRITICAL)\n",
  "label": 0
 },
 {
  "idx": 193,
  "doc": "student t confidence interval in python",
  "code": "(-3.4562777039298762, 5.4562777039298762)\n(-5.338545334351676, 7.338545334351676)\n",
  "label": 0
 },
 {
  "idx": 194,
  "doc": "Make a variable from what's in a text file",
  "code": "rahul@HP-EliteBook ~/Projects/Stackoverflow $ cat abc.txt \nhai am here\n",
  "label": 0
 },
 {
  "idx": 195,
  "doc": "Python JSON serialize a Decimal object",
  "code": "json.dumps({'x': decimal.Decimal('5.5')}, cls=DecimalEncoder)\n",
  "label": 0
 },
 {
  "idx": 196,
  "doc": "Add django model manager code-completion to Komodo",
  "code": "objects = manager.Manager()\n",
  "label": 0
 },
 {
  "idx": 197,
  "doc": "Sum of all numbers inside a string",
  "code": "s='1.25,3.455,3.7'\nprint sum(float(num) for num in s.split(\",\"))\n",
  "label": 1
 },
 {
  "idx": 198,
  "doc": "Sum of all numbers inside a string",
  "code": "for num in s.split(\",\"):\n    print float(num)\n",
  "label": 0
 },
 {
  "idx": 199,
  "doc": "How to generate combination of fix length strings using a set of characters?",
  "code": "[''.join(map(str, i)) for i in itertools.product([0,1], repeat=4)]\n",
  "label": 1
 },
 {
  "idx": 200,
  "doc": "Dictionary As Table In Django Template",
  "code": "<tr>\n{% for header in field.headers %}\n    <th>{{ header }}</th>\n{% endfor %}\n</tr>\n",
  "label": 0
 },
 {
  "idx": 201,
  "doc": "pydoc.render_doc() adds characters - how to avoid that?",
  "code": ">>> help(pydoc.plain)\nHelp on function plain in module pydoc:\n\nplain(text)\n    Remove boldface formatting from text.\n",
  "label": 0
 },
 {
  "idx": 202,
  "doc": "Python: sort lists in dictonary of lists, where one list is a key to sorting",
  "code": "new_d = {k: list(itemgetter(*srt_key)(v)) for k,v in d.items()}\n\nprint(new_d)\n",
  "label": 1
 },
 {
  "idx": 203,
  "doc": "Datastore Design Inquiry",
  "code": "main_category = Category(\"Main\")\nmain_category.put()\n\nsports_category = main_category.add_sub_category(\"Sports\")\nbaseball_category = sports_category.add_sub_category(\"Baseball\")\nfootball_category = sports_category.add_sub_category(\"Football\")\nhockey_category = sports_category.add_sub_category(\"Hockey\")\n\ntv_category = main_category.add_sub_category(\"TV\")\n",
  "label": 0
 },
 {
  "idx": 204,
  "doc": "Where is the configuration information of installed packages?",
  "code": "pip help\n",
  "label": 1
 },
 {
  "idx": 205,
  "doc": "Breaking up substrings in Python based on characters",
  "code": "import re\ninputString='type=\"NN\" span=\"123..145\" confidence=\"1.0\" '\nstrings=re.findall('\"([^\"]*)\"', inputString)\nprint strings\n",
  "label": 1
 },
 {
  "idx": 206,
  "doc": "Python and appending items to text and excel file",
  "code": "1\n\n2\n\n3\n\n4\n\n5\n",
  "label": 0
 },
 {
  "idx": 207,
  "doc": "any python min like function which gives a list as result",
  "code": "d=collections.defaultdict(list)\nfor item in lst:\n    d[item[1]].append(item)\nd[min(key for key in d.keys() if key!=0)]\n",
  "label": 1
 },
 {
  "idx": 208,
  "doc": "any python min like function which gives a list as result",
  "code": "[('NORTHLANDER', 3), ('VOLT', 3)]\n",
  "label": 0
 },
 {
  "idx": 209,
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "['note', 'to', 'from', 'heading', 'body']\n",
  "label": 0
 },
 {
  "idx": 210,
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "from lxml import etree\n\ndata = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n    <to> Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>\n\"\"\"\n\ntree = etree.fromstring(data)\nprint [item.tag for item in tree.xpath('//*')]\n",
  "label": 1
 },
 {
  "idx": 211,
  "doc": "Python handling newline and tab characters when writing to file",
  "code": "with open('test.cpp', 'a') as out:\n    print(test_str.encode('unicode_escape').decode('utf-8'), file=out)\n",
  "label": 1
 },
 {
  "idx": 212,
  "doc": "Find the number of ways a sequence can be rearranged",
  "code": "import itertools\ndef arrangements(arr):\n    p = itertools.permutations(arr)\n    return set(item for item in p if all(x!=y for x,y in zip(item,arr)))\n",
  "label": 1
 },
 {
  "idx": 213,
  "doc": "Convert a date string into YYYYMMDD",
  "code": "from dateutil import parser\n\ndates = ['30th November 2009', '31st March 2010', '30th September 2010']\n\nfor date in dates:\n    print parser.parse(date).strftime('%Y%m%d')\n",
  "label": 1
 },
 {
  "idx": 214,
  "doc": "How to rename variables in a loop in Python",
  "code": "arraysList = []\nfor i in range(0,3):\n    arraysList.append([1,2,3])\n\nprint arraysList\n# [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\nprint arraysList[1]\n# [1, 2, 3]\n",
  "label": 1
 },
 {
  "idx": 215,
  "doc": "Python - Twisted, Proxy and modifying content",
  "code": "Usage\n$ twistd -ny proxy_modify_request.py\n",
  "label": 0
 },
 {
  "idx": 216,
  "doc": "Pipe delimiter file, but no pipe inside data",
  "code": "foo|bar baz|spam\n",
  "label": 0
 },
 {
  "idx": 217,
  "doc": "String manipulation in Python (All upper and lower case derivatives of a word)",
  "code": "['abc1', 'abC1', 'aBc1', 'aBC1', 'Abc1', 'AbC1', 'ABc1', 'ABC1']\n['a1b2c3', 'a1b2C3', 'a1B2c3', 'a1B2C3', 'A1b2c3', 'A1b2C3', 'A1B2c3', 'A1B2C3']\n",
  "label": 0
 },
 {
  "idx": 218,
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "# Define where to find the driver for the Free TDS connections.\n[freetds]\nDescription     = MS SQL database access with Free TDS\nDriver          = /usr/lib/i386-linux-gnu/odbc/libtdsodbc.so\nSetup           = /usr/lib/i386-linux-gnu/odbc/libtdsS.so\nUsageCount      = 1\n",
  "label": 0
 },
 {
  "idx": 219,
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "isql mssql username password\n",
  "label": 0
 },
 {
  "idx": 220,
  "doc": "Finding All Defined Functions in Python Environment",
  "code": "['test']\n",
  "label": 0
 },
 {
  "idx": 221,
  "doc": "Finding All Defined Functions in Python Environment",
  "code": "import inspect\nimport sys\n\n\ndef test():\n    pass\n\nfunctions = [name for name, obj in inspect.getmembers(sys.modules[__name__], inspect.isfunction)]\nprint functions\n",
  "label": 1
 },
 {
  "idx": 222,
  "doc": "How to search & replace in Python?",
  "code": "i = re.search('(?<=\\d\\d)', s).start()\ns = s[:i] + '-' + s[i:]\n",
  "label": 1
 },
 {
  "idx": 223,
  "doc": "Python CSVkit compare CSV files",
  "code": "\nreference\n2348A\n76A\n",
  "label": 0
 },
 {
  "idx": 224,
  "doc": "Python CSVkit compare CSV files",
  "code": "\nimport pandas as pd\ndf1 = pd.read_csv(r'd:\\temp\\data1.csv')\ndf2 = pd.read_csv(r'd:\\temp\\data2.csv')\ndf3 = pd.merge(df1,df2, on= 'reference', how='inner')\ndf3.to_csv('outpt.csv')\n",
  "label": 1
 },
 {
  "idx": 225,
  "doc": "How can I keep the indentation between lines?",
  "code": "code = '''line 1\n    __LINE TO CHANGE__\nline 3'''\n\nprint('\\n'.join(replace_line(\n    code.split('\\n'),                           # one string per line\n    '__LINE TO CHANGE__',                       # the string to replace\n    [\"added code line a\", \"added code line b\"]  # the strings to replace with\n)))\n",
  "label": 0
 },
 {
  "idx": 226,
  "doc": "Python inheritance - going from base class to derived one",
  "code": "class Alpha(object):\n    @classmethod\n    def get_derivatives(cls):\n        return cls.__subclasses__() \n\nclass Beta(Alpha):\n    pass\n\nprint(Alpha.get_derivatives())\nprint(Beta.get_derivatives())\n",
  "label": 1
 },
 {
  "idx": 227,
  "doc": "grouping an unknown number of arguments with argparse",
  "code": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--group', nargs=4, action='append')\n\nprint parser.parse_args()\n",
  "label": 1
 },
 {
  "idx": 228,
  "doc": "Customize sphinxdoc theme",
  "code": "@import url(\"default.css\"); /* make sure to sync this with the base theme's css filename */\n\n.strike {\n    text-decoration: line-through;\n}\n",
  "label": 0
 },
 {
  "idx": 229,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": " print_multiples(2)\n",
  "label": 0
 },
 {
  "idx": 230,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "def print_multiples(n, m = 10):\n    for i in range(0, m + 1):\n        print n * i,\n    print \"\"\n",
  "label": 0
 },
 {
  "idx": 231,
  "doc": "Python - split list of lists by value",
  "code": "import collections\n\nd = collections.defaultdict(list)\nfor sub in a:\n    d[sub[0]].append(sub)\n",
  "label": 1
 },
 {
  "idx": 232,
  "doc": "How to build a nested list from a flat one in Python?",
  "code": "def nested(flat, level=0):\n    for k, it in itertools.groupby(flat, lambda x: x.split(\"-\")[level]):\n        yield next(it)\n        remainder = list(nested(it, level + 1))\n        if remainder:\n            yield remainder\n",
  "label": 1
 },
 {
  "idx": 233,
  "doc": "accessing files in a folder using python",
  "code": "import sys\nprint sys.argv[1]\n",
  "label": 0
 },
 {
  "idx": 234,
  "doc": "Best way to Convert pairs of base 10 integers to ascii characters in python",
  "code": ">>> num = 5270\n>>> pairs = [chr(num/100),chr(num%100)]\n>>> pairs\n['4', 'F']\n",
  "label": 1
 },
 {
  "idx": 235,
  "doc": "Python - regex to match url with mongo object id",
  "code": ">>> re.findall(r'\\/api\\/v1\\/users\\/([a-f\\d]{24})\\/submissions','/api/v1/users/556b352f87d4693546d31185/submissions')\n['556b352f87d4693546d31185']\n",
  "label": 1
 },
 {
  "idx": 236,
  "doc": "Extract Numbers and Size Information (KB, MB, etc) from a String in Python",
  "code": "46137344\n12\n6442450944\n13510798882111488\n",
  "label": 0
 },
 {
  "idx": 237,
  "doc": "Remove duplicates in python list but remember the index",
  "code": "inds = []\nseen = set()\nfor i, ele in enumerate(l):\n    if ele not in seen:\n        inds.append((i,ele))\n    seen.add(ele)\n",
  "label": 1
 },
 {
  "idx": 238,
  "doc": "numpy tile without memory allocation",
  "code": "In [509]: a1+b1\nOut[509]: \narray([[ 2.04663934,  1.02951915,  1.30616273,  1.75154236],\n       [ 1.79237632,  1.08252741,  1.17031265,  1.2675438 ]])\n",
  "label": 0
 },
 {
  "idx": 239,
  "doc": "Selenium Python select the link from 3rd column from a table",
  "code": "<span class=\"linkhover\" title=\"view\" style=\"white-space:nowrap;overflow:hidden;text-overflow:ellipsis;empty-cells:show;display:block;color:#00A;cursor:pointer;\">view</span>\n",
  "label": 0
 },
 {
  "idx": 240,
  "doc": "Can someone please explain to me the way to calculate the number of bills and coins of change in python?",
  "code": "# paying $63.51\nx = 6351 // 1000      # == 6    maximum number of $10.00 bills\ny = 6351 % 1000       # == 351  $3.51 not payable in 10s.\n\n# you could instead do\ny = 6351 - (6351 // 1000) * 1000\n\n# this would give the same result,\n# but you've got to admit it's a lot\n# less readable.\n",
  "label": 1
 },
 {
  "idx": 241,
  "doc": "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?",
  "code": "rock = Weapon(\"rock\", [\"scissors\", \"lizard\"])\n",
  "label": 0
 },
 {
  "idx": 242,
  "doc": "A PYTHONSTARTUP file for a specific directory",
  "code": "./workon.sh\n",
  "label": 0
 },
 {
  "idx": 243,
  "doc": "Recognising objects in images using HAAR cascade and OpenCV",
  "code": "--------------\n> haystack.exe\n5 objects found\n0 objects found\n",
  "label": 0
 },
 {
  "idx": 244,
  "doc": "How to write defaultdict in more pythonic way?",
  "code": "import itertools\nheaders = set(itertools.chain.from_iterable(counts_to_display.values()))\n",
  "label": 1
 },
 {
  "idx": 245,
  "doc": "Python: Append dictionary in another file",
  "code": "with open('saved_dict.pkl.'r') as pickle_in:\n    that_dict_again = pickle.load(pickle_in)\n",
  "label": 0
 },
 {
  "idx": 246,
  "doc": "Get the big-endian byte sequence of integer in Python",
  "code": ">>> from jwkest import long_to_base64\n>>> long_to_base64(65537)\n'AQAB'\n",
  "label": 0
 },
 {
  "idx": 247,
  "doc": "Python BeautifulSoup how to get the index or of the HTML table",
  "code": "Ishida Co., Ltd. (Kyoto, JP )\n",
  "label": 0
 },
 {
  "idx": 248,
  "doc": "python datapanda: getting values from rows into list",
  "code": "from pandas import DataFrame\n\ndf = DataFrame({'a': [2,4], 'b': [3,2], 'c': [2,6]})\nprint df\n\nlist1 = df.irow(0).values.tolist()\nlist2 = df.irow(1).values.tolist()\n",
  "label": 1
 },
 {
  "idx": 249,
  "doc": "lxml findall div and span tags",
  "code": "sd_selector = CSSSelector('span,div')\nelements = sd_selector(page_html)\n",
  "label": 1
 },
 {
  "idx": 250,
  "doc": "String formatting without index in python2.6",
  "code": "s = \"{} {}\".format('foo', 'bar')\nif something:\n    do_something('{} {} {}'.format(1, 2, 3))\n",
  "label": 0
 },
 {
  "idx": 251,
  "doc": "String formatting without index in python2.6",
  "code": "s =\"{0} {1}\".format ('foo','bar')\nif something :\n    do_something ('{0} {1} {2}'.format (1 ,2 ,3 ))\n",
  "label": 0
 },
 {
  "idx": 252,
  "doc": "How do I get the modified date/time of a file in Python?",
  "code": "os.path.getmtime(filepath)\n",
  "label": 1
 },
 {
  "idx": 253,
  "doc": "Python TEA implementation",
  "code": ">>> v\n[1385482522, 639876499]\n>>> tea.decipher(tea.encipher(v,key),key)\n[1385482522L, 639876499L]\n",
  "label": 0
 },
 {
  "idx": 254,
  "doc": "How to set an attribute to a vector in rpy2",
  "code": "pot.do_slot_assign(\"times\",ts)\n",
  "label": 0
 },
 {
  "idx": 255,
  "doc": "Regex match following substring in string python",
  "code": "[('mobile', '555-666-1212'), ('office', '555-222-3333')]\n",
  "label": 0
 },
 {
  "idx": 256,
  "doc": "Creating a 2d Grid in Python",
  "code": "def transpose(g):\n    return map(list, zip(*g))\n",
  "label": 1
 },
 {
  "idx": 257,
  "doc": "List Highest Correlation Pairs from a Large Correlation Matrix in Pandas?",
  "code": "2192  1522    0.636198\n1522  2192    0.636198\n3677  2027    0.641817\n2027  3677    0.641817\n242   130     0.646760\n130   242     0.646760\n1171  2733    0.670048\n2733  1171    0.670048\n1000  2000    0.742340\n2000  1000    0.742340\ndtype: float64\n",
  "label": 0
 },
 {
  "idx": 258,
  "doc": "different foreground colors for each line in wxPython wxTextCtrl",
  "code": "rt = wx.TextCtrl(self, -1,\"My Text....\",size=(200, 100),style=wx.TE_MULTILINE|wx.TE_RICH2)\nrt.SetInsertionPoint(0)\nrt.SetStyle(2, 5, wx.TextAttr(\"red\", \"blue\"))\n",
  "label": 1
 },
 {
  "idx": 259,
  "doc": "Dynamic module loading in python",
  "code": "references = dict(zip(modules, map(__import__, modules)))\n",
  "label": 1
 },
 {
  "idx": 260,
  "doc": "replace multiple occurrences of any special character by one in python",
  "code": "line = re.sub(r'(\\W)(?=\\1)', '', line)\n",
  "label": 1
 },
 {
  "idx": 261,
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": " 3 levels,      100 values: 365 us per loop\n 3 levels,     1000 values: 443 us per loop\n 3 levels,  1000000 values: 89.4 ms per loop\n\n10 levels,      100 values: 369 us per loop\n10 levels,     1000 values: 453 us per loop\n10 levels,  1000000 values: 88.8 ms per loop\n\n26 levels,      100 values: 382 us per loop\n26 levels,     1000 values: 466 us per loop\n26 levels,  1000000 values: 89.9 ms per loop\n",
  "label": 0
 },
 {
  "idx": 262,
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": " 3 levels,      100 values: 175 us per loop\n 3 levels,     1000 values: 1.16 ms per loop\n 3 levels,  1000000 values: 1.21 s per loop\n\n10 levels,      100 values: 304 us per loop\n10 levels,     1000 values: 1.32 ms per loop\n10 levels,  1000000 values: 1.23 s per loop\n\n26 levels,      100 values: 554 us per loop\n26 levels,     1000 values: 1.59 ms per loop\n26 levels,  1000000 values: 1.27 s per loop\n",
  "label": 0
 },
 {
  "idx": 263,
  "doc": "how to Perform search operation in Django?",
  "code": "@csrf_exempt\ndef resume(request):\n    //Do your search operation.\n    return HttpResponse(status=200)\n",
  "label": 0
 },
 {
  "idx": 264,
  "doc": "SQLite Python printing in rows?",
  "code": "A1 A2\nB1 B2\nA3 A4\n",
  "label": 0
 },
 {
  "idx": 265,
  "doc": "variable length of %s with the % operator in python",
  "code": ">>> text = \"abcdef\"\n>>> print \"<%*s>\" % (len(text)+2,text)\n<  abcdef>\n>>> print \"<%-*s>\" % (len(text)+2,text)\n<abcdef  >\n>>>\n",
  "label": 0
 },
 {
  "idx": 266,
  "doc": "variable length of %s with the % operator in python",
  "code": "print \"%*s, blah\" % (max_title_width,column)\n",
  "label": 0
 },
 {
  "idx": 267,
  "doc": "How to manually create a select field from a ModelForm in Django?",
  "code": "empty_label\n\n    By default the <select> widget used by ModelChoiceField\n    will have an empty choice at the top of the list. You can change the text\n    of this label (which is \"---------\" by default) with the empty_label\n    attribute, or you can disable the empty label entirely by setting\n    empty_label to None:\n\n    # A custom empty label\n    field1 = forms.ModelChoiceField(queryset=..., empty_label=\"(Nothing)\")\n\n    # No empty label\n    field2 = forms.ModelChoiceField(queryset=..., empty_label=None)\n",
  "label": 0
 },
 {
  "idx": 268,
  "doc": "How to manually create a select field from a ModelForm in Django?",
  "code": "The __unicode__ method of the model will be called to generate string\nrepresentations of the objects for use in the field's choices;\nto provide customized representations, subclass ModelChoiceField and override\nlabel_from_instance. This method will receive a model object, and should return\na string suitable for representing it. For example:\n\nclass MyModelChoiceField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return \"My Object #%i\" % obj.id\n",
  "label": 0
 },
 {
  "idx": 269,
  "doc": "Turn a List of Str into a List of Int (Python)",
  "code": ">>> [ int(x) for y in List1 for x in y.split() ]\n",
  "label": 1
 },
 {
  "idx": 270,
  "doc": "Iterate through a list of numpy arrays",
  "code": "def total(np_array):\n    return sum(np_array)\n",
  "label": 0
 },
 {
  "idx": 271,
  "doc": "Average inter signout time in pandas dataframe",
  "code": "import pandas as pd\nfrom StringIO import StringIO\ntext = \"\"\"site date time\n1   Google.com 2012-05-01 19:16:08.070000\n2   Google.com 2012-05-01 19:20:07.880000\n3   Google.com 2012-05-01 19:33:02.200000\n4   Google.com 2012-05-01 19:35:09.173000\n5   Google.com 2012-05-01 20:18:55.610000\n6   Google.com 2012-05-01 20:26:27.577000\n8   Google.com 2012-05-02 12:51:12.013000\n9   Google.com 2012-05-02 12:56:52.013000\n10  Google.com 2012-05-02 12:59:55.167000\n11  Google.com 2012-05-02 13:04:25.687000\n12  Google.com 2012-05-02 13:16:36.263000\n\"\"\"\ntab = pd.read_table(StringIO(text),index_col=0,sep='\\s+')\n",
  "label": 0
 },
 {
  "idx": 272,
  "doc": "Slicing and arranging dataframe in pandas",
  "code": "dfs={i: g.dropna(axis=1)         \n    for i, g in df1.groupby(df1.apply(lambda x: x.notnull().sum() - 2 , axis=1))}\n\n#select DataFrame with len=2    \nprint dfs[2]\n    id channel  p1  p2\n1  213    paid  b2  b1\n\n#select DataFrame with len=3       \nprint dfs[3]\n     id channel    p1    p2   p3\n2  2222  direct  as25  dw46  32q\n",
  "label": 0
 },
 {
  "idx": 273,
  "doc": "How to add/remove said a curve to/from a plot in Python with Matplotlib",
  "code": "self.h,=self.axes.plot(data,\"-g\")\n",
  "label": 0
 },
 {
  "idx": 274,
  "doc": "How to get parameter arguments from a frozen spicy.stats distribution?",
  "code": "\npositional and keyword\nfrozen parameters: shape=(3.14,), loc=5.0, scale=2.0\n\npositional only\nfrozen parameters: shape=(3.14,), loc=5.0, scale=2.0\n",
  "label": 0
 },
 {
  "idx": 275,
  "doc": "python create empty object of arbitrary type?",
  "code": "class DummyItem:\n    def __add__(self, other):\n        return other\n\ns = DummyItem()\ns += 23\nprint s\n",
  "label": 1
 },
 {
  "idx": 276,
  "doc": "Python how to get sum of numbers in a list that has strings in it as well",
  "code": "sums = {k: sum(i for i in v if isinstance(i, int)) for k, v in d.items()}\n",
  "label": 1
 },
 {
  "idx": 277,
  "doc": "Need to read from a file and add the elements and get avg in python 3.4",
  "code": "array = [ [int(s) for s in line.split()] for line in open('file') ]\nfor line in array:\n    print('%08i %3.1f %3i %3i' % (line[0], sum(line[1:])/len(line[1:]), min(line[1:]), max(line[1:])))\n",
  "label": 1
 },
 {
  "idx": 278,
  "doc": "Django: css referencing media in static files (django dev / 1.3 / static files)",
  "code": "project_dir\n  ...\n  stuff\n  static_media\n    ...\n    css\n    images\n",
  "label": 0
 },
 {
  "idx": 279,
  "doc": "Elegant way to split list on particular values",
  "code": "from collections import defaultdict\n\narr = ['a', 1, 2, 3, 'b', 4, 5, 6]\n\nd = defaultdict(list)\n\ncur_key = arr[0]\n\nfor value in arr[1:]:\n    if type(value) != type(cur_key):\n        d[cur_key].append(value)\n    else:\n        cur_key = value\n\nprint(d)\n",
  "label": 1
 },
 {
  "idx": 280,
  "doc": "Django Celery get task count",
  "code": "$ redis-cli -n 1 -h localhost -p 6379 llen celery\n",
  "label": 0
 },
 {
  "idx": 281,
  "doc": "Convert a pandas dataframe in a transactional data format to a list - Python",
  "code": "df.groupby(['id'])['purchased_item'].apply(list).values.tolist()\n\nIn [434]: df.groupby(['id'])['purchased_item'].apply(list).values.tolist()\nOut[434]:\n[['apple', 'banana', 'carrot'],\n ['banana'],\n ['apple'],\n ['apple', 'carrot', 'diet_coke'],\n ['banana', 'carrot'],\n ['banana', 'carrot']]\n",
  "label": 1
 },
 {
  "idx": 282,
  "doc": "How to not render a entire string with jinja2",
  "code": "<div>{{ blogpost.text|truncate }}</div>\n",
  "label": 1
 },
 {
  "idx": 283,
  "doc": "How to Define Google Endpoints API File Download Message Endpoint",
  "code": "{\n  \"message\": \"\"\n}\n",
  "label": 0
 },
 {
  "idx": 284,
  "doc": "Loop through multiple different sized python dictionaries",
  "code": "treats = sorted(init_treats)\n",
  "label": 0
 },
 {
  "idx": 285,
  "doc": "Escape string to be valid python expression",
  "code": ">>> example = 'Foo \\'\" \\\\ Bar'\n>>> print(example)\nFoo '\" \\ Bar\n>>> print(example.encode('unicode_escape'))\nb'Foo \\'\" \\\\\\\\ Bar'\n>>> example.encode('unicode_escape')\nb'Foo \\'\" \\\\\\\\ Bar'\n",
  "label": 1
 },
 {
  "idx": 286,
  "doc": "Bitwise operations to produce power of two in Python",
  "code": "def justify_bitwise(n):\n   int_n = int(abs(n))\n   p = 0\n   while int_n != 1:\n       p += 1\n       int_n >>= 1\n\n   return float(n) / (1<<p)\n",
  "label": 1
 },
 {
  "idx": 287,
  "doc": "Ensuring that my program is not doing a concurrent file write",
  "code": "if 0 < (modifiedTimeEnd - modifiedTimeStart) < maxWriteFrequency \n",
  "label": 0
 },
 {
  "idx": 288,
  "doc": "Ensuring that my program is not doing a concurrent file write",
  "code": "if 0 < (modifiedTimeEnd - modifiedTimeStart) <= maxWriteFrequency \n",
  "label": 0
 },
 {
  "idx": 289,
  "doc": "Replace given line in files in Python",
  "code": "Traceback (most recent call last):\n  File \"D:\\xxx\\replace.py\", line 27, in <module>\n    replace_3_line('tmp.ann')\n  File \"D:\\xxx\\replace.py\", line 12, in replace_3_line\n    for line in old_file:\n  File \"C:\\Python31\\lib\\encodings\\cp1251.py\", line 23, in decode\n    return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x98 in position 32: character maps to <undefined>\n",
  "label": 0
 },
 {
  "idx": 290,
  "doc": "Python: how to turn string into a list?",
  "code": ">>> print mydict['my_item'] \n['maria', 'jose']\n",
  "label": 0
 },
 {
  "idx": 291,
  "doc": "how do I concatenate 3 lists using a list comprehension?",
  "code": "print('\\n'.join(map(' '.join, itertools.product(list1, list2, list3))))\n",
  "label": 0
 },
 {
  "idx": 292,
  "doc": "Splitting a list of sequences into two lists efficiently",
  "code": ">>> catalog = [('abc', '123'), ('foo', '456'), ('bar', '789'), ('test', '1337')]\n>>> names, vals = zip(*catalog)\n>>> names\n('abc', 'foo', 'bar', 'test')\n>>> vals\n('123', '456', '789', '1337')\n",
  "label": 1
 },
 {
  "idx": 293,
  "doc": "Django templates check whether key is existing",
  "code": "{% for key, val in d.items %}\n    {% if val.subproduct1 %}\n        {% for value in val.subproduct1 %}\n            {{ value }}\n        {% endfor %}\n    {% endif %}\n    {% if val.subproduct2 %}\n        {% for value in val.subproduct2 %}\n            {{ value }}\n        {% endfor %}\n    {% endif %}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 294,
  "doc": "pandas count true values in multi-index frame",
  "code": "In [35]: df.unstack(['id'])\nOut[35]: \n       val             \nid       1      2     3\nyear                   \n2001  True  False  True\n2002  True   True  True\n",
  "label": 0
 },
 {
  "idx": 295,
  "doc": "pandas count true values in multi-index frame",
  "code": "In [41]: ((arr[:-1] == arr[1:]) & (arr[:-1] == True)).sum()\nOut[41]: 2\n",
  "label": 0
 },
 {
  "idx": 296,
  "doc": "Add [] around numbers in strings",
  "code": "result = re.sub(r'(\\d+)', r'[\\1]', inputstring)\n",
  "label": 1
 },
 {
  "idx": 297,
  "doc": "combine list of dictionaries with same key",
  "code": "In [226]: answer\nOut[226]: \n[{'name': 'TX-Houston',\n  'Org_ID': 'TX',\n  'Range': ['172.16.0.1-172.16.0.254', '172.16.3.1-172.16.3.254']},\n {'name': 'TX-Dallas',\n  'Org_ID': 'TX',\n  'Range': ['192.168.1.1-192.168.1.254',\n   '192.168.2.1-192.168.2.254',\n   '192.168.3.1-192.168.3.254',\n   '10.0.0.1-10.0.0.254']},\n {'name': 'CA-San Diego',\n  'Org_ID': 'CA',\n  'Range': ['192.168.9.1-192.168.1.254', '10.0.5.1-10.0.5.254']}]\n",
  "label": 0
 },
 {
  "idx": 298,
  "doc": "Create list using regex inputs",
  "code": "exre = r'decadal[0-9]{4}'\n",
  "label": 0
 },
 {
  "idx": 299,
  "doc": "How to exit a supervisor process with fabric file?",
  "code": "$ supervisorctl status logproxy\nlogproxy                         STOPPED    Not started\n",
  "label": 0
 },
 {
  "idx": 300,
  "doc": "Import object from module of same name using __import__",
  "code": "from mymod import mymod\n",
  "label": 0
 },
 {
  "idx": 301,
  "doc": "Python find which order element is in in a list",
  "code": "words = 'the horse and the rider'.split(' ')\nlook_for = 'the'\nindices = [i for i, word in enumerate(words) if word == look_for]\nprint(indices)\n",
  "label": 0
 },
 {
  "idx": 302,
  "doc": "Numpy: get the column and row index of the minimum value of a 2D array",
  "code": "In [9]: np.where(x == np.min(x))\nOut[9]: (array([2]), array([1]))\n",
  "label": 1
 },
 {
  "idx": 303,
  "doc": "Named dictionary in python",
  "code": "friends = []\nfor message in messages:\n  dict = {\"message\" : message.message, \"phone\" : message.phone }\n  friends.append(dict)\n",
  "label": 1
 },
 {
  "idx": 304,
  "doc": "how to use python list comprehensions replace the function invoke inside of \"for\" stmt?",
  "code": ">>> results = ( foo() for _ in xrange(10) )\n>>> results\n<generator object <genexpr> at 0x10041f960>\n>>> list(results)\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\nfoo\n[None, None, None, None, None, None, None, None, None, None]\n>>> \n",
  "label": 1
 },
 {
  "idx": 305,
  "doc": "How to find number of matches in the array or dictionary?",
  "code": "my_dict = {0: 1, 2: 1, 4: 5, 6: 3, 8: 4, 10: 4, 12: 1}\nprint sum(1 for x in my_dict.values() if x == 4)\n",
  "label": 1
 },
 {
  "idx": 306,
  "doc": "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?",
  "code": "In [21]: df.groupby(['year','id']).mean()\nOut[21]: \n                A         B         C         D\nyear id                                        \n2003 38  0.332428 -0.427696 -1.324072  2.158907\n     53 -1.343306 -0.288373  0.544344 -1.361189\n     70  0.825812 -0.159454  0.264984 -0.285401\n2004 0   0.535093 -1.655569 -0.309651  0.438992\n     12 -1.599944  0.283483  0.146981  0.331241\n     34  1.627488 -1.154193 -0.228627 -0.188025\n     72  1.928094  0.532387 -0.352155 -0.039304\n",
  "label": 0
 },
 {
  "idx": 307,
  "doc": "Faster alternative to for loop in for loop",
  "code": "data = {\n '0a': [4, []],\n '1f': [9, []],\n '27': [3, []],\n '32': [8, []],\n '3f': [6, []],\n '47': [1, []],\n '7c': [2, []],\n 'a1': [0, []],\n 'c8': [7, []],\n 'e2': [5, []]\n}\n",
  "label": 0
 },
 {
  "idx": 308,
  "doc": "Find and replace a string in Python",
  "code": "def customize_string(string,add_on):\n    if \"small\" in string:\n        line = string.split()\n        line[0] += add_on\n        line[-1] += add_on\n        return \"  \".join(line)\n    else:\n        return string\n",
  "label": 1
 },
 {
  "idx": 309,
  "doc": "PYTHON: How do I create a list of every possible letter mapping using a dictionary that stores every possible letter mapping combination?",
  "code": "import itertools\nimport string\nothers = ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z']\n# this dict is fixed\ndict1 = {k : [k] for k in string.uppercase if k not in others}\n# iterate all possibles in others, then merge two dicts into one\nfor i in itertools.permutations(others):\n    dict2 = dict(zip(others, i))\n    print dict(dict1.items() + dict2.items())\n",
  "label": 1
 },
 {
  "idx": 310,
  "doc": "Making id case-insensitive but case-preserving in endpoints-proto-datastore",
  "code": "def IdSet(self, value):\n    if not isinstance(value, basestring):\n        raise TypeError('ID must be a string.')\n    self.caseful_id = value\n    self.UpdateFromKey(ndb.Key(self.__class__, value.lower()))\n",
  "label": 0
 },
 {
  "idx": 311,
  "doc": "Add fields and correct indentation for json file (using python or ruby)",
  "code": "data = {\n  :id => 1,\n    :location => {\n      :address => {\n        :line1 => 'line1'\n      }\n    },\n  :website => 'site'\n}\n\ndef deconvert(record)\n  ret = {}\n  record.each do |key, value|\n    if value.is_a? Hash\n      ret.merge!( deconvert(value) )\n    else\n       ret.merge!(key => value)\n    end\n  end\n  ret\nend\n\nputs deconvert data\n# => {:id=>1, :line1=>\"line1\", :website=>\"site\"} \n",
  "label": 0
 },
 {
  "idx": 312,
  "doc": "print tuple as number of arguments",
  "code": "def my_print(*args):\n    print ' '.join(map(str, args))\n",
  "label": 1
 },
 {
  "idx": 313,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": "target = pd.DataFrame(0, index=df.index, columns=range(1,13))\ndm = pd.get_dummies(df.index.month).set_index(df.index)\ntarget = (target + dm).fillna(0)\ntarget.columns = ['is'+x.capitalize() for x in pd.datetools.MONTHS]\npd.concat([df, target], axis=1)\n",
  "label": 1
 },
 {
  "idx": 314,
  "doc": "How can I execute shell command with a | pipe in it",
  "code": "\nHard way\nimport glob\nimport subprocess\n\ngrep = subprocess.Popen(['grep', '-r', 'PASSED'] + glob.glob('*.log'), stdout=subprocess.PIPE)\nsort = subprocess.Popen(['sort', '-u'], stdin=grep.stdout, stdout=subprocess.PIPE)\nexit_status = subprocess.call(['wc', '-l'], stdin=sort.stdout)\n",
  "label": 1
 },
 {
  "idx": 315,
  "doc": "Inserting a folder containing specific routes to a bottle application in Python",
  "code": "import bottle\nfrom web.bottleApp import app\nfrom configure.config import configure_app\n\nmain = bottle.Bottle()\nmain.mount(\"/config/\",configure)\nmain.mount(\"/\",app)\n\nmain.run(host = 'localhost', port=8080)\n",
  "label": 0
 },
 {
  "idx": 316,
  "doc": "Selection of rows by condition",
  "code": " df_total_data[df_total_data['BBBlink'].apply(lambda x: 'secure' not in  x)]\n",
  "label": 0
 },
 {
  "idx": 317,
  "doc": "How to parse the header files of the pcap file?",
  "code": "In [89]: data.data\nOut[89]: IP(src='\\xc0\\xa8\\n\\n', off=16384, dst='C\\x17\\x030', sum=25129, len=52, p=6, id=51105, data=TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145))\n",
  "label": 0
 },
 {
  "idx": 318,
  "doc": "How to pick the largest number in a matrix of lists in python?",
  "code": "(_, x, y) = max((cell[k], x, y)\n                for (y, row) in enumerate(m)\n                for (x, cell) in enumerate(row))\n",
  "label": 1
 },
 {
  "idx": 319,
  "doc": "Python: Effective reading from a file using csv module",
  "code": "John,Jeff,Judy,\n21,19,32,\n178,182,169,\n85,74,57,\n",
  "label": 0
 },
 {
  "idx": 320,
  "doc": "How should I subtract two dataframes and in Pandas and diplay the required output?",
  "code": "MvT101group = MvT101.groupby('Order',sort=True).sum()\nMvT102group = MvT102.groupby('Order',sort=True).sum()\n",
  "label": 0
 },
 {
  "idx": 321,
  "doc": "Calculate point based on distance and direction",
  "code": "import geopy\nimport geopy.distance\n\n# Define starting point.\nstart = geopy.Point(48.853, 2.349)\n\n# Define a general distance object, initialized with a distance of 1 km.\nd = geopy.distance.VincentyDistance(kilometers = 1)\n\n# Use the `destination` method with a bearing of 0 degrees (which is north)\n# in order to go from point `start` 1 km to north.\nprint d.destination(point=start, bearing=0)\n",
  "label": 1
 },
 {
  "idx": 322,
  "doc": "Is it possible to post audio files with the python requests library",
  "code": "with open(audiofile, 'rb') as fobj:\n    requests.post(url, files={'fieldname', fobj})\n",
  "label": 1
 },
 {
  "idx": 323,
  "doc": "How can I get a Tuple from a list in python (3.3)",
  "code": "matching_results = filter(lambda t: t[0]==c_code, list_)\n",
  "label": 1
 },
 {
  "idx": 324,
  "doc": "Django get list of models in application",
  "code": "from django.db.models import get_app, get_models\n\napp = get_app('my_application_name')\nfor model in get_models(app):\n    # do something with the model\n",
  "label": 1
 },
 {
  "idx": 325,
  "doc": "Get last \"column\" after .str.split() operation on column in pandas DataFrame",
  "code": "In [102]: d2 = pd.DataFrame(d1.ticker.str.split().tolist(), \n   .....:                   columns=\"symbol date price\".split())\n\nIn [103]: d2\nOut[103]: \n  symbol       date price\n0    spx  5/25/2001  p500\n1    spx  5/25/2001  p600\n2    spx  5/25/2001  p700\n",
  "label": 0
 },
 {
  "idx": 326,
  "doc": "Remove duplicated string(s) in strings in a list",
  "code": ">>> a=\"# -- coding: utf-8 --\" \n>>> a= map(str.strip,a.split())\n>>> a\n['#', '--', 'coding:', 'utf-8', '--']\n>>> a = \" \".join(sorted(set(a),key=lambda x:a.index(x)))\n>>> a\n'# -- coding: utf-8'\n",
  "label": 1
 },
 {
  "idx": 327,
  "doc": "How can I set a code for users when they enter a valud URL or not with PYTHON/Flask?",
  "code": "from BeautifulSoup import BeautifulSoup\nimport urllib2\n\nhtml_page = urllib2.urlopen(\"http://www.example.com\")\nif html_page.getcode() == 200:\n    soup = BeautifulSoup(html_page)\n    for link in soup.findAll('a'):\n        print link.get('href')\nelse:\n    print \"Error loading page\"\n",
  "label": 1
 },
 {
  "idx": 328,
  "doc": "Navigate trough lxml categories",
  "code": ">>> tree\n<lxml.etree._ElementTree object at 0x0148AF08>\n",
  "label": 0
 },
 {
  "idx": 329,
  "doc": "Switch between assignments to different variables in python? With ternary operator?",
  "code": "(1, 42)\n",
  "label": 0
 },
 {
  "idx": 330,
  "doc": "greedy regex split python every nth line",
  "code": ">>> import re\n>>> re.findall('.{6}', ss)\n['Four s', 'core a', 'nd sev', 'en yea', 'rs ago', '.     ']\n",
  "label": 1
 },
 {
  "idx": 331,
  "doc": "Django model form with selected rows",
  "code": "ticket_form = TicketForm(request.user)\n",
  "label": 0
 },
 {
  "idx": 332,
  "doc": "How to return both string and value within HttpResponse?",
  "code": "def my_view(request):\n    if request.session.get('val', None):\n        # do something with the 'val' variable.\n    else:\n        request.session['val'] = 'somevalue'\n        return HttpResponse('some message')\n",
  "label": 1
 },
 {
  "idx": 333,
  "doc": "How to return both string and value within HttpResponse?",
  "code": "return HttpResponse(\"a string: {}\".format(val))\n",
  "label": 1
 },
 {
  "idx": 334,
  "doc": "Trying to duplicate a list and modify one version of it in Python 2",
  "code": "newlist = oldList[:]\n",
  "label": 1
 },
 {
  "idx": 335,
  "doc": "Dynamic Table Creation and ORM mapping in SqlAlchemy",
  "code": ">>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite:///:memory:', echo=True)\n>>> from sqlalchemy import Table, Column, Integer, String, MetaData\n>>> metadata = MetaData()\n",
  "label": 0
 },
 {
  "idx": 336,
  "doc": "Remove punctuation from Unicode formatted strings",
  "code": "import regex as re\n\ndef remove_punctuation(text):\n    return re.sub(ur\"\\p{P}+\", \"\", text)\n",
  "label": 1
 },
 {
  "idx": 337,
  "doc": "How do I run python file without path?",
  "code": "@ECHO OFF\n\nREM *** MODIFY THE NEXT LINE TO SPECIFY THE LOCATION OF YOUR SCRIPTS ***\nSET SCRIPT_DIR=C:\\Path\\To\\Scripts\n\nREM *** MODIFY THE NEXT LINE TO SPECIFY THE LOCATION OF YOUR PYTHON.EXE ***\nSET PYTHON_BIN=C:\\Python27\\python.exe\n\nPUSHD %SCRIPT_DIR%\n%PYTHON_BIN% %*\nPOPD\n",
  "label": 0
 },
 {
  "idx": 338,
  "doc": "Python - dataframe conditional index value selection",
  "code": "In [336]: df[(df.close_price < df.short_lower_band) & \\\n   .....:    (df.close_price < df.long_lower_band)].index.tolist()\nOut[336]: ['Equity(8554)', 'Equity(23921)', 'Equity(4151)']\n",
  "label": 1
 },
 {
  "idx": 339,
  "doc": "alternate for multiple constructors",
  "code": "default = MyClass()\n",
  "label": 0
 },
 {
  "idx": 340,
  "doc": "How do I count the number of identical characters in a string by position using python?",
  "code": "sum(c1 == c2 for c1, c2 in itertools.izip(s1, s2))\n",
  "label": 1
 },
 {
  "idx": 341,
  "doc": "How do I count the number of identical characters in a string by position using python?",
  "code": "sum(1 for c1, c2 in itertools.izip(s1, s2) if c1 == c2)\n",
  "label": 1
 },
 {
  "idx": 342,
  "doc": "Extract links for certain section only from blogspot using BeautifulSoup",
  "code": "import feedparser\n\nurl = feedparser.parse('http://ellywonderland.blogspot.com/feeds/posts/default?alt=rss')\nfor x in url.entries:\n    print str(x.link)\n",
  "label": 1
 },
 {
  "idx": 343,
  "doc": "How can I find all subclasses of a given class in Python?",
  "code": "print([cls for cls in vars()['Foo'].__subclasses__()])\n# [<class '__main__.Bar'>, <class '__main__.Baz'>]\n",
  "label": 1
 },
 {
  "idx": 344,
  "doc": "Changing the columns in DataFrame with respect to values in other columns",
  "code": "                Head  Chr     Start      End\nTrans      Num                             \nENST473358 1      A    1   30049.0  30554.0\n           2      A    1   30677.0  30966.0\n           3      A    1   31107.0      NaN\nENST417324 1      B    1   35277.0  35481.0\n           2      B    1   34554.0  35174.0\n           3      B    1   35721.0      NaN\nENST461467 1      B    1   35245.0  35481.0\n           2      B    1  120775.0      NaN\n",
  "label": 0
 },
 {
  "idx": 345,
  "doc": "how to show each element of array separately",
  "code": "for message in range(10):\n    message = sock.recv(1024)\n\n    splits = message.split(None, 5) # split into six pieces at most\n",
  "label": 0
 },
 {
  "idx": 346,
  "doc": "index by comparision of two numpy arrays in python",
  "code": "In [166]:\n\nA==B\nOut[166]:\narray([False, False,  True, False,  True], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 347,
  "doc": "passing arrays with ctypes",
  "code": "x.c (compiled with cl /LD x.c:\n#include <stdlib.h>\n#include <stdint.h>\n__declspec(dllexport) void read(int16_t** input, size_t size)\n{\n  int i;\n  int16_t* p = (int16_t*) malloc (size*sizeof(int16_t));\n  for(i=0;i<size;i++)\n    p[i] = i;\n  *input = p;\n}\n__declspec(dllexport) void release(int16_t* input)\n{\n    free(input);\n}\n",
  "label": 0
 },
 {
  "idx": 348,
  "doc": "Lazy Method for Reading Big File in Python?",
  "code": "f = open('really_big_file.dat')\ndef read1k():\n    return f.read(1024)\n\nfor piece in iter(read1k, ''):\n    process_data(piece)\n",
  "label": 1
 },
 {
  "idx": 349,
  "doc": "Convert column elements to column name in pandas",
  "code": "In [124]:\n\nt=\"\"\"time1,stockA,bid,1\n time2,stockA,ask,1.1\n time3,stockB,ask,2.1\n time4,stockB,bid,2.0\"\"\"\n\u200b\ndf = pd.read_csv(io.StringIO(t), header=None, names=['time', 'stock', 'bid', 'ask'])\ndf\nOut[124]:\n     time   stock  bid  ask\n0   time1  stockA  bid  1.0\n1   time2  stockA  ask  1.1\n2   time3  stockB  ask  2.1\n3   time4  stockB  bid  2.0\n",
  "label": 0
 },
 {
  "idx": 350,
  "doc": "how to forward fill non-null values in a pandas dataframe based on a set condition",
  "code": "In [11]: df.replace(0, np.nan).bfill()  #\u00a0maybe neater way to do this?\nOut[11]:\n             a   b   c\n2000-03-02   1   1   1\n2000-03-03   1   1   1\n2000-03-04   1   1   1\n2000-03-05   1 NaN NaN\n2000-03-06 NaN NaN NaN\n2000-03-07 NaN NaN NaN\n",
  "label": 0
 },
 {
  "idx": 351,
  "doc": "How to define a chi2 value function for arbitrary function?",
  "code": "import numpy\n\ndef f(x, a1, a2, a3, a4):\n    return a1 + a2*x + a3*x**2 + a4*x**3\n\ndata_x = numpy.arange(50)\nerrors = numpy.random.randn(50) * 0.3\ndata_y = data_x**3 + errors\n\nchi_squared = make_chi_squared(f, data_x, data_y, errors)\nprint inspect.getargspec(chi_squared).args\n",
  "label": 0
 },
 {
  "idx": 352,
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": ">>> df[\"close\"]\ntime\n2013-09-16 09:30:00    453.484089\n2013-09-16 09:31:00    474.727508\n2013-09-16 15:59:00    436.010403\n2013-09-16 16:00:00    455.296584\n2013-09-17 09:30:00    447.465545\n2013-09-17 09:31:00    477.785506\nName: close, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 353,
  "doc": "Organize Numerically Descending then Alphabetically Ascending by Different Elements in a List Python",
  "code": "list_name.sort(key=lambda x: (-x[2],) + x[:2])\n",
  "label": 1
 },
 {
  "idx": 354,
  "doc": "Execute coroutine from `call_soon` callback function",
  "code": "async def hello_world(loop):\n    print('Hello')\n    await asyncio.sleep(5, loop=loop)\n    print('World')\n",
  "label": 0
 },
 {
  "idx": 355,
  "doc": "Execute coroutine from `call_soon` callback function",
  "code": "loop = asyncio.get_event_loop()\ncoro = hello_world(loop)\nloop.run_until_complete(coro)\n",
  "label": 0
 },
 {
  "idx": 356,
  "doc": "How to use malloc and free with python ctypes?",
  "code": "variable_name = (ctypes_type * length)(initial_values)\n",
  "label": 0
 },
 {
  "idx": 357,
  "doc": "python beginner - how to read contents of several files into unique lists?",
  "code": "PathwayList = []\nfor InFileName in FileList:\n    sys.stderr.write(\"Processing file %s\\n\" % InFileName)\n    InFile = open(InFileName, 'r')\n    PathwayList.append(InFile.readlines())\n    InFile.close()  \n\nfor contents in PathwayList:\n    # do something with contents which is a list of strings\n    print contents  \n",
  "label": 1
 },
 {
  "idx": 358,
  "doc": "How to call python script from CasperJS",
  "code": "casp.run(function(){});\n",
  "label": 1
 },
 {
  "idx": 359,
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "category\ncat1         [23, 98]\ncat2        [65, 798]\ndtype: object\n",
  "label": 0
 },
 {
  "idx": 360,
  "doc": "counting zigzag sequences",
  "code": "U_k(n) + D_k(n) = 2*U_k(n) = 2*( sum U_k(n, f) for f in 1 ... k ).\n",
  "label": 0
 },
 {
  "idx": 361,
  "doc": "mongo - find items who at least match an array of values",
  "code": "col.aggregate([{\"$project\": { \"item1\": 1, \"is_subset\": { \"$setIsSubset\": [ ['a', 'b', 'c'], \"$item1\" ] }}},{\"$match\": {\"is_subset\": True}}])\n",
  "label": 1
 },
 {
  "idx": 362,
  "doc": "Python: Nice way to iterate over shell command result",
  "code": "import os\n\nwith os.popen('ls') as pipe:\n    for line in pipe:\n        print (line.strip())\n",
  "label": 1
 },
 {
  "idx": 363,
  "doc": "Replace character in line inside a file",
  "code": ">>> sample, value = strs.split(':')\n>>> sample\n'sample4'\n>>> value\n'15'\n",
  "label": 0
 },
 {
  "idx": 364,
  "doc": "Accessing a Dynamically Generated Nested Dictionary",
  "code": "def addTerm(self, term):\n   node = self.tree\n   for c in term:\n      c = c.lower()\n      if re.match(\"[a-z]\",c):\n         node = node[0].setdefault(c,[{},None])\n   node[1] = term\n",
  "label": 0
 },
 {
  "idx": 365,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "from collections import namedtuple\nProjection = namedtuple('Projection', ['lastq', 'fcast_yr', 'projections', 'yrahead', 'aname', 'actdf', 'merged2', 'mergederrs', 'montdist', 'ols_test', 'mergedfcst'])\n",
  "label": 0
 },
 {
  "idx": 366,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "projections = do_projections(actdf)\nprojections.aname\n",
  "label": 0
 },
 {
  "idx": 367,
  "doc": "How to convert datetime string without timezone to another datetime with timezone in python?",
  "code": "from datetime import datetime, timedelta\nfrom dateutil import tz\n\nAmericaNewYorkTz = tz.gettz('America/New_York')\n\ndef _to_datetime(air_date, air_time):\n    schedule_time = '{}:{}'.format(air_date, air_time)\n    return datetime.strptime(schedule_time,'%m/%d/%Y:%I:%M %p').replace(tzinfo=AmericaNewYorkTz)\n\ndt = _to_datetime('07/27/2015', '06:00 AM')\nprint('DateTime:', dt)\n# DateTime: 2015-07-27 06:00:00-04:00\n",
  "label": 1
 },
 {
  "idx": 368,
  "doc": "How to strip a specific word from a string?",
  "code": ">>> papa.replace('papa', '')\n' is a good man'\n>>> app.replace('papa', '')\n'app is important'\n",
  "label": 1
 },
 {
  "idx": 369,
  "doc": "Implementing fancy indexing in a class",
  "code": "def __getitem__(self, index):\n    if isinstance(index, tuple):\n        # foo[1:2, 3:4]\n    elif isinstance(index, slice)\n        # foo[1:2]\n    else:\n        # foo[1]\n",
  "label": 0
 },
 {
  "idx": 370,
  "doc": "Rolling mean with customized window with Pandas",
  "code": "0   NaN\n1   NaN\n2     3\n3     4\n4     5\n5     6\n6   NaN\n7   NaN\ndtype: float64\n",
  "label": 0
 },
 {
  "idx": 371,
  "doc": "removing \"()\" using python",
  "code": ">>> import re\n>>> s = 'N1B N 1.2620(4) 0.3320(4) 0.0049(7)'\n>>> re.sub('\\(.*?\\)', '', s)\n'N1B N 1.2620 0.3320 0.0049'\n",
  "label": 1
 },
 {
  "idx": 372,
  "doc": "Need help detecting a change in a variable outside of a while loop",
  "code": "if GO_TO_MAX_SPEED_CONDITION:\n    while NOT_AT_MAX_SPEED:\n        ACCELERATE\n",
  "label": 0
 },
 {
  "idx": 373,
  "doc": "Need help detecting a change in a variable outside of a while loop",
  "code": "if GO_TO_MAX_SPEED_CONDITION:\n    GO_TO_MAX_SPEED = True\nif STOP_GOING_TO_MAX_SPEED_CONDITION:\n    GO_TO_MAX_SPEED = False\n",
  "label": 0
 },
 {
  "idx": 374,
  "doc": "Converting List to Dict",
  "code": ">>> list1 = [['James','24','Canada','Blue','Tall'],['Ryan','21','U.S.','Green','Short']]\n>>> {i[0]:i[1:] for i in list1}\n{'James': ['24', 'Canada', 'Blue', 'Tall'], 'Ryan': ['21', 'U.S.', 'Green', 'Short']}\n",
  "label": 1
 },
 {
  "idx": 375,
  "doc": "make python wait for stored procedure to finish executing",
  "code": "update RunningStatus set status = 1;\n",
  "label": 0
 },
 {
  "idx": 376,
  "doc": "Fastest way to remove subsets of lists from a list in Python",
  "code": "f1 8.09958791733 [['watermelon', 'pear', 'apple', 'banana'], ['pear', 'pineapple']]\nf2 15.5085151196 [['pear', 'pineapple'], ['apple', 'pear', 'banana', 'watermelon']]\nf3 11.9473619461 [['pear', 'pineapple'], ['apple', 'pear', 'banana', 'watermelon']]\nf4 5.87942910194 [['watermelon', 'pear', 'apple', 'banana'], ['pear', 'pineapple']]\n",
  "label": 0
 },
 {
  "idx": 377,
  "doc": "Can I group / aggregate elements in a list (or dict) comprehension?",
  "code": ">>> dic2 = defaultdict(list)\nfor k,v in dic.iteritems():\n    for val in v:\n        dic2[val].append(k)\n...         \n>>> dic2\ndefaultdict(<type 'list'>,\n{'blue': [1, 2],\n 'green': [1, 2],\n 'yellow': [2],\n 'red': [1]})\n",
  "label": 0
 },
 {
  "idx": 378,
  "doc": "how to goup items in a list of dictionaries by matching values \u200b\u200bin python",
  "code": "[{'name': 'fire', 'command': '1;2;3;4'}, {'name': 'brain', 'command': '2;2;3;4'}]\n[{'name': 'word', 'command': '1;3;4;5'}]\n[{'name': 'cellphone', 'command': '6;1;3;4'}]\n[{'name': 'ocean', 'command': '9;3;7;4'}]\n",
  "label": 0
 },
 {
  "idx": 379,
  "doc": "how to goup items in a list of dictionaries by matching values \u200b\u200bin python",
  "code": "for key, group in groups:\n    groupList = list(group)\n    if len(groupList) > 1:\n        print(groupList)\n\n[{'command': '1;2;3;4', 'name': 'fire'}, {'command': '2;2;3;4', 'name': 'brain'}]\n",
  "label": 0
 },
 {
  "idx": 380,
  "doc": "Return the largest value of a given element of tuple keys in a dictionary",
  "code": "largest_key = max(d['a'])\n",
  "label": 0
 },
 {
  "idx": 381,
  "doc": "Periodically execute function in thread in real time, every N seconds",
  "code": "import threading\n\ndef do_every (interval, worker_func, iterations = 0):\n  if iterations != 1:\n    threading.Timer (\n      interval,\n      do_every, [interval, worker_func, 0 if iterations == 0 else iterations-1]\n    ).start ()\n\n  worker_func ()\n\ndef print_hw ():\n  print \"hello world\"\n\ndef print_so ():\n  print \"stackoverflow\"\n\n\n# call print_so every second, 5 times total\ndo_every (1, print_so, 5)\n\n# call print_hw two times per second, forever\ndo_every (0.5, print_hw)\n",
  "label": 1
 },
 {
  "idx": 382,
  "doc": "Abaqus: script to select elements on a surface",
  "code": "  part.Set('facename',faces=part.faces.findAt(((1,0,0),),))\n",
  "label": 0
 },
 {
  "idx": 383,
  "doc": "regex - how to recognise a pattern until a second one is found",
  "code": "show_p=re.compile(\"(.*)\\.s(\\d*)e(\\d*)\")\nshow_p.match(x).groups()\n",
  "label": 0
 },
 {
  "idx": 384,
  "doc": "Join list of dict with a dict in python",
  "code": "dict2 = {\"mask\": \"255.255.255.255\"}\nfor d in list1:\n    d.update(dict2)\n",
  "label": 1
 },
 {
  "idx": 385,
  "doc": "Returning user to referrer in flask in smartest pythonic way",
  "code": "<form ...>\n    <input type=\"hidden\" name=\"next\" value=\"{{ request.path }}\">\n    ...\n</form>\n",
  "label": 0
 },
 {
  "idx": 386,
  "doc": "How to make a test function using pytest",
  "code": "def test_added():\n    assert added(4, 6, 7) == (13, 11, 10)\n",
  "label": 1
 },
 {
  "idx": 387,
  "doc": "How to make a test function using pytest",
  "code": "1 passed in x.xx seconds\n",
  "label": 0
 },
 {
  "idx": 388,
  "doc": "How to perform re substitutions on <p> tags within a specific class?",
  "code": ">>> import re\n>>> text = '   hello'\n>>> re.sub('\\s+', '', text)\n'hello'\n>>> text\n'   hello'\n",
  "label": 0
 },
 {
  "idx": 389,
  "doc": "Accessing xrange internal structure",
  "code": ">>> obj = xrange(1,11,2)\n>>> obj.__reduce__()[1]\n(1, 11, 2)\n>>> len(obj)\n5\n",
  "label": 1
 },
 {
  "idx": 390,
  "doc": "python - replace string entry with a dictionary entry",
  "code": "re.sub(r'{([^{}]+)}', lambda m: str(data[m.group(1)]), template_text)\n",
  "label": 1
 },
 {
  "idx": 391,
  "doc": "python - replace string entry with a dictionary entry",
  "code": "'MATERIAL 4 {clad-den} {clad-temp} 2'.format(**data)\n",
  "label": 1
 },
 {
  "idx": 392,
  "doc": "Extend Python list \"inline\"",
  "code": "import itertools\nit = itertools.chain(range(15, 30, 3), [0])\n",
  "label": 1
 },
 {
  "idx": 393,
  "doc": "How to convert pandas single column data frame to series or numpy vector",
  "code": "In [27]: tdf['s1'].values\nOut[27]: array([  0. ,   1. ,  23.4,  10. ,  23. ])\n",
  "label": 1
 },
 {
  "idx": 394,
  "doc": "Comparing two pandas dataframes for differences",
  "code": "from pandas.util.testing import assert_frame_equal\nassert_frame_equal(csvdata, csvdata_old)\n",
  "label": 1
 },
 {
  "idx": 395,
  "doc": "Detecting geographic clusters",
  "code": "map(\"county\", plot=T, ylim=c(36.7307,37.98), xlim=c(-122.644,-121.46))\n# or for more coloring, but choose one or the other map(\"country\") commands\nmap(\"county\", plot=T, fill=T, col=palette(), ylim=c(36.7307,37.98), xlim=c(-122.644,-121.46))\nrect(-122.644,36.7307, -121.46,37.98, col=c(\"red\"))\n",
  "label": 0
 },
 {
  "idx": 396,
  "doc": "Getting the key and value of br.forms() in Mechanize",
  "code": "In [18]: response = br.open(\"http://www.w3schools.com/html/html_forms.asp\")\n\nIn [19]: f = list(br.forms())\n\nIn [20]: f[0].get_value(\"firstname\")\nOut[20]: 'Mickey'\nIn [21]: f[0].get_value(\"lastname\")\nOut[21]: 'Mouse'\n",
  "label": 1
 },
 {
  "idx": 397,
  "doc": "making binned boxplot in matplotlib with numpy and scipy in Python",
  "code": "histogram(a, bins=10, range=None, normed=False, weights=None, new=None)\n",
  "label": 0
 },
 {
  "idx": 398,
  "doc": "How to loop through object return by SQLALchemy and process each row and display it to HTML",
  "code": "{% for cam in allcam %}\n   <p>{{ cam.camurl }}</p>\n   <p>{{ cam.sitename }}</p>\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 399,
  "doc": "Remove elements of one list from another, while keeping duplicates",
  "code": "from collections import Counter\n\nacount = Counter(a)\nbcount = Counter(b)\nresult = list((acount - bcount).elements())\n",
  "label": 1
 },
 {
  "idx": 400,
  "doc": "Append to several lists inside list",
  "code": "from itertools import izip\n\nfor x, y in izip(lis_A, vals):\n    x.append(y)\n",
  "label": 1
 },
 {
  "idx": 401,
  "doc": "Python Variable in an HTML email in Python",
  "code": "code = \"We Says Thanks!\"\nhtml = \"\"\"\\\n<html>\n  <head></head>\n  <body>\n    <p>Thank you for being a loyal customer.<br>\n       Here is your unique code to unlock exclusive content:<br>\n       <br><br><h1>{code}</h1><br>\n       <img src=\"http://domain.com/footer.jpg\">\n    </p>\n  </body>\n</html>\n\"\"\".format(code=code)\n",
  "label": 1
 },
 {
  "idx": 402,
  "doc": "how to decrement and increment loop range 'i' variable in the execution of loop in python",
  "code": "$ python3.4 foo.py\niteration\ni is = \n0\niteration\ni is = \n1\n1a- m here\n7\ni is = \n3\niteration\ni is = \n3\n2b- m here\n3\ni is = \n6\niteration\ni is = \n6\n1b- m here\n8\niteration\ni is = \n8\n1b- m here\n14\n14\n",
  "label": 0
 },
 {
  "idx": 403,
  "doc": "Generate random string from regex character set",
  "code": "'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'\n",
  "label": 0
 },
 {
  "idx": 404,
  "doc": "Dynamic field calculations in Django",
  "code": "priority = my_model.priority\n",
  "label": 0
 },
 {
  "idx": 405,
  "doc": "Get system metrics using PowerShell",
  "code": "Add-Type -AssemblyName System.Windows.Forms\n[System.Windows.Forms.SystemInformation]::TerminalServerSession\n",
  "label": 1
 },
 {
  "idx": 406,
  "doc": "Scipy: Centroid of convex hull",
  "code": "import matplotlib.pyplot as plt\n#Plot convex hull\nfor simplex in hull.simplices:\n    plt.plot(points[simplex, 0], points[simplex, 1], 'k-')\n\n#Plot centroid\nplt.plot(cx, cy,'x',ms=20)\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 407,
  "doc": "Creating a dictionary and adding a set as its value",
  "code": "d = {}\nd.setdefault(key, set()).add(value)\n",
  "label": 1
 },
 {
  "idx": 408,
  "doc": "Detagging with regex does not catch nested tags",
  "code": "def detag(text,opentag='<',closetag='>'):\n    t1 = regex.escape(opentag)\n    t2 = regex.escape(closetag)\n    re = regex.compile(t1 + '(?:[^' + t2 + t1 + ']|(?R))*' + t2)\n    result = re.sub('',text)\n    return result\n",
  "label": 1
 },
 {
  "idx": 409,
  "doc": "Average of key values in a list of dictionaries",
  "code": "In [8]: import numpy as np\n\nIn [9]:  [dict(zip(d.keys(), [int(np.round(np.mean(d.values())))])) for d in L]\n\n#Out[9]: [{'Eva': 5}, {'Ana': 53}, {'Ada': 12}]\n",
  "label": 1
 },
 {
  "idx": 410,
  "doc": "Django unique random as a default value",
  "code": "from django.contrib.auth.models import User\n\ndef unique_rand():\n    while True:\n        code = password = User.objects.make_random_password(length=8)\n        if not Person.objects.filter(code=code).exists():\n            return code\n\nclass Person(models.Model):\n    code = models.CharField(max_length=8, unique=True, default=unique_rand)\n",
  "label": 1
 },
 {
  "idx": 411,
  "doc": "Is there an efficient way to fill date gaps in python?",
  "code": "hourly_date_rng = pd.date_range(start='2012-08-04 12:00:00', end='2012-08-4 23:00:00', freq='H')\nhourly_date_rng.name = 'date_closed'\n\nhourly_date_rng\n\nDatetimeIndex(['2012-08-04 12:00:00', '2012-08-04 13:00:00',\n               '2012-08-04 14:00:00', '2012-08-04 15:00:00',\n               '2012-08-04 16:00:00', '2012-08-04 17:00:00',\n               '2012-08-04 18:00:00', '2012-08-04 19:00:00',\n               '2012-08-04 20:00:00', '2012-08-04 21:00:00',\n               '2012-08-04 22:00:00', '2012-08-04 23:00:00'],\n              dtype='datetime64[ns]', name='date_closed', freq='H', tz=None)\n",
  "label": 0
 },
 {
  "idx": 412,
  "doc": "How to get a list of Xth elements from a list of tuples?",
  "code": "x, y = zip(*sset)\n",
  "label": 1
 },
 {
  "idx": 413,
  "doc": "Creating an iterable of dictionaries from an iterable of tuples",
  "code": "In [8]: [{'location':l, 'name':n, 'value':v} for (n, l, v) in all_values]\nOut[8]: \n[{'location': 0, 'name': 'a', 'value': 0.1},\n {'location': 1, 'name': 'b', 'value': 0.5},\n {'location': 2, 'name': 'c', 'value': 1.0}]\n",
  "label": 1
 },
 {
  "idx": 414,
  "doc": "Python Django how to rotate image and remove black color?",
  "code": "transparency = im.info['transparency'] \nim.save('icon.gif', transparency=transparency)\n",
  "label": 0
 },
 {
  "idx": 415,
  "doc": "How to decode() with a subset of 'ascii'?",
  "code": "def test_if_ascii(text):\n    if isinstance(test, str):\n        raise TypeError('hey man, dont feed me unicode plz')\n    return all(32 <= ord(c) <= 126 for c in text)\n",
  "label": 1
 },
 {
  "idx": 416,
  "doc": "Query current directory in Python (the one the script is running from)",
  "code": "os.getcwd()\n",
  "label": 1
 },
 {
  "idx": 417,
  "doc": "Query current directory in Python (the one the script is running from)",
  "code": "os.path.dirname(__file__)\n",
  "label": 1
 },
 {
  "idx": 418,
  "doc": "Deleting consonants from a string in Python",
  "code": "\"mississippi\".translate(m)\n",
  "label": 0
 },
 {
  "idx": 419,
  "doc": "appending a single string to each element of a list in python",
  "code": "fred\nwilma\n",
  "label": 0
 },
 {
  "idx": 420,
  "doc": "How to invert a permutation array in numpy",
  "code": ">>> p = np.array([3, 2, 0, 1])\n>>> np.argsort(p)\narray([2, 3, 1, 0])\n>>> p[np.argsort(p)]\narray([0, 1, 2, 3])\n",
  "label": 1
 },
 {
  "idx": 421,
  "doc": "Sorting a list of list of tuples based on the sum of first field in the tuple in Python",
  "code": "big_list = [\n  [\n    (20, 'Item A', 'Jan'),\n    (30, 'Item B', 'Jan'),\n    (12, 'Item C', 'Jan'),\n  ],\n  [\n    (22, 'Item A', 'Feb'),\n    (34, 'Item B', 'Feb'),\n    (15, 'Item C', 'Feb'),\n  ]]\n\ns = {}\nfor l in big_list:\n    for m in l:\n        s[m[1]] = s.get(m[1], 0) + m[0]\n",
  "label": 0
 },
 {
  "idx": 422,
  "doc": "BeautifulSoup scraping information from multiple divs using loops into JSON",
  "code": "from pprint import pprint\n\nfrom bs4 import BeautifulSoup\n\ndata = \"\"\"\n<div>\n    <div class=\"audioBoxWrap clearBoth\">\n        <h3>Title 1</h3>\n        <p>Description 1</p>\n        <div class=\"info\" style=\"line-height: 1px; height: 1px; font-size: 1px;\"></div>\n        <div class=\"audioBox\" style=\"display: none;\">\n            stuff\n        </div>\n        <div> [ <a href=\"link1.mp3\">Right-click to download</a>] </div>\n    </div>\n    <div class=\"audioBoxWrap clearBoth\">\n        <h3>Title 2</h3>\n        <p>Description 2</p>\n        <div class=\"info\" style=\"line-height: 1px; height: 1px; font-size: 1px;\"></div>\n        <div class=\"audioBox\" style=\"display: none;\">\n            stuff\n        </div>\n        <div> [ <a href=\"link2.mp3\">Right-click to download</a>] </div>\n    </div>\n</div>\"\"\"\n\nsoup = BeautifulSoup(data, \"html.parser\")\n\ntracks = soup.find_all('div', {'class':\"audioBoxWrap clearBoth\"})\nresult = {\n    \"podcasts\": [\n        {\n            \"title\": track.h3.get_text(strip=True),\n            \"description\": track.p.get_text(strip=True),\n            \"link\": track.a[\"href\"]\n        }\n        for track in tracks\n    ]\n}\npprint(result)\n",
  "label": 1
 },
 {
  "idx": 423,
  "doc": "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks",
  "code": "01/01/0001  10:37   3   $0.00   LOCAL AIRTIME, LONG DISTANCE and INTERNATIONAL CHARGES  xxx-xxx-xxxx    City Name   aaa-aaa-aaaa    City Name   Mobile\n01/01/0001  10:37   10  $0.00   LOCAL AIRTIME, LONG DISTANCE and INTERNATIONAL CHARGES  yyy-yyy-yyyy    City Name   zzz-zzz-zzzz    City Name   Mobile\n",
  "label": 0
 },
 {
  "idx": 424,
  "doc": "How to get the location of a Zope installation from inside an instance?",
  "code": "from App.config import getConfiguration\n\nproduct_config = getattr(getConfiguration(), 'product_config', {})\nconfig = product_config.get('pd.prenotazioni', {})\nlogfile = config.get('logfile')\n",
  "label": 0
 },
 {
  "idx": 425,
  "doc": "Installing OSQA on windows (local system)",
  "code": "easy_install markdown2\neasy_install html5lib\n",
  "label": 0
 },
 {
  "idx": 426,
  "doc": "Installing OSQA on windows (local system)",
  "code": "<location '/'>\n    SetHandler python-program\n    PythonHandler django.core.handlers.modpython\n    PythonPath \"['{OSQA_ROOT}'] + sys.path\"\n    SetEnv DJANGO_SETTINGS_MODULE osqa.settings\n    PythonDebug On\n</location>\n",
  "label": 0
 },
 {
  "idx": 427,
  "doc": "Python unittesting: Test whether two angles are almost equal",
  "code": "from math import sin, cos, acos, radians, degrees\nfrom unittest import assertAlmostEqual        \n\ndef assertAlmostEqualAngles(x, y, **kwargs):\n    x,y = radians(x),radians(y)\n    c2 = (sin(x)-sin(y))**2 + (cos(x)-cos(y))**2\n    angle_diff = degrees(acos((2.0 - c2)/2.0))\n    assertAlmostEqual(angle_diff, 0.0, **kwargs)\n",
  "label": 1
 },
 {
  "idx": 428,
  "doc": "Adding a constant to a closure expression",
  "code": "def make_subtract(fn, val):\n    def wrapper(x):\n        return fn(x) - val\n    return wrapper\n",
  "label": 1
 },
 {
  "idx": 429,
  "doc": "How to extract literal words from a consecutive string efficiently?",
  "code": "s = 'thumbgreenappleactiveassignmentweeklymetaphor'\nprint(infer_spaces(s))\n",
  "label": 0
 },
 {
  "idx": 430,
  "doc": "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}",
  "code": "alphabet =  range(10)\nbase = 10\ndict((x*base**2+y*base+z,(x,y,z)) for x in alphabet \n                                  for y in alphabet \n                                  for z in alphabet )\n",
  "label": 1
 },
 {
  "idx": 431,
  "doc": "Python Version Specific Code",
  "code": "pygame.version.vernum\n",
  "label": 0
 },
 {
  "idx": 432,
  "doc": "numpy: most efficient frequency counts for unique values in an array",
  "code": "np.vstack((ii,y[ii])).T\n# array([[ 1,  5],\n         [ 2,  3],\n         [ 5,  1],\n         [25,  1]])\n",
  "label": 0
 },
 {
  "idx": 433,
  "doc": "Difference between two time intervals in series",
  "code": "def time_range(start, end, duration):\n    dt = start\n    while dt < end: #note: `end` is not included in the range\n        yield dt\n        dt += duration\n",
  "label": 1
 },
 {
  "idx": 434,
  "doc": "Get item with value from tuple in python",
  "code": ">>> results_dict = {v:k for k,v in results}\n>>> print results_dict['111.111.5.6']\nobject6\n>>> print results_dict['111.111.5.1']\nobject1\n>>> print results_dict['blah']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'blah'\n>>> print results_dict.get('111.111.5.5')\nobject5\n>>> print results_dict.get('123456')\nNone\n",
  "label": 0
 },
 {
  "idx": 435,
  "doc": "Python regex to remove all words which contains number",
  "code": ">>> re.sub(r'\\w*\\d\\w*', '', words).strip()\n'ABCD abcd'\n",
  "label": 1
 },
 {
  "idx": 436,
  "doc": "Network capturing with Selenium/PhantomJS",
  "code": "from selenium import webdriver\nfrom browsermobproxy import Server\n\nserver = Server(environment.b_mob_proxy_path)\nserver.start()\nproxy = server.create_proxy()\nservice_args = [\"--proxy-server=%s\" % proxy.proxy]\ndriver = webdriver.PhantomJS(service_args=service_args)\n\nproxy.new_har()\ndriver.get('url_to_open')\nprint proxy.har  # this is the archive\n# for example:\nall_requests = [entry['request']['url'] for entry in proxy.har['log']['entries']]\n",
  "label": 1
 },
 {
  "idx": 437,
  "doc": "Loops to minimize function of arrays in python",
  "code": "a, b, mean = np.linalg.lstsq(A, X)[0]\n",
  "label": 0
 },
 {
  "idx": 438,
  "doc": "Loops to minimize function of arrays in python",
  "code": "a, b = np.linalg.lstsq(A, B)[0].reshape(2)\n",
  "label": 0
 },
 {
  "idx": 439,
  "doc": "How to iterate through a module's functions",
  "code": "for name, val in foo.__dict__.iteritems(): # iterate through every module's attributes\n    if callable(val):                      # check if callable (normally functions)\n        val()                              # call it\n",
  "label": 1
 },
 {
  "idx": 440,
  "doc": "Python argparser. List of dict in INI",
  "code": ">> config = ConfigParser.RawConfigParser()\n>> config.read('configs.ini')\n>> items = config.items('section')\n>> items\n[('key', 'value'), ('key2', 'value2'), ('key3', 'value3')]\n",
  "label": 0
 },
 {
  "idx": 441,
  "doc": "Map function and input function parameters",
  "code": "from functools import partial\nmap(partial(add_x_to_input, some_value_for_x), myList)\n",
  "label": 1
 },
 {
  "idx": 442,
  "doc": "Map function and input function parameters",
  "code": "map(lambda k: add_x_to_input(some_value_for_x, k), myList)\n",
  "label": 1
 },
 {
  "idx": 443,
  "doc": "Create numpy array based on magnitude of difference between arrays",
  "code": "import numpy as np \n\narr_a = np.random.rand(10) \narr_b = np.random.rand(10)\n\narr_c = np.where((abs(arr_a - arr_b)/arr_a) > 0.3, 1, 0) \n",
  "label": 1
 },
 {
  "idx": 444,
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "ln(y) = ln(height) - (x - mu)^2 / (2 * sigma^2)\n",
  "label": 0
 },
 {
  "idx": 445,
  "doc": "evaluating values of a dictionary",
  "code": "all(elem[2] in ('', None) for elem in test.values())\n",
  "label": 1
 },
 {
  "idx": 446,
  "doc": "Pass a counter to every python logging method",
  "code": "import logging\n\nclass ContextFilter(logging.Filter):\n    def filter(self, record):\n        record.count = counter\n        return True\n\nlogging.basicConfig(\n    level = logging.DEBUG,\n    format = '%(levelname)-8s: %(count)s: %(message)s')\nlogger = logging.getLogger(__name__)\nlogger.addFilter(ContextFilter())\n\ncounter = 5\nlogger.debug('First Event')\ncounter += 2\nlogger.warning('Second Event')\n",
  "label": 1
 },
 {
  "idx": 447,
  "doc": "How to store callback methods?",
  "code": "# illustration how I typically use it\nweak_call = WeakCallback(self._something_changed)\nlong_lived_object.connect(\"on_change\", weak_call)\n",
  "label": 0
 },
 {
  "idx": 448,
  "doc": "How do I test if a string exists in a Genshi stream?",
  "code": "stream = stream | Transformer('.//head/script[\"functionName()\"]').remove()\n",
  "label": 0
 },
 {
  "idx": 449,
  "doc": "Python | How to create dynamic and expandable dictionaries",
  "code": "userdata = { \"data\":[]}\n\ndef fil_userdata():\n  for i in xrange(0,5):\n    user = {}\n    user[\"name\"]=...\n    user[\"age\"]=...\n    user[\"country\"]=...\n    add_user(user)\n\ndef add_user(user):\n  userdata[\"data\"].append(user)\n",
  "label": 1
 },
 {
  "idx": 450,
  "doc": "Check list of tuples where first element of tuple is specified by defined string",
  "code": "l = [('A', 2), ('A', 1), ('B', 0.2)]\nprint filter(lambda x: x[0] == 'A', l)\n",
  "label": 1
 },
 {
  "idx": 451,
  "doc": "Assistance on automated image/text Document",
  "code": " weasyprint -f png -s styles.css input.html output.png\n",
  "label": 0
 },
 {
  "idx": 452,
  "doc": "Storing a string and a set in a dictionary",
  "code": ">>> unique_words('test.txt')\nThe unique word them occurs on line 2\nThe unique word I occurs on line 1\nThe unique word there occurs on line 0\nThe unique word some occurs on line 2\nThe unique word times occurs on line 3\nThe unique word say occurs on line 2\nThe unique word too occurs on line 3\nThe unique word have occurs on line 1\nThe unique word of occurs on line 2\n>>> \n",
  "label": 0
 },
 {
  "idx": 453,
  "doc": "Dictionary As Table In Django Template",
  "code": "rows = []\nfor i in xrange(2):\n    row = []\n    for k in field.keys():\n        row.append(field[k][i])\n    rows.append(row)\n",
  "label": 0
 },
 {
  "idx": 454,
  "doc": "More elegant/Pythonic way of printing elements of tuple?",
  "code": "for i in solution():\n    print(i, end= ' ')\n",
  "label": 1
 },
 {
  "idx": 455,
  "doc": "Creating a table out of data in python",
  "code": "Column 1                Column 2                Column 3                Column 4            \n\nbread                   milk                    sugar                   tea   \n",
  "label": 0
 },
 {
  "idx": 456,
  "doc": "Nested List of Lists to Single List of tuples",
  "code": "[list(i) for i in zip(*empampleList)]\n",
  "label": 1
 },
 {
  "idx": 457,
  "doc": "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?",
  "code": "def function(*args, **kwargs):\n    values = {}\n    for k in kwargs:\n        if kwargs[k] is not None:\n            values[k] = kwargs[k]\n    if not values:\n        raise Exception(\"No values provided\")\n    return values\n\n>>> function(varone=None, vartwo=\"fish\", varthree=None)\n{'vartwo': 'fish'}\n",
  "label": 1
 },
 {
  "idx": 458,
  "doc": "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?",
  "code": "def function(**kwargs):\n    values = dict([i for i in kwargs.iteritems() if i[1] != None])\n    if not values:\n        raise Exception(\"foo\")\n    return values\n",
  "label": 1
 },
 {
  "idx": 459,
  "doc": "Compare two files in python and save line differences in a new file",
  "code": "f1 = open('a', 'r').readlines()\nf2 = open('b', 'r').readlines()\nout = []\ncount = 1 \nfor i in f1:\n    flag = False\n    for j in f2:\n        if i == j:\n            flag = True\n    if not flag:\n        out.append(count)\n    count+=1\nfor o in out:\n    print o\n",
  "label": 1
 },
 {
  "idx": 460,
  "doc": "How to obtain values of request variables using Python and Flask",
  "code": "myvar =  request.form[\"myvar\"]\n",
  "label": 0
 },
 {
  "idx": 461,
  "doc": "how to remove all non english characters and words using NLTK >",
  "code": "from nltk.corpus import wordnet\n\nfList = open(\"frequencyList.txt\",\"r\")#Read the file\nlines = fList.readlines()\n\neWords = open(\"eng_words_only.txt\", \"a\")#Open file for writing\n\nfor w in lines:\n    if not wordnet.synsets(w):#Comparing if word is non-English\n        print 'not '+w\n    else:#If word is an English word\n        print 'yes '+w\n        eWords.write(w)#Write to file \n\neWords.close()#Close the file\n",
  "label": 1
 },
 {
  "idx": 462,
  "doc": "How to do a rolling aggregation of data week wise in python?",
  "code": "df = pd.DataFrame(data)\ndf.columns = ['Date','Profit']\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['weekofyear'] = df['Date'].dt.weekofyear\ndf.reset_index('Date')\ndf.sort_index(inplace=True)\ndf['Weekly_Cum'] = df.groupby('weekofyear').cumsum()\n",
  "label": 1
 },
 {
  "idx": 463,
  "doc": "any python min like function which gives a list as result",
  "code": "def f3(lst):\n    lstm = min((x for x in lst if x[1]), key = lambda x: x[1])[1]\n    return [y for y in lst if y[1] == lstm]\n\n%timeit f3(lst)\n100000 loops, best of 3: 4.19 us per loop\n",
  "label": 1
 },
 {
  "idx": 464,
  "doc": "any python min like function which gives a list as result",
  "code": "def f4(lst):\n    d={}\n    for item in lst:\n        if item[1] != 0:\n            d.setdefault(item[1],{})[item]=0\n    return d[min(d.keys())].keys()\n\n%timeit f4(lst)\n100000 loops, best of 3: 3.76 us per loop\n",
  "label": 1
 },
 {
  "idx": 465,
  "doc": "Removing custom widget from QVBoxLayout",
  "code": "self.vl_seatView.removeWidget(self.sv_widgets[purchase.id])\nself.sv_widgets[purchase.id].setParent(None)\ndel self.sv_widgets[purchase.id]\n",
  "label": 1
 },
 {
  "idx": 466,
  "doc": "Removing custom widget from QVBoxLayout",
  "code": "import sip # you'll need this import (no worries, it ships with your pyqt install)\nsip.delete(self.sv_widgets[purchase.id])\n",
  "label": 1
 },
 {
  "idx": 467,
  "doc": "Looking for a concise way to check for point collision in a list of Rects",
  "code": ">>> rects = [pygame.Rect(0,0,100,100), pygame.Rect(30,30,30,30)]\n>>> next((r for r in rects if r.collidepoint(10, 10)), None)\n<rect(0, 0, 100, 100)>\n>>> next((r for r in rects if r.collidepoint(200, 200)), None)\n>>>\n",
  "label": 1
 },
 {
  "idx": 468,
  "doc": "Python:how to get keys with same values?",
  "code": "from collections import defaultdict, OrderedDict\nresult_dict = defaultdict(OrderedDict)\ndata = [('Han Decane','12333'),('Can Decane','12333'),('AlRight','10110')]\nfor (v,k) in data:\n   result_dict[k][v]=True\n\n\n>>> list(result_dict['12333'].keys())\n['Han Decane', 'Can Decane']\n",
  "label": 1
 },
 {
  "idx": 469,
  "doc": "How to find a index of an item in a string?",
  "code": ">>> s.rfind('#')\n7\n",
  "label": 1
 },
 {
  "idx": 470,
  "doc": "Updating a table from another table with multiple columns in sqlalchemy",
  "code": "select_query = select([table2.c.col1, table2.c.col2]).where(table1.c.key == table2.c.key)\n",
  "label": 0
 },
 {
  "idx": 471,
  "doc": "How to add regression functions in python, or create a new regression function from given coefficients?",
  "code": "np.dot(X_test, res_wls.params)\n",
  "label": 0
 },
 {
  "idx": 472,
  "doc": "NLTK: Find contexts of size 2k for a word",
  "code": "words = nltk.corpus.brown.words()\nk = 5\nfor ngram in nltk.ngrams(words, 2*k+1, pad_left=True, pad_right=True, pad_symbol=\" \"):\n    if ngram[k+1].lower() == \"settle\":\n        print(\" \".join(ngram))\n",
  "label": 1
 },
 {
  "idx": 473,
  "doc": "How to recursively call a macro in jinja2?",
  "code": "{% macro render_class(class) -%}\nclass {{ class.name }}\n{\n{% for field in class.fields %}\n    int {{ field }};\n{% endfor %}\n{% for subclass in class.subclasses %}\n{{ render_class(subclass) }}\n{% endfor %}\n}\n{%- endmacro %}\n\n{% for class in classes %}\n{{ render_class(class) }}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 474,
  "doc": "How can I keep the indentation between lines?",
  "code": "line 1\n    added code line a\n    added code line b\nline 3\n",
  "label": 0
 },
 {
  "idx": 475,
  "doc": "Passing more than two arguments in reduce function",
  "code": "def apply_something(something, config, some_var):\n    pass  # ...\n\nimport functools\n\nreduce(functools.partial(apply_something, some_var=True), \n       [1, 2, 3], something_initializer)\n",
  "label": 1
 },
 {
  "idx": 476,
  "doc": "PYMongo : Parsing|Serializing query output of a collection",
  "code": "def __setitem__(self,key,value):\n     try:\n        attr = getattr(class_obj,key)\n        if(attr!=None):\n            if(isinstance(value,dict)):\n                for child_key,child_value in value.items(): \n                    attr.__setitem__(child_key,child_value)\n                setattr(class_obj,key,attr)\n            else:\n                setattr(class_obj,key,value)\n\n    except AttributeError:\n       pass\n",
  "label": 0
 },
 {
  "idx": 477,
  "doc": "How to flexibly change PYTHONPATH",
  "code": "$ CLASSPATH=/put/path/here java MyMainClass\n",
  "label": 0
 },
 {
  "idx": 478,
  "doc": "How to create a new list or new line after a certain number of iterations",
  "code": "import csv\nfrom itertools import zip_longest\n\nn=10\nwith open('/tmp/rawdata.txt','r') as fin, open('/tmp/out.csv','w') as fout:\n    reader=csv.reader(fin)\n    writer=csv.writer(fout) \n    source=(e for line in reader for e in line)             \n    for t in zip_longest(*[source]*n):\n        writer.writerow(list(e for e in t if e))\n",
  "label": 1
 },
 {
  "idx": 479,
  "doc": "Dictionary from variables that may not be initialized",
  "code": "d = {k:v for k,v in locals().items() if v is not None and not k.startswith('__')}\n",
  "label": 1
 },
 {
  "idx": 480,
  "doc": "List files in ONLY the current directory",
  "code": "files = [f for f in os.listdir(somedir) if os.path.isfile(f)].\n",
  "label": 0
 },
 {
  "idx": 481,
  "doc": "How to iterate over a pandas dataframe and compare certain columns based on a third column?",
  "code": "sns.factorplot('ids', 'data', hue='var', kind='bar', \n               data=df[df.isin({'ids':['Bob','Mary']}).any(1)])\n",
  "label": 0
 },
 {
  "idx": 482,
  "doc": "Writing to multiple files with Scrapy",
  "code": "from scrapy import signals\nfrom scrapy.exceptions import DropItem\n\nclass DuplicatesPipeline(object):\n    def __init__(self):\n        self.ids_seen = set()\n\n    def process_item(self, item, spider):\n        if item['id'] in self.ids_seen:\n            raise DropItem(\"Duplicate item found: %s\" % item)\n        else:\n            self.ids_seen.add(item['id'])\n            return item\n",
  "label": 0
 },
 {
  "idx": 483,
  "doc": "Writing to multiple files with Scrapy",
  "code": "class AuthorSpider(BaseSpider):\n    ...\n\n    def __init__(self, articles):\n        self.start_urls = []\n\n        for line in articles:\n            article = json.loads(line)\n            self.start_urls.append(data['author_url'])\n",
  "label": 0
 },
 {
  "idx": 484,
  "doc": "Jenkins and Python",
  "code": "python ./local_lib/bin/run.py -t $Test_Name -b -c -no_compile -no_wlf\n",
  "label": 0
 },
 {
  "idx": 485,
  "doc": "numpy tile without memory allocation",
  "code": "In [507]: a1.__array_interface__['data']\nOut[507]: (164774704, False)\nIn [508]: a.__array_interface__['data']\nOut[508]: (164774704, False)\n",
  "label": 0
 },
 {
  "idx": 486,
  "doc": "strip ' from all members in a list",
  "code": "chkseq = map(int, open(\"sequence.txt\"))\n",
  "label": 1
 },
 {
  "idx": 487,
  "doc": "strip ' from all members in a list",
  "code": "chkseq = [int(line) for line in open(\"sequence.txt\")] \n",
  "label": 1
 },
 {
  "idx": 488,
  "doc": "How to index a user input list in Python 2.x?",
  "code": "countries = []\nfor idx, city in enumerate(cities):\n    country = raw_input(\"Where is \" + city + \" located? \")\n    countries.append(country)\n    # why did you need the index? enumerate is the way to go now....\n",
  "label": 0
 },
 {
  "idx": 489,
  "doc": "How do you @rpc _returns polymorphic types in spyne?",
  "code": "class GenericA(ComplexModel):\n    i = Integer\n    s = Unicode\n    d = DateTime\n",
  "label": 0
 },
 {
  "idx": 490,
  "doc": "Custom dictionary lookup in Python",
  "code": "class ClosestDict(dict):\n    def get(self, key):\n        key = min(self.iterkeys(), key=lambda x: abs(x - key))\n        return dict.get(self, key)\n\nd = ClosestDict({10: 3, 100: 2, 1000: 1})\nprint (d.get(20), d.get(60), d.get(200))\n",
  "label": 1
 },
 {
  "idx": 491,
  "doc": "How can I, on some global keystroke, paste some text to current active application in linux with Python or C++",
  "code": "xmacroplay:\nReads lines from the standard input. It can understand the following lines:\n\nDelay [sec]     - delays the program with [sec] secundums\nButtonPress [n] - sends a ButtonPress event with button [n]\n          this emulates the pressing of the mouse button [n]\nButtonRelease [n]   - sends a ButtonRelease event with button [n]\n          this emulates the releasing of the mouse button [n]\n... snip lots more ...\n",
  "label": 0
 },
 {
  "idx": 492,
  "doc": "django one session per user",
  "code": "class UserAttributes(User):\n    last_session_key = models.CharField(blank=True, null=True, max_length=40)\n",
  "label": 0
 },
 {
  "idx": 493,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "ids = df.groupby(['FName', 'LName']).id.apply(lambda x: list(x)[-1])\n",
  "label": 0
 },
 {
  "idx": 494,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "ids = df.groupby(['FName', 'LName']).id.apply(lambda x: list(x)[-1])\ndf.Usedid = df.apply(lambda x: int(ids[x.UsedFName, x.UsedLName]), axis=1)\n",
  "label": 1
 },
 {
  "idx": 495,
  "doc": "Plot arrays same extension Matlotlib",
  "code": "import glob\nimport numpy as np\n\narray_files = glob.glob('*.corr.npy')\nfor fname in array_files:\n    x = np.load(fname)\n    plt.plot(x)\n",
  "label": 1
 },
 {
  "idx": 496,
  "doc": "Set a kind name independently of the model name (App Engine datastore)",
  "code": "class MyModel(db.Model):\n  @classmethod\n  def kind(cls):\n    return 'prefix_%s' % super(MyModel, cls).kind()\n",
  "label": 1
 },
 {
  "idx": 497,
  "doc": "Grammar rule extraction from parsed result",
  "code": ">>> ptree.productions()\n[S -> VP, VP -> VB NP ADVP, VB -> 'get', NP -> PRP, PRP -> 'me', ADVP -> RB, RB -> 'now']\n",
  "label": 0
 },
 {
  "idx": 498,
  "doc": "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation",
  "code": "somelist+=[[x+f(x) for x in somelist[-1]]]\n",
  "label": 0
 },
 {
  "idx": 499,
  "doc": "Convert utf string ftom python to javascript dictionary",
  "code": ">>> import json\n>>> python_object = {'username': u'Tester1', 'age': 0L}\n>>> print json.dumps(python_object)\n{\"username\": \"Tester1\", \"age\": 0}\n",
  "label": 1
 },
 {
  "idx": 500,
  "doc": "NumPy map calculation depending on the indices",
  "code": ">>> H, W = 4,5\n>>> x, y = np.indices([H, W])\n>>> m\narray([[  0. ,   0.5,   2. ,   4.5,   8. ],\n       [  0.5,   1. ,   2.5,   5. ,   8.5],\n       [  2. ,   2.5,   4. ,   6.5,  10. ],\n       [  4.5,   5. ,   6.5,   9. ,  12.5]])\n",
  "label": 1
 },
 {
  "idx": 501,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [19]: %timeit arr[index]\n1000000 loops, best of 3: 201 ns per loop\n\nIn [20]: %timeit [dct[i] for i in index]\n1000000 loops, best of 3: 1.63 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 502,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "def using_loops(color, color2ind):\n    M, N = color.shape[:2]\n    out = np.zeros((M, N))\n    for i in range(M):\n        for j in range(N):\n            out[i][j] = color2ind[tuple(color[i,j,:])]\n    return out\n",
  "label": 0
 },
 {
  "idx": 503,
  "doc": "Python string extraction from Subprocess",
  "code": "iface = 'wlan0'\nmac_addr = open('/sys/class/net/%s/address' % iface).read().rstrip()\n",
  "label": 0
 },
 {
  "idx": 504,
  "doc": "Print out a large list from file into multiple sublists with overlapping sequences in python",
  "code": ">>> [seq[i:i+division+overlap] for i in range(0,n*division,division)]\n['abcdefessdfekgheithrfkopeifhg', 'eifhghtryrhfbcvdfersdwtiyuyrt', 'yuyrterdhcbgjherytyekdnfiwyto', 'iwytowihfiwoeirehjiwoqpft']\n",
  "label": 1
 },
 {
  "idx": 505,
  "doc": "Convert this python dictionary into JSON format?",
  "code": "[\n    {\n        \"file_name\": \"20090209.02s1.1_sequence.txt\", \n        \"file_information\": [\n            645045714, \n            3559.6422951221466, \n            206045184\n        ]\n    }, \n    {\n        \"file_name\": \"20090209.02s1.2_sequence.txt\", \n        \"file_information\": [\n            645045714, \n            3543.8322949409485, \n            234618880\n        ]\n    }\n]\n",
  "label": 0
 },
 {
  "idx": 506,
  "doc": "Translating regex match groups",
  "code": "import re\nfrom functools import partial\n\ndef _hexrepl(match):\n    return chr(int(match.group(1), 16))\nunescape = partial(re.compile(r'#([0-9A-F]{2})').sub, _hexrepl)\n\ndef pdfnames(inputtext):\n    for match in Name.finditer(inputtext):\n        yield unescape(match.group(0))\n",
  "label": 1
 },
 {
  "idx": 507,
  "doc": "Slicing based on dates Pandas Dataframe",
  "code": "idx_vals = df[df['preciptotal'] > 1].index\n",
  "label": 0
 },
 {
  "idx": 508,
  "doc": "Padding or truncating a Python list",
  "code": "\nIn [1]: a = [1,2,3]\n\nIn [2]: a[:4]\nOut[2]: [1, 2, 3]\n\nIn [3]: [0]*0\nOut[3]: []\n\nIn [4]: [0]*-1\nOut[4]: []\n",
  "label": 0
 },
 {
  "idx": 509,
  "doc": "Filling gaps for cumulative sum with Pandas",
  "code": "In [22]: res2.reindex(pd.period_range(res2.index[0], res2.index[-1], freq=\"M\"))\nOut[22]:\ngoods     a   b   c\n2014-01   0  30 NaN\n2014-02  30 NaN  10\n2014-03 NaN  70 NaN\n2014-04 NaN NaN NaN\n2014-05 NaN  40  50\n2014-06  20 NaN NaN\n",
  "label": 0
 },
 {
  "idx": 510,
  "doc": "Regex: Match brackets both greedy and non greedy",
  "code": ">>> for match in pyparsing.originalTextFor(pyparsing.nestedExpr('(',')')).searchString(text):\n...   print match[0]\n...\n(name)\n(person)\n(+ (* (2 4) 3))\n",
  "label": 0
 },
 {
  "idx": 511,
  "doc": "Finding groups of increasing numbers in a list",
  "code": "def sequences(l):\n    x2 = cycle(l)\n    next(x2)\n    grps = groupby(l, key=lambda j: j + 1 == next(x2))\n    yield from (tuple(v) + (next((next(grps)[1])),) for k,v in grps if k)\n\nprint(list(sequences(x)))\n",
  "label": 1
 },
 {
  "idx": 512,
  "doc": "Finding groups of increasing numbers in a list",
  "code": "[((19, 20, 21, 22), 4), ((0, 1, 2), 3), ((4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 11)\n, ((28, 29, 30, 31, 32, 33, 34, 35, 36), 9), ((1, 2, 3, 4), 4)]\n",
  "label": 0
 },
 {
  "idx": 513,
  "doc": "How to plot histogram of multiple lists?",
  "code": "import matplotlib.pyplot as plt\n\nlists = [data[project][\"tweets\"] for project in data] # Collect all lists into one\nsum_list = [sum(x) for x in zip(*lists)] # Create a list with sums of tweets for each day\n\nplt.plot(sum_list) # Create a plot for sum_list\nplt.show() # Show the plot\n",
  "label": 1
 },
 {
  "idx": 514,
  "doc": "How do I calculate the numeric value of a string with unicode components in python?",
  "code": "import unicodedata\ndef eval_unicode(s):\n    #sum all the unicode fractions\n    u = sum(map(unicodedata.numeric, filter(lambda x: unicodedata.category(x)==\"No\",s)))\n    #eval the regular digits (with optional dot) as a float, or default to 0\n    n = float(\"\".join(filter(lambda x:x.isdigit() or x==\".\", s)) or 0)\n    return n+u\n",
  "label": 1
 },
 {
  "idx": 515,
  "doc": "Update dictionary in xml from csv file in python",
  "code": "# Let's get a list of key=value strings\nlist_of_items = ['%s=%s' % (k, v) for k, v in xml_dict.iteritems()]\n# Now join those items together\nnew_xml_text = ','.join(list_of_items)\nd.text = new_xml_text\n",
  "label": 0
 },
 {
  "idx": 516,
  "doc": "Python-Getting contents between current and next occurrence of pattern in a string",
  "code": ">>> re.split(r'(.)(?!\\1)', 'aaaaaakkkkkkbbbbbsssss')\n['aaaaa', 'a', 'kkkkk', 'k', 'bbbb', 'b', 'ssss', 's', '']\n",
  "label": 0
 },
 {
  "idx": 517,
  "doc": "Timeout function in Python",
  "code": "os.kill(os.getpid(), signal.CTRL_C_EVENT) # send Ctrl+C to itself\n",
  "label": 0
 },
 {
  "idx": 518,
  "doc": "Returning elements from a loop, one at a time",
  "code": "def grabber3(datafile):\n    with open(datafile, 'rb') as f:\n        r =csv.DictReader(f)\n        for line in r:\n            del line['thisthing']\n            yield line\n",
  "label": 0
 },
 {
  "idx": 519,
  "doc": "Returning elements from a loop, one at a time",
  "code": "dict_generator = grabber3(a_file)\n",
  "label": 0
 },
 {
  "idx": 520,
  "doc": "How do I make pip available from command line mac?",
  "code": "which python\n",
  "label": 0
 },
 {
  "idx": 521,
  "doc": "Is it possible to map a discontiuous data on disk to an array with python?",
  "code": "offset = 0\ndata1 = np.memmap('tmp', dtype='i', mode='r+', order='F',\n                  offset=0, shape=(size1))\noffset += size1*byte_size\ndata2 = np.memmap('tmp', dtype='i', mode='r+', order='F',\n                  offset=offset, shape=(size2))\noffset += size1*byte_size\ndata3 = np.memmap('tmp', dtype='i', mode='r+', order='F',\n                  offset=offset, shape=(size3))\n",
  "label": 1
 },
 {
  "idx": 522,
  "doc": "Boxplotting Masked Arrays",
  "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig=plt.figure()\n\nN=20\nM=10\n\nx = np.random.random((M,N))\nmask=np.random.random_integers(0,1,N*M).reshape((M,N))\nx = np.ma.array(x,mask=mask)\nax1=fig.add_subplot(2,1,1)\nax1.boxplot(x)\n\nz = [[y for y in row if y] for row in x.T]\nax2=fig.add_subplot(2,1,2)\nax2.boxplot(z)\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 523,
  "doc": "Return All Matching Lines in a Logfile",
  "code": "[13:40:19.xxx021] status    XYZ  ID:22P00935xxx -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16\n\n('13:40:19.xxx021', '22P00935xxx', ' -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16')\n[13:40:19.xxx024] status    XYZ  ID:22C0099xxx0 -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70\n\n('13:40:19.xxx024', '22C0099xxx0', ' -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70')\n[13:40:19.xxx027] status    XYZ  ID:22P0099xxx0 10  -17.18   quote:    1.86/   1.90  avg:   -1.72    1.42\n\n('13:40:19.xxx027', '22P0099xxx0', ' 10  -17.18   quote:    1.86/   1.90  avg:   -1.72    1.42')\n[13:40:19.xxx029] status    XYZ  ID:22C00995xxx 4   -42.5    quote:    8.20/   8.30  avg:  -10.62   -9.70\n\n('13:40:19.xxx029', '22C00995xxx', ' 4   -42.5    quote:    8.20/   8.30  avg:  -10.62   -9.70')\n[13:40:19.xxx031] status    XYZ  ID:22P00995xxx 2   9.66     quote:    3.30/   3.40  avg:    4.83   16.26\n('13:40:19.xxx031', '22P00995xxx', ' 2   9.66     quote:    3.30/   3.40  avg:    4.83   16.26')\n",
  "label": 0
 },
 {
  "idx": 524,
  "doc": "How to link PyQt4 script button to activate another script?",
  "code": "subprocess.Popen(\"/path/to/dd.py\", arg)\n",
  "label": 0
 },
 {
  "idx": 525,
  "doc": "render cms page within another page",
  "code": "{% for placeholder in request.current_page.placeholders %}\n    {{ placeholder.render }}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 526,
  "doc": "Retrieve position of elements with setting some criteria in numpy",
  "code": "def using_eight_shifts(data):\n    h, w = data.shape\n    data2 = np.empty((h+2, w+2))\n    data2[(0,-1),:] = np.nan\n    data2[:,(0,-1)] = np.nan\n    data2[1:1+h,1:1+w] = data\n\n    result = np.where(np.logical_and.reduce([\n        (data2[i:i+h,j:j+w] == data)\n        for i in range(3)\n        for j in range(3)\n        if not (i==1 and j==1)]))\n    return result\n",
  "label": 1
 },
 {
  "idx": 527,
  "doc": "Python list comparison to create trees",
  "code": "from collections import defaultdict\n\nclass UnionFind:\n    def __init__(self):\n        self.leaders = defaultdict(lambda: None)\n\n    def find(self, x):\n        l = self.leaders[x]\n        if l is not None:\n            l = self.find(l)\n            self.leaders[x] = l\n            return l\n        return x\n\n    def union(self, x, y):\n        lx, ly = self.find(x), self.find(y)\n        if lx != ly:\n            self.leaders[lx] = ly\n\n    def get_groups(self):\n        groups = defaultdict(set)\n        for x in self.leaders:\n            groups[self.find(x)].add(x)\n        return groups\n",
  "label": 0
 },
 {
  "idx": 528,
  "doc": "Download a file and push into MySQL without timing out in Python",
  "code": "LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name\n  FIELDS TERMINATED BY ',' ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\r\\n'\n  IGNORE 1 LINES;\n",
  "label": 0
 },
 {
  "idx": 529,
  "doc": "How to filter results of a groupby in pandas",
  "code": ">>> x.groupby('B').apply(filtermax, 'A', ['A0', 'A1', 'A4'], 'C')\n        B    C\nB  A          \nB0 A0  B0  0.5\nB1 A2  B1  0.6\nB2 A4  B2  1.0\n",
  "label": 0
 },
 {
  "idx": 530,
  "doc": "vectorize numpy unique for subarrays",
  "code": "\n[(np.bincount(i)>0).sum() for i in data]\n",
  "label": 1
 },
 {
  "idx": 531,
  "doc": "Python Boto List Storage Devices Attached to Instance",
  "code": "Device: /dev/sda1\n    VolumeID: vol-1d011806\n    Volume Size: attached\n",
  "label": 0
 },
 {
  "idx": 532,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "if __name__ == '__main__':\n\n    circle = Circle(x=3, y=4, r=5)\n    print(circle.x)\n    print(circle.y)\n    print(circle.r)\n    print(circle.area)\n   # circle.area = 12\n    print(circle.area)\n    print(circle.circumference)\n    print(circle.distance_to_origin)\n    tests = [('circle.x = 12.3', \"print('Setting circle.x to non-integer fails')\"),\n             ('circle.y = 23.4', \"print('Setting circle.y to non-integer fails')\"),\n             ('circle.area = 23.4', \"print('Setting circle.area fails')\"),\n             ('circle.circumference = 23.4', \"print('Setting circle.circumference fails')\"),\n             ('circle.distance_to_origin = 23.4', \"print('Setting circle.distance_to_origin fails')\"),\n             ('circle.z = 5.6', \"print('Setting circle.z fails')\"),\n             ('print(circle.z)', \"print('Printing circle.z fails')\")]\n    for test in tests:\n        try:\n            exec(test[0])\n        except:\n            exec(test[1])\n",
  "label": 0
 },
 {
  "idx": 533,
  "doc": "Order a NXM Numpy Array according to cumulative sums of each sub-array",
  "code": ">>> v = [[1,2,3,4], [2,3,4,5], [11,21,3,4], [4,33,21,1], [2,4,6,5]]\n>>> sorted(v, key=sum, reverse=True)\n[[4, 33, 21, 1], [11, 21, 3, 4], [2, 4, 6, 5], [2, 3, 4, 5], [1, 2, 3, 4]]\n",
  "label": 0
 },
 {
  "idx": 534,
  "doc": "Combine variable and for each loop python",
  "code": "for x,y in withHandler(the_list):\n    ...\n",
  "label": 0
 },
 {
  "idx": 535,
  "doc": "python pandas filter dataframe by another series, multiple columns",
  "code": "combined[combined.delivery == combined.most]\n",
  "label": 0
 },
 {
  "idx": 536,
  "doc": "Query endpoint user by email",
  "code": "from google.appengine.ext import endpoints\n\n@endpoints.api(...)\nclass SomeClass(...):\n\n    @User.method(request_fields=('email',),\n                 path='get_by_mail/{email}',\n                 http_method='GET', name='user.get_by_email')\n    def get_by_email(self, user):\n        if not user.from_datastore:\n            raise endpoints.NotFoundException('User not found.')\n        return user\n",
  "label": 1
 },
 {
  "idx": 537,
  "doc": "Stop a command line command in script",
  "code": "x = os.system(\"echo 'shankar'\")\nprint(x)\n",
  "label": 0
 },
 {
  "idx": 538,
  "doc": "Python - Iterate through, and extract, elements of a dictionary type list",
  "code": "data_string_sample=((data_all[0]['utcdate']['mday']),(data_all[0]['utcdate']['mon']),(data_all[0]['utcdate']['year']),(data_all[0]['utcdate']['hour']),(data_all[0]['utcdate']['min']),(data_all[0]['tempm']),(data_all[0]['hum']),(data_all[0]['pressurem']))\ndata_string_list=list(data_string_sample)\nprint(data_string_list)\n",
  "label": 0
 },
 {
  "idx": 539,
  "doc": "RegEx in Python matching multiple substrings using one group",
  "code": "pat = re.compile(r' A(\\d+)')\nlst = re.findall(pat, \"= A1 A2 A3 A4\")\n",
  "label": 0
 },
 {
  "idx": 540,
  "doc": "RegEx in Python matching multiple substrings using one group",
  "code": "pat0 = re.compile(r'=(?: A\\d+)+')\npat1 = re.compile(r' A(\\d+)')\n\nm = pat0.search(\"= A1 A2 A3 A4\")\nif not m:\n    print(\"input string not what was expected\")\nelse:\n    s = m.group(0)\n    lst = re.findall(pat, s)\n",
  "label": 0
 },
 {
  "idx": 541,
  "doc": "How can I use python pandas to parse CSV into the format I want?",
  "code": "  weather  location       time        date  Condition insectName  count  \\\n0   sunny  balabala  0900:1200  1990-02-10         25        aaa     15   \n1   sunny  balabala  1300:1500  1990-02-15         38        XXX     40   \n\n  insectName  count insectName  count insectName  count  \n0        bbb     10        ccc     20        ddd     50  \n1        yyy     10        yyy     25        NaN    NaN  \n",
  "label": 0
 },
 {
  "idx": 542,
  "doc": "RQ - Empty & Delete Queues",
  "code": ">>> import redis\n>>> r = redis.StrictRedis()\n>>> qname = \"rq:queue:failed\"\n>>> def purgeq(r, qname):\n... while True:\n...     jid = r.lpop(qname)\n...     if jid is None:\n...         break\n...     r.delete(\"rq:job:\" + jid)\n...     print jid\n...\n>>> purge(r, qname)\na0be3624-86c1-4dc4-bb2e-2043d2734b7b\n3796c312-9b02-4a77-be89-249aa7325c25\nca65f2b8-044c-41b5-b5ac-cefd56699758\n896f70a7-9a35-4f6b-b122-a08513022bc5\n",
  "label": 1
 },
 {
  "idx": 543,
  "doc": "Import a exported dict into python",
  "code": ">>> import json\n>>> d = {'apple': 1, 'bear': 2}\n\n>>> print(d)\n{'bear': 2, 'apple': 1}\n\n>>> print(json.dumps(d))\n{\"bear\": 2, \"apple\": 1}  # these are json data\n>>> \n",
  "label": 1
 },
 {
  "idx": 544,
  "doc": "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python",
  "code": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n[30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n[50, 51, 52]\n",
  "label": 0
 },
 {
  "idx": 545,
  "doc": "How to get parameter arguments from a frozen spicy.stats distribution?",
  "code": "# Get the original parameters regardless of argument type\nshape1, loc1, scale1 = rv1.dist._parse_args(*rv1.args, **rv1.kwds)\nshape2, loc2, scale2 = rv2.dist._parse_args(*rv2.args, **rv2.kwds)\n\nprint 'positional and keyword'\nprint 'frozen parameters: shape={}, loc={}, scale={}'.format(shape1, loc1, scale1)\nprint\nprint 'positional only'\nprint 'frozen parameters: shape={}, loc={}, scale={}'.format(shape2, loc2, scale2)\n",
  "label": 0
 },
 {
  "idx": 546,
  "doc": "How to get parameter arguments from a frozen spicy.stats distribution?",
  "code": "\npositional and keyword\nfrozen args : (3.14, 5.0, 2.0)\nfrozen kwds : {}\n\npositional only\nfrozen args : (3.14,)\nfrozen kwds : {'loc': 5.0, 'scale': 2.0}\n",
  "label": 0
 },
 {
  "idx": 547,
  "doc": "How to call __setattr__() correctly in Python3 as part of a class?",
  "code": "class MyClass(object):\n    _myattrib = None\n\n    @property:\n    def myattrib(self):\n        return self._myattrib\n\n    @myattrib.setter\n    def myattrib(self, val):\n        self._myattrib = val\n        print(\"setting myattrib\")\n",
  "label": 1
 },
 {
  "idx": 548,
  "doc": "How to scrape the video src url from video tag which is injected via javascript?",
  "code": "POPSCI_URL = \"http://www.popsci.com/maker-faire-2015\"\n",
  "label": 0
 },
 {
  "idx": 549,
  "doc": "python list manipulation nesting vertically, making it look like a matrix",
  "code": "[(15, 10, 5),\n (20, 15, 10),\n (25, 20, 15),\n (35, 25, 20),\n (-20, -25, -35),\n (-15, -20, -25),\n (-10, -15, -20),\n (-5, -10, -15)]\n",
  "label": 0
 },
 {
  "idx": 550,
  "doc": "Naming each item in a list which is a value of a dictionary",
  "code": "'Europe':(Country1:Germany, Country2:France, Country3:Italy)\n'Asia':(Country1:India, Country2:China, Country3:Malaysia)\n",
  "label": 0
 },
 {
  "idx": 551,
  "doc": "Need to read from a file and add the elements and get avg in python 3.4",
  "code": "with open('file') as f:\n    array = [ [int(s) for s in line.split()] for line in f ]\nfor line in array:\n    print('{:08.0f} {:3.1f} {:3.0f} {:3.0f}'.format(line[0], sum(line[1:])/len(line[1:]), min(line[1:]), max(line[1:])))\n",
  "label": 1
 },
 {
  "idx": 552,
  "doc": "Numpy Array Rank All Elements",
  "code": "_,id = np.unique(anArray,return_inverse=True)\nout = (id.max() - id + 1).reshape(anArray.shape)\n",
  "label": 1
 },
 {
  "idx": 553,
  "doc": "append csv files on column basis",
  "code": "$ join -t\\; -j 1 -o 1.1 1.2 1.3 2.2 2.3 2.4 file1 file2 \nDATE;BS-ICI,NSA,BAL,AT;BS-ICI,NSA,BAL,BE;BS-BYL,NSA,BAL,AT;BS-NAN,NSA,BAL,BE;\n2014M02;0.9;1.5;1.5;6.7;\n2014M01;-5.4;-4.4;-8.8;-4.4;\n2013M11;-7.9;-9.2;-2.5;-9.6;\n2013M10;-8.6;-14.0;-8.9;-11.4;\n",
  "label": 1
 },
 {
  "idx": 554,
  "doc": "python - parsing and sorting dates",
  "code": "class Chat:\n    def __init__(self, user, date, text):\n        self.user = user\n        self.date = date\n        self.text = text\n",
  "label": 0
 },
 {
  "idx": 555,
  "doc": "Django Celery get task count",
  "code": "import redis\nqueue_name = \"celery\"\nclient = redis.Redis(host=\"localhost\", port=6379, db=1)\nlength = client.llen(queue_name)\n",
  "label": 1
 },
 {
  "idx": 556,
  "doc": "Bitwise operations to produce power of two in Python",
  "code": "def justify(n):\n    return n / 1<<(n.bit_length()-1)\n",
  "label": 1
 },
 {
  "idx": 557,
  "doc": "pyplot: loglog() with base e",
  "code": "import numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\n\nx = np.linspace(1, 4, 1000)\n\ny = x**3\n\nfig, ax = plt.subplots()\n\nax.loglog(x,y, basex=np.e, basey=np.e)\n\ndef ticks(y, pos):\n    return r'$e^{:.0f}$'.format(np.log(y))\n\nax.xaxis.set_major_formatter(mtick.FuncFormatter(ticks))\nax.yaxis.set_major_formatter(mtick.FuncFormatter(ticks))\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 558,
  "doc": "Replace given line in files in Python",
  "code": "from tempfile import mkstemp\nfrom shutil import move\nfrom os import remove, close\n\ndef replace_3_line(file):\n    new_3rd_line = 'new_3_line\\n'\n    #Create temp file\n    fh, abs_path = mkstemp()\n    new_file = open(abs_path,'w')\n    old_file = open(file)\n    counter = 0\n    for line in old_file:\n        counter = counter + 1\n        if counter == 3:\n            new_file.write(new_3rd_line)\n        else:\n            new_file.write(line)\n    #close temp file\n    new_file.close()\n    close(fh)\n    old_file.close()\n    #Remove original file\n    remove(file)\n    #Move new file\n    move(abs_path, file)\n\nreplace_3_line('tmp.ann')\n",
  "label": 1
 },
 {
  "idx": 559,
  "doc": "recursive way to go through a nested list and remove all of a select value",
  "code": "def listcleaner(lst):\n    if not lst:   # If list is empty\n        return [] # Go no further\n    if isinstance(lst[0], list):\n        if lst[0]: # If the list has something in it, we want to run listcleaner() on it.\n            return [listcleaner(lst[0])] + listcleaner(lst[1:])\n        else: # Otherwise, just skip that list\n            return listcleaner(lst[1:])\n    else:\n        return [lst[0]] + listcleaner(lst[1:]) # If it is not a list, return it unchanged plus listcleaner() on the rest.\n\na = listcleaner([1, [], [2, []], 5]) \nprint(a)\n",
  "label": 1
 },
 {
  "idx": 560,
  "doc": "Python: how to turn string into a list?",
  "code": "inputString = \"my_item = ['maria','jose']\"\n\n# value is a list type \nvalue = eval(inputString.split(\"=\")[1])\n# key is a string type\nkey = inputString.split(\"=\")[0].strip()\n\n# I don't think you can define a variable name while the script is running. \n# but you can use dictionary type to call it.\nmydict = {}\nmydict[key] = value\n",
  "label": 1
 },
 {
  "idx": 561,
  "doc": "Skip unittest test without decorator syntax",
  "code": "import unittest\n\nclass TestFoo(unittest.TestCase):\n    def setUp(self): print('setup')\n    def tearDown(self): print('teardown')\n    def test_spam(self): pass\n    def test_egg(self): pass\n    def test_ham(self): pass\n\nif __name__ == '__main__':\n    import sys\n    loader = unittest.loader.defaultTestLoader\n    runner = unittest.TextTestRunner(verbosity=2)\n    suite = loader.loadTestsFromModule(sys.modules['__main__'])\n    for ts in suite:\n        for t in ts:\n            if t.id().endswith('am'): # To skip `test_spam` and `test_ham`\n                setattr(t, 'setUp', lambda: t.skipTest('criteria'))\n    runner.run(suite)\n",
  "label": 1
 },
 {
  "idx": 562,
  "doc": "Splitting a list of sequences into two lists efficiently",
  "code": "In [1]: catalog = [(i, i+1) for i in range(1000000)]\n\nIn [2]: def with_zip():\n   ...:     return zip(*catalog)\n   ...: \n\nIn [3]: def without_zip():\n   ...:     names, vals = [], []\n   ...:     for name, val in catalog:\n   ...:         names.append(name)\n   ...:         vals.append(val)\n   ...:     return names, vals\n   ...: \n\nIn [4]: %timeit with_zip()\n1 loops, best of 3: 176 ms per loop\n\nIn [5]: %timeit without_zip()\n1 loops, best of 3: 250 ms per loop\n",
  "label": 1
 },
 {
  "idx": 563,
  "doc": "How can I cluster a list of lists in Python based on string indices? Need insight",
  "code": "from itertools import groupby\ndef key(item):\n    return [int(x) for x in item[1].split()[:3]]\n\nmaster_lst = [['Introduction', '0 11 0 1 0'],\n              ['Floating', '0 11 33 1 0'],\n              ['point', '0 11 33 1 1'],\n              ['numbers', '0 11 33 1 2'],\n              ['IEEE', '0 11 58 1 0'],\n              ['Standard', '0 11 58 1 1'], \n              ['754', '0 11 58 1 2']]\n\nfor k,v in groupby(master_lst,key=key):\n    print ' '.join(x[0] for x in v) +' ' + ' '.join(str(x) for x in k)\n",
  "label": 1
 },
 {
  "idx": 564,
  "doc": "Multiclass linear SVM in python that return probability",
  "code": "from sklearn.svm import LinearSVC\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\nY = iris.target\nsvc = LinearSVC()\nclf = CalibratedClassifierCV(svc, cv=10)\nclf.fit(X, Y)\nproba = clf.predict_proba(X)\n",
  "label": 1
 },
 {
  "idx": 565,
  "doc": "How to count occurrences of specific element for arrays in a list?",
  "code": "In [6]: [np.bincount(x) for x in a]\nOut[6]: [array([0, 1, 3], dtype=int64), array([0, 1, 0, 1], dtype=int64)]\n",
  "label": 1
 },
 {
  "idx": 566,
  "doc": "Remove single quotes from python list item",
  "code": "print('[' + ', '.join(your_list) + ']')\n",
  "label": 1
 },
 {
  "idx": 567,
  "doc": "Remove single quotes from python list item",
  "code": "map(int, your_list)\n",
  "label": 1
 },
 {
  "idx": 568,
  "doc": "Recursive List containing Lists",
  "code": "from random import choice\n\ndef Number_recursive(N,initialN=None):\n    initialN = initialN or N\n    if N < 0:\n        raise ValueError('N must be positive')\n    if N == 0:\n        return []\n    return [[choice((0, 1)) for _ in range(initialN)]] + Number_recursive(N-1,initialN)\n",
  "label": 1
 },
 {
  "idx": 569,
  "doc": "Finding time intervals per day from a list of timestamps in Python",
  "code": "#!/usr/bin/env python\nfrom datetime import date, timedelta\nfrom itertools import groupby\n\nepoch = date(1970, 1, 1)\n\nresult = {}\nassert timestamps == sorted(timestamps)\nfor day, group in groupby(timestamps, key=lambda ts: ts // 86400):\n    # store the interval + day/month in a dictionary.\n    same_day = list(group)\n    assert max(same_day) == same_day[-1] and min(same_day) == same_day[0]\n    result[epoch + timedelta(day)] = same_day[0], same_day[-1] \nprint(result)\n",
  "label": 1
 },
 {
  "idx": 570,
  "doc": "How to add a another value to a key in python",
  "code": "phonebook = {}\nphonebook ['ana'] = ['12345']\nphonebook ['maria'] = ['23456' , 'maria@gmail.com']\n",
  "label": 0
 },
 {
  "idx": 571,
  "doc": "numpy get values in array of arrays of arrays for array of indices",
  "code": "list_arr[np.arange(list_arr.shape[0]),indices_array,:]\n",
  "label": 1
 },
 {
  "idx": 572,
  "doc": "Numpy: get the column and row index of the minimum value of a 2D array",
  "code": "In [21]: np.argwhere(x == np.min(x))\nOut[21]: array([[2, 1]])\n",
  "label": 1
 },
 {
  "idx": 573,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "from elps import PyTestClass as TC;\n\na = TC(); \nprint a.calculate(1);\n\nclass B(TC):\n#   pass\n    def override_me(self):\n        return 5\n\nb = B()\nprint b.calculate(1)\n",
  "label": 0
 },
 {
  "idx": 574,
  "doc": "separate list elements based on semicolon",
  "code": "[('48998', '18:45:44', 'R', 'qp32'),\n ('48999', '0', 'Q', 'batch'),\n ('49005', '00:44:23', 'R', 'qp32'),\n ('49032', '0', 'Q', 'qp32'),\n ('49047', '312:33:0', 'R', 'qp128'),\n ('49052', '0', 'Q', 'qp32'),\n ('49053', '0', 'Q', 'batch'),\n ('49054', '0', 'Q', 'batch')]\n",
  "label": 0
 },
 {
  "idx": 575,
  "doc": "separate list elements based on semicolon",
  "code": "inval = ['48998.tyrone-cluster;gic1_nwgs;mbupi;18:45:44;R;qp32\\n', '48999.tyrone-cluster;gic2_nwgs;mbupi;0;Q;batch\\n', '49005.tyrone-cluster;...01R-1849-01_2;mcbkss;00:44:23;R;qp32\\n', '49032.tyrone-cluster;gaussian_top.sh;chemraja;0;Q;qp32\\n', '49047.tyrone-cluster;jet_egrid;asevelt;312:33:0;R;qp128\\n', '49052.tyrone-cluster;case3sqTS1e-4;mecvamsi;0;Q;qp32\\n', '49053.tyrone-cluster;...01R-1850-01_1;mcbkss;0;Q;batch\\n', '49054.tyrone-cluster;...01R-1850-01_2;mcbkss;0;Q;batch\\n']\n\ndef parse(raw):\n    parts = raw.strip().split(';')\n    _id, _ = parts[0].split('.')\n    return _id, parts[3], parts[4], parts[5]\n\nprint map(parse, inval)\n\n# or \n# print [parse(val) for val in inval]\n",
  "label": 1
 },
 {
  "idx": 576,
  "doc": "Computing 16-bit checksum of ICMPv6 header",
  "code": "TYPE_CODE = \"8700\"\nREMAINDER = \"00000000fe80000000000000026097fffe0769ea01010000860580da\"\n",
  "label": 0
 },
 {
  "idx": 577,
  "doc": "Generate two random strings with dash in between",
  "code": "import string, random\ndef pick(num):\n    for j in range(num):\n        print(\"\".join([random.choice(string.ascii_uppercase) for i in range(3)])+\"-\"+\"\".join([random.choice(string.digits) for i in range(3)]))\n",
  "label": 1
 },
 {
  "idx": 578,
  "doc": "Ignoring unrecognized options when parsing argv?",
  "code": "Python 2.6.6 (r266:84292, Jun 16 2011, 16:59:16) \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from getopt import getopt\n>>>\n>>> argv = ['-v', '--plugin=foo', '--', '--extra=bar', '-c']\n>>> opts, extra = getopt(argv, 'v', 'plugin=')\n>>>\n>>> opts\n[('-v', ''), ('--plugin', 'foo')]\n>>>\n>>> extra\n['--extra=bar', '-c']\n",
  "label": 1
 },
 {
  "idx": 579,
  "doc": "How to match integers in NLTK CFG?",
  "code": "import nltk\n\ngroucho_grammar = nltk.CFG.fromstring(\"\"\"\nS -> NP VP\nPP -> P NP\nNP -> Det N | Det N PP | 'I' | NUM N\nVP -> V NP | VP PP\nDet -> 'an' | 'my'\nN -> 'elephant' | 'pajamas' | 'elephants'\nV -> 'shot'\nP -> 'in'\nNUM -> '#NUM#'\n\"\"\")\n\noriginal_sent = 'I shot 333 elephants'.split()\nsent = ['#NUM#' if i.isdigit() else i for i in original_sent]\nnumbers = [i for i in original_sent if i.isdigit()]\n\nparser = nltk.ChartParser(groucho_grammar)\nfor tree in parser.parse(sent):\n    treestr = str(tree)\n    for n in numbers:\n        treestr = treestr.replace('#NUM#', n, 1)\n    print(treestr)\n",
  "label": 1
 },
 {
  "idx": 580,
  "doc": "How to match integers in NLTK CFG?",
  "code": "import nltk\n\ngroucho_grammar = nltk.CFG.fromstring(\"\"\"\nS -> NP VP\nPP -> P NP\nNP -> Det N | Det N PP | 'I' | NUM N\nVP -> V NP | VP PP\nDet -> 'an' | 'my'\nN -> 'elephant' | 'pajamas' | 'elephants'\nV -> 'shot'\nP -> 'in'\nNUM -> '#NUM#'\n\"\"\")\n\nsent = 'I shot 333 elephants'.split()\nsent = ['#NUM#' if i.isdigit() else i for i in sent]\n\nparser = nltk.ChartParser(groucho_grammar)\nfor tree in parser.parse(sent):\n    print(tree)\n",
  "label": 1
 },
 {
  "idx": 581,
  "doc": "How do you get a directory listing sorted by creation date in python?",
  "code": "#!/usr/bin/env python\nfrom stat import S_ISREG, ST_CTIME, ST_MODE\nimport os, sys, time\n\n# path to the directory (relative or absolute)\ndirpath = sys.argv[1] if len(sys.argv) == 2 else r'.'\n\n# get all entries in the directory w/ stats\nentries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))\nentries = ((os.stat(path), path) for path in entries)\n\n# leave only regular files, insert creation date\nentries = ((stat[ST_CTIME], path)\n           for stat, path in entries if S_ISREG(stat[ST_MODE]))\n#NOTE: on Windows `ST_CTIME` is a creation date \n#  but on Unix it could be something else\n#NOTE: use `ST_MTIME` to sort by a modification date\n\nfor cdate, path in sorted(entries):\n    print time.ctime(cdate), os.path.basename(path)\n",
  "label": 1
 },
 {
  "idx": 582,
  "doc": "A way to get the path to the user installed packages on Linux and OS X operating systems? (Usable for Python versions between 2.5 - 2.7)",
  "code": "def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if prefix is None:\n        prefix = plat_specific and EXEC_PREFIX or PREFIX\n\n    libpython = os.path.join(prefix,\n                             \"lib\", \"python\" + get_python_version())\n    if standard_lib:\n        return libpython\n    else:\n        return os.path.join(libpython, \"site-packages\")\n",
  "label": 0
 },
 {
  "idx": 583,
  "doc": "Read each word and rest of line in Python?",
  "code": "line = '20 30 i love you'.split()\na = int(line[0])\nb = int(line[1])\nword_list = line[2:]\n",
  "label": 1
 },
 {
  "idx": 584,
  "doc": "Pygame draw anti-aliased thick line",
  "code": "pygame.gfxdraw.aapolygon(window, (UL, UR, BR, BL), color_L1)\npygame.gfxdraw.filled_polygon(window, (UL, UR, BR, BL), color_L1)\n",
  "label": 0
 },
 {
  "idx": 585,
  "doc": "print tuple as number of arguments",
  "code": "def my_print(*args):\n    print(*args)\n",
  "label": 1
 },
 {
  "idx": 586,
  "doc": "Remove a level from a pandas MultiIndex",
  "code": "In [238]: %timeit MultiIndex.from_tuples(index_3levels.droplevel(level='l3').unique())\n1 loops, best of 3: 2.26 s per loop\n",
  "label": 0
 },
 {
  "idx": 587,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> dm = pd.get_dummies(df.index.month).set_index(df.index)\n>>> dm\n            1   3   6   8   11\n2011-01-01   1   0   0   0   0\n2011-03-22   0   1   0   0   0\n2011-06-10   0   0   1   0   0\n2011-08-29   0   0   0   1   0\n2011-11-17   0   0   0   0   1\n",
  "label": 0
 },
 {
  "idx": 588,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": "                temp  isJan  isFeb  isMar  isApr  isMay  isJun  isJul  isAug  \\\n2011-01-01  0.419860      1      0      0      0      0      0      0      0   \n2011-03-22  0.479502      0      0      1      0      0      0      0      0   \n2011-06-10  0.687352      0      0      0      0      0      1      0      0   \n2011-08-29  0.377993      0      0      0      0      0      0      0      1   \n2011-11-17  0.877410      0      0      0      0      0      0      0      0   \n\n            isSep  isOct  isNov  isDec  \n2011-01-01      0      0      0      0  \n2011-03-22      0      0      0      0  \n2011-06-10      0      0      0      0  \n2011-08-29      0      0      0      0  \n2011-11-17      0      0      1      0  \n",
  "label": 0
 },
 {
  "idx": 589,
  "doc": "Drawing window border in Python xlib",
  "code": "def set_active_border(self, window):\n    border_color = self.colormap.alloc_named_color(\\\n        \"#ff00ff\").pixel\n    window.configure(border_width = 2)\n    window.change_attributes(None,border_pixel=border_color)\n    self.dpy.sync()\n",
  "label": 1
 },
 {
  "idx": 590,
  "doc": "Packaging a python application ( with enthought, matplotlib, wxpython) into executable",
  "code": "python 2.7\naltgraph==0.9\napptools==4.3.0\nbbfreeze==1.1.3\nbbfreeze-loader==1.1.0\nconfigobj==5.0.6\ncx-Freeze==4.3.3\nCython==0.23.4\nmatplotlib==1.4.3\nmayavi==4.4.3\nMySQL-python==1.2.5\nnatgrid==0.2.1\nnumpy==1.10.0b1\nopencv-python==2.4.12\npandas==0.16.2\npefile==1.2.10.post114\nPillow==3.1.1\nplyfile==0.4\npsutil==4.1.0\npyface==5.0.0\nPygments==2.0.2\npygobject==2.28.6\npygtk==2.22.0\nPyInstaller==3.1\npyparsing==2.0.3\npypiwin32==219\nPySide==1.2.2\npython-dateutil==2.4.2\npytz==2015.4\nscipy==0.16.0\nsix==1.9.0\nsubprocess32==3.2.7\ntraits==4.5.0\ntraitsui==5.0.0\ntransforms3d==0.2.1\nVTK==6.2.0\n",
  "label": 0
 },
 {
  "idx": 591,
  "doc": "Solve equation with a set of points",
  "code": "import numpy as np\nfrom scipy.optimize import curve_fit\nfrom pylab import *\n\ndef myFunc(t, V, W, k):\n    y = V * t - ((V - W) * (1 - np.exp(-k * t)) / k)\n    return y\n\n# this generates some fake data to fit. For youm just read in the \n# data in CSV or whatever you've\nx = np.linspace(0,4,50)\ny = myFunc(x, 2.5, 1.3, 0.5)\n# add some noise to the fake data to make it more realistic. . .\nyn = y + 0.2*np.random.normal(size=len(x))\n\n#fit the data, return the best fit parameters and the covariance matrix\npopt, pcov = curve_fit(myFunc, x, yn)\nprint popt\nprint pcov\n\n#plot the data\nclf()\nplot(x, yn, \"rs\")\n#overplot the best fit curve\nplot(x, myFunc(x, popt[0], popt[1], popt[2]))\ngrid(True)\nshow()\n",
  "label": 1
 },
 {
  "idx": 592,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "logsumexp((b, 0\u2096))\n = max((b, 0\u2096)) + log(\u2211 exp[(b, 0\u2096) - max((b, 0\u2096))])\n = max(max(b), 0) + log(\u2211 exp[(b, 0\u2096) - max(max(b), 0)])\n = max(max(b), 0) + log(\u2211 exp[b - max(max(b), 0)] + \u2211 exp[0\u2096 - max(max(b), 0)])\n = max(max(b), 0) + log(\u2211 exp[b - max(max(b), 0)] + k \u00d7 exp[-max(max(b), 0)])\n",
  "label": 0
 },
 {
  "idx": 593,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "def logsumexp_csr_rows(X):\n    result = np.empty(X.shape[0])\n    for i in range(X.shape[0]):\n        data = X.data[X.indptr[i]:X.indptr[i+1]]\n        # fill in from logsumexp_csr_row\n        result[i] = mx + np.log(r + k * np.exp(-mx))\n    return result\n",
  "label": 0
 },
 {
  "idx": 594,
  "doc": "Stiff ODE-solver",
  "code": "vode   adams    jac=None  len(tvals) = 517992\nvode   adams    jac=jac   len(tvals) = 195\nvode   bdf      jac=None  len(tvals) = 516284\nvode   bdf      jac=jac   len(tvals) = 55\nlsoda           jac=None  len(tvals) = 49\nlsoda           jac=jac   len(tvals) = 49\n",
  "label": 0
 },
 {
  "idx": 595,
  "doc": "Python C API - How to construct object from PyObject",
  "code": "boost::python::object type = /* Py_TYPE */;\nboost::python::object object = type(); // isinstance(object, type) == True\n",
  "label": 0
 },
 {
  "idx": 596,
  "doc": "Simulating a key press event in Python 2.7",
  "code": ">>> Write('Hello, World!', speed=3)\nHello, World!\n>>> Press('ENTER')\n",
  "label": 0
 },
 {
  "idx": 597,
  "doc": "How do I sort objects inside of objects in JSON? (using Python 2.7)",
  "code": "import codecs\nimport json\n\nwith codecs.open('tmp.json', 'w', encoding='utf-8') as f:\n    f.write(json.dumps({u'hello' : u'\u043f\u0440\u0438\u0432\u0435\u0442!'}, ensure_ascii=False) + '\\n')\n\n\n$ cat tmp.json\n{\"hello\": \"\u043f\u0440\u0438\u0432\u0435\u0442!\"}\n",
  "label": 0
 },
 {
  "idx": 598,
  "doc": "Plone - Override Zope Schema fields",
  "code": "<?xml version=\"1.0\"?>\n<layers name=\"\" meta_type=\"ComponentRegistry\">\n    <layer name=\"my.product\" \n           interface=\"my.product.interfaces.ICustomLayer\" />\n</layers>\n",
  "label": 0
 },
 {
  "idx": 599,
  "doc": "Interleaving two numpy index arrays, one item from each array",
  "code": "ab = np.hstack((a, b))\ns = np.argsort(ab)\nt = np.hstack((np.zeros_like(a), np.ones_like(b)))[s]\nab[s][np.concatenate(([True], t[1:] != t[:-1]))]\narray([ 1,  5,  7, 13, 17, 19])\n",
  "label": 1
 },
 {
  "idx": 600,
  "doc": "removing excess spaces from a string (and counting them)",
  "code": "def countSpaces(s):\n    answer = []\n    start = None\n    maxCount = 0\n    for i,char in enumerate(s):\n        if char == ' ':\n            if start is None:\n                start = i\n                answer.append(char)\n        else:\n            if start is not None:\n                maxCount = max(i-start-1, maxCount)\n                start = None\n            answer.append(char)\n    print(\"The whitespace normalized string is\", ''.join(answer))\n    print(\"The maximum length of consecutive whitespace is\", maxCount)\n",
  "label": 1
 },
 {
  "idx": 601,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": "[(('KEY1', 'key2_1'), 5), (('KEY2', 'key2_3'), 4), (('KEY2', 'key2_2'), 3)]\n",
  "label": 0
 },
 {
  "idx": 602,
  "doc": "Python - open pdf file to specific page/section",
  "code": "Case 1: you want to open the file in Python\nfrom pyPdf import PdfFileReader, PageObject\n\npdf_toread = PdfFileReader(path_to_your_pdf)\n\n# 1 is the number of the page\npage_one = pdf_toread.getPage(1)\n\n# This will dump the content (unicode string)\n# According to the doc, the formatting is dependent on the\n# structure of the document\nprint page_one.extractText()\n",
  "label": 0
 },
 {
  "idx": 603,
  "doc": "Print two report in Odoo8",
  "code": "def get_reports(self, cr, uid, ids, context):\n    #Get datas used in the reports from modele\n\n    datas = {\n        'ids': ids,\n        'model': 'modele_name',\n        'form': {\n            'key': value,\n             ...\n        }\n    }\n    pdf1 = self.pool.get('ir.actions.report.xml').render_report(cr,\n                                                                uid,\n                                                                ids,\n                                                                \"report_name1\",\n                                                                datas,\n                                                                context=None)\n\n\n    pdf2 = self.pool.get('ir.actions.report.xml').render_report(cr,\n                                                                uid,\n                                                                ids,\n                                                                \"report_name2\",\n                                                                datas,\n                                                                context=None)\n    ...\n\n    #We send 'report naem ' to name downloaded report ('reports[b+1]+'.pdf')\n    return pdf1[0].encode('base64'), 'report_name1', pdf2[0].encode(\n        'base64'), 'report_name2',...\n",
  "label": 0
 },
 {
  "idx": 604,
  "doc": "Remove duplicated string(s) in strings in a list",
  "code": ">>> a = \"15-105;ZH0311;TZZGJJ; ZH0311; ZH0311;DOC\"\n>>> a = map(str.strip,a.split(';'))\n>>> a\n['15-105', 'ZH0311', 'TZZGJJ', 'ZH0311', 'ZH0311', 'DOC']\n>>> a = sorted(set(a),key=lambda x:a.index(x))\n>>> a\n['15-105', 'ZH0311', 'TZZGJJ', 'DOC']\n>>> \";\".join(a)\n'15-105;ZH0311;TZZGJJ;DOC'\n",
  "label": 1
 },
 {
  "idx": 605,
  "doc": "Get statistics from subgroups in pandas",
  "code": "for z in range(len(results)):\n    sub =  df.iloc[results[z]]\n    print sub['three'].mean()  \n",
  "label": 1
 },
 {
  "idx": 606,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "    def set_bg(self, active = False):\n        if active:\n            style = \"QLabel {background: yellow; font-size: 14pt;}\"\n            self.setStyleSheet(style)\n        else:\n            self.setStyleSheet(self.defaultStyle)\n\n\n\napp = QtGui.QApplication([])\n\nl = TagLabel(\"bla bla bla bla bla bla bla\", \"red\")\nl.show()\n\nm = QtGui.QStandardItemModel()\nfor _ in xrange(4):\n    m.appendRow([QtGui.QStandardItem(x) for x in [\"aap\", \"noot\", \"mies\"]])\n\nt = DragTable()\nt.setModel(m)\nt.show()\n\ndef h(o):\n    print \"signal handled\", o\nl.connect(l, QtCore.SIGNAL(\"dropAccepted(PyQt_PyObject)\"), h)\n\napp.exec_()\n",
  "label": 0
 },
 {
  "idx": 607,
  "doc": "numpy array slicing to avoid for loop",
  "code": "# create G as a copy of A, otherwise you might change A by changing G\nG = A.copy()\n\n# getting the mask for all columns except the last one\nm = (B[:,0][:,None] != np.arange(d2-1)[None,:]) & (B[:,1]==0)[:,None]\n\n# getting a matrix with those elements of A which fulfills the conditions\nC = np.where(m,A[:,:d2-1],0).astype(np.float)\n\n# get the 'modified' average you use\navg = np.sum(C,axis=0)/np.sum(m.astype(np.int),axis=0)\n\n# change the appropriate elements in all the columns except the last one\nG[:,:-1] = np.where(m,avg,A[:,:d2-1])\n",
  "label": 1
 },
 {
  "idx": 608,
  "doc": "Pandas, to_csv () to a specific format",
  "code": "In [24]: df.index = df.index.astype(str)  # unicode in python 3?\n\nIn [25]: s = StringIO()\n\nIn [26]: df.to_csv(s, quoting=2)\n\nIn [27]: s.getvalue()\nOut[27]: '\"\",\"pgtime\",\"pgstat\",\"age\",\"eet\",\"g2\",\"grade\",\"gleason\",\"ploidy\"\\n\"1\",6.1,0,64,2,10.26,2,4.0,\"diploid\"\\n\"2\",9.4,0,62,1,\"\",3,8.0,\"aneuploid\"\\n\"3\",5.2,1,59,2,9.99,3,7.0,\"diploid\"\\n\"4\",3.2,1,62,2,3.57,2,4.0,\"diploid\"\\n\"5\",1.9,1,64,2,22.56,4,8.0,\"tetraploid\"\\n\"6\",4.8,0,69,1,6.14,3,7.0,\"diploid\"\\n\"7\",5.8,0,75,2,13.69,2,\"\",\"tetraploid\"\\n\"8\",7.3,0,71,2,\"\",3,7.0,\"aneuploid\"\\n\"9\",3.7,1,73,2,11.77,3,6.0,\"diploid\"\\n'\n",
  "label": 0
 },
 {
  "idx": 609,
  "doc": "How to print progress from this code as the subprocess is running?",
  "code": "# Caution! untested code\nresult = []\nprocess = subprocess.Popen(['sshpass', '-p', password, 'rsync', '-avz',\n                            '--info=progress2', source12, destination], \n                           stdout=subprocess.PIPE)\nwhile process.poll() is None:\n    line = process.stdout.readline()\n    print line\n    result.append(line)\nprint sort(result)\n",
  "label": 1
 },
 {
  "idx": 610,
  "doc": "Dynamic Table Creation and ORM mapping in SqlAlchemy",
  "code": ">>> a_player = Player('monty', 0)\n>>> a_player.name\n'monty'\n>>> a_player.score\n0\n",
  "label": 0
 },
 {
  "idx": 611,
  "doc": "Numpy loadtxt load every other column",
  "code": "data = numpy.loadtxt(..., usecols=xrange(1, numcols, 2))\n",
  "label": 1
 },
 {
  "idx": 612,
  "doc": "Mock only a subset of all calls to a method",
  "code": "fubar = Fubar()\nmyMethod = fubar.myMethod # note instance fubar, resulting in a bound method.\nfubar.myMethod = lambda self, calls = [myMethod, (lambda: 'MyMock'), myMethod]: calls.pop()()\n",
  "label": 1
 },
 {
  "idx": 613,
  "doc": "How to import classes defined in __init__.py",
  "code": "settings\nhelper\nHelper in lib.settings\nsomeobject\nHelper in lib.foo.someobject\n\n# ./import_submodule.py\nimport fnmatch, os\nfrom lib.settings import Values\nfrom lib import Helper\n\nprint\nfor root, dirs, files in os.walk('.'):\n    for f in fnmatch.filter(files, '*.py'):\n        print \"# %s/%s\" % (os.path.basename(root), f)\n        print open(os.path.join(root, f)).read()\n        print\n\n\n# lib/helper.py\nprint 'helper'\nclass Helper(object):\n    def __init__(self, module_name):\n        print \"Helper in\", module_name\n\n\n# lib/settings.py\nprint \"settings\"\nimport helper\n\nclass Values(object):\n    pass\n\nhelper.Helper(__name__)\n\n\n# lib/__init__.py\n#from __future__ import absolute_import\nimport settings, foo.someobject, helper\n\nHelper = helper.Helper\n\n\n# foo/someobject.py\nprint \"someobject\"\nfrom .. import helper\n\nhelper.Helper(__name__)\n\n\n# foo/__init__.py\nimport someobject\n",
  "label": 0
 },
 {
  "idx": 614,
  "doc": "How to import classes defined in __init__.py",
  "code": "$ python import_submodule.py\n",
  "label": 0
 },
 {
  "idx": 615,
  "doc": "Get specific data from a .json file and save them to a 2D matrix/dictionary in python",
  "code": "final = [] # add values you want saved to final\nuniq_ident = 1\nfor name in glob.glob('/Users/jorjis/Desktop/test/*'):\n     jfile = open(name, 'r')\n     values = json.load(jfile)\n     jfile.close()\n     body1 = values['article']['description']\n     tokens = nltk.wordpunct_tokenize(body1)\n     tokens = [w.lower() for w in tokens]\n     vocab = [word for word in tokens if word not in stop]\n     final.append([uniq_ident,vocab]) # append vocab or whatever values you want to keep\n     uniq_ident += 1\n     print body1\n",
  "label": 1
 },
 {
  "idx": 616,
  "doc": "PyQt change element in .ui file",
  "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ui version=\"4.0\">\n <class>MainWindow</class>\n <widget class=\"QMainWindow\" name=\"MainWindow\">\n  ...\n  <widget class=\"QPushButton\" name=\"btn\"/>\n  ...\n </widget>\n</ui>\n",
  "label": 0
 },
 {
  "idx": 617,
  "doc": "I need to generate x random numbers in an interval from 1 to x but each number have to occur only once",
  "code": "np.random.permutation(10)\n",
  "label": 1
 },
 {
  "idx": 618,
  "doc": "Pair combinations of elements in dictionary without repetition",
  "code": "list(pairwise(pleio))\n",
  "label": 0
 },
 {
  "idx": 619,
  "doc": "Calling C++ class functions from Ruby/Python",
  "code": "import MyLibrary\n\nfoo = MyLibrary.Foo()\nfoo.pushBack(10);\nfoo.pushBack(20);\nfoo.pushBack(30);\nprint(foo.getInt(0)) # 10\nprint(foo.getInt(1)) # 20\nprint(foo.getInt(2)) # 30\n\nbar = foo.getBar()\nprint(bar.getValue()) # 42\nbar.setValue(17)\nprint(foo.getBar().getValue()) #17\n\nprint(MyLibrary.compute()) # 18.3\n",
  "label": 0
 },
 {
  "idx": 620,
  "doc": "Python: Decode base64 multiple strings in a file",
  "code": ">>> import base64\n>>> s = 'cw==ZA==YQ==ZA==YQ==cw==ZA==YQ==cw==ZA==YQ==cw==ZA==YQ==cw==ZA==dA==ZQ==cw==dA=='\n>>> ''.join(base64.b64decode(s[i:i+4]) for i in range(0, len(s), 4))\n\n'sdadasdasdasdasdtest'\n",
  "label": 0
 },
 {
  "idx": 621,
  "doc": "index by comparision of two numpy arrays in python",
  "code": "In [173]:\n\na=[1,'aaa', 'bbb', 'vvv', 'www']\na *=100\nb=[2,'qqq', 'bbb', 'ppp', 'www']\nb *=100\nA = np.array(a)\nB = np.array(b)\n%timeit (A==B).sum()\n%timeit sum(A==B)\nThe slowest run took 2784.03 times longer than the fastest. This could mean that an intermediate result is being cached \n100000 loops, best of 3: 11.4 \u00b5s per loop\n1000 loops, best of 3: 1.34 ms per loop\n",
  "label": 1
 },
 {
  "idx": 622,
  "doc": "passing arrays with ctypes",
  "code": "x.c\n#include <stdlib.h>\n#include <stdint.h>\n__declspec(dllexport) void read(int16_t* input, size_t size)\n{\n  int i;\n  for(i=0;i<size;i++)\n    input[i] = i;\n}\n",
  "label": 0
 },
 {
  "idx": 623,
  "doc": "Convert column elements to column name in pandas",
  "code": "In [29]:\n\nt=\"\"\"time1,stockA,bid,1\n time2,stockA,ask,1.1\n time3,stockB,ask,2.1\n time4,stockB,bid,2.0\n time5,stockA,bid,1.1\n time6,stockA,ask,1.2\"\"\"\n\u200b\ndf = pd.read_csv(io.StringIO(t), header=None, names=['time', 'stock', 'bid', 'ask'])\ndf\nOut[29]:\n     time   stock  bid  ask\n0   time1  stockA  bid  1.0\n1   time2  stockA  ask  1.1\n2   time3  stockB  ask  2.1\n3   time4  stockB  bid  2.0\n4   time5  stockA  bid  1.1\n5   time6  stockA  ask  1.2\nIn [30]:\n\ndf.loc[df['bid'] == 'bid', 'bid'] = df['ask']\ndf.loc[df['bid'] != 'ask', 'ask'] = ''\ndf.loc[df['bid'] == 'ask','bid'] = ''\ndf\nOut[30]:\n     time   stock  bid  ask\n0   time1  stockA    1     \n1   time2  stockA       1.1\n2   time3  stockB       2.1\n3   time4  stockB    2     \n4   time5  stockA  1.1     \n5   time6  stockA       1.2\n",
  "label": 1
 },
 {
  "idx": 624,
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": ">>> df\n                         open      high     low       close  volume\ntime                                                               \n2013-09-16 09:30:00  461.0100  461.4900  461.00  453.484089  183507\n2013-09-16 09:31:00  460.8200  461.6099  460.39  474.727508  212774\n2013-09-16 15:59:00  449.7200  450.0774  449.59  436.010403  146399\n2013-09-16 16:00:00  450.1200  450.1200  449.65  455.296584  444594\n2013-09-17 09:30:00  448.0000  448.0000  447.50  447.465545  173624\n2013-09-17 09:31:00  449.2628  449.6800  447.50  477.785506  193186\n",
  "label": 0
 },
 {
  "idx": 625,
  "doc": "How to *append* a text to a database file opened with shelve?",
  "code": "class Update_MyStore(MyStore):\n    def __init__(self, store):\n        db = shelve.open(store)\n        for i in db:\n            setattr(self, i, db[i])\n        self.items()\n        self.store_in_db()\nUpdate_MyStore('store')\n",
  "label": 1
 },
 {
  "idx": 626,
  "doc": "How to *append* a text to a database file opened with shelve?",
  "code": "while True:\n    store = shelve.open('store',writeback = True)\n    Item = input('Enter an item: ').capitalize() #I prefer str(raw_input('Question '))\n    if not Item or Item == 'Break':\n        break\n    store['item_quantity'][Item] = int(input(('Enter the number of {0} available in the store: ').format(Item)))\n    store['item_rate'][Item] = float(input(('Enter the rate of {0}: ').format(Item)))\n    store.sync()\n    store.close()\n",
  "label": 1
 },
 {
  "idx": 627,
  "doc": "Python .csv writer",
  "code": "from urlparse import urlparse\nimport csv\nimport re\n\nifile =open(ipath,'r')\nofile = open(opath, 'wb')\nwriter = csv.writer(ofile, dialect='excel')\n\nurl =[urlparse(u).netloc for u in ifile]\nsitesource =  set([re.sub(\"www.\", \"\", e) for e in url])\n\nfor u in sitesource:\n    print (\"Creation de:\", u)\n    writer.writerow([u]) \n\nofile.close()\nifile.close()\n",
  "label": 1
 },
 {
  "idx": 628,
  "doc": "GIMP Python-fu nested group layers",
  "code": ">>> img = gimp.Image(640, 480, RGB)\n>>> pdb.gimp_display_new(img)\n<display>\n>>> parent_group = pdb.gimp_layer_group_new(img)\n>>> child_group_1 = pdb.gimp_layer_group_new(img)\n>>> child_group_2 = pdb.gimp_layer_group_new(img)\n>>> grand_child_group = pdb.gimp_layer_group_new(img)\n>>> img.add_layer(parent_group, 0)\n>>> pdb.gimp_image_insert_layer(img, child_group_1, parent_group,0)\n>>> pdb.gimp_image_insert_layer(img, child_group_2, parent_group,1)\n>>> pdb.gimp_image_insert_layer(img, grand_child_group, child_group_1,0)\n>>> l1 = gimp.Layer(img, \"test\", 320,240)\n>>> pdb.gimp_image_insert_layer(img,l1, grand_child_group,0)\n",
  "label": 0
 },
 {
  "idx": 629,
  "doc": "Python Create Combinations from Multiple Data Frames",
  "code": "expand_grid(dict(var_1.to_dict('list'), **var_2.to_dict('list')))\n\nIn [122]: expand_grid(dict(var_1.to_dict('list'), **var_2.to_dict('list')))\nOut[122]:\n     val_1  val_2\n0  0.00789    0.5\n1  0.00789    1.0\n2  0.01448    0.5\n3  0.01448    1.0\n4  0.03157    0.5\n5  0.03157    1.0\n",
  "label": 1
 },
 {
  "idx": 630,
  "doc": "deleting element from python dictionary",
  "code": "for eachitem in dicta:\n    salary = eachitem['SALARY']\n    eachitem.clear()\n    eachitem['SALARY'] = salary\n",
  "label": 1
 },
 {
  "idx": 631,
  "doc": "find unique first top and bottom lines of fastq file from fasta file",
  "code": "@DH1DQQN1:269:C1UKCACXX:1:1107:20386:6577 1:N:0:TTAGGC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\n+\nCCCFFFFFHGHHHJIJHFDDDB173@8815BDDB###############\n@DH1DQQN1:269:C1UKCACXX:1:1114:5718:53821 1:N:0:TTAGGC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+\nCCCFFFFFHGHHHJIJHFDDDB173@8815BDDB###############\n@DH1DQQN1:269:C1UKCACXX:1:1209:10703:35361 1:N:0:TTAGGC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+\n@@@FFFFFHGHHHGIJHFDDDDDBDD69@6B-707537BDDDB75@@85\n@DH1DQQN1:269:C1UKCACXX:1:1210:18926:75163 1:N:0:TTAGGC\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG\n+\n@CCFFFFFHHHHHJJJHFDDD@77BDDDDB077007@B###########\n",
  "label": 0
 },
 {
  "idx": 632,
  "doc": "Split file and turn it into dictionary in python",
  "code": "{'is': 3, 'good': 2, 'file': 2, 'this': 1, 'excellent': 1, 'hello': 1}\n",
  "label": 0
 },
 {
  "idx": 633,
  "doc": "Is it possible to use 'else' in a python list comprehension?",
  "code": ">>> [a if a else 2 for a in [0,1,0,3]]\n[2, 1, 2, 3]\n",
  "label": 1
 },
 {
  "idx": 634,
  "doc": "creating a wxpython scrolled window (frame) by an event",
  "code": "def newFrame(self, event):\n    self.new_window = wx.Frame(self, title='frame2', size=(500, 500), pos=(800,0))\n    sz = wx.BoxSizer()\n    sz.SetMinSize((500,500)) #force minimum size\n    self.scroll = wx.ScrolledWindow(self.new_window, -1)\n    sz.Add(self.scroll,1,wx.EXPAND)\n    self.scroll.SetScrollbars(1, 1, 1600, 1400)\n    self.new_window.SetSizer(sz)\n    self.new_window.Layout()\n    self.new_window.Fit()\n    self.new_window.Show()\n",
  "label": 1
 },
 {
  "idx": 635,
  "doc": "Exposing python daemon as a service",
  "code": "import json\nimport zmq\n\nrequest_data = {\n        \"values\": [10, 20, 30 , 40],\n        }\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.DEALER)\nsocket.connect(\"ipc:///tmp/myapp.ipc\")\nsocket.send(json.dumps(request_data))\nprint socket.recv()\n",
  "label": 0
 },
 {
  "idx": 636,
  "doc": "Dynamic importing of modules followed by instantiation of objects with a certain baseclass from said modules",
  "code": "import sys\nimport inspect\nimport os\n\nclass PluginBase(object): pass\n\ndef search(base):\n    for root, dirs, files in os.walk('.'):\n        candidates = [fname for fname in files if fname.endswith('.py') \n                      and not fname.startswith('__')]\n        classList=[]\n        if candidates:\n            for c in candidates:\n                modname = os.path.splitext(c)[0]\n                try:\n                    module=__import__(modname)\n                except (ImportError,NotImplementedError):\n                    continue\n                for cls in dir(module):\n                    cls=getattr(module,cls)\n                    if (inspect.isclass(cls)\n                        and inspect.getmodule(cls)==module\n                        and issubclass(cls,base)):\n                        # print('found in {f}: {c}'.format(f=module.__name__,c=cls))\n                        classList.append(cls)\n        print(classList)\n\nsearch(PluginBase)\n",
  "label": 1
 },
 {
  "idx": 637,
  "doc": "Django dynamic model fields",
  "code": ">>> instance = Something.objects.create(\n                 name='something',\n                 data={'a': 1, 'b': 2, 'nested': {'c':3}}\n           )\n",
  "label": 0
 },
 {
  "idx": 638,
  "doc": "How to call python script from CasperJS",
  "code": "casp.start().then(function() {\n  var finished = false;\n  var cp = require('child_process');\n  cp.execFile('/usr/bin/python','test.py', {},function(_,stdout,stderr){\n    console.log(stdout);\n    console.log(stderr);\n    finished = true;\n  });\n  this.waitFor(function check(){\n    return finished;\n  }, function then(){\n    // can stay empty\n  });\n}).run();\n",
  "label": 1
 },
 {
  "idx": 639,
  "doc": "Restart a script after 6 minutes",
  "code": "import time\n\nwakeup = time.time()\n\nwhile True:\n    wakeup += 6 \n    print \"start\",\n\n    for i in range(20):\n        time.sleep(0.5)   # simulate work\n        print i,\n\n        if time.time() > wakeup:\n            break\n\n    print \"finished\"\n\n    while time.time() < wakeup:\n        time.sleep(1)\n",
  "label": 1
 },
 {
  "idx": 640,
  "doc": "Smart filter with python",
  "code": "/* Special wrapper to support stable sorting using the decorate-sort-undecorate\n   pattern.  Holds a key which is used for comparisons and the original record\n   which is returned during the undecorate phase.  By exposing only the key\n   .... */\n",
  "label": 0
 },
 {
  "idx": 641,
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "{% for entry in entries %}\n    <td>{{ entry.datadesc }}</td>\n    <td><table>\n    {% for file in entry.entryfile_set.all %}\n        <td>{{ file.datafile.name|split:\"/\"|last }}</td>\n        <td>{{ file.datafile.size|filesizeformat }}</td>\n        <td><a href=\"{{ object.datafile.url }}\">download</a></td>\n        <td><a href=\"{% url main.views.delete object.id %}\">delete</a></td>\n    {% endfor %}\n    </table></td>\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 642,
  "doc": "How to add date and time information to time series data using python numpy or pandas",
  "code": ">>> x_with_time = pd.Series(x.values, index=when)\n>>> x_with_time\n2013-01-01 00:00:00    13\n2013-01-01 00:00:01    14\n2013-01-01 00:00:02    15\n2013-01-01 00:00:03    22\n2013-01-01 00:00:04    16\n[...]\n2013-10-04 12:45:41    21\n2013-10-04 12:45:42    16\n2013-10-04 12:45:43    15\nFreq: S, Length: 23892344\n",
  "label": 0
 },
 {
  "idx": 643,
  "doc": "Extract domain from body of email",
  "code": "from lxml import html\nfrom urlparse import urlparse\ndoc = html.fromstring(html_data)\nlinks = doc.cssselect(\"a[href]\")\ndomains = set([])\nfor link in links:\n    href=link.attrib['href']\n    parsed=urlparse(href)\n    domains.add(parsed.netloc)\nprint domains\n",
  "label": 1
 },
 {
  "idx": 644,
  "doc": "calling class with user input",
  "code": "teams = {\n\"Niners\" : (\"Gabbert\", \"02\" ),\n\"Bears\" : (\"CUTLER, JAY\",\"06\"),\n\"Bengals\" : (\"Dalton, Andy\",\"14\"),\n\"Bills\" : (\" Taylor, Tyrod\", \"05\")} #etc\n# Again, not including the whole dictionary for brevity's sake\n\ndef decor(func):\n    def wrap():\n        print(\"===============================\")\n        func()\n        print(\"===============================\")\n    return wrap\n\ndef print_text():\n    print(\"Who\\s your NFL Quarterback? \")\n\ndecorated = decor(print_text)\ndecorated()\n\nteam = input(\"Enter your teams name here:\").capitalize()\nprint(teams[team][0], teams[team][1])\n",
  "label": 1
 },
 {
  "idx": 645,
  "doc": "Parsing structured text file in python",
  "code": "[('NETLIST',\n  ['topblock',\n   ('VERSION', ['2', '0', '0']),\n   ('CELL',\n    ['topblock',\n     ('PORT',\n      ['gearshift_h',\n       'vpsf',\n       'vphreg',\n       'pwron_h',\n       'vinp',\n       'vref_out',\n       'vcntrl_out',\n       'gd',\n       'meas_vref',\n       'vb',\n       'vout',\n       'meas_vcntrl',\n       'reset_h',\n       'vinm']),\n     ('INST',\n      [('XI21/Mdummy1', 'pch_18_mac'),\n       ('TYPE', ['MOS']),\n       ('PROP',\n        [('n', '\"sctg_inv1x/pch_18_mac\"'),\n         ('Length', '0.152'),\n         ('NFIN', '8')]),\n       ('PIN',\n        [('vpsf', 'SRC'),\n         ('gs_h', 'DRN'),\n         ('vpsf', 'GATE'),\n         ('vpsf', 'BULK')])]),\n     ('INST',\n        ...\n",
  "label": 0
 },
 {
  "idx": 646,
  "doc": "Need to parse a tool log file in python and then save the results in excel or csv",
  "code": "ticks   foo type    bar message\n\n2408967 3360    UpdatePlaybackStatusInfo    0   Avg Prefetch(ms): 157.739, Avg Render(ms): 25.7375, Avg Display FPS: 27.3688\n\n3371181 3360    UpdatePlaybackStatusInfo    0   Frames dropped during playback: 0 / 219, Preroll(ms): 812.849\n\n3371181 3360    UpdatePlaybackStatusInfo    0   Avg Prefetch(ms): 17.1389, Avg Render(ms): 33.8339, Avg Display FPS: 29.5562\n\n3465531 10548   Assert  0   Debug Assert failed!\n\n3465531 10548   Assert  0   wglMakeCurrent failed: Error 0: The operation completed successfully.\n",
  "label": 0
 },
 {
  "idx": 647,
  "doc": "How to print different results to a screen and to a file in python?",
  "code": "`http --print hb google.com > out.txt`\n",
  "label": 1
 },
 {
  "idx": 648,
  "doc": "How to log in to a website with urllib?",
  "code": "import http.cookiejar\nimport urllib\n\nget_url = 'http://www.broadinstitute.org/cmap/index.jsp'\npost_url = 'http://www.broadinstitute.org/cmap/j_security_check'\n\nvalues = urllib.parse.urlencode({'j_username': <MYCOOLUSERNAME>,\n          'j_password': <MYCOOLPASSSWORD>,\n          'submit': 'sign in'})\npayload = bytes(values, 'ascii')\ncj = http.cookiejar.CookieJar()\nopener = urllib.request.build_opener(\n    urllib.request.HTTPRedirectHandler(),\n    urllib.request.HTTPHandler(debuglevel=0),\n    urllib.request.HTTPSHandler(debuglevel=0),\n    urllib.request.HTTPCookieProcessor(cj))\n\nopener.open(get_url) #First call to capture the JSESSIONID\nresp = opener.open(post_url, payload)\nresp_html = resp.read()\nresp_headers = resp.info()\n",
  "label": 1
 },
 {
  "idx": 649,
  "doc": "Neat way of popping key, value PAIR from dictionary?",
  "code": "from collections import Mapping\n\nclass MyDict(Mapping):\n    def __init__(self, *args, **kwargs):\n        self.update(dict(*args, **kwargs))\n\n    def __setitem__(self, key, item): \n        self.__dict__[key] = item\n\n    def __getitem__(self, key): \n        return self.__dict__[key]\n\n    def __delitem__(self, key): \n        del self.__dict__[key]\n\n    def pop(self, k, d=None):\n        return k,self.__dict__.pop(k, d)\n\n    def update(self, *args, **kwargs):\n        return self.__dict__.update(*args, **kwargs)\n\n    def __iter__(self):\n        return iter(self.__dict__)\n\n    def __len__(self):\n        return len(self.__dict__)\n\n    def __repr__(self): \n        return repr(self.__dict__)\n",
  "label": 1
 },
 {
  "idx": 650,
  "doc": "Python script to replace #define values in C file",
  "code": "for line in f1:\n    for i in range(len(KEYWORDS)):\n        if line.startswith(\"#define\") and KEYWORDS[i] in line:\n            line = \"#define \" + KEYWORDS[i] + \" \" + str(VALS[i])+\"\\n\"\n    f2.write(line)\n",
  "label": 1
 },
 {
  "idx": 651,
  "doc": "Custom Hadoop Configuration for Spark from Python (PySpark)?",
  "code": "# Create minimal Spark context.\nsc = SparkContext(appName=\"ScriptWithIntegratedConfig\")\n\n# It's critical to initialize configurator so any\n# new org.apach.hadoop.Configuration object loads our resources.\nsc._jvm.com.wellcentive.nosql.Configurator.init()\n",
  "label": 0
 },
 {
  "idx": 652,
  "doc": "make python wait for stored procedure to finish executing",
  "code": "while 1:\n    q = status_check_cursor.execute('select status from RunningStatus').fetchone()\n    if q[0] == 0:\n        break\n",
  "label": 0
 },
 {
  "idx": 653,
  "doc": "Running blocks of code inside vim",
  "code": "autocmd FileType python vnoremap <buffer> <F9> :<C-U>exec '!clear; python -c' shellescape(<SID>GetVisualSelection(), 1)<CR>\n",
  "label": 0
 },
 {
  "idx": 654,
  "doc": "Python loop through string in nested for loops",
  "code": "s = '''that's my     string, \"   keep these spaces     \"    but reduce these '''\n\n\nnormal, quoted, eating = 0,1,2\nstate = eating\nresult = ''\nfor ch in s:\n  if (state, ch) == (eating, ' '):\n    continue\n  elif (state,ch) == (eating, '\"'):\n    result += ch\n    state = quoted\n  elif state == eating:\n    result += ch\n    state = normal\n  elif (state, ch) == (quoted, '\"'):\n    result += ch\n    state = normal\n  elif state == quoted:\n    result += ch\n  elif (state,ch) == (normal, '\"'):\n    result += ch\n    state = quoted\n  elif (state,ch) == (normal, ' '):\n    result += ch\n    state = eating\n  else: # state == normal\n    result += ch\n\nprint result\n",
  "label": 1
 },
 {
  "idx": 655,
  "doc": "ScraperWiki/Python: filtering out records when property is false",
  "code": "import scraperwiki\nimport simplejson\nimport urllib2\n\nQUERY = 'meetup'\nRESULTS_PER_PAGE = '100'\nNUM_PAGES = 10\n\nfor page in range(1, NUM_PAGES+1):\n    base_url = 'http://search.twitter.com/search.json?q=%s&rpp=%s&page=%s' \\\n         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)\n    try:\n        results_json = simplejson.loads(scraperwiki.scrape(base_url))\n        for result in results_json['results']:\n            #print result\n            data = {}\n            data['id'] = result['id']\n            data['text'] = result['text']\n            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])\n            data['from_user'] = result['from_user']\n            data['created_at'] = result['created_at']\n            if data['location']:\n                print data['location'], data['from_user']\n                scraperwiki.sqlite.save([\"id\"], data)\n    except:\n        print 'Oh dear, failed to scrape %s' % base_url\n        break\n",
  "label": 1
 },
 {
  "idx": 656,
  "doc": "numpy multidimensional indexing and diagonal symmetries",
  "code": "import numpy as np\nshape = (3, 10, 10, 19, 75, 10, 10)\np = np.arange(np.prod(shape)).reshape(shape)  # this is not symmetric, but not important\n\nix, iy = np.tril_indices(10)\n# In order to index properly, we need to add axes. This can be done by hand or with this\nix1, ix2 = np.ix_(ix, ix)\niy1, iy2 = np.ix_(iy, iy)\n\np_ltriag = p[:, ix1, iy1, :, :, ix2, iy2]\nprint p_ltriag.shape  # yields (55, 55, 3, 19, 75), axis order can be changed if needed\n\nq = np.zeros_like(p)\nq[:, ix1, iy1, :, :, ix2, iy2] = p_ltriag  # fills the lower triangles on both sides\nq[:, ix1, iy1, :, :, iy2, ix2] = p_ltriag  # fills the lower on left, upper on right\nq[:, iy1, ix1, :, :, ix2, iy2] = p_ltriag  # fills the upper on left, lower on right\nq[:, iy1, ix1, :, :, iy2, ix2] = p_ltriag  # fills the upper triangles on both sides\n",
  "label": 0
 },
 {
  "idx": 657,
  "doc": "Selenium Steam community market listings python",
  "code": "for result in driver.find_elements_by_css_selector(\"div.market_listing_row\"):\n    price = result.find_element_by_css_selector(\"div.market_listing_their_price\")\n    print price.text.strip()\n",
  "label": 1
 },
 {
  "idx": 658,
  "doc": "Python multiprocessing and shared numpy array",
  "code": "def f(args):\n    return get_sub_matrix_C(*args)\n\npool = multiprocessing.Pool()\nresults = pool.map(f, ((i, other_args) for i in range(10)))\n\nfor i, res in enumerate(results):\n    C[i*10:(i+1)*10,:10] = res\n",
  "label": 1
 },
 {
  "idx": 659,
  "doc": "How to deal with special characters in make command expansion?",
  "code": "$ cat BP.mk\nVAR := $(shell python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")')\n\nall:\n        echo 'DIRECT := `python -c '\\''print(\"include_path_with\\\\[weird\\\\]characters\")'\\''`'\n        echo \"DIRECT := `python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")'`\"\n        echo DIRECT := `python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")'`\n        echo 'VAR := $(VAR)'\n        echo \"VAR := $(VAR)\"\n        echo VAR := $(VAR)\n$ make -f BP.mk\necho 'DIRECT := `python -c '\\''print(\"include_path_with\\\\[weird\\\\]characters\")'\\''`'\nDIRECT := `python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")'`\necho \"DIRECT := `python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")'`\"\nDIRECT := include_path_with\\[weird\\]characters\necho DIRECT := `python -c 'print(\"include_path_with\\\\[weird\\\\]characters\")'`\nDIRECT := include_path_with\\[weird\\]characters\necho 'VAR := include_path_with\\[weird\\]characters'\nVAR := include_path_with\\[weird\\]characters\necho \"VAR := include_path_with\\[weird\\]characters\"\nVAR := include_path_with\\[weird\\]characters\necho VAR := include_path_with\\[weird\\]characters\nVAR := include_path_with[weird]characters\n",
  "label": 0
 },
 {
  "idx": 660,
  "doc": "Returning a list in each iteration using list comprehension",
  "code": "from itertools import chain\nprint([item for lang in languages_list for item in chain([lang.code], lang.alt)])\n",
  "label": 1
 },
 {
  "idx": 661,
  "doc": "Retrieving the actual 3D coordinates of a point on a triangle that has been flattened to 2 dimensions",
  "code": "def GetInterpolatedZ(tri, u, v):\n    t0 = Vec3(tri[0].x/tri[0].z, tri[0].y/tri[0].z, 1.0/tri[0].z)\n    t1 = Vec3(tri[1].x/tri[1].z, tri[1].y/tri[1].z, 1.0/tri[1].z)\n    t2 = Vec3(tri[2].x/tri[2].z, tri[2].y/tri[2].z, 1.0/tri[2].z)\n\n    inter = t0 + u * (t1-t0) + v * (t2-t0)\n    inter.z = 1.0 / inter.z\n    inter.x *= inter.z\n    inter.y *= inter.z\n    return inter\n",
  "label": 1
 },
 {
  "idx": 662,
  "doc": "Detrend Flux Time Series with Non-Linear Trend",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nnum = 1000\nx = np.linspace(0, 10, num)\ny = np.exp(x)\n\n# Add some non-stationary noise that's hard to see without de-trending\nnoise = 100 * np.exp(0.2 * x) * np.random.normal(0, 1, num)\ny += noise\n\n# Detrend with a 2d order polynomial\nmodel = np.polyfit(x, y, 2)\npredicted = np.polyval(model, x)\n\nfig, axes = plt.subplots(nrows=2, sharex=True)\naxes[0].plot(x, y, 'ro')\naxes[0].plot(x, predicted, 'k-')\naxes[0].set(title='Original Data and 2nd Order Polynomial Trend')\n\naxes[1].plot(x, y - predicted, 'ro')\naxes[1].set(title='Detrended Residual')\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 663,
  "doc": "Sorting list of dictionaries with primary key from list of keywords and alphabetical order as secondary key",
  "code": "import pprint\n\n# Define the keywords I want to see first\npreferred_projects = ['one', 'two', 'three']\n\n# example data\nAllMyProjectsFromaDatasource = [{ 'name': 'project two', 'id': 5, 'otherkey': 'othervalue'},\n                                { 'name': 'project three', 'id': 1, 'otherkey': 'othervalue'},\n                                { 'name': 'project one', 'id': 3, 'otherkey': 'othervalue'},\n                                { 'name': 'abc project', 'id': 6, 'otherkey': 'othervalue'},\n                                { 'name': 'one project', 'id': 9, 'otherkey': 'othervalue'}\n                               ]    \n\ndef keyfunc(x):\n    # keyword primary key\n    # (add index to list comprehension when keyword is in name)\n    preferred_key = [float(idx) \n                     for idx, i in enumerate(preferred_projects)\n                     if i in x['name']]\n    # found at least one match in preferred keywords, use first if any, else infinity\n    keyword_sortkey = preferred_key[0] if preferred_key else float('inf')\n    # return tuple to sort according to primary and secondary key\n    return keyword_sortkey, x['name']\n\nAllMyProjectsFromaDatasource.sort(key=keyfunc)\n\npprint.pprint(AllMyProjectsFromaDatasource)\n",
  "label": 1
 },
 {
  "idx": 664,
  "doc": "Scrape 'dictionary' type object from top of HTML file (bunch of text, not in a class)",
  "code": "import json\nimport re\nfrom bs4 import BeautifulSoup\nimport requests\n\npattern = re.compile(r\"window\\.BC\\.product = (.*);\", re.MULTILINE)\n\nresponse = requests.get(\"http://www.steepandcheap.com/gear-cache/shop-smartwool-on-sale/SWL00II-GRA\")\nsoup = BeautifulSoup(response.content)   \n\nscript = soup.find(\"script\", text=lambda x: x and \"window.BC.product\" in x).text\ndata = json.loads(re.search(pattern, script).group(1))\nprint data\n",
  "label": 1
 },
 {
  "idx": 665,
  "doc": "making new column in pandas dataframes based on filter",
  "code": ">>> cols = ['a', 'b', 'c'] # a list of columns to test\n>>> df[cols] > 0 \n      a      b      c\n0  True   True   True\n1  True   True   True\n2  True   True   True\n3  True  False  False\n4  True  False  False\n",
  "label": 0
 },
 {
  "idx": 666,
  "doc": "Django Scheduled Deletion",
  "code": "\nfrom celery import shared_task\n\n@shared_task\ndef delete_model(model_pk):\n    try:\n        MyModel.objects.get(pk=model_pk).delete()\n    except MyModel.DoesNotExist:\n        pass\n",
  "label": 0
 },
 {
  "idx": 667,
  "doc": "How to get the number of elements returned from a function in Python",
  "code": "foo(1) # (1,2)\nfoo(0) # (\"foo\",\"bar\",\"baz\")\n",
  "label": 0
 },
 {
  "idx": 668,
  "doc": "Comparing two pandas dataframes for differences",
  "code": "csvdata_old = csvdata.copy()\n",
  "label": 0
 },
 {
  "idx": 669,
  "doc": "R's relevel() and factor variables in linear regression in pandas",
  "code": "import pandas as pd\nd = {'a': [1,2,3,4,3,3,3], 'b': [5,6,7,8,4,4,4], 'c': [9,10,11,12,3,3,3], \n     'd': pd.Series(['red', 'blue', 'green', 'red', 'orange', 'blue', 'red'], \n                    dtype='category')}\ndf = pd.DataFrame(d)\ndummies = pd.get_dummies(df['d'])\ndf = pd.concat([df, dummies], axis=1)\ndf = df.drop(['d', 'green'], axis=1)\nprint(df)\n",
  "label": 0
 },
 {
  "idx": 670,
  "doc": "Detecting geographic clusters",
  "code": "map(\"world\", plot=T )\n",
  "label": 0
 },
 {
  "idx": 671,
  "doc": "Detecting geographic clusters",
  "code": "LAT     LONG\n36.3312 -94.1334\n36.6828 -121.791\n37.2307 -121.96\n37.3857 -122.026\n37.3857 -122.026\n37.3857 -122.026\n37.3895 -97.644\n37.3992 -122.139\n37.3992 -122.139\n37.402  -122.078\n37.402  -122.078\n37.402  -122.078\n37.402  -122.078\n37.402  -122.078\n37.48   -122.144\n37.48   -122.144\n37.55   126.967\n",
  "label": 0
 },
 {
  "idx": 672,
  "doc": "Detecting geographic clusters",
  "code": "threshhold_dist is the size of the bounding box, ie: the geographical area\ntheshhold_location is the number of lat/lng points needed with in\n    the bounding box in order for it to be considered a cluster.\n",
  "label": 0
 },
 {
  "idx": 673,
  "doc": "XOR neural network backprop",
  "code": "Z3 = theta2(0) + theta2(1) * L2(1) + theta2(2) * L2(2) + theta2(3) * L2(3)\ndZ3/dtheta2(0) = 1\ndZ3/dtheta2(1) = L2(1)\ndZ3/dtheta2(2) = L2(2)\ndZ3/dtheta2(3) = L2(3)\n",
  "label": 0
 },
 {
  "idx": 674,
  "doc": "Python & Numpy - create dynamic, arbitrary subsets of ndarray",
  "code": "import numpy as np\n\n# select filtering indexes\nfilter_indexes = [1, 3]\n# generate the test data\nraw_data = np.random.randint(0, 4, size=(50,5))\n\n\n# create a column that we would use for indexing\nindex_columns = raw_data[:, filter_indexes]\n\n# sort the index columns by lexigraphic order over all the indexing columns\nargsorts = np.lexsort(index_columns.T)\n\n# sort both the index and the data column\nsorted_index = index_columns[argsorts, :]\nsorted_data = raw_data[argsorts, :]\n\n# in each indexing column, find if number in row and row-1 are identical\n# then group to check if all numbers in corresponding positions in row and row-1 are identical\nautocorrelation = np.all(sorted_index[1:, :] == sorted_index[:-1, :], axis=1)\n\n# find out the breakpoints: these are the positions where row and row-1 are not identical\nbreakpoints = np.nonzero(np.logical_not(autocorrelation))[0]+1\n\n# finally find the desired subsets \nsubsets = np.split(sorted_data, breakpoints)\n",
  "label": 1
 },
 {
  "idx": 675,
  "doc": "How can I get a list of package locations from a PIP requirements file?",
  "code": "try:\n    import xmlrpclib  # Python 2\nexcept ImportError:\n    import xmlrpc.client as xmlrpclib  # Python 3\n\npypi = xmlrpclib.ServerProxy('http://pypi.python.org/pypi')\n\npackage_name = \"Flask-Login\"\n\npackages = pypi.search({\"name\": package_name})\npackage = next(package for package in packages if package[\"name\"] == package_name)\nrelease_data = pypi.release_data(package_name, package[\"version\"])\n\nprint(package_name)\nprint(package[\"version\"])\nprint(release_data[\"summary\"])\nprint(release_data[\"home_page\"])\n",
  "label": 1
 },
 {
  "idx": 676,
  "doc": "formatting files with sed/ python/ etc",
  "code": ">>> x='<td>$GETR(\"wp\",\"1\")$Yes$GETR(\"\",\"2\")$No$NOTE()$</td>'\n>>> if x.count(\"$GETR\")>1:\n    x=x.replace(\"$GETR\",\"\\n\\t$GETR\").replace(\"</td>\",\"\\n</td>\")\n\n\n>>> print x\n<td>\n    $GETR(\"wp\",\"1\")$Yes\n    $GETR(\"\",\"2\")$No$NOTE()$\n</td>\n>>> x='<td>$GETR(\"\",\"2\")$No$NOTE()$</td>'\n>>> if x.count(\"$GETR\")>1:\n    x=x.replace(\"$GETR\",\"\\n\\t$GETR\").replace(\"</td>\",\"\\n</td>\")\n\n\n>>> print x\n<td>$GETR(\"\",\"2\")$No$NOTE()$</td>\n",
  "label": 0
 },
 {
  "idx": 677,
  "doc": "Advance a file object more than one line as a way of skipping blank lines and lines containing strings",
  "code": "for _ in range(times_to_advance):\n    next(file_object)\n",
  "label": 1
 },
 {
  "idx": 678,
  "doc": "Terminating subprocess in python",
  "code": "vinay 7864 7795  9 22:10 pts/0 00:00:00 python ./manage.py runserver\nvinay 7865 7864 16 22:10 pts/0 00:00:00 /usr/bin/python ./manage.py runserver\n",
  "label": 0
 },
 {
  "idx": 679,
  "doc": "Terminating subprocess in python",
  "code": "p = Popen(...)\npp = psutil.Process(p.pid)\nfor child in pp.get_children():\n    child.send_signal(signal.SIGINT)\n",
  "label": 1
 },
 {
  "idx": 680,
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "reduced_list = list(s - set(last5))\n",
  "label": 0
 },
 {
  "idx": 681,
  "doc": "Pandas: add dataframes to dataframe - match on index and column value",
  "code": "result = series.unstack()\n",
  "label": 0
 },
 {
  "idx": 682,
  "doc": "Writing variables with .write() Python 3",
  "code": "firstline = \"Log Created: {}/nLog deleted and recreated.\".format(grab_date)\n",
  "label": 1
 },
 {
  "idx": 683,
  "doc": "Changing constraint naming conventions in Flask-SQLAlchemy",
  "code": "from flask_sqlalchemy import SQLAlchemy as BaseSQLAlchemy, Model, _BoundDeclarativeMeta, _QueryProperty\nfrom sqlalchemy import MetaData\n\nclass SQLAlchemy(BaseSQLAlchemy):\n    def make_declarative_base(self):\n        metadata = MetaData(naming_convention={\n            'pk': 'pk_%(table_name)s',\n            'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n            'ix': 'ix_%(table_name)s_%(column_0_name)s',\n            'uq': 'uq_%(table_name)s_%(column_0_name)s',\n            'ck': 'ck_%(table_name)s_%(constraint_name)s',\n        })\n        base = declarative_base(metadata=metadata, cls=Model, name='Model', metaclass=_BoundDeclarativeMeta)\n        base.query = _QueryProperty(self)\n        return base\n",
  "label": 1
 },
 {
  "idx": 684,
  "doc": "Vectorize this function in Numpy Python",
  "code": "a = array([[5],\n           [0],\n           [4],\n           ..., \n           [5],\n           [6],\n           [8]], dtype=int8)\n\nnew_y = np.eye(a.max()+1)[a.ravel()]\n",
  "label": 1
 },
 {
  "idx": 685,
  "doc": "Vectorize this function in Numpy Python",
  "code": "new_y = np.zeros((a.shape[0], a.max()+1))\nnew_y[np.indices(a.ravel().shape)[0], a.ravel()] = 1.\n",
  "label": 1
 },
 {
  "idx": 686,
  "doc": "Generate random string from regex character set",
  "code": "import inverse_regex\nprint(''.join(inverse_regex.ipermute('[a-z]')))\n# abcdefghijklmnopqrstuvwxyz\n",
  "label": 1
 },
 {
  "idx": 687,
  "doc": "Nested Regular Expression in Python for",
  "code": "r1 = re.compile(r'SO ON')\nr2 = re.compile(r'WHATEVER AND (%s)*' % r1.pattern)\n",
  "label": 1
 },
 {
  "idx": 688,
  "doc": "inserting a new entry into adjacency list",
  "code": "dict1['x3'] = set(dict1['x3']+[y2,y4])\nfor y in dict1['x3']:\n    dict2[y] = set(dict2[y]+'x3')\n",
  "label": 0
 },
 {
  "idx": 689,
  "doc": "csv to sparse matrix in python",
  "code": "\n$ cat 1938894-simplified.csv\n0,32\n1,21\n1,23\n1,32\n2,23\n2,53\n2,82\n3,82\n4,46\n5,75\n7,86\n8,28\n",
  "label": 0
 },
 {
  "idx": 690,
  "doc": "Counting how many unique identifiers there are by merging two columns of data?",
  "code": "{'Class02CD3': 7, 'Class02CD1': 2, 'Class01CD2': 3, 'DClass2DE2': 2}\n",
  "label": 0
 },
 {
  "idx": 691,
  "doc": "Save matches on array",
  "code": "name, params = s.split('(')\nname = name.split()[1]\nparams = params[:-1].split(',')\nd = {'module_name':name,\n     'module_params':params[:-1],\n     'module_last_param':params[-1]}\n",
  "label": 1
 },
 {
  "idx": 692,
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": ">>> voxel_adjacency(numpy.array([0, 3, 1, 1, 0, 2]))\narray([[ True, False, False, False,  True, False],\n       [False,  True, False, False, False, False],\n       [False, False,  True,  True, False, False],\n       [False, False,  True,  True, False, False],\n       [ True, False, False, False,  True, False],\n       [False, False, False, False, False,  True]], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 693,
  "doc": "openCV Thresholding negative values",
  "code": "threshold = 2\nflow[np.abs(flow) < threshold] = 0\n",
  "label": 1
 },
 {
  "idx": 694,
  "doc": "sklearn decomposition top terms",
  "code": ">>> features = vectorizer.get_feature_names()\n>>> weights = np.abs(weights)\n>>> for i in range(km.n_clusters):\n...     top5 = np.argsort(weights[i])[-5:]\n...     print(zip([features[j] for j in top5], weights[i, top5]))\n...     \n[(u'escrow', 0.042965734662740895), (u'chip', 0.07227072329320372), (u'encryption', 0.074855609122467345), (u'clipper', 0.075661844826553887), (u'key', 0.095064798549230306)]\n[(u'posting', 0.012893125486957332), (u'article', 0.013105911161236845), (u'university', 0.0131617377000081), (u'com', 0.023016036009601809), (u'edu', 0.034532489348082958)]\n[(u'don', 0.02087448155525683), (u'com', 0.024327099321009758), (u'people', 0.033365757270264217), (u'edu', 0.036318114826463417), (u'god', 0.042203130080860719)]\n",
  "label": 0
 },
 {
  "idx": 695,
  "doc": "Write nested lists column wise to CSV",
  "code": "import csv\n\ncontainer = [[['CD', 'CC', 'CD'], 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n             [['DT', 'CC', 'CD'], 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1],\n             [['EX', 'CC', 'CD'], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n             [['JJ', 'CC', 'CD'], 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]]\n\nwith open('out.csv', 'w') as csvfile:\n    csvw = csv.writer(csvfile, delimiter=',')\n    for column in zip(*[s for s in container]):\n        csvw.writerow(column)\n",
  "label": 1
 },
 {
  "idx": 696,
  "doc": "Is there an efficient way to fill date gaps in python?",
  "code": "import json\nimport pandas as pd\n\njson_data = [\n    {\n      \"amount\": 0,\n      \"date_closed\": \"2012-08-04 16:00:00\"\n    },\n    {\n      \"amount\": 0,\n      \"date_closed\": \"2012-08-04 20:00:00\"\n    },\n    {\n      \"amount\": 0,\n      \"date_closed\": \"2012-08-04 22:00:00\"\n    }\n]\n\ndf = pd.read_json(json.dumps(json_data), orient='records')\ndf\n\n   amount          date_closed\n0       0  2012-08-03 16:00:00\n1       0  2012-08-04 20:00:00\n2       0  2012-08-04 22:00:00\n",
  "label": 0
 },
 {
  "idx": 697,
  "doc": "how to get unique values set from a repeating values list",
  "code": "def parse_the_file():\n    lower = str.lower\n    split = str.split\n    with open('f.txt') as f:\n        d = {}\n        lines = f.read().split('\\n')\n        for A,B in [split(l) for l in lines]:\n            try:\n                d[lower(A)].add(B)\n            except KeyError:\n                d[lower(A)] = set(B)\n\n        for a in d:\n            print \"%s - %s\" % (a,\",\".join(list(d[a])))\n\nif __name__ == \"__main__\":\n    parse_the_file()\n",
  "label": 1
 },
 {
  "idx": 698,
  "doc": "Best way of removing single newlines but keeping multiple newlines",
  "code": ">>> re.sub('(?<![\\r\\n])(\\r?\\n|\\n?\\r)(?![\\r\\n])', ' ', s)\n'foo\\n\\nbar one two three\\n\\n\\nhello'\n",
  "label": 1
 },
 {
  "idx": 699,
  "doc": "Pandas count number of elements in each column less than x",
  "code": "In [96]:\n\ndf = pd.DataFrame({'a':randn(10), 'b':randn(10), 'c':randn(10)})\ndf\nOut[96]:\n          a         b         c\n0 -0.849903  0.944912  1.285790\n1 -1.038706  1.445381  0.251002\n2  0.683135 -0.539052 -0.622439\n3 -1.224699 -0.358541  1.361618\n4 -0.087021  0.041524  0.151286\n5 -0.114031 -0.201018 -0.030050\n6  0.001891  1.601687 -0.040442\n7  0.024954 -1.839793  0.917328\n8 -1.480281  0.079342 -0.405370\n9  0.167295 -1.723555 -0.033937\n\n[10 rows x 3 columns]\nIn [97]:\n\ndf[df > 1.0].count()\n\nOut[97]:\na    0\nb    2\nc    2\ndtype: int64\n",
  "label": 1
 },
 {
  "idx": 700,
  "doc": "Element-wise constraints in scipy.optimize.minimize",
  "code": "{'type':'ineq', 'fun': lambda x: np.sum(x, 0) - 1}  # row sum >= 1\n{'type':'ineq', 'fun': lambda x: 1 - np.sum(x, 0)}  # row sum <= 1\n",
  "label": 0
 },
 {
  "idx": 701,
  "doc": "How to sort through keys in a dictionary, adding the values and returning a list of keys if combined values equal a certain number",
  "code": ">>> mydict = {'a':1, 'b':12, 'c':33, 'd':40, 'e':15, 'f':6, 'g':27}\n>>> for match in matches(mydict,55):\n...     print(match)\n...\n(('d', 40), ('e', 15))\n(('c', 33), ('e', 15), ('f', 6), ('a', 1))\n(('b', 12), ('e', 15), ('g', 27), ('a', 1))\n",
  "label": 0
 },
 {
  "idx": 702,
  "doc": "Removing repetitive lists in a list of list",
  "code": ">>> my_list = [[1, 2], [1, 2], [3, 4]]\n>>> result = [list(el) for el in set(tuple(el) for el in my_list)]\n[[1, 2], [3, 4]]\n",
  "label": 1
 },
 {
  "idx": 703,
  "doc": "Numpy interconversion between multidimensional and linear indexing",
  "code": "# Check\nprint 'Checking correct mapping for each particle F order'\nfor k in xrange(N):\n    ii = box_index_F[k]\n    jj = linind_F[tuple(binassign[:,k])]\n    print 'particle %d %s (%d %d)' % (k,ii == jj,ii,jj)\n\nprint 'Checking correct mapping for each particle C order'\nfor k in xrange(N):\n    ii = box_index_C[k]\n    jj = linind_C[tuple(binassign[:,k])]\n    print 'particle %d %s (%d %d)' % (k,ii == jj,ii,jj)\n",
  "label": 0
 },
 {
  "idx": 704,
  "doc": "Numpy interconversion between multidimensional and linear indexing",
  "code": "print 'Convert C-style from linear to multi'\nx = box_index_C.reshape(-1,1)\nbassign_rev_C = x / b_C % nbins \n\nprint 'Convert F-style from linear to multi'\nx = box_index_F.reshape(-1,1)\nbassign_rev_F = x / b_F % nbins\n",
  "label": 0
 },
 {
  "idx": 705,
  "doc": "two dimensional array for encryption in python",
  "code": ">>> table.data\narray([['AM', 'h', '9', 'C'],\n       ['56', 'in', '13', 'ok']], dtype=object)\n",
  "label": 0
 },
 {
  "idx": 706,
  "doc": "Pythonic way to parse preflib Orders with Ties files",
  "code": ">>> from string import maketrans\n>>> table = maketrans('{}', '()')\n>>> [x if isinstance(x, tuple) else (x,) for x in literal_eval(s.translate(table))]\n[(1,), (2,), (3, 4, 5), (6,)]\n",
  "label": 1
 },
 {
  "idx": 707,
  "doc": "Deleting consonants from a string in Python",
  "code": "'mississippi'.encode('ascii', 'ignore').translate(None, non_vowels)\n",
  "label": 0
 },
 {
  "idx": 708,
  "doc": "Deleting consonants from a string in Python",
  "code": "''.join(re.findall(r'[aeiou]',\"mississippi\"))\n",
  "label": 1
 },
 {
  "idx": 709,
  "doc": "create sublists within sublists in python",
  "code": "from types import GeneratorType\n\ndef yield_next_two(seq):\n    if not isinstance(seq, GeneratorType):\n        for i in range(0, len(seq), 2):\n            yield seq[i:i+2]\n    else:\n        while True:\n            item1 = next(seq)\n            try:\n                item2 = next(seq)\n                yield [item1, item2]\n            except StopIteration:\n                yield [item1]\n\npair_generator = yield_next_two(original)\n\nquad_generator = yield_next_two(yield_next_two(original))\n\nnext(pair_generator)\n\nnext(quad_generator)\n",
  "label": 1
 },
 {
  "idx": 710,
  "doc": "How do I store multiple copies of the same field in Django?",
  "code": "r = resource.objects.get(id=701)\nlangs = r.languages.split(';')\nfor l in language:\n    print l\n",
  "label": 0
 },
 {
  "idx": 711,
  "doc": "How to draw stacked histogram in pandas",
  "code": "filter = subset[\"fork\"] == True`\n",
  "label": 0
 },
 {
  "idx": 712,
  "doc": "From list of dictionaries to np array of arrays and vice-versa",
  "code": "import pandas as pd\nlistOfDicts = [{\"key1\":10, \"key3\":19},\n               {\"key1\":20, \"key2\":25, \"key3\":29},\n               {\"key1\":30, \"key2\":35, \"key3\":39},\n               {\"key1\":40, \"key2\":45, \"key3\":49}]\n\ndf = pd.DataFrame(listOfDicts)\nvals = df.values\nvals\n\narray([[10, nan, 19],\n       [20, 25,  29],\n       [30, 35,  39],\n       [40, 45,  49]])\n",
  "label": 0
 },
 {
  "idx": 713,
  "doc": "Python: Data validation using regular expression",
  "code": "import re\ndata = \"asdsaq2323-asds\"\nif re.match(\"^[a-zA-Z0-9*]+$\", data):\n    print \"match\"\nelse:\n    print \"no match\"\n",
  "label": 1
 },
 {
  "idx": 714,
  "doc": "Retrieving Data from MySQL in batches via Python",
  "code": "cursor.execute(\"SELECT * FROM mytable\")\nrows = cursor.fetchall()\nfor row in rows:\n   do_something_with(row)\n",
  "label": 0
 },
 {
  "idx": 715,
  "doc": "Interpolating 3d data at a single point in space (Python 2.7)",
  "code": "from scipy.interpolate import interpn\nimport numpy as np\n\n#make up a regular 3d grid \nX=np.linspace(-5,5,11)\nY=np.linspace(-5,5,11)\nZ=np.linspace(-5,5,11)\nxv,yv,zv = np.meshgrid(X,Y,Z)\n\n# make up a function   \n# see http://docs.scipy.org/doc/numpy/reference/ufuncs.html\nA = np.add(xv,np.add(yv,zv))   \n#this one is easy enough for us to know what to expect at (.5,.5,.5)\n\n# usage : interpn(points, values, xi, method='linear', bounds_error=True, fill_value=nan) \ninterpn((X,Y,Z),A,[0.5,0.5,0.5])\n",
  "label": 1
 },
 {
  "idx": 716,
  "doc": "What is the best way to compute the trace of a matrix product in numpy?",
  "code": "from numpy.core.umath_tests import inner1d\n\nm, n = 1000, 500\n\na = np.random.rand(m, n)\nb = np.random.rand(n, m)\n\n# They all should give the same result\nprint np.trace(a.dot(b))\nprint np.sum(a*b.T)\nprint np.sum(inner1d(a, b.T))\n\n%timeit np.trace(a.dot(b))\n10 loops, best of 3: 34.7 ms per loop\n\n%timeit np.sum(a*b.T)\n100 loops, best of 3: 4.85 ms per loop\n\n%timeit np.sum(inner1d(a, b.T))\n1000 loops, best of 3: 1.83 ms per loop\n",
  "label": 1
 },
 {
  "idx": 717,
  "doc": "Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__",
  "code": "import contextlib\n\nclass context_mixin:\n    def __enter__(self):\n         self.__context = self.context()\n         return self.__context.__enter__()\n    def __exit__(self, *args):\n         return self.__context.__exit__(*args)\n\nclass class_a(context_mixin):\n    @contextlib.contextmanager\n    def context(self):\n         print('class_a enter')\n         try:\n             yield self\n         finally:\n             print('class_a exit')\n\nclass class_b(class_a):\n    @contextlib.contextmanager\n    def context(self):\n        with super().context():\n            print('class_b enter')\n            try:\n                yield self\n            finally:\n                print('class_b exit')\n",
  "label": 1
 },
 {
  "idx": 718,
  "doc": "Multiple Forms and Formsets in CreateView",
  "code": "class SonInline(ModelForm):\n    model = Son\n\nclass FatherForm(ModelForm):\n    model = Father\n",
  "label": 0
 },
 {
  "idx": 719,
  "doc": "Check if all elements in nested iterables evaluate to False",
  "code": ">>> x = [(None, None, None), (None, None, None), (None, None, None)]\n>>> not any(any(inner) for inner in x)\nTrue\n>>> x = [(None, None, None), (None, None, None), (None, None, 1)]\n>>> not any(any(inner) for inner in x)\nFalse\n",
  "label": 1
 },
 {
  "idx": 720,
  "doc": "How do I obtain the reference of a getter/setter method created through @property in Python?",
  "code": "someWidget.valueChanged.connect(Player.health.fset.__get__(player))\n",
  "label": 0
 },
 {
  "idx": 721,
  "doc": "python - remove empty lines from end and beginning of string",
  "code": "def strip_empty_lines(s):\n    lines = s.splitlines()\n    while lines and not lines[0].strip():\n        lines.pop(0)\n    while lines and not lines[-1].strip():\n        lines.pop()\n    return '\\n'.join(lines)\n",
  "label": 1
 },
 {
  "idx": 722,
  "doc": "cosine similarity between two words in a list",
  "code": "def word2vec(word):\n    from collections import Counter\n    from math import sqrt\n\n    # count the characters in word\n    cw = Counter(word)\n    # precomputes a set of the different characters\n    sw = set(cw)\n    # precomputes the \"length\" of the word vector\n    lw = sqrt(sum(c*c for c in cw.values()))\n\n    # return a tuple\n    return cw, sw, lw\n\ndef cosdis(v1, v2):\n    # which characters are common to the two words?\n    common = v1[1].intersection(v2[1])\n    # by definition of cosine distance we have\n    return sum(v1[0][ch]*v2[0][ch] for ch in common)/v1[2]/v2[2]\n",
  "label": 1
 },
 {
  "idx": 723,
  "doc": "How to remove all \"document.write(' ');\" with beautifulsoup",
  "code": "import re\n\ndata = \"\"\"document.write('<table>');\ndocument.write('\n <tr>\n  <td>\n   <span class=\"prod\">\n   some text\n   </span>\n  </td>\n  ');\ndocument.write('\n  <td>\n   <span class=\"prod\">\n    7.70.022\n   </span>\n  </td>\n </tr>\n ');\ndocument.write('</table>');\"\"\"\n\npattern = re.compile(r\"document\\.write\\('\\n?([^']*?)(?:\\n\\s*)?'\\);\")\ndata = pattern.sub('\\g<1>', data)\nprint data\n",
  "label": 1
 },
 {
  "idx": 724,
  "doc": "Get list of column names for columns that contain negative values",
  "code": ">>> df < 0\n    fld1   fld2   fld3   fld4   fld5   fld6   fld7\n0  False  False   True  False  False  False  False\n1  False  False  False  False  False   True  False\n2  False  False  False  False  False  False  False\n3   True   True  False  False  False  False  False\n4  False  False  False  False  False  False  False\n5   True  False  False  False  False  False  False\n6  False  False   True  False  False  False  False\n7  False  False  False  False  False  False  False\n8  False  False  False  False  False   True  False\n9  False  False  False  False  False  False  False\n>>> (df < 0).any()\nfld1     True\nfld2     True\nfld3     True\nfld4    False\nfld5    False\nfld6     True\nfld7    False\ndtype: bool\n",
  "label": 0
 },
 {
  "idx": 725,
  "doc": "Gurobi, How to change a continuous variable to a binary variable",
  "code": "x = m.addVar(lb=0, ub=1, vtype=GRB.CONTINUOUS)\n",
  "label": 0
 },
 {
  "idx": 726,
  "doc": "Gurobi, How to change a continuous variable to a binary variable",
  "code": "import gurobipy  as grb\nGRB = grb.GRB\nm = grb.Model()\n\nx = m.addVar(0.0, 1.0, vtype=GRB.CONTINUOUS)\ny = m.addVar(0.0, 1.0, vtype=GRB.CONTINUOUS)\nm.update()\n# add constraints so that y >= |x - 0.75|\nm.addConstr(y >= x-0.75)\nm.addConstr(y >= 0.75 - x)\nm.setObjective(y)\nm.update()\nm.optimize()\nprint x.X\n# 0.75\nx.vtype=GRB.BINARY\nm.optimize()\nprint x.X\n# 1.0\n",
  "label": 1
 },
 {
  "idx": 727,
  "doc": "Map function and input function parameters",
  "code": ">>> import timeit\n>>> L = range(10)\n>>> def foo(a, b): pass\n... \n>>> def p(b): return foo(1, b)\n... \n>>> timeit.timeit('map(p, L)', 'from __main__ import foo, L; from functools import partial; p = partial(foo, 1)')\n3.0008959770202637\n>>> timeit.timeit('map(p, L)', 'from __main__ import foo, L; p = lambda b: foo(1, b)')\n3.8707590103149414\n>>> timeit.timeit('map(p, L)', 'from __main__ import foo, L, p')\n3.9136409759521484\n",
  "label": 0
 },
 {
  "idx": 728,
  "doc": "Merging repeated items in a list into a python dictionary",
  "code": ">>> from collections import defaultdict\n>>> data = (['aaron distilled ', 'alcohol', '5'], \n... ['aaron distilled ', 'gin', '2'], \n... ['aaron distilled ', 'beer', '6'], \n... ['aaron distilled ', 'vodka', '9'], \n... ['aaron evicted ', 'owner', '1'], \n... ['aaron evicted ', 'bum', '1'], \n... ['aaron evicted ', 'deadbeat', '1'])\n>>> result = defaultdict(list)\n>>> for key, *values in data:\n...    result[key].extend(values)\n... \n>>> result\ndefaultdict(<class 'list'>, {'aaron distilled ': ['alcohol', '5', 'gin', '2', 'beer', '6', 'vodka', '9'], 'aaron evicted ': ['owner', '1', 'bum', '1', 'deadbeat', '1']})\n",
  "label": 1
 },
 {
  "idx": 729,
  "doc": "Array from interpolated plot in python",
  "code": "from scipy.interpolate import interp2d\nimport numpy as np\n\nx = 50\ny = 150\n\na = np.random.uniform(0,10,(y, x))\nb = interp2d(np.arange(x), np.arange(y), a)\n",
  "label": 0
 },
 {
  "idx": 730,
  "doc": "Traversing a \"list\" tree and get the type(item) list with same structure in python?",
  "code": "def traverse(o, tree_types=(list, tuple)):\n    if isinstance(o, tree_types):\n        for value in o:\n            for subvalue in traverse(value):\n                yield subvalue\n    else:\n        yield o\n\ndata = [(1,1,(1,1,(1,\"1\"))),(1,1,1),(1,),1,(1,(1,(\"1\",)))]\nprint list(traverse(data))\n# prints [1, 1, 1, 1, 1, '1', 1, 1, 1, 1, 1, 1, 1, '1']\n\nfor value in traverse(data):\n    print repr(value)\n# prints\n# 1\n# 1\n# 1\n# 1\n# 1\n# '1'\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# '1'\n",
  "label": 0
 },
 {
  "idx": 731,
  "doc": "What's the most efficient way to accumulate dataframes in pyspark?",
  "code": "combined = reduce(DataFrame.unionAll, transformed_dfs)\nexprs = [max(c).alias(c) for c in combined.columns[1:]]\nresult = combined.repartition(col(\"Key\")).groupBy(col(\"Key\")).agg(*exprs)\n",
  "label": 0
 },
 {
  "idx": 732,
  "doc": "Python removing duplicates in list and 1==1.0 True",
  "code": "In [3]: [value for _, value in frozenset((type(x), x) for x in l)]\nOut[3]: [1.0, '1', 1, 'dsa', 'asd']\n",
  "label": 1
 },
 {
  "idx": 733,
  "doc": "Printing row and columns in reverse",
  "code": "(0, 0, 4, 0, 0, 4, 4, 0)\n(3, 3, 2, 1, 4, 6, 3, 0)\n(1, 4, 3, 2, 6, 9, 5, 0)\n(1, 5, 2, 4, 9, 11, 6, 0)\n(6, 11, 3, 0, 11, 14, 3, 0)\n(3, 14, 4, 0, 14, 18, 4, 0)\n(7, 21, 2, 0, 21, 23, 2, 3)\n(5, 26, 4, 0, 26, 30, 4, 3)\n(2, 28, 5, 2, 30, 35, 7, 0)\n(4, 32, 3, 3, 35, 38, 6, 0)\n(1, 33, 4, 5, 38, 42, 9, 0)\n",
  "label": 0
 },
 {
  "idx": 734,
  "doc": "Speeding up linear interpolation of many pixel locations in NumPy",
  "code": "tic = time.time()\nnew_result = np.zeros(im.shape)\ncoords = np.array([yy,xx])\nfor d in range(im.shape[2]):\n    ndimage.map_coordinates(im[:,:,d],\n                            coords,order=1,\n                            prefilter=False,\n                            output=new_result[:,:,d] )\ntoc = time.time()\n\nprint \"interpolation time:\",toc-tic\n",
  "label": 1
 },
 {
  "idx": 735,
  "doc": "How to store callback methods?",
  "code": "class WeakCallback (object):\n    \"\"\"A Weak Callback object that will keep a reference to\n    the connecting object with weakref semantics.\n\n    This allows object A to pass a callback method to object S,\n    without object S keeping A alive.\n    \"\"\"\n    def __init__(self, mcallback):\n        \"\"\"Create a new Weak Callback calling the method @mcallback\"\"\"\n        obj = mcallback.im_self\n        attr = mcallback.im_func.__name__\n        self.wref = weakref.ref(obj, self.object_deleted)\n        self.callback_attr = attr\n        self.token = None\n\n    def __call__(self, *args, **kwargs):\n        obj = self.wref()\n        if obj:\n            attr = getattr(obj, self.callback_attr)\n            attr(*args, **kwargs)\n        else:\n            self.default_callback(*args, **kwargs)\n\n    def default_callback(self, *args, **kwargs):\n        \"\"\"Called instead of callback when expired\"\"\"\n        pass\n\n    def object_deleted(self, wref):\n        \"\"\"Called when callback expires\"\"\"\n        pass\n",
  "label": 1
 },
 {
  "idx": 736,
  "doc": "Truncate the length of a Python dictionary",
  "code": "OrderedDict(itertools.islice(d.iteritems(), 500))\n",
  "label": 1
 },
 {
  "idx": 737,
  "doc": "Using Py_BuildValue() to create a list of tuples in C",
  "code": "const Py_ssize_t tuple_length = 4;\nconst unsigned some_limit = 4;\n\nPyObject *my_list = PyList_New(0);\nif(my_list == NULL) {\n    // ...\n}\n\nfor(unsigned i = 0; i < some_limit; i++) {\n    PyObject *the_tuple = PyTuple_New(tuple_length);\n    if(the_tuple == NULL) {\n        // ...\n    }\n\n    for(Py_ssize_t j = 0; i < tuple_length; i++) {\n        PyObject *the_object = PyLong_FromSsize_t(i * tuple_length + j);\n        if(the_object == NULL) {\n            // ...\n        }\n\n        PyTuple_SET_ITEM(the_tuple, j, the_object);\n    }\n\n    if(PyList_Append(my_list, the_tuple) == -1) {\n        // ...\n    }\n}\n",
  "label": 1
 },
 {
  "idx": 738,
  "doc": "Pyramid authorization for stored items",
  "code": "root                       (Root)\n|- foos                    (FooContainer)\n|  `- {obj}                (Foo)\n`- bars                    (BarContainer)\n   `- {obj}                (Bar)\n",
  "label": 0
 },
 {
  "idx": 739,
  "doc": "Add django model manager code-completion to Komodo",
  "code": "class Site(models.Model):\n    name = models.CharField(max_length=200)\n    prefix = models.CharField(max_length=1)\n    secret = models.CharField(max_length=255)\n\n    objects = manager.Manager()\n\n    def __unicode__(self):\n        return self.name\n",
  "label": 0
 },
 {
  "idx": 740,
  "doc": "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide",
  "code": "na_map = {\"Red\": 123, \"Green\": 456, \"Blue\": 789}\nmask = df.B.isnull()\n",
  "label": 0
 },
 {
  "idx": 741,
  "doc": "Set global constant cross all the view",
  "code": "CONSTANT_NAME = None\n",
  "label": 0
 },
 {
  "idx": 742,
  "doc": "Make a number more probable to result from random",
  "code": "if x >= 1.0:\n    x = x - 0.5\n",
  "label": 0
 },
 {
  "idx": 743,
  "doc": "Using regex to find a string starting with /team/ and ending with /Euro_2012",
  "code": "re.findall(r'/team/[\\w\\d%.~+-/]*?/Euro_2012', inputtext)\n",
  "label": 1
 },
 {
  "idx": 744,
  "doc": "Obtaining Client IP address from a WSGI app using Eventlet",
  "code": "def get_client_address(environ):\n    try:\n        return environ['HTTP_X_FORWARDED_FOR'].split(',')[-1].strip()\n    except KeyError:\n        return environ['REMOTE_ADDR']\n",
  "label": 0
 },
 {
  "idx": 745,
  "doc": "Getting Variable from Applescript and using in Python",
  "code": "--make sure to escape properly if needed\nset pythonvar to \"whatever\"\nset outputvar to (do shell script \"python '/path/to/script' '\" & pythonvar & \"'\")\n",
  "label": 1
 },
 {
  "idx": 746,
  "doc": "Python Matplotlib: plotting feet and inches",
  "code": "loc = ticker.MultipleLocator(4./12)\nax.yaxis.set_major_locator(loc)\n",
  "label": 0
 },
 {
  "idx": 747,
  "doc": "python, zip:Discard extra elements",
  "code": ">>> write_cols(data,3)\na   b   c\nd   e   f\ng   h\n",
  "label": 0
 },
 {
  "idx": 748,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [345]: y.mean(axis=1).mean(axis=-1)\nOut[345]: \narray([[  3.5,   5.5,   7.5],\n       [ 15.5,  17.5,  19.5]])\n",
  "label": 0
 },
 {
  "idx": 749,
  "doc": "Python-Flask: Pass data to machine learning python script and get results back",
  "code": "<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n<script src=\"../static/script.js\"></script>\n</script>\n</head>\n\n<body>\n    <h1>Calculation</h1>\n    <h1>Test Page</h1>\n    <input id=\"user-input\" placeholder=\"Text to be analyzed\"></input>\n    <p id=\"results\">Results will go here<p>\n    <button id=\"submit\">Submit</button>\n</body>\n</html>\n",
  "label": 0
 },
 {
  "idx": 750,
  "doc": "Drawing a clamped uniform cubic B-spline using Cairo",
  "code": "import cairo\n\nsurface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 600, 400)\nctx = cairo.Context(surface)\n\npoints = [(100,100), (200,100), (200,200), (100,200), (100,400), (300,400)]\nspline = CubicBSpline(points).clamped()\n\nctx.set_source_rgb(0., 0., 1.)\nctx.set_line_width(5)\nBSplineDrawer(ctx).draw(spline)\n",
  "label": 0
 },
 {
  "idx": 751,
  "doc": "Python - Twisted, Proxy and modifying content",
  "code": "from twisted.python import log\nfrom twisted.web import http, proxy\n\nclass ProxyClient(proxy.ProxyClient):\n    \"\"\"Mangle returned header, content here.\n\n    Use `self.father` methods to modify request directly.\n    \"\"\"\n    def handleHeader(self, key, value):\n        # change response header here\n        log.msg(\"Header: %s: %s\" % (key, value))\n        proxy.ProxyClient.handleHeader(self, key, value)\n\n    def handleResponsePart(self, buffer):\n        # change response part here\n        log.msg(\"Content: %s\" % (buffer[:50],))\n        # make all content upper case\n        proxy.ProxyClient.handleResponsePart(self, buffer.upper())\n\nclass ProxyClientFactory(proxy.ProxyClientFactory):\n    protocol = ProxyClient\n\nclass ProxyRequest(proxy.ProxyRequest):\n    protocols = dict(http=ProxyClientFactory)\n\nclass Proxy(proxy.Proxy):\n    requestFactory = ProxyRequest\n\nclass ProxyFactory(http.HTTPFactory):\n    protocol = Proxy\n",
  "label": 0
 },
 {
  "idx": 752,
  "doc": "Parsing bits from a 128 byte block of hex in Python",
  "code": "string[start*2:(end+1)*2]\n",
  "label": 1
 },
 {
  "idx": 753,
  "doc": "take column headers only from ASCII file in python",
  "code": "In [83]:\nimport io\nimport pandas as pd\nt=\"\"\"index,col1,col2,col3\n0,1,2,3\"\"\"\npd.read_csv(io.StringIO(t), nrows=1).columns\n\nOut[83]:\nIndex(['index', 'col1', 'col2', 'col3'], dtype='object')\n",
  "label": 1
 },
 {
  "idx": 754,
  "doc": "How to Search data from a list of Key-Value pair that it is in list or not",
  "code": "a = [('X', '63.658'), ('Y', '21.066'), ...]\n\nprocessed = {}\n\nfor char, value in data:\n    if char not in processed:\n        processed[char] = []\n    processed[char].append(value)\n",
  "label": 0
 },
 {
  "idx": 755,
  "doc": "How to Search data from a list of Key-Value pair that it is in list or not",
  "code": "import string\n\nfor char in string.ascii_uppercase:\n    if char not in processed:\n        print(\"{0} is empty...\".format(char))\n    else:\n        print(\"{0}: min={1}, max={2}\".format(char, \n                                             min(processed[char]),\n                                             max(processed[char])))\n",
  "label": 0
 },
 {
  "idx": 756,
  "doc": "Combine multiple heatmaps in matplotlib",
  "code": "pcolor(D2-D1)\n",
  "label": 1
 },
 {
  "idx": 757,
  "doc": "Following users like twitter in Django, how would you do it?",
  "code": "In [1]: tim, c = User.objects.get_or_create(username='tim')\n\nIn [2]: chris, c = User.objects.get_or_create(username='chris')\n\nIn [3]: tim.userprofile.follows.add(chris.userprofile) # chris follows tim\n\nIn [4]: tim.userprofile.follows.all() # list of userprofiles of users that tim follows\nOut[4]: [<UserProfile: chris>]\n\nIn [5]: chris.userprofile.followed_by.all() # list of userprofiles of users that follow chris\nOut[5]: [<UserProfile: tim>]\n",
  "label": 0
 },
 {
  "idx": 758,
  "doc": "Updating a table from another table with multiple columns in sqlalchemy",
  "code": "In[52]: print(table.update().values(col1 = select_query.with_only_columns([table2.c.col1]), col2 = select_query.with_only_columns([table2.c.col2])))\nUPDATE table SET a=(SELECT tweet.id \nFROM tweet \nWHERE tweet.id IS NOT NULL), b=(SELECT tweet.user_id \nFROM tweet \nWHERE tweet.id IS NOT NULL)\n",
  "label": 0
 },
 {
  "idx": 759,
  "doc": "how to dynamically read a specific cell value in a table using selenium and python",
  "code": "\nfrom selenium import webdriver\nimport re\n\ndriver = webdriver.PhantomJS()\ndriver.set_window_size(1120, 550) #For bug\ndriver.get(\"http://localhost:8000\")\n\npattern = r\"\"\"\n    \\s*         #Match whitespace, 0 or more times, followed by...\n    (\\d+)       #a digit, one or more times, captured, followed by\n    \\s*         #whitespace, 0 or more times, followed by...\n    [|]         #vertical bar, followed by...\n    \\s*         #whitespace, 0 or more times, followed by...\n    \\d+         #a digit, one or more times\n\"\"\"\nregex = re.compile(pattern, re.X)\n\ntable = driver.find_element_by_id('ambassadors-for-assignment')\ntrs = table.find_elements_by_tag_name('tr')\n\nfor tr in trs:\n    tds = tr.find_elements_by_tag_name('td')\n\n    for td in tds:\n        match_obj = re.search(regex, text)\n\n        if match_obj and match_obj.group(1) == '0':\n            success_button = tr.find_element_by_css_selector('button.btn-success')\n            print success_button.get_attribute('type')\n            success_button.click()\n",
  "label": 1
 },
 {
  "idx": 760,
  "doc": "Better logging system for entire package",
  "code": "logger = logging.getLogger(__name__)\n",
  "label": 0
 },
 {
  "idx": 761,
  "doc": "Combine multidimensional array by group python",
  "code": "from itertools import groupby\nfrom operator import itemgetter\n\nout = []\n\nfor _, v in groupby(sorted(data, key=itemgetter(0, 3)),key=itemgetter(0,3)):\n    v = list(v)    \n    ips = \", \".join([sub[1] for sub in v])\n    tmes = \", \".join([sub[2] for sub in v])\n    out.append([v[0][0], ips, tmes, v[0][-1]])\n\nprint(out)\n\n['blah', '172.18.74.149, 172.18.74.146', '11:18:33.846, 12:27:38.985', '2015_08_12'], \n['test', '172.18.74.146, 172.18.74.148', '13:05:43.834, 12:27:39.016', '2015_08_07']]\n",
  "label": 1
 },
 {
  "idx": 762,
  "doc": "Using other keys for the waitKey() function of opencv",
  "code": "import cv2\nimg = cv2.imread('sof.jpg') # load a dummy image\nwhile(1):\n    cv2.imshow('img',img)\n    k = cv2.waitKey(33)\n    if k==27:    # Esc key to stop\n        break\n    elif k==-1:  # normally -1 returned,so don't print it\n        continue\n    else:\n        print k # else print its value\n",
  "label": 1
 },
 {
  "idx": 763,
  "doc": "python breaking numbers in to 10s 5s 1s and .1s",
  "code": "values = [('tens', 10), ('fives', 5), ('ones', 1), ('tenths', 0.1)]\n\n\ndef get_digits(num):\n    num = int(num * 10)\n    num = float(num) / 10\n\n    output_dict = {}\n    for place, value in values:\n        output_dict[place] = num // value\n        num = num % value\n    return(output_dict)\n\nget_digits(123.456)\n",
  "label": 1
 },
 {
  "idx": 764,
  "doc": "python breaking numbers in to 10s 5s 1s and .1s",
  "code": "{'fives': 0.0, 'tens': 12.0, 'tenths': 4.0, 'ones': 3.0}\n",
  "label": 0
 },
 {
  "idx": 765,
  "doc": "Parallelize DictVectorizer Creation",
  "code": ">>> scipy.sparse.vstack([X1, X2]).toarray()\narray([[ 1.,  2.,  0.,  0.],\n       [ 3.,  0.,  1.,  0.]])\n",
  "label": 0
 },
 {
  "idx": 766,
  "doc": "Python: Find in list",
  "code": "matches = [x for x in lst if fulfills_some_condition(x)]\nmatches = (x for x in lst if x > 6)\n",
  "label": 1
 },
 {
  "idx": 767,
  "doc": "How to do a groupby of a list of lists",
  "code": "import itertools as it\n\na = [('2013-01-04', u'crid2557171372', 1),\n     ('2013-01-04', u'crid9904536154', 719677),\n     ('2013-01-04', u'crid7990924609', 577352),\n     ('2013-01-04', u'crid7990924609', 399058),\n     ('2013-01-04', u'crid9904536154', 385260),\n     ('2013-01-04', u'crid2557171372', 78873)]\n\nb = []\nfor k,v in it.groupby(sorted(a, key=lambda x: x[:2]), key=lambda x: x[:2]):\n    b.append(k + (sum(x[2] for x in v),))\n",
  "label": 1
 },
 {
  "idx": 768,
  "doc": "Applying python decorators to methods in a class",
  "code": "import inspect\n\ndef decallmethods(decorator, prefix='test_'):\n  def dectheclass(cls):\n    for name, m in inspect.getmembers(cls, inspect.ismethod):\n      if name.startswith(prefix):\n        setattr(cls, name, decorator(m))\n    return cls\n  return dectheclass\n",
  "label": 1
 },
 {
  "idx": 769,
  "doc": "setDefault for Nested dictionary in python",
  "code": "import collections\nclass Foo(object):\n    def __init__(self):\n        self.CompleteAnalysis=collections.defaultdict(\n            lambda: collections.defaultdict(list))\n\n    def getFilledFields(self,sentence):\n        field, field_value, field_date = sentence.split('|')\n        field_value = field_value.strip('\\n')\n        field_date = field_date.strip('\\n')\n        self.CompleteAnalysis[field]['date'].append(field_date)\n        self.CompleteAnalysis[field]['value'].append(field_value) \n\nfoo=Foo()\nfoo.getFilledFields('A|1|2000-1-1')\nfoo.getFilledFields('A|2|2000-1-2')\nprint(foo.CompleteAnalysis['A']['date'])\n# ['2000-1-1', '2000-1-2']\n\nprint(foo.CompleteAnalysis['A']['value'])\n# ['1', '2']\n",
  "label": 1
 },
 {
  "idx": 770,
  "doc": "Double helix generating algorithm",
  "code": "   *********  #########        \n  *********      #########     \n *********         #########   \n *********           ######### \n   *********         ######### \n     *********       ######### \n       *********   #########   \n          ****** #########     \n              #########        \n           ######### ****      \n        #########  *********   \n     #########      *********  \n   #########         ********* \n #########           ********* \n #########         *********   \n #########       *********     \n   #########   *********       \n     ###### *********          \n        *********              \n      ********* ####           \n   *********  #########        \n  *********      #########     \n *********         #########   \n *********           ######### \n   *********         ######### \n     *********       ######### \n       *********   #########   \n          ****** #########     \n              #########        \n",
  "label": 0
 },
 {
  "idx": 771,
  "doc": "Python: Getting all the items out of a `threading.local`",
  "code": "Thread's local is {'ok': 'hi'}\nThread's local is {'ok': 'HMM'}\n",
  "label": 0
 },
 {
  "idx": 772,
  "doc": "How do I add a method to a class from a third-party Python module without editing the original module",
  "code": "from mpl_toolkits.basemap import Basemap\n\n\ndef drawmlat(self, arg1, arg2, kw=something):\n    pass\n\nBasemap.drawmlat = drawmlat\n",
  "label": 1
 },
 {
  "idx": 773,
  "doc": "How do you @rpc _returns polymorphic types in spyne?",
  "code": "class SomeService(ServiceBase):\n    @rpc(Unicode(values=['A', 'B', 'C']), _returns=A)\n    def get_some_a(self, type_name):\n        # (...)\n",
  "label": 0
 },
 {
  "idx": 774,
  "doc": "How do you @rpc _returns polymorphic types in spyne?",
  "code": "class SomeService(ServiceBase):\n    @rpc(Unicode(values=['A', 'B', 'C']), _returns=GenericA)\n    def get_some_a(self, type_name):\n        # (...)\n",
  "label": 0
 },
 {
  "idx": 775,
  "doc": "How to handle multiple user type in Django",
  "code": "AUTH_PROFILE_MODULE = 'accounts.UserProfile'\n",
  "label": 0
 },
 {
  "idx": 776,
  "doc": "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?",
  "code": "class Weapon(object):\n\n    def __init__(self, name, beats):\n        self.name = name\n        self.beats = beats\n\n    def __gt__(self, other):\n        return other.name in self.beats\n",
  "label": 1
 },
 {
  "idx": 777,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "lambda x: list(x)[-1]\n",
  "label": 0
 },
 {
  "idx": 778,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "grid = np.logical_and(rev_count[None, :] >= revbin[:-1, None], rev_count[None, :] < revbin[1:, None])\n",
  "label": 0
 },
 {
  "idx": 779,
  "doc": "Adding a simple value to a string",
  "code": "final = path2 + w\n",
  "label": 1
 },
 {
  "idx": 780,
  "doc": "Embedding IronPython in a WinForms app and interrupting execution",
  "code": "var engine = Python.CreateEngine();\nbool aborted = false;\ntry {\n    engine.Execute(/* whatever */);\n} catch(ThreadAbortException tae) {\n    if(tae.ExceptionState is Microsoft.Scripting.KeyboardInterruptException) {\n        Thread.ResetAbort();\n        aborted = true;\n    } else { throw; }\n}\n\nif(aborted) {\n    // this is application-specific\n}\n",
  "label": 0
 },
 {
  "idx": 781,
  "doc": "Efficiently displaying a stacked bar graph",
  "code": "import numpy as np\nfrom itertools import izip\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\n# this requires you to know a head of time how many times you have\nlen = 10\nd = defaultdict(lambda : np.zeros(len, dtype=np.bool)) # save space!\nwith open('test.txt', 'r') as infile:\n    infile.next() # skip the header line\n    for line in infile:\n        tokens = line.rstrip().split(\" \")\n        time = int(tokens[0]) # get the time which is the first token\n        for e in tokens[1:]:  # loop over the rest\n            if len(e) == 0:\n                pass\n            d[e][time] = True\n\nfor k in d:\n    d[k] = np.cumsum(d[k])\n",
  "label": 1
 },
 {
  "idx": 782,
  "doc": "Converting coordinate tuple information to numpy arrays",
  "code": "data = np.loadtxt('data.txt', dtype=float, delimiter=',')\n",
  "label": 0
 },
 {
  "idx": 783,
  "doc": "Converting coordinate tuple information to numpy arrays",
  "code": "Nx1 = np.unique(data[:, 0]).shape[0]\nNx2 = np.unique(data[:, 1]).shape[0]\nNx3 = np.unique(data[:, 2]).shape[0]\n",
  "label": 0
 },
 {
  "idx": 784,
  "doc": "setting unique abbreviation for every column in python",
  "code": "imande = immediate annuities definition\nadgr = ad group\nfiin = fixed income\n40ro = 401k rollover\nresy = retirment system\nvaan = variable annuity\ndevaan = deferred variable annuities\nrein = retirement income\nimvaan = immediate variable annuities\nfo = forbes.com\nimfian = immediate fixed annuities\ndean = deferred annuities\nanca = annuity calculator\ncuanra = current annuity rates\nannca = annuities calculator\nonfipl = online financial planner\naian = aig annuities\nande = annuity definition\nanfo = annuity formula\ncefipl = certified financial planner\ntadean = tax deferred annuity\ndeanca = deferred annuies calculator\nanex = annuities explained\nanta = annuity tables\ndeanra = deferred annuity rates\n",
  "label": 0
 },
 {
  "idx": 785,
  "doc": "NumPy map calculation depending on the indices",
  "code": ">>> x, y = np.meshgrid(np.linspace(0, 1, 5), np.linspace(0, 10, 3))\n>>> x\narray([[ 0.  ,  0.25,  0.5 ,  0.75,  1.  ],\n       [ 0.  ,  0.25,  0.5 ,  0.75,  1.  ],\n       [ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]])\n>>> y\narray([[  0.,   0.,   0.,   0.,   0.],\n       [  5.,   5.,   5.,   5.,   5.],\n       [ 10.,  10.,  10.,  10.,  10.]])\n",
  "label": 1
 },
 {
  "idx": 786,
  "doc": "NumPy map calculation depending on the indices",
  "code": ">>> x\narray([[0, 0, 0, 0, 0],\n       [1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2],\n       [3, 3, 3, 3, 3]])\n>>> y\narray([[0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4]])\n",
  "label": 0
 },
 {
  "idx": 787,
  "doc": "Passing multple files with asterisk to python shell in Windows",
  "code": "python.exe -c \"import sys; print sys.argv[1:]\" *.txt\n",
  "label": 0
 },
 {
  "idx": 788,
  "doc": "Python string extraction from Subprocess",
  "code": "import subprocess, re\n\nRE_MAC = re.compile(r'\\bHWaddr\\s+(((?(2):|)[\\dA-Fa-f]{2}){6})\\b')\nmatch = RE_MAC.search(subprocess.check_output([\"ifconfig\", \"wlan0\"]))\nif match:\n    mac_addr = match.group(1)\n",
  "label": 1
 },
 {
  "idx": 789,
  "doc": "Making a tree shape.",
  "code": "def tree(head, stem):\n    #for head\n    for i in xrange(1, head+1, 2):\n        print '{:^{}}'.format('*'*i, head)\n    #for trunk\n    for _ in xrange(3):\n        print '{:^{}}'.format('*'*stem, head)\n...         \n>>> tree(10, 3)\n    *     \n   ***    \n  *****   \n *******  \n********* \n   ***    \n   ***    \n   ***    \n>>> tree(5, 1)\n  *  \n *** \n*****\n  *  \n  *  \n  *  \n",
  "label": 1
 },
 {
  "idx": 790,
  "doc": "String formatting without index in python2.6",
  "code": "import tokenize\nfrom itertools import count\nimport re\n\nwith open('your_file') as fin:\n    output = []\n    tokens = tokenize.generate_tokens(fin.readline)\n    for num, val in (token[:2] for token in tokens):\n        if num == tokenize.STRING:\n            val = re.sub('{}', lambda L, c=count(): '{{{0}}}'.format(next(c)), val)\n        output.append((num, val))\n\nprint tokenize.untokenize(output) # write to file instead...\n",
  "label": 1
 },
 {
  "idx": 791,
  "doc": "How to get the caller class name inside a function of another class in python?",
  "code": "import inspect\n\nclass A:\n  def a(self):\n    print(\"A.a()\")\n    B().b()\n\nclass B:\n  def b(self):\n    print(\"B.b()\")\n    stack = inspect.stack()\n    the_class = stack[1][0].f_locals[\"self\"].__class__\n    the_method = stack[1][0].f_code.co_name\n    print(\"  I was called by {}.{}()\".format(str(the_class), the_method))\n\nA().a()\n",
  "label": 1
 },
 {
  "idx": 792,
  "doc": "Combine dict with same keys into one dict with list",
  "code": "import MySQLdb\n\ndef get_authors_with_articles(connection):\n    cursor = connection.cursor()\n\n    authors = {}\n    for author in cursor.execute('SELECT * FROM Authors'):\n        # Initialize empty article list that will be popluated with the next select\n        author['articles'] = []\n        authors[author['id']] = author\n\n    for article in cursor.execute('SELECT * FROM Articles').fetchall():\n        # Fetch and delete redundant information\n        author_id = article['authorId']\n        del article['authorId']\n\n        authors[author_id]['articles'].append(article)\n\n    return list(authors.values())\n\n\nif __name__ == '__main__':\n    connection = MySQLdb.connect(\n        mysql_host,\n        mysql_user,\n        mysql_pass,\n        mysql_base,\n        cursorclass=MySQLdb.cursors.DictCursor\n    )\n    print(get_authors_with_articles(connection))\n",
  "label": 1
 },
 {
  "idx": 793,
  "doc": "Padding or truncating a Python list",
  "code": "def trp(l, n):\n    return l[:n] + [0]*(n-len(l))\n\ntrp([], 4)\n[0, 0, 0, 0]\n\ntrp([1,2,3,4], 4)\n[1, 2, 3, 4]\n\ntrp([1,2,3,4,5], 4)\n[1, 2, 3, 4]\n\ntrp([1,2,3], 4)\n[1, 2, 3, 0]\n",
  "label": 1
 },
 {
  "idx": 794,
  "doc": "Filling gaps for cumulative sum with Pandas",
  "code": "In [11]: df.pivot_table(values=\"incoming\", index=\"month\", columns=\"goods\", aggfunc=\"sum\")\nOut[11]:\ngoods   a   b   c\nmonth\n1       0  30 NaN\n2      30 NaN  10\n3     NaN  70 NaN\n5     NaN  40  50\n6      20 NaN NaN\n",
  "label": 0
 },
 {
  "idx": 795,
  "doc": "More pythonic way to find a complementary DNA strand",
  "code": "import string\ndef __init__(self, ...):\n    self.trans = string.maketrans('TAGCtagc', 'ATCGATCG')\n\ndef complementary_strand(self, strand):\n    return strand.translate(self.trans)\n",
  "label": 1
 },
 {
  "idx": 796,
  "doc": "Convert excel or csv file to pandas multilevel dataframe",
  "code": "In [147]: df[['Measurements', 'Error']] = df[['Measurements', 'Error']].shift(-1)\n\nIn [148]: df[['SampleID', 'OtherInfo', 'Notes']] = df[['SampleID', 'OtherInfo', 'Notes']].fillna()\n\nIn [150]: df = df.dropna()\n\nIn [151]: df\nOut[151]:\n  SampleID OtherInfo  Measurements  Error          Notes\n0  sample1     stuff            36      6     more stuff\n1  sample1     stuff            26      7     more stuff\n2  sample1     stuff            37      8     more stuff\n4  sample2  newstuff            25      6  lots of stuff\n5  sample2  newstuff            27      7  lots of stuff\n",
  "label": 0
 },
 {
  "idx": 797,
  "doc": "Convert excel or csv file to pandas multilevel dataframe",
  "code": "In [145]: data = \"\"\"\\\nSampleID    OtherInfo    Measurements    Error    Notes                   \nsample1     stuff                                 more stuff              \n                         36              6\n                         26              7\n                         37              8\nsample2     newstuff                              lots of stuff           \n                         25              6\n                         27              7\n\"\"\"\n\nIn [146]: df = pandas.read_fwf(StringIO(data), widths=[12, 13, 14, 9, 15])\n",
  "label": 0
 },
 {
  "idx": 798,
  "doc": "How to implement man-like help page in python(python shell already has it)",
  "code": "import sys\nimport pydoc\n\nplainSysDoc = pydoc.plain((pydoc.render_doc(sys)))\nprint plainSysDoc\n",
  "label": 1
 },
 {
  "idx": 799,
  "doc": "How to sort python dictionary based on similar values and keys?",
  "code": "d = {2: 1, 27: 28, 56: 28, 57: 29, 58: 29, 59: 29, 28: 29, 29: 1, 30: 1, 31: 1}\n\ndef path_to_root(d, start):\n    yield start\n    while start in d:\n        start = d[start]\n        yield start\n\nprint list(path_to_root(d, 27))\n",
  "label": 1
 },
 {
  "idx": 800,
  "doc": "Finding groups of increasing numbers in a list",
  "code": "out = [tuple(arr) for arr in np.split(x, np.where(np.diff(x) != 1)[0] + 1) if arr.size > 1]\n\nprint(out)\n\n[(19, 20, 21, 22), (0, 1, 2), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (28, 29, 30, 31, 32, 33, 34, 35, 36), (1, 2, 3, 4)]\n",
  "label": 1
 },
 {
  "idx": 801,
  "doc": "How do I zip the contents of a folder using python (version 2.5)?",
  "code": "#!/usr/bin/env python\nfrom __future__ import with_statement\nfrom contextlib import closing\nfrom zipfile import ZipFile, ZIP_DEFLATED\nimport os\n\ndef zipdir(basedir, archivename):\n    assert os.path.isdir(basedir)\n    with closing(ZipFile(archivename, \"w\", ZIP_DEFLATED)) as z:\n        for root, dirs, files in os.walk(basedir):\n            #NOTE: ignore empty directories\n            for fn in files:\n                absfn = os.path.join(root, fn)\n                zfn = absfn[len(basedir)+len(os.sep):] #XXX: relative path\n                z.write(absfn, zfn)\n\nif __name__ == '__main__':\n    import sys\n    basedir = sys.argv[1]\n    archivename = sys.argv[2]\n    zipdir(basedir, archivename)\n",
  "label": 1
 },
 {
  "idx": 802,
  "doc": "How can I quickly compare a list and a set?",
  "code": "e = 1\ne in a # => True\ne in b # => False\n",
  "label": 0
 },
 {
  "idx": 803,
  "doc": "Authentication to use for user notifications using Crossbar/Autobahn?",
  "code": "           {\n              \"name\": \"authorizer\",\n              \"permissions\": [\n                {\n                  \"uri\": \"com.example.authorize\",\n                  \"register\": true\n                }\n              ]\n            },\n            {\n              \"name\": \"authenticator\",\n              \"permissions\": [\n                {\n                  \"uri\": \"com.example.authenticate\",\n                  \"register\": true\n                }\n              ]\n            },\n            {\n              \"name\": \"user\",\n              \"authorizer\": \"com.example.authorize\"\n            },\n...\n\"components\": [\n    {\n      \"type\": \"class\",\n      \"classname\": \"example.AuthenticatorSession\",\n      \"realm\": \"realm1\",\n      \"role\": \"authenticator\",\n      \"extra\": {\n        \"backend_base_url\": \"http://localhost:8080/ws\"\n      }\n    },\n    {\n      \"type\": \"class\",\n      \"classname\": \"example.AuthorizerSession\",\n      \"realm\": \"realm1\",\n      \"role\": \"authorizer\"\n    }\n  ]\n",
  "label": 0
 },
 {
  "idx": 804,
  "doc": "Authentication to use for user notifications using Crossbar/Autobahn?",
  "code": "class AuthorizerSession(ApplicationSession):\n    @inlineCallbacks\n    def onJoin(self, details):\n        print(\"In AuthorizerSession.onJoin({})\".format(details))\n        try:\n            yield self.register(self.authorize, 'com.example.authorize')\n            print(\"AuthorizerSession: authorizer registered\")\n        except Exception as e:\n            print(\"AuthorizerSession: failed to register authorizer procedure ({})\".format(e))\n\n    def authorize(self, session, uri, action):\n        print(\"AuthorizerSession.authorize({}, {}, {})\".format(session, uri, action))\n        if session['authrole'] == u'backend':  # backnend can do whatever\n            return True\n        [Authorization logic here]\n        return authorized\n",
  "label": 0
 },
 {
  "idx": 805,
  "doc": "Update dictionary in xml from csv file in python",
  "code": "def string_to_dict(string):\n    # Split the string on commas\n    list_of_entries = string.split(',')\n    # Each of these entries needs to be split on '='\n    # We'll use a list comprehension\n    list_of_split_entries = map(lambda e: e.split('='), list_of_entries)\n    # Now we have a list of (key, value) pairs.  We can pass this\n    # to the dict() function to get a dictionary out of this, and \n    # that's what we want to return\n    return dict(list_of_split_entries)\n",
  "label": 0
 },
 {
  "idx": 806,
  "doc": "Grouping and Computing Frequency ,Pandas",
  "code": "print df.groupby(['Type','Name']).size()\n\nType     Name       \nBird     Flappy Bird    1\n         Pigeon         2\nPokemon  Jerry          3\n         Mudkip         2\n",
  "label": 1
 },
 {
  "idx": 807,
  "doc": "How to use swig with compiled dll and header file only",
  "code": "swig -python -c++ mymod.i\n",
  "label": 0
 },
 {
  "idx": 808,
  "doc": "Assign differing values to list generator results",
  "code": "v = (item for item in propadd if item[0]==row1[8] and harversine(custx,custy,item[2],item[3])<1500)\nk = (item for item in custadd if item[0]==row1[4])\nm = (item for item in numlist if re.search(r\"^[0-9]+(?=\\s)\",row1[0]) is not None and item[0]==re.search(r\"^[0-9]+(?=\\s)\",row1[0]).group())\nextraValues = {v: 'value 1',\n               k: 'value 2',\n               m: 'value3')\nfor gen in (v, k, m):\n    l = list(gen) \n    if len(l) == 1:\n        row1[1] = l[0][1]\n        row1[2] = l[0][2]\n        row1[3] = extraValues[gen]\n        break\n",
  "label": 1
 },
 {
  "idx": 809,
  "doc": "Sorting numpy matrix for a given column",
  "code": "def mysort(data, col_name, key=None):\n    d = data.copy()\n    cols = [i[0] for i in eval(str(d.dtype))]\n    if key:\n        argsort = np.array([key(i) for i in d[col_name]]).argsort()\n    else:\n        argsort = d[col_name].argsort()\n    for col in cols:\n        d[col] = d[col][argsort]\n    return d\n",
  "label": 0
 },
 {
  "idx": 810,
  "doc": "inequality comparison of numpy array with nan to a scalar",
  "code": "mask = ~np.isnan(x)\nmask[mask] &= x[mask] < -1000\nx[mask] = np.nan\n",
  "label": 1
 },
 {
  "idx": 811,
  "doc": "Get permutation with specified degree by index number",
  "code": "2->0->3\n __\n/  |\n1<-/ .\n",
  "label": 0
 },
 {
  "idx": 812,
  "doc": "Reorder Columns by String Variable",
  "code": "#!/usr/bin/python    \nfrom sys import stdin, stdout\n\nlabels = [\n    \"Reading Comprehension\", \"Sentence Skills\", \"Arithmetic\",\n    \"College Level Math\", \"Elementary Algebra\"\n]\n\nfor line in stdin: \n    values = line.strip().split(',')\n    stdout.write(','.join(values[:5]))\n    for label in labels:\n        stdout.write(',')\n        stdout.write(next((i for i in values[5:] if i.startswith(label)), ''))\n    stdout.write('\\n')\nstdout.flush()\n",
  "label": 1
 },
 {
  "idx": 813,
  "doc": "What is the idiomatic way of invoking a list of functions in Python?",
  "code": "RefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: set_literal\nRefactoringTool: Skipping implicit fixer: ws_comma\n--- map.py (original)\n+++ map.py (refactored)\n@@ -1,1 +1,1 @@\n-map(lambda x: x, range(10))\n+list(map(lambda x: x, list(range(10))))\nRefactoringTool: Files that need to be modified:\nRefactoringTool: map.py\nRefactoringTool: Warnings/messages while refactoring:\nRefactoringTool: ### In file map.py ###\nRefactoringTool: Line 1: You should use a for loop here\n",
  "label": 0
 },
 {
  "idx": 814,
  "doc": "Tipfy & Jinja: Creating a logout URL for every page",
  "code": "class BaseHandler(webapp2.RequestHandler):\n    ...\n    def render_jinja(self, name, **data):\n        data['logout_url']=users.create_logout_url(self.request.uri)\n        template = jinja_environment.get_template('templates/'+name+'.html')\n        self.response.out.write(template.render(data))\n",
  "label": 0
 },
 {
  "idx": 815,
  "doc": "Boxplotting Masked Arrays",
  "code": "z = [[y for y in row if y] for row in x.T]\n",
  "label": 0
 },
 {
  "idx": 816,
  "doc": "Pygame - Getting a rectangle for a dynamically drawn object",
  "code": "class raquete(pygame.sprite.Sprite):\n\n    def __init__(self, x, y, l_raquete, a_raquete):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.Surface((l_raquete, a_raquete))\n        # I guess branco means color\n        self.image.fill(branco) \n        # no need for the x and y members, \n        # since we store the position in self.rect already\n        self.rect = self.image.get_rect(x=x, y=y) \n",
  "label": 1
 },
 {
  "idx": 817,
  "doc": "Large point-matrix array multiplication in numpy",
  "code": "In [76]: lp = np.einsum('ij,ijk->ik', points, matrices)\n\nIn [77]: lp[0]\nOut[77]: array([ 1.39510822,  1.12011057,  1.05704609])\n\nIn [78]: points[0].dot(matrices[0])\nOut[78]: array([ 1.39510822,  1.12011057,  1.05704609])\n\nIn [79]: lp[1]\nOut[79]: array([ 0.49750324,  0.70664634,  0.7142573 ])\n\nIn [80]: points[1].dot(matrices[1])\nOut[80]: array([ 0.49750324,  0.70664634,  0.7142573 ])\n",
  "label": 1
 },
 {
  "idx": 818,
  "doc": "render cms page within another page",
  "code": "{{ request.current_page }}\n",
  "label": 0
 },
 {
  "idx": 819,
  "doc": "Spearman rank correlation in Python with ties",
  "code": ">>> scipy.stats.pearsonr([1, 2, 2], [2, 1, 3])\n(0.0, 1.0)\n>>> scipy.stats.pearsonr([1, 2.5, 2.5], [2, 1, 3])\n(0.0, 1.0)\n",
  "label": 1
 },
 {
  "idx": 820,
  "doc": "Sorting data from a csv alphabetically, highest to lowest and average",
  "code": "import csv\nimport collections\nfrom operator import itemgetter\n\n...\n\nif sort_int == 1:\n    with open(path) as f:\n        reader = csv.reader(f)\n        for name, score in sorted(reader):\n            print(name,score)\n\nelif sort_int == 2:\n    with open(path) as f:\n        entries = sorted(csv.reader(f), \n                         key=itemgetter(1), \n                         reverse=True)\n        for name,score in entries:\n            print(name,score)\n\nelif sort_int == 3:\n    with open(path) as f:\n        entries = collections.Counter()\n        total_scores = collections.Counter()\n        for name,score in csv.reader(f):\n            score = int(score)\n            total_scores[name] += score\n            entries[name] += 1\n\n        for name in sorted(entries):\n            ave_score = total_scores[name] / entries[name]\n            print(name,ave_score)\n",
  "label": 0
 },
 {
  "idx": 821,
  "doc": "Django Admin Panel. Display and Edit Parent Fields in Child's Object (ModelAdmin.inlines reverse)",
  "code": "def Person_Link(self):\n    return \"<a href='/admin/sweetspotModel/persons/%s/' target='_blank'>Person Details<a/>\" % self.contactid.contactid\nPerson_Link.allow_tags = True  \n",
  "label": 0
 },
 {
  "idx": 822,
  "doc": "how to groupby pandas dataframe on some condition",
  "code": "          item_id  order_id        date  good_user\nbuyer_id\n139            57       387  2015-12-28          1\n140             9       388  2015-12-28          1\n140            57       389  2015-12-28          1\n36              9       390  2015-12-28          0\n64             49       404  2015-12-29          0\n146            49       405  2015-12-29          0\n81             49       406  2015-12-29          0\n140            80       407  2015-12-30          1\n139            81       408  2015-12-30          1\n",
  "label": 0
 },
 {
  "idx": 823,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "this is the __get__ else statement running\ncircumference 31.41592653589793\ntry setting circumference\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-227-316199bab738> in <module>()\n     64 \n     65     print('try setting circumference')\n---> 66     circle.circumference = 12.5\n\n<ipython-input-227-316199bab738> in __set__(self, instance, value)\n     31     def __set__(self, instance, value):\n     32         if hasattr(instance, self.name + 'is_set'):\n---> 33             raise ValueError('Cannot set {} again.'.format(self.name[1:]))\n     34         if isinstance(value, int):\n     35             raise RuntimeError('Cant set formulas')\n\nValueError: Cannot set circumference again.\n",
  "label": 0
 },
 {
  "idx": 824,
  "doc": "Socket code from python to Objective C",
  "code": "NSString * src = @\"X.X.X.X\";\nNSString * mac = @\"XX-XX-XX-XX-XX-XX\";\n\n\nconst unsigned char byte64[] = {0x64};\nconst unsigned char byte00[] = {0x00};\n\nNSString * srcString = [src base64EncodedString];\nint srcDataLength = [srcString length];\nchar* srcDataLengthAsByte = (char*) &srcDataLength;\n\nNSString * macString = [mac base64EncodedString];\nint macDataLength = [macString length];\nchar* macDataLengthAsByte = (char*) &macDataLength;\n\nNSString * remoteString = [remote base64EncodedString];\nint remoteDataLength = [remoteString length];\nchar* remoteDataLengthAsByte = (char*) &remoteDataLength;\n\nNSString * appString = [app base64EncodedString];\nint appDataLength = [appString length];\nchar* appDataLengthAsByte = (char*) &appDataLength;\n\nNSMutableData * msgData = [NSMutableData data];\n[msgData appendBytes:byte64 length:1];\n[msgData appendBytes:byte00 length:1];\n[msgData appendBytes:srcDataLengthAsByte length:1];\n[msgData appendBytes:byte00 length:1];\n[msgData appendData:[srcString dataUsingEncoding:NSASCIIStringEncoding]];\n[msgData appendBytes:macDataLengthAsByte length:1];\n[msgData appendBytes:byte00 length:1];\n[msgData appendData:[macString dataUsingEncoding:NSASCIIStringEncoding]];\n[msgData appendBytes:remoteDataLengthAsByte length:1];\n[msgData appendBytes:byte00 length:1];\n[msgData appendData:[remoteString dataUsingEncoding:NSASCIIStringEncoding]];\nint msgDataLength = [msgData length];\nchar* msgDataLengthAsByte = (char*) &msgDataLength;\n\nNSMutableData * packet = [NSMutableData data];\n[packet appendBytes:byte00 length:1];\n[packet appendBytes:appDataLengthAsByte length:1];\n[packet appendBytes:byte00 length:1];\n[packet appendData:[appString dataUsingEncoding:NSASCIIStringEncoding]];\n[packet appendBytes:msgDataLengthAsByte length:1];\n[packet appendBytes:byte00 length:1];\n[packet appendData:msgData];\n[self send:packet];\n",
  "label": 0
 },
 {
  "idx": 825,
  "doc": "How to define multi-company-aware models in OpenERP",
  "code": "'company_id': lambda self,cr,uid,ctx: self.pool['res.company']._company_default_get(cr,uid,object='<your_model>',context=ctx)\n",
  "label": 0
 },
 {
  "idx": 826,
  "doc": "map array of numbers to rank efficiently in Python",
  "code": "import numpy as np\n\ndef rank1(x):\n    # Sort values i = 0, 1, 2, .. using x[i] as key\n    y = sorted(range(len(x)), key = lambda i: x[i])\n    # Map each value of x to a rank. If a value is already associated with a\n    # rank, the rank is updated. Iterate in reversed order so we get the\n    # smallest rank for each value.\n    rank = { x[y[i]]: i for i in xrange(len(y) -1, -1 , -1) }\n    # Remove gaps in the ranks\n    kv = sorted(rank.iteritems(), key = lambda p: p[1])\n    for i in range(len(kv)):\n        kv[i] = (kv[i][0], i)\n    rank = { p[0]: p[1] for p in kv }\n    # Pre allocate a array to fill with ranks\n    r = np.zeros((len(x),), dtype=np.int)\n    for i, v in enumerate(x):\n        r[i] = rank[v]\n    return r\n\ndef rank2(x):\n    x_sorted = sorted(x)\n    # creates a new list to preserve x\n    rank = list(x)\n    for v in x_sorted:\n        rank[rank.index(v)] = x_sorted.index(v)\n    return rank\n",
  "label": 1
 },
 {
  "idx": 827,
  "doc": "Managing Processes from Python multiprocessing module",
  "code": "from multiprocessing import Pool                                                                                   \nimport time\nimport random\n\nSOME_LIST = []\n\ndef myfunc():\n    a = random.randint(0,3)\n    time.sleep(a)\n    return a\n\ndef cb(retval):\n    SOME_LIST.append(retval)\n\nprint(\"Starting...\")\n\np = Pool(processes=8)\nfor _ in range(p._processes):\n    p.apply_async(myfunc, callback=cb)\np.close()\np.join()\n\nprint(\"Stopping...\")\nprint(SOME_LIST)\n",
  "label": 1
 },
 {
  "idx": 828,
  "doc": "How to scrape the video src url from video tag which is injected via javascript?",
  "code": "import re\nimport requests\nfrom lxml import html\n\ndef getVideosLinks(content):\n    videos = re.findall('(http://[\\.\\w/_]+\\.mp[34])', content)\n    return videos\n\ndef prepareJSONurl(episode_hash):\n    json_url = \"http://pepto.portico.net2.tv/playlist/{hash}\".format(hash=episode_hash)\n    return json_url\n\ndef extractEpisodeHash(content):\n    tree = html.fromstring(content)\n    video_url = tree.xpath('//meta[contains(@http-equiv, \"refresh\")]/@content')[0].split('=',1)[1]\n    episode_hash = re.findall('episode=([\\w]+)', video_url)\n    return episode_hash[0]\n\ndef extractIframeURL(content):\n    iframe_url = None\n    tree = html.fromstring(content)\n    try:\n        iframe_url = tree.xpath('//iframe/@src')[0]\n        is_video = True\n    except:\n        is_video = False\n    return is_video, iframe_url\n\n\nPOPSCI_URL = \"http://www.popsci.com/thorium-dream\"\n\nresponse = requests.get(POPSCI_URL)\nis_video, iframe_url = extractIframeURL(response.content)\n\nif is_video:\n    response_from_iframe_url = requests.get(iframe_url)\n    episode_hash = extractEpisodeHash(response_from_iframe_url.content)\n\n    json_url = prepareJSONurl(episode_hash)\n    final_response = requests.get(json_url)\n\n    for video in getVideosLinks(final_response.content):\n        print \"Video: {}\".format(video)\nelse:\n    print \"This is not a POPSCI video page :|\"\n",
  "label": 1
 },
 {
  "idx": 829,
  "doc": "How to scrape the video src url from video tag which is injected via javascript?",
  "code": "import re\nimport requests\n\ndef getVideosLinks(content):\n    videos = re.findall('(http://[\\.\\w/_]+\\.mp[34])', content)\n    return videos\n\ndef prepareJSONurl(episode_hash):\n    json_url = \"http://pepto.portico.net2.tv/playlist/{hash}\".format(hash=episode_hash)\n    return json_url\n\ndef extractEpisodeHash(content):\n    episode_hash = re.findall('<meta http-equiv=\"refresh\" content=\"0; url=http:\\/\\/player\\.net2\\.tv\\?episode=([\\w]+)&restart', content)[0]\n    return episode_hash\n\ndef extractIframeURL(content):\n    iframe_url = None\n    try:\n        iframe_url = re.findall('<iframe src=\"(.*)\" style', content)[0]\n        is_video = True\n    except:\n        is_video = False\n    return is_video, iframe_url\n\n\nPOPSCI_URL = \"http://www.popsci.com/thorium-dream\"\n\nresponse = requests.get(POPSCI_URL)\nis_video, iframe_url = extractIframeURL(response.content)\n\nif is_video:\n    response_from_iframe_url = requests.get(iframe_url)\n    episode_hash = extractEpisodeHash(response_from_iframe_url.content)\n\n    json_url = prepareJSONurl(episode_hash)\n    final_response = requests.get(json_url)\n\n    for video in getVideosLinks(final_response.content):\n        print \"Video: {}\".format(video)\nelse:\n    print \"This is not a POPSCI video page :|\"\n",
  "label": 1
 },
 {
  "idx": 830,
  "doc": "Python - removing items from lists",
  "code": "tmpset = set(L2)\ntmpset.update(L3)\nL4 = [ n for n in L1 if n not in tmpset ]\n",
  "label": 1
 },
 {
  "idx": 831,
  "doc": "Python - removing items from lists",
  "code": "$ python -m timeit \\\n  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2);from itertools import ifilterfalse, chain' \\\n  'L4 = list(ifilterfalse(frozenset(chain(L2, L3)).__contains__, L1))' \n10000 loops, best of 3: 47.1 usec per loop\n",
  "label": 1
 },
 {
  "idx": 832,
  "doc": "Decimal formatting based on number of digits in integer and decimal parts",
  "code": "def format_float(value, ndigits):\n    sign = ''\n    if value < 0:\n        value = abs(value)\n        sign = '-'\n\n    if value >= 1:\n        j = min(i-1 for i in range(ndigits+1) if value >= 10 ** (ndigits - i))\n        return '{}{:.0{num_digits}f}'.format(sign, value, num_digits=max(0,j))\n    s = '{:.17f}'.format(value).rstrip('0')\n    _, dec_part = s.split('.')\n    if not dec_part:\n        # Happens only with 0.0\n        return '0'\n    if len(dec_part) < ndigits or set(dec_part[:ndigits]) != {'0'}:\n        # truncate the decimal representation\n        dec_part = dec_part.ljust(ndigits, '0')[:ndigits]\n    elif len(dec_part) > ndigits:\n        # too small. Just find the first decimal place\n        for i, char in enumerate(dec_part):\n            if char != '0':\n                dec_part = dec_part[:i+1]\n                break\n    return '{}{}.{}'.format(sign, 0, dec_part)\n",
  "label": 1
 },
 {
  "idx": 833,
  "doc": "Erasing list of phrases from list of texts in python",
  "code": "def find_words_and_remove(words, strings):\n    return [\" \".join(word for word in string.split() if word not in words) for string in strings]\n",
  "label": 1
 },
 {
  "idx": 834,
  "doc": "(Python) Breaking an output text file into tokens",
  "code": "Operation_ID,Operation_Name,business_group_name,business_unit_name,Program_ID,Program_Name,Project_ID,Project_Name,Program_Type_Name,Program_Cost_Type_Name,Start_date,Estimated_End_Date,End_Date,SQA_Name,CMA_Name,SSE_Name,PMs,TLs,PortfolioManager,Finished,Research,SQA_ID,CMA_ID,SSE_ID\n20,XXX,YYY,ZZZ,1,WWW,2163,QQQ,15/12/2008,22/01/2009,EEE EEE ,True\n22,XXX,YYY,ZZZ,3,WWW,2165,QQQ,01/01/2009,09/04/2010,EEE EEE EEE,True,False\n20,XXX,YYY,ZZZ,10,WWW,2164,QQQ,Development,Direct,15/12/2008,26/02/2010,EEE ,EEE EEE ; EEE EEE ; EEE EEE ,True,False\n22,XXX,YYY,ZZZ,3,WWW,2166,QQQ,15/12/2008,31/05/2010,True,False\n20,XXX,YYY,ZZZ,10,WWW,2168,QQQ,Development,Direct,05/01/2009,20/05/2009,EEE EEE EEE,EEE EEE ,True\n20,XXX,YYY,ZZZ,1,WWW,2169,QQQ,13/01/2009,22/05/2009,EEE EEE EEE,EEE EEE EEE EEE,True\n etc.................\n",
  "label": 0
 },
 {
  "idx": 835,
  "doc": "Python: sharing a list between threads",
  "code": "a = b = [1]  # a and b are both bound to the same list\nprint a,b    # [1] [1]\nb[0] = 2     # modifies the object to which a and b are bound\nprint a,b    # [2] [2]\nb = [0]      # now b is bound to a new list\nprint a,b    # [2] [0]\n",
  "label": 0
 },
 {
  "idx": 836,
  "doc": "Django: how to change label using formset extra?",
  "code": "# File: views.py\nfrom django.forms.formsets import formset_factory\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nfrom forms import MachineForm, LineForm, BaseLineFormSet\n\n\ndef get_no_of_lines(request):\n    if request.method == 'POST':\n        machine_form = MachineForm(request.POST)\n        if machine_form.is_valid():\n            # At this point, form fields have already been \n            # converted to Python data types :)\n            # so no need to convert `line_no` to an integer\n            no_of_lines = machine_form.cleaned_data['no_of_lines']\n            return HttpResponseRedirect(reverse('line_form', kwargs={'no_of_lines': no_of_lines}))\n    else:\n        # It looks to me like you probably don't mean to\n        # use formsets here (but a form instead)\n        machine_form = MachineForm()\n\n    c = RequestContext(request, {\n        'machine_form': machine_form,\n    })\n    return render_to_response('get_no_of_lines.html', c)\n\n\ndef line_form(request, no_of_lines):\n    # You probably should validate this number (again).\n    # In fact, you probably need to validate first form (MachineForm).\n    # ...But I'm assuming it'll be valid in this example.\n    no_of_lines = int(no_of_lines)\n    LineFormSet = formset_factory(LineForm, extra=no_of_lines, formset=BaseLineFormSet)\n    if request.method == \"POST\":\n        formset = LineFormSet(request.POST, request.FILES)\n        if formset.is_valid():\n            pass\n            # Do stuff with form submission\n            # Redirect\n\n    else:\n        formset = LineFormSet()\n\n    c = RequestContext(request, {\n        'formset': formset,\n    })\n    return render_to_response('line_form.html', c)\n",
  "label": 0
 },
 {
  "idx": 837,
  "doc": "How to avoid '\\n' and '\\t' escaping sequence when string is assigned to a variable",
  "code": ">>> s.replace('\\\\','/')\n'C:/Users/Client/tests/doc_test_hard.docx'\n",
  "label": 0
 },
 {
  "idx": 838,
  "doc": "Selenium scraping with multiple urls",
  "code": "                   away         date          event                home\n0              Salzburg  14 Apr 2015      Play Offs     Vienna Capitals\n1       Vienna Capitals  12 Apr 2015      Play Offs            Salzburg\n2              Salzburg  10 Apr 2015      Play Offs     Vienna Capitals\n3       Vienna Capitals  07 Apr 2015      Play Offs            Salzburg\n4       Vienna Capitals  31 Mar 2015      Play Offs         Liwest Linz\n5              Salzburg  29 Mar 2015      Play Offs          Klagenfurt\n6           Liwest Linz  29 Mar 2015      Play Offs     Vienna Capitals\n7            Klagenfurt  26 Mar 2015      Play Offs            Salzburg\n8       Vienna Capitals  26 Mar 2015      Play Offs         Liwest Linz\n9           Liwest Linz  24 Mar 2015      Play Offs     Vienna Capitals\n10             Salzburg  24 Mar 2015      Play Offs          Klagenfurt\n11           Klagenfurt  22 Mar 2015      Play Offs            Salzburg\n12      Vienna Capitals  22 Mar 2015      Play Offs         Liwest Linz\n13              Bolzano  20 Mar 2015      Play Offs         Liwest Linz\n14        Fehervar AV19  18 Mar 2015      Play Offs     Vienna Capitals\n15          Liwest Linz  17 Mar 2015      Play Offs             Bolzano\n16      Vienna Capitals  16 Mar 2015      Play Offs       Fehervar AV19\n17              Villach  15 Mar 2015      Play Offs            Salzburg\n18           Klagenfurt  15 Mar 2015      Play Offs              Znojmo\n19              Bolzano  15 Mar 2015      Play Offs         Liwest Linz\n20          Liwest Linz  13 Mar 2015      Play Offs             Bolzano\n21        Fehervar AV19  13 Mar 2015      Play Offs     Vienna Capitals\n22               Znojmo  13 Mar 2015      Play Offs          Klagenfurt\n23             Salzburg  13 Mar 2015      Play Offs             Villach\n24           Klagenfurt  10 Mar 2015      Play Offs              Znojmo\n25      Vienna Capitals  10 Mar 2015      Play Offs       Fehervar AV19\n26              Bolzano  10 Mar 2015      Play Offs         Liwest Linz\n27              Villach  10 Mar 2015      Play Offs            Salzburg\n28          Liwest Linz  08 Mar 2015      Play Offs             Bolzano\n29               Znojmo  08 Mar 2015      Play Offs          Klagenfurt\n..                  ...          ...            ...                 ...\n670       TWK Innsbruck  28 Sep 2013  Not specified              Znojmo\n671         Liwest Linz  27 Sep 2013  Not specified            Dornbirn\n672             Bolzano  27 Sep 2013  Not specified          Graz 99ers\n673          Klagenfurt  27 Sep 2013  Not specified  Olimpija Ljubljana\n674       Fehervar AV19  27 Sep 2013  Not specified            Salzburg\n675       TWK Innsbruck  27 Sep 2013  Not specified     Vienna Capitals\n676             Villach  27 Sep 2013  Not specified              Znojmo\n677            Salzburg  24 Sep 2013  Not specified  Olimpija Ljubljana\n678            Dornbirn  22 Sep 2013  Not specified       TWK Innsbruck\n679          Graz 99ers  22 Sep 2013  Not specified          Klagenfurt\n680     Vienna Capitals  22 Sep 2013  Not specified             Villach\n681       Fehervar AV19  21 Sep 2013  Not specified             Bolzano\n682            Dornbirn  20 Sep 2013  Not specified             Bolzano\n683             Villach  20 Sep 2013  Not specified          Graz 99ers\n684              Znojmo  20 Sep 2013  Not specified          Klagenfurt\n685  Olimpija Ljubljana  20 Sep 2013  Not specified         Liwest Linz\n686       Fehervar AV19  20 Sep 2013  Not specified       TWK Innsbruck\n687            Salzburg  20 Sep 2013  Not specified     Vienna Capitals\n688             Villach  15 Sep 2013  Not specified          Klagenfurt\n689         Liwest Linz  15 Sep 2013  Not specified            Dornbirn\n690     Vienna Capitals  15 Sep 2013  Not specified       Fehervar AV19\n691       TWK Innsbruck  15 Sep 2013  Not specified            Salzburg\n692          Graz 99ers  15 Sep 2013  Not specified              Znojmo\n693  Olimpija Ljubljana  14 Sep 2013  Not specified            Dornbirn\n694             Bolzano  14 Sep 2013  Not specified       Fehervar AV19\n695          Klagenfurt  13 Sep 2013  Not specified          Graz 99ers\n696              Znojmo  13 Sep 2013  Not specified            Salzburg\n697  Olimpija Ljubljana  13 Sep 2013  Not specified       TWK Innsbruck\n698             Bolzano  13 Sep 2013  Not specified     Vienna Capitals\n699         Liwest Linz  13 Sep 2013  Not specified             Villach\n\n[700 rows x 4 columns]\n",
  "label": 0
 },
 {
  "idx": 839,
  "doc": "Scraping website that uses javascript",
  "code": "{u'parameters': {u'LeagueID': u'00',\n                 u'PlayerID': 2544,\n                 u'Season': u'2013-14',\n                 u'SeasonType': u'Regular Season'},\n u'resource': u'playergamelog',\n u'resultSets': [{u'headers': [u'SEASON_ID',\n                               u'Player_ID',\n                               u'Game_ID',\n                               u'GAME_DATE',\n                               u'MATCHUP',\n                               u'WL',\n                               u'MIN',\n                               u'FGM',\n                               u'FGA',\n                               u'FG_PCT',\n                               u'FG3M',\n                               u'FG3A',\n                               u'FG3_PCT',\n                               u'FTM',\n                               u'FTA',\n                               u'FT_PCT',\n                               u'OREB',\n                               u'DREB',\n                               u'REB',\n                               u'AST',\n                               u'STL',\n                               u'BLK',\n                               u'TOV',\n                               u'PF',\n                               u'PTS',\n                               u'PLUS_MINUS',\n                               u'VIDEO_AVAILABLE'],\n                  u'name': u'PlayerGameLog',\n                  u'rowSet': [[u'22013',\n                               2544,\n                               u'0021301192',\n                               u'APR 12, 2014',\n                               u'MIA @ ATL',\n                               u'L',\n                               37,\n                               10,\n                               22,\n                               0.455,\n                               3,\n                               7,\n                               0.429,\n                               4,\n                               8,\n                               0.5,\n                               3,\n                               5,\n                               8,\n                               5,\n                               0,\n                               1,\n                               3,\n                               2,\n                               27,\n                               -13,\n                               1],\n                              [u'22013',\n                               2544,\n                               u'0021301180',\n                               u'APR 11, 2014',\n                               u'MIA vs. IND',\n                               u'W',\n                               35,\n                               11,\n                               20,\n                               0.55,\n                               2,\n                               4,\n                               0.5,\n                               12,\n                               13,\n                               0.923,\n                               1,\n                               5,\n                               6,\n                               1,\n                               1,\n                               1,\n                               2,\n                               1,\n                               36,\n                               13,\n                               1],\n                              [u'22013',\n                               2544,\n                               u'0021301167',\n                               u'APR 09, 2014',\n                               u'MIA @ MEM',\n                               u'L',\n                               41,\n                               14,\n                               23,\n                               0.609,\n                               3,\n                               5,\n                               0.6,\n                               6,\n                               7,\n                               0.857,\n                               1,\n                               5,\n                               6,\n                               5,\n                               2,\n                               0,\n                               5,\n                               1,\n                               37,\n                               -8,\n                               1],\n    ...\n}\n",
  "label": 0
 },
 {
  "idx": 840,
  "doc": "Django Model Design - Many-To-Many Fields",
  "code": "admin.py\nfrom django.contrib import admin\n\nfrom .forms import CheckListForm\nfrom .models import CheckList, CheckListType, CheckListOption\n\nclass CheckListAdmin(admin.ModelAdmin):\n    form = CheckListForm\n\nadmin.site.register(CheckList, CheckListAdmin)\nadmin.site.register(CheckListType)\nadmin.site.register(CheckListOption)\n",
  "label": 0
 },
 {
  "idx": 841,
  "doc": "Compress an array in python?",
  "code": "#  Chunking function \ndef chunks(l, n):\n    for i in xrange(0, len(l), n):\n        yield l[i:i+n]\n\n# Resampling function\ndef resample(arr, newLength):\n    chunkSize = len(arr)/newLength\n    return [np.mean(chunk) for chunk in chunks(arr, chunkSize)]\n\n# Example:\nimport numpy as np\nx = np.linspace(-1,1,15)\ny = resample(x, 5)\nprint y\n# Result:\n# [-0.85714285714285721, -0.4285714285714286, -3.7007434154171883e-17, 0.42857142857142844, 0.8571428571428571]\n",
  "label": 1
 },
 {
  "idx": 842,
  "doc": "Pandas: Delete rows of a DataFrame if total count of a particular column occurs only 1 time",
  "code": "vc  = df['Series'].value_counts()\npat = r'|'.join(vc[vc==1].index)          #Regular expression\ndf  = df[~df['Series'].str.contains(pat)] #Tilde is to negate boolean\n",
  "label": 1
 },
 {
  "idx": 843,
  "doc": "Matplotlib in Pyside with Qt designer (PySide)",
  "code": "import matplotlib\nmatplotlib.use('Qt4Agg')\nmatplotlib.rcParams['backend.qt4'] = 'PySide'\nfrom matplotlib.backends.backend_qt4agg import (\n    FigureCanvasQTAgg as FigureCanvas,\n    NavigationToolbar2QT as NavigationToolbar)\nfrom matplotlib.figure import Figure\nfrom PySide import QtGui, QtCore\nimport random\n\nfrom weakref import proxy\nfrom ui import Ui_Form\n\n\nclass Plotter(FigureCanvas):\n    def __init__(self, parent):\n        ''' plot some random stuff '''\n        self.parent = proxy(parent)\n        # random data\n        data = [random.random() for i in range(10)]\n        fig = Figure()\n        super(Plotter,self).__init__(fig)\n        # create an axis\n        self.axes = fig.add_subplot(111)\n        # discards the old graph\n        self.axes.hold(False)\n        # plot data\n        self.axes.plot(data, '*-')\n\n    def binding_plotter_with_ui(self):\n        self.parent.vLayout.insertWidget(1, self)\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    Form = QtGui.QWidget()\n    ui = Ui_Form()\n    ui.setupUi(Form)\n    # plotter logic and binding needs to be added here\n    plotter = Plotter(ui)\n    plotter.binding_plotter_with_ui()\n    plotter2 = Plotter(ui)\n    plotter2.binding_plotter_with_ui()\n    Form.show()\n    sys.exit(app.exec_())\n",
  "label": 0
 },
 {
  "idx": 844,
  "doc": "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?",
  "code": "specials = np.any(condition, axis=1)  \nprint(table[specials, :2])\n",
  "label": 0
 },
 {
  "idx": 845,
  "doc": "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?",
  "code": "chrom, pos, freqC_in_A,..., freqG_in_A, freq_dot_in_A freqC_in_B, ..., freqG_in_B, freq_dot_in_B\n",
  "label": 0
 },
 {
  "idx": 846,
  "doc": "combine list of dictionaries with same key",
  "code": "orig_data = [{'Range': '192.168.1.1-192.168.1.254', 'Org_ID': 'TX', 'name': 'TX-Dallas'}, {'Range': '192.168.2.1-192.168.2.254', 'Org_ID': 'TX', 'name': 'TX-Dallas'}, {'Range': '192.168.3.1-192.168.3.254', 'Org_ID': 'TX', 'name': 'TX-Dallas'}, {'Range': '10.0.0.1-10.0.0.254', 'Org_ID': 'TX', 'name': 'TX-Dallas'}, {'Range': '192.168.9.1-192.168.1.254', 'Org_ID': 'CA', 'name': 'CA-San Diego'}, {'Range': '10.0.5.1-10.0.5.254', 'Org_ID': 'CA', 'name': 'CA-San Diego'}, {'Range': '172.16.0.1-172.16.0.254', 'Org_ID': 'TX', 'name': 'TX-Houston'}, {'Range': '172.16.3.1-172.16.3.254', 'Org_ID': 'TX', 'name': 'TX-Houston'}]\n\ncont = collections.defaultdict(lambda : collections.defaultdict(list))\nfor d in orig_data:\n    cont[d['Org_ID']][d['name']].append(d['Range'])\n\nanswer = []\nfor orgid in cont:\n    for name,rangelist in cont[orgid].items():\n        answer.append({'Org_ID':orgid, 'name':name, 'Range':rangelist})\n",
  "label": 1
 },
 {
  "idx": 847,
  "doc": "Create list using regex inputs",
  "code": "dirs = [d for d in dirs if d not in dirExclude and not re.search(exre, d)]\n",
  "label": 0
 },
 {
  "idx": 848,
  "doc": "Implementing 2D slicing in Python",
  "code": "try:\n    idx[0]\nexcept AttributeError:\n    idx = (idx, slice(None, None, None))\n",
  "label": 0
 },
 {
  "idx": 849,
  "doc": "Implementing 2D slicing in Python",
  "code": "def __getitem__(self, idx):\n    if isinstance(idx, numbers.Integral):\n        idx = (idx, slice(None, None, None))\n    # now the rest of your code only needs to handle tuples\n",
  "label": 0
 },
 {
  "idx": 850,
  "doc": "How to directly set RGB/RGBA colors in mayavi",
  "code": "from tvtk.api import tvtk; from mayavi import mlab; import numpy as np\n\nx,y,z=np.random.random((3,nr_points)) #some data\ncolors=np.random.randint(256,size=(100,3)) #some RGB or RGBA colors\n\npts=mlab.points3d(x,y,z)\nsc=tvtk.UnsignedCharArray()\nsc.from_array(colors)\n\npts.mlab_source.dataset.point_data.scalars=sc\npts.mlab_source.dataset.modified()\n",
  "label": 1
 },
 {
  "idx": 851,
  "doc": "Two windows: First Login after that main program",
  "code": "from Tkinter import *\n\n\nclass loginWindow(Toplevel):\n    def __init__(self, title, parent):\n        Toplevel.__init__(self, parent)\n        # Save parent reference to use it \n        self.parent = parent\n        self.parent.title(u\"Geometry Calc - Login\")\n        Button(self, text=\"Login\", command=self.login).pack()\n\n    def login(self):\n\n        access =  True # Used to test if a user can login.\n\n        if access:\n            # Close Toplevel window and show root window\n            self.destroy()\n            self.parent.deiconify()\n        else:\n            self.parent.quit()\n\n\n\nclass main(Tk):\n    def __init__(self, *args, **kwargs):\n        Tk.__init__(self, *args, **kwargs)\n        self.title(u\"Geometry Calc\")  # Nadpis\n        self.geometry(\"695x935\")  # Rozmery v px\n        self.config(background=\"white\")\n        self.resizable(width=FALSE, height=FALSE)  # Zak\u00e1\u017eeme zm\u011bnu rozm\u011br\u016f u\u017eivatelem - zat\u00edm..\n\n        menubar = Menu(self)\n\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label=\"Konec\", command=self.quit)\n        menubar.add_cascade(label=\"Soubor\", menu=helpmenu)\n        helpmenu = Menu(menubar, tearoff=0)\n        helpmenu.add_command(label=\"O programu\", command=self.createAbout)\n        menubar.add_cascade(label=\"Pomoc\", menu=helpmenu)\n        self.config(menu=menubar)\n\n        canvas = Canvas(self, width=691, height=900)\n        canvas.pack(expand=1, fill=BOTH)\n\n        # Hide root window\n        self.withdraw()\n\n        #\u00a0Lunch login window\n        loginWindow('Frame', self)\n\n\n    def createAbout(self):\n        pass\n\n    def quit(self):\n        self.destroy()\n\n\n\napp = main()\n\napp.mainloop()\n",
  "label": 1
 },
 {
  "idx": 852,
  "doc": "Sorting a list with a dictionary at items",
  "code": "sorted([1, 2, 3], key=(lambda x:(-x)))\n",
  "label": 1
 },
 {
  "idx": 853,
  "doc": "Adding docstrings to namedtuples?",
  "code": "def NamedTupleWithDocstring(docstring, *ntargs):\n    nt = namedtuple(*ntargs)\n    class NT(nt):\n        __slots__ = ()\n        __doc__ = docstring\n    return NT\n\nPoint3D = NamedTupleWithDocstring(\"A point in 3d space\", \"Point3d\", [\"x\", \"y\", \"z\"])\n\np3 = Point3D(1,2,3)\n\nprint p3.__doc__\n",
  "label": 0
 },
 {
  "idx": 854,
  "doc": "Special End-line characters/string from lines read from text file, using Python",
  "code": "def liner2(fh,eol,lenchunk,nl=0):\n    L = len(eol)\n    NL = len(eol) if nl else 0\n    chunk = fh.read(lenchunk)\n    tail = ''\n    while chunk:\n        last = chunk.rfind(eol)\n        if last==-1:\n            kept = chunk\n            newtail = ''\n        else:\n            kept = chunk[0:last+L]   # here: L\n            newtail = chunk[last+L:] # here: L\n        chunk = tail + kept\n        tail = newtail\n        x = y = 0\n        while y+1:\n            y = chunk.find(eol,x)\n            if y+1: yield chunk[x:y+NL] # here: NL\n            else: break\n            x = y+L # here: L\n        chunk = fh.read(lenchunk)\n    yield tail\n\nfh = open('fofo.txt', 'rb')\nte = clock()\nfor line in liner2(fh,':;:', 65536):\n    pass\nprint clock()-te\n",
  "label": 1
 },
 {
  "idx": 855,
  "doc": "How to pivot/cross-tab data in Python 3?",
  "code": "class CrossTab(object):\n\n    def __init__(\n        self,\n        missing=0, # what to return for an empty cell.\n                   # Alternatives: '', 0.0, None, 'NULL'\n        ):\n        self.missing = missing\n        self.col_key_set = set()\n        self.cell_dict = {}\n        self.headings_OK = False\n\n    def add_item(self, row_key, col_key, value):\n        self.col_key_set.add(col_key)\n        try:\n            self.cell_dict[row_key][col_key] += value\n        except KeyError:\n            try:\n                self.cell_dict[row_key][col_key] = value\n            except KeyError:\n                self.cell_dict[row_key] = {col_key: value}\n\n    def _process_headings(self):\n        if self.headings_OK:\n            return\n        self.row_headings = list(sorted(self.cell_dict.keys()))\n        self.col_headings = list(sorted(self.col_key_set))\n        self.headings_OK = True\n\n    def get_col_headings(self):\n        self._process_headings()\n        return self.col_headings\n\n    def generate_row_info(self):\n        self._process_headings()\n        for row_key in self.row_headings:\n            row_dict = self.cell_dict[row_key]\n            row_vals = [\n                row_dict.get(col_key, self.missing)\n                for col_key in self.col_headings\n                ]\n            yield row_key, row_vals\n\nif __name__ == \"__main__\":\n\n    data = [[\"apples\", 2, \"New York\"], \n      [\"peaches\", 6, \"New York\"],\n      [\"apples\", 6, \"New York\"],\n      [\"peaches\", 1, \"Vermont\"]]  \n\n    ctab = CrossTab(missing='uh-oh')\n    for s in data:\n        ctab.add_item(row_key=s[2], col_key=s[0], value=s[1])\n    print()\n    print('Column headings:', ctab.get_col_headings())\n    for row_heading, row_values in ctab.generate_row_info():\n        print(repr(row_heading), row_values)\n",
  "label": 1
 },
 {
  "idx": 856,
  "doc": "Weighted random choice from a variable length text file",
  "code": "weights = range(5, 0, -1)\ntotal_weights = float(sum(weights))\nprobabilities = [w/total_weights for w in weights]\n>>> [round(p, 5) for p in probabilities]    # rounded for readability\n[0.33333, 0.26667, 0.2, 0.13333, 0.06667]\n",
  "label": 0
 },
 {
  "idx": 857,
  "doc": "Run parts of a ipython notebook in a loop / with different input parameter",
  "code": "def square(x):\n    y = x**2\n    return y\nsquare(x) # where x is your data running from the prior cells \n",
  "label": 0
 },
 {
  "idx": 858,
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "def get_context_data(self, **kwargs): \n    #Get the context \n    context = super(TeacherCreation, self).get_context_data(**kwargs) \n    #Adding the second form \n    context['user_form'] = self.second_form_class \n    return context \n",
  "label": 0
 },
 {
  "idx": 859,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> index = pd.date_range(\"2011-01-01\", periods=5, freq=\"80d\")\n>>> df = pd.DataFrame({\"temp\": np.random.random(5)}, index=index)\n>>> df\n                temp\n2011-01-01  0.566277\n2011-03-22  0.965421\n2011-06-10  0.854030\n2011-08-29  0.780752\n2011-11-17  0.148783\n",
  "label": 0
 },
 {
  "idx": 860,
  "doc": "Splitting Strings in Python with Separator variable",
  "code": ">>> def split_string(source,separators):\n...     return re.split('|'.join(re.escape(x) for x in separators),source)\n... \n>>> split_string(\"the;foo: went to the store\",':;')\n['the', 'foo', ' went to the store']\n>>> split_string(\"the;foo: went to the store\",['foo','st'])\n['the;', ': went to the ', 'ore']\n",
  "label": 1
 },
 {
  "idx": 861,
  "doc": "Compare two lists in python and print the output",
  "code": "items = [item[4] for item in main_list]\nchildren = [child.get('value') for child in xml_data]\n\nfor item, child in itertools.product(items, children):\n    if item == child:\n        print(item)\n",
  "label": 1
 },
 {
  "idx": 862,
  "doc": "How to remove/omit smaller contour lines using matplotlib",
  "code": "# dummy example based on matplotlib.pyplot.clabel example:\nimport matplotlib\nimport numpy as np\nimport matplotlib.cm as cm\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\n\ndelta = 0.025\nx = np.arange(-3.0, 3.0, delta)\ny = np.arange(-2.0, 2.0, delta)\nX, Y = np.meshgrid(x, y)\nZ1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\nZ2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)\n# difference of Gaussians\nZ = 10.0 * (Z2 - Z1)\n\n\nplt.figure()\nCS = plt.contour(X, Y, Z)\n\nfor level in CS.collections:\n    for kp,path in reversed(list(enumerate(level.get_paths()))):\n        # go in reversed order due to deletions!\n\n        # include test for \"smallness\" of your choice here:\n        # I'm using a simple estimation for the diameter based on the\n        #    x and y diameter...\n        verts = path.vertices # (N,2)-shape array of contour line coordinates\n        diameter = np.max(verts.max(axis=0) - verts.min(axis=0))\n\n        if diameter<1: # threshold to be refined for your actual dimensions!\n            del(level.get_paths()[kp])  # no remove() for Path objects:(\n\n# this might be necessary on interactive sessions: redraw figure\nplt.gcf().canvas.draw()\n",
  "label": 1
 },
 {
  "idx": 863,
  "doc": "How to remove a column from a structured numpy array *without copying it*?",
  "code": "{'names': ..., 'formats': ..., 'offsets': ..., 'titles': ..., 'itemsize': ...}\n",
  "label": 0
 },
 {
  "idx": 864,
  "doc": "Sum grouped Pandas dataframe by single column",
  "code": "print test.groupby(['GroupID','Sample'])['Value'].sum()\n\nGroupID  Sample\n1        S1        2\n2        S2        1\n",
  "label": 1
 },
 {
  "idx": 865,
  "doc": "Parsing multilevel text list",
  "code": "class ListParser:\n\n def __init__(self, s):\n  self.str = s.split(\"\\n\")\n  print self.str\n  self.answer = []\n\n def parse(self):\n  self.nextLine()\n  self.topList()\n  return\n\n def topList(self):\n  while(len(self.str) > 0):\n   self.topListItem()\n\n def topListItem(self):\n  l = self.nextLine()\n  print \"TOP: \" + l\n  l = self.nextLine()\n  if l != '':\n   raise Exception(\"expected blank line but found '%s'\" % l)\n  sub = self.sublist()\n\n def nextLine(self):\n  return self.str.pop(0)\n\n def sublist(self):\n  while True:\n   l = self.nextLine()\n   if l == '':\n    return # end of sublist marked by blank line\n   else:\n    print \"SUB: \" + l\n\nparser = ListParser(s)\nparser.parse() \nprint \"done\"\n",
  "label": 1
 },
 {
  "idx": 866,
  "doc": "Django wildcard query",
  "code": "order_items = OrderItem.objects.all_or_filtered('provider', request.POST.get('provider'))\n",
  "label": 0
 },
 {
  "idx": 867,
  "doc": "Django wildcard query",
  "code": "order_items = OrderItem.objects.filter(**all_or_filter_args(request, 'provider'))\n",
  "label": 0
 },
 {
  "idx": 868,
  "doc": "Text file to csv with glob. Need to change delimiter depending on section of file being read",
  "code": "if line in my_dictionary.keys():\n    delimiter = my_dictionary[line]\n",
  "label": 0
 },
 {
  "idx": 869,
  "doc": "Creating a subplot instead of separate plots",
  "code": "import pandas as pd\nimport numpy as np\n\ndef plot_bar(corr_df):\n\n    dfstacked = corr_df.stack().order()\n    dfstacked.plot(kind='bar', rot=60)\n\ndef plot_heatmap(corr_df):\n\n    corr_df = corr_df.fillna(value=0)\n    plt.pcolormesh(corr_df.values, cmap=plt.cm.Blues)\n    plt.yticks(np.arange(0.5, len(corr_df.index), 1), corr_df.index)\n    plt.xticks(np.arange(0.5, len(corr_df.columns), 1), corr_df.columns)\n\n\ndf = pd.DataFrame(range(10))\n\nfig, axes = plt.subplots(2)\n\nplt.subplot2grid((1,5), (0,0), colspan=3)\nplot_bar(df)\n\nplt.subplot2grid((1,5), (0,3), colspan=2)\nplot_heatmap(df)\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 870,
  "doc": "Python get get average of neighbours in matrix with na value",
  "code": "import numpy as np\nfrom scipy import signal\n\n# Inputs\na = [[1,2,3],[3,4,5],[5,6,7],[4,8,9]]\n\n# Convert to numpy array\narr = np.asarray(a,float)    \n\n# Define kernel for convolution                                         \nkernel = np.array([[0,1,0],\n                   [1,0,1],\n                   [0,1,0]]) \n\n# Perform 2D convolution with input data and kernel \nout = signal.convolve2d(arr, kernel, boundary='wrap', mode='same')/kernel.sum()\n",
  "label": 1
 },
 {
  "idx": 871,
  "doc": "Split a string by three delimiters, and adding them to different lists",
  "code": "with open(\"questions.txt\", \"r\") as questions:\n    keys = questions.read().split('|')\n    answers = keys[3]\n    keys[3] = keys[3].split('/', 1)[0]\n\n    answers = answers.split('/')[1:]\n\n    answer = [x for x in answers if '!' in x][0].strip('!')\n\n    answers = [x.strip('!') for x in answers]\n\n    print(keys)\n    print(answers)\n    print(answer)\n",
  "label": 1
 },
 {
  "idx": 872,
  "doc": "PyGTK/GIO: monitor directory for changes recursively",
  "code": "import gio\nimport os\n\ndef directory_changed(monitor, file1, file2, evt_type):\n    if os.path.isdir(file2):    #maybe this needs to be file1?\n        add_monitor(file2) \n    print \"Changed:\", file1, file2, evt_type\n\ndef add_monitor(dir):\n    gfile = gio.File(dir)\n    monitor = gfile.monitor_directory(gio.FILE_MONITOR_NONE, None)\n    monitor.connect(\"changed\", directory_changed) \n\nadd_monitor('.')\n\nimport glib\nml = glib.MainLoop()\nml.run()\n",
  "label": 1
 },
 {
  "idx": 873,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "        bstream = cPickle.dumps(selected)\n        mimeData = QtCore.QMimeData()\n        mimeData.setData(\"application/pubmedrecord\", bstream)\n        drag = QtGui.QDrag(self)\n        drag.setMimeData(mimeData)\n        pixmap = QtGui.QPixmap(\":/drag.png\")\n\n        drag.setHotSpot(QtCore.QPoint(pixmap.width()/3, pixmap.height()/3))\n        drag.setPixmap(pixmap)\n        result = drag.start(QtCore.Qt.MoveAction)\n\n    def mouseMoveEvent(self, event):\n        self.startDrag(event)\n\n\nclass TagLabel(QtGui.QLabel):\n    def __init__(self, text, color, parent = None):\n        super(TagLabel, self).__init__(parent)\n        self.tagColor = color\n        self.setText(text)\n        self.setStyleSheet(\"QLabel { background-color: %s; font-size: 14pt; }\" % self.tagColor)\n        self.defaultStyle = self.styleSheet()\n        self.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)\n        self.setAcceptDrops(True)\n\n    def dragEnterEvent(self, event):\n        if event.mimeData().hasFormat(\"application/pubmedrecord\"):\n            self.set_bg(True)\n            event.accept()\n        else:\n            event.reject()\n\n    def dragLeaveEvent(self, event):\n        self.set_bg(False)\n        event.accept()\n\n    def dropEvent(self, event):\n        self.set_bg(False)\n        data = event.mimeData()\n        bstream = data.retrieveData(\"application/pubmedrecord\", QtCore.QVariant.ByteArray)\n        selected = pickle.loads(bstream.toByteArray())\n        event.accept()\n        self.emit(QtCore.SIGNAL(\"dropAccepted(PyQt_PyObject)\"), (selected, str(self.text()), str(self.tagColor)))\n",
  "label": 0
 },
 {
  "idx": 874,
  "doc": "Python 3 concurrent.futures and per-thread initialization",
  "code": "(Thread-1) 29 - created new session: \"855\"\n(Thread-2) 29 - created new session: \"58\"\n(Thread-3) 30 - created new session: \"210\"\n(Thread-1) 129 - slept for 0.1 seconds\n(Thread-1) 130 - re-using session \"855\"\n(Thread-2) 130 - slept for 0.1 seconds\n(Thread-2) 130 - re-using session \"58\"\n(Thread-3) 230 - slept for 0.2 seconds\n(Thread-3) 230 - re-using session \"210\"\n(Thread-3) 331 - slept for 0.1 seconds\n(Thread-3) 331 - re-using session \"210\"\n(Thread-3) 331 - slept for 0.0 seconds\n(Thread-1) 530 - slept for 0.4 seconds\n(Thread-2) 1131 - slept for 1.0 seconds\n[0.1, 0.1, 0.2, 0.4, 1.0, 0.1, 0.0]\n",
  "label": 0
 },
 {
  "idx": 875,
  "doc": "How to print framed strings",
  "code": "\u2554\u2550\u2550\u2550> Stanza n. 485 <\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2560\u2550> Num letti:   3                       \u2551\n\u2560\u2550> Fumatori                             \u2551\n\u2560\u2550> Televisione                          \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u2554\u2550\u2550\u2550> Stanza n. 123 <\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2560\u2550> Num letti:   4                       \u2551\n\u2560\u2550> Fumatori                             \u2551\n\u2560\u2550> Televisione                          \u2551\n\u2560\u2550> Aria Condizionata                    \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u2554\u2550\u2550\u2550> Stanza n. 001 <\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2560\u2550> Num letti:   1                       \u2551\n\u2560\u2550> this is so much text it will be ch ..\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n",
  "label": 0
 },
 {
  "idx": 876,
  "doc": "python, how to run commands on remote hosts and show output in GUI in real time?",
  "code": "var config = {};\nvar app = require('http').createServer().listen(config.server.port);\n\nvar io = require('socket.io').listen(app);\n\nvar listenerDgram = require('dgram').createSocket('udp4');\nlistenerDgram.bind(config.listeners.udp.port);\n\nvar sprintf = require('sprintf').sprintf;\n\nvar users = [];\n\napp.on('error', function(er) {\n    console.log(sprintf('[%s] [ERROR] HTTP Server at port %s has thrown %s', Date(), config.server.port, er.toString()));\n    process.exit();\n});\n\nlistenerDgram.on('error', function(er) {\n    console.log(sprintf('[%s] [ERROR] UDP Listener at port %s has thrown %s', Date(), config.listeners.udp.port, er.toString()));\n    process.exit();\n});\n\nlistenerDgram.on('message', function(msg, rinfo) {\n    // handling, let's say, JSONized msg from part two script,\n    // buildinf a var frame and finally\n    if(user) {\n        // emit to single user based on what happened\n        // inside this method\n        users[user].emit('notification', frame);\n    } else {\n        // emit to all users\n        io.emit('notification', frame);\n    }\n\n});\n\nio.sockets.on('connection', function(socket) {\n    // handling user connection here and pushing users' sockets to\n    // users aray.\n});\n",
  "label": 0
 },
 {
  "idx": 877,
  "doc": "Python - lexical analysis and tokenization",
  "code": "========================== stuff ===========================\n('identifier', 'property')\n('dot', '.')\n('open_variable', '${')\n('identifier', 'general')\n('dot', '.')\n('identifier', 'name')\n('close_curly', '}')\n('dot', '.')\n('identifier', 'ip')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('open_variable', '${')\n('identifier', 'general')\n('dot', '.')\n('identifier', 'ip')\n('close_curly', '}')\n========================== stuff2 ==========================\n('newline', '\\n')\n('identifier', 'general')\n('whitespace', ' ')\n('open_curly', '{')\n('newline', '\\n')\n('whitespace', '  ')\n('identifier', 'name')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('identifier', 'myname')\n('newline', '\\n')\n('whitespace', '  ')\n('identifier', 'ip')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('integer', '127')\n('dot', '.')\n('integer', '0')\n('dot', '.')\n('integer', '0')\n('dot', '.')\n('integer', '1')\n('newline', '\\n')\n('close_curly', '}')\n('newline', '\\n')\n",
  "label": 0
 },
 {
  "idx": 878,
  "doc": "Changing the columns in DataFrame with respect to values in other columns",
  "code": "#Get only unique indexes\nunique_trans = list(set(df.index.get_level_values('Trans')))\n",
  "label": 0
 },
 {
  "idx": 879,
  "doc": "What is the fastest way to parse large XML docs in Python?",
  "code": "\nfor event, elem in iterparse(source):\n    if elem.tag == \"record\":\n        ... process record elements ...\n        elem.clear()\n",
  "label": 1
 },
 {
  "idx": 880,
  "doc": "Python: Is there a shortcut to finding which substring(from a set of substrings) comes first in a string?",
  "code": "positions = (s.find(sub), sub) for sub in (s1, s2, s3))\nleftmost = min((pos, sub) for pos, sub in positions if pos > -1)[1]\n",
  "label": 1
 },
 {
  "idx": 881,
  "doc": "remove dictionary from list in pandas colum",
  "code": "sublists = [[d.get('type') for d in cell] for cell in df.misc]\ncols = list(set([item for sublist in sublists for item in sublist]))\nfor c in cols:\n    df[c] = 0\n",
  "label": 0
 },
 {
  "idx": 882,
  "doc": "find unique first top and bottom lines of fastq file from fasta file",
  "code": "from Bio import SeqIO\nimport sys\n\nwith open(\"fasta\") as fh:\n    fasta = fh.read().splitlines()\n\nseen = set()\nrecords = {}\n\nfor record in SeqIO.parse(open('fastq'), 'fastq'):\n    seq = str(record.seq)\n    if seq in fasta and seq not in seen:\n        seen.add(seq)\n        records[fasta.index(seq)] = record\n\nfor record in sorted(records):\n    sys.stdout.write(records[record].format('fastq'))\n",
  "label": 1
 },
 {
  "idx": 883,
  "doc": "modify range in every loop of the range",
  "code": "from itertools import combinations\n\n# Assume input is a list of strings called input_list\ninput_list = ['OG_1: A|1 A|3 B|1 C|2','OG_2: A|4 B|6','OG_3: C|8 B|9 A|10']\n\n# Create a dict to store relationships and a list to store OGs\nrels = {}\nspecies = set()\n\n# Populate the dict\nfor item in input_list:\n    params = item.split(': ')\n    og = params[0]\n    raw_species = params[1].split()\n    s = [rs.split('|')[0] for rs in raw_species]\n    rels[og] = s\n\n    for item in s:\n        species.add(item)\n\n# Get the possible combinations of species:\ncombos = [c for limit in range(1, len(l)-1) for c in combinations(species,limit)]\n\ndef combo_in_og(combo, og):\n    for item in combo:\n        if item not in rels[og]:\n            return False\n    return True\n\n# Loop over the combinations and print\nfor combo in combos:\n    valid_ogs = []\n    for og in ogs:\n        if combo_in_og(combo, og):\n            valid_ogs.append(og)\n    print('(species) ' + ','.join(combo) + ' (are in groups) ' + ', '.join(valid_ogs))\n",
  "label": 1
 },
 {
  "idx": 884,
  "doc": "Finding specific links with Beautiful Soup",
  "code": "b = soup.find(\"b\", text=lambda text and \"data I DO care about:\" in text)\nlinks = [a[\"href\"] for a in b.find_next_siblings(\"a\", href=True)]\nprint(links)\n",
  "label": 1
 },
 {
  "idx": 885,
  "doc": "Django dynamic model fields",
  "code": "#app/models.py\nfrom django.contrib.postgres.fields import HStoreField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = models.HStoreField(db_index=True)\n",
  "label": 0
 },
 {
  "idx": 886,
  "doc": "PySide custom Tab",
  "code": " QTabWidget::pane { /* The tab widget frame */\n     border-top: 2px solid #C2C7CB;\n     position: absolute;\n     top: -0.5em;\n }\n\n QTabWidget::tab-bar {\n     alignment: center;\n }\n\n /* Style the tab using the tab sub-control. Note that\n     it reads QTabBar _not_ QTabWidget */\n QTabBar::tab {\n     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n     border: 2px solid #C4C4C3;\n     border-bottom-color: #C2C7CB; /* same as the pane color */\n     border-top-left-radius: 4px;\n     border-top-right-radius: 4px;\n     min-width: 8ex;\n     padding: 2px;\n }\n\n QTabBar::tab:selected, QTabBar::tab:hover {\n     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n                                 stop: 0 #fafafa, stop: 0.4 #f4f4f4,\n                                 stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);\n }\n\n QTabBar::tab:selected {\n     border-color: #9B9B9B;\n     border-bottom-color: #C2C7CB; /* same as pane color */\n }\n",
  "label": 0
 },
 {
  "idx": 887,
  "doc": "Save text cursor position in the currently focused application/control, then restore it and paste text",
  "code": ">>> time.sleep(5) ; k.type_string('\u03a3\u03a3')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pykeyboard/base.py\", line 48, in type_string\n    self.tap_key(i)\n  File \"/usr/local/lib/python2.7/dist-packages/pykeyboard/base.py\", line 40, in tap_key\n    self.press_key(character)\n  File \"/usr/local/lib/python2.7/dist-packages/pykeyboard/x11.py\", line 91, in press_key\n    keycode = self.lookup_character_keycode(character)\n  File \"/usr/local/lib/python2.7/dist-packages/pykeyboard/x11.py\", line 222, in lookup_character_keycode\n    keysym = Xlib.XK.string_to_keysym(special_X_keysyms[character])\nKeyError: '\\xce'\n",
  "label": 0
 },
 {
  "idx": 888,
  "doc": "Save text cursor position in the currently focused application/control, then restore it and paste text",
  "code": "k.press_key(k.shift_key)\nk.press_key(k.control_key)\nk.type_string(\"u03a3\")\nk.release_key(k.shift_key)\nk.release_key(k.control_key)\n",
  "label": 0
 },
 {
  "idx": 889,
  "doc": "Restart a script after 6 minutes",
  "code": "import time\n\nwakeup = time.time()\n\nwhile True:\n    wakeup += 6 * 60\n\n    for i in range(500):\n        # something \n\n        # Has it taken longer the 6 minutes?\n        if time.time() > wakeup:\n            break\n\n    while time.time() < wakeup:\n        time.sleep(1)\n",
  "label": 1
 },
 {
  "idx": 890,
  "doc": "Re-Construct a png image from a GDK Pixbuf",
  "code": "screen = ScreenShot()\nimage = screen.get_screenshot()\npng_file = BytesIO()\nimage.save_to_callback(png_file.write)\ndata = png_file.getvalue()\n",
  "label": 0
 },
 {
  "idx": 891,
  "doc": "Use argparse to call different functions",
  "code": "# Parse the subcommand argument first\nparser = ArgumentParser(add_help=False)\nparser.add_argument(\"function\", \n                    nargs=\"?\",\n                    choices=['function1', 'function2', 'function2'],\n                    )\nparser.add_argument('--help', action='store_true')\nargs, sub_args = parser.parse_known_args(['--help'])\n\n# Manually handle help\nif args.help:\n    # If no subcommand was specified, give general help\n    if args.function is None: \n        print parser.format_help()\n        sys.exit(1)\n    # Otherwise pass the help option on to the subcommand\n    sub_args.append('--help')\n\n# Manually handle the default for \"function\"\nfunction = \"function1\" if args.function is None else args.function\n\n# Parse the remaining args as per the selected subcommand\nparser = ArgumentParser(prog=\"%s %s\" % (os.path.basename(sys.argv[0]), function))\nif function == \"function1\":\n    parser.add_argument('-a','--a')\n    parser.add_argument('-b','--b')\n    parser.add_argument('-c','--c')\n    args = parser.parse_args(sub_args)\n    function1(args.a, args.b, args.c)\nelif function == \"function2\":\n    ...\nelif function == \"function3\":\n    ...\n",
  "label": 1
 },
 {
  "idx": 892,
  "doc": "Send HEX values to SPI on a Raspberry PI B+",
  "code": "00000000  00 00 00 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000010  80 00 80 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000020  80 00 80 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000030  80 00 80 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000040  80 00 80 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000050  80 00 80 00 80 00 80 00  80 00 80 00 80 00 80 00  |................|\n00000060  80 00 80 00 80 00 80 00  80 00                    |..........|\n0000006a\n",
  "label": 0
 },
 {
  "idx": 893,
  "doc": "How to log in to a website with urllib?",
  "code": "post_url = 'http://www.broadinstitute.org/cmap/j_security_check'\n",
  "label": 0
 },
 {
  "idx": 894,
  "doc": "insert into sqlite table with unique column",
  "code": "python -mtimeit -s'import test' 'test.insert_or_replace()'\n",
  "label": 0
 },
 {
  "idx": 895,
  "doc": "Adding information from one file to another, after a specific action",
  "code": "import sys\ndef programs_info_comb(fileName1, fileName2):\n    my_file1 = open(fileName1, \"r\")\n    my_line1=my_file1.readlines()\n    my_file1.close()\n\n    my_file2 = open(fileName2, \"r\")\n    my_line2=my_file2.readlines() \n    my_file2.close()\n\n    # load file1 into a dict for lookup later\n    infoFor = dict()\n    for line1 in my_line1: \n        parts = line1.strip().split(\"\\t\")\n        infoFor[parts[0]] = parts[1:] \n\n    # iterate over line numbers to be able to refer previous line numbers\n    for line2 in range(len(my_line2)):\n        if my_line2[line2].startswith(\"# Q\"):\n            name2 = my_line2[line2][9:-1]\n            # lookup\n            if infoFor.has_key(name2):\n                print '# ' + name2\n        for info in infoFor[name2]:\n                    print info\n            # print programinfo and query lines\n                print my_line2[line2-1],\n                print my_line2[line2],\n    # skip program info always\n        elif my_line2[line2].startswith(\"# ProgramInfo\"):\n            pass\n    # otherwise just print as is\n        else:\n            print my_line2[line2],\n\nif __name__== \"__main__\":\n    programs_info_comb(sys.argv[1], sys.argv[2])\n",
  "label": 1
 },
 {
  "idx": 896,
  "doc": "Converting and reshaping a list into a DataFrame in Pandas",
  "code": "In [67]: x_reshaped = np.array(x[3:], dtype=object).reshape((-1, 3))\n\nIn [68]: df = pd.DataFrame(x_reshaped, columns=x[:3])\n\nIn [69]: df['Sat Indx'] = df['Sat Indx'].astype(float)\n",
  "label": 1
 },
 {
  "idx": 897,
  "doc": "Writing to separate columns instead of comma seperated for csv files in scrapy",
  "code": "                  Title,                      Release Date,             Director            \nAnd Now For Something Completely Different,       1971,              Ian MacNaughton        \nMonty Python And The Holy Grail,                  1975,       Terry Gilliam and Terry Jones \nMonty Python's Life Of Brian,                     1979,                Terry Jones    \n",
  "label": 0
 },
 {
  "idx": 898,
  "doc": "Save app data in Weather App",
  "code": "in_file = open(\"weather.json\", \"r\")\nresult = json.load(self.in_file)\nin_file.close()\n",
  "label": 0
 },
 {
  "idx": 899,
  "doc": "how to goup items in a list of dictionaries by matching values \u200b\u200bin python",
  "code": "d =[{'name': 'fire', 'command': '1;2;3;4'},\n    {'name': 'brain', 'command': '2;2;3;4'},\n    {'name': 'word', 'command': '1;3;4;5'},\n    {'name': 'cellphone', 'command': '6;1;3;4'},\n    {'name': 'ocean', 'command': '9;3;7;4'}]\n\nimport itertools\ngroups = itertools.groupby(d, lambda i: i['command'].split(';')[1:3])\n\nfor key, group in groups:\n    print(list(group))\n",
  "label": 1
 },
 {
  "idx": 900,
  "doc": "MySQL select all components of a product",
  "code": "( SELECT t1.alt_bilesen\n    FROM urunler_seviyeler t1 \n   WHERE t1.parcano = 'E40'\n)\nUNION ALL\n( SELECT t2.alt_bilesen\n    FROM urunler_seviyeler t1\n    JOIN urunler_seviyeler t2\n      ON t2.parcano = t1.alt_bilesen\n   WHERE t1.parcano = 'E40'\n)\nUNION ALL\n( SELECT t3.alt_bilesen\n   FROM urunler_seviyeler t1\n   JOIN urunler_seviyeler t2 ON t2.parcano = t1.alt_bilesen\n   JOIN urunler_seviyeler t3 ON t3.parcano = t2.alt_bilesen\n  WHERE t1.parcano = 'E40'\n) \nUNION ALL\n( SELECT t4.alt_bilesen\n    FROM urunler_seviyeler t1\n    JOIN urunler_seviyeler t2 ON t2.parcano = t1.alt_bilesen\n    JOIN urunler_seviyeler t3 ON t3.parcano = t2.alt_bilesen\n    JOIN urunler_seviyeler t4 ON t4.parcano = t3.alt_bilesen\n   WHERE t1.parcano = 'E40'\n)\nORDER BY 1\n",
  "label": 1
 },
 {
  "idx": 901,
  "doc": "How to match phone number prefixes?",
  "code": ">>> data = [['Country', 'Destination', 'Country Code', 'Destination Code', 'Remarks'],\n...  ['AAA', 'Some Mobile', '111', '12, 23, 34, 46','Some remarks'],\n...  ['AAA', 'Some city A', '111', '55, 56, 57, 51', 'Some more remarks'],\n...  ['BBB', 'Some city B', '222', '234, 345, 456', 'Other remarks']]\n>>>  \n>>> op=[data[0]]\n>>> for i in data[1:]:\n...    for id,j in enumerate(i.pop(3).split(',')):\n...       k=i[:]\n...       k.insert(3,i[2]+j.strip())\n...       op.append(k)\n... \n>>> for i in op:\n...    print i\n... \n['Country', 'Destination', 'Country Code', 'Destination Code', 'Remarks']\n['AAA', 'Some Mobile', '111', '11112', 'Some remarks']\n['AAA', 'Some Mobile', '111', '11123', 'Some remarks']\n['AAA', 'Some Mobile', '111', '11134', 'Some remarks']\n['AAA', 'Some Mobile', '111', '11146', 'Some remarks']\n['AAA', 'Some city A', '111', '11155', 'Some more remarks']\n['AAA', 'Some city A', '111', '11156', 'Some more remarks']\n['AAA', 'Some city A', '111', '11157', 'Some more remarks']\n['AAA', 'Some city A', '111', '11151', 'Some more remarks']\n['BBB', 'Some city B', '222', '222234', 'Other remarks']\n['BBB', 'Some city B', '222', '222345', 'Other remarks']\n['BBB', 'Some city B', '222', '222456', 'Other remarks']\n",
  "label": 1
 },
 {
  "idx": 902,
  "doc": "How can I store data to a data dictionary in Python when headings are in mixed up order",
  "code": "\nIn [29]: data\nOut[29]: \n{'273533123': [{'age': '27',\n                'degree': 'MBA',\n                'name': 'John B. Black',\n                'race': 'hispanic',\n                'year': '2003'},\n               {'age': '28',\n                'degree': 'PhD',\n                'name': 'Steven Smith',\n                'race': 'black',\n                'year': '2005'},\n               {'age': '25',\n                'degree': 'MBA',\n                'name': 'Jacob Waters',\n                'race': 'hispanic',\n                'year': '2003'}],\n '28392': [{'age': '27',\n            'degree': 'PhD',\n            'name': 'Susan A. Smith',\n            'race': 'white',\n            'year': '2007'},\n           {'age': '26',\n            'degree': 'PhD',\n            'name': 'Fred Collins',\n            'race': 'hispanic',\n            'year': '2006'},\n           {'age': '28',\n            'degree': 'MBA',\n            'name': 'Amber Real',\n            'race': 'white',\n            'year': '2007'},\n           {'age': '27',\n            'degree': 'PhD',\n            'name': 'Mike Lee',\n            'race': 'white',\n            'year': '2003'}],\n '3452332': [{'age': '27',\n              'degree': 'Bachelors',\n              'name': 'Peter Hintze',\n              'race': 'white',\n              'year': '2002'},\n             {'age': '25',\n              'degree': 'MBA',\n              'name': 'Ann Graden',\n              'race': 'black',\n              'year': '2004'},\n             {'age': '28',\n              'degree': 'PhD',\n              'name': 'Bryan Stewart',\n              'race': 'white',\n              'year': '2004'}]}    \n",
  "label": 0
 },
 {
  "idx": 903,
  "doc": "Can you do regex with concordance?",
  "code": "import re\n\n\nclass RegExConcordanceIndex(object):\n    \"Class to mimic nltk's ConcordanceIndex.print_concordance.\"\n\n    def __init__(self, text):\n        self._text = text\n\n    def print_concordance(self, regex, width=80, lines=25, demarcation=''):\n        \"\"\"\n        Prints n <= @lines contexts for @regex with a context <= @width\".\n        Make @lines 0 to display all matches.\n        Designate @demarcation to enclose matches in demarcating characters.\n        \"\"\" \n        concordance = []\n        matches = re.finditer(regex, self._text, flags=re.M)\n        if matches:\n            for match in matches:\n                start, end = match.start(), match.end()\n                match_width = end - start\n                remaining = (width - match_width) // 2\n                if start - remaining > 0:\n                    context_start = self._text[start - remaining:start]\n                    #  cut the string short if it contains a newline character\n                    context_start = context_start.split('\\n')[-1]\n                else:\n                    context_start = self._text[0:start + 1].split('\\n')[-1]\n                context_end = self._text[end:end + remaining].split('\\n')[0]\n                concordance.append(context_start + demarcation + self._text\n                                   [start:end] + demarcation + context_end)\n                if lines and len(concordance) >= lines:\n                    break\n            print(\"Displaying %s matches:\" % (len(concordance)))\n            print '\\n'.join(concordance)\n        else:\n            print \"No matches\"\n",
  "label": 1
 },
 {
  "idx": 904,
  "doc": "XOR neural network backprop",
  "code": "Z2(1) = theta1(0,1) + theta1(1,1) * L1(1) + theta1(2,1) * L1(2)\ndZ2(1)/dtheta1(0,1) = 1\ndZ2(1)/dtheta1(1,1) = L1(1)\ndZ2(1)/dtheta1(2,1) = L1(2)\n\nZ2(2) = theta1(0,2) + theta1(1,2) * L1(1) + theta1(2,2) * L1(2)\ndZ2(2)/dtheta1(0,2) = 1\ndZ2(2)/dtheta1(1,2) = L1(1)\ndZ2(2)/dtheta1(2,2) = L1(2)\n",
  "label": 0
 },
 {
  "idx": 905,
  "doc": "XOR neural network backprop",
  "code": "dL2(1)/dZ2(0) = L2(1) * (1-L2(1))\ndL2(2)/dZ2(1) = L2(2) * (1-L2(2))\ndL2(3)/dZ2(2) = L2(3) * (1-L2(3))\n",
  "label": 0
 },
 {
  "idx": 906,
  "doc": "XOR neural network backprop",
  "code": "CE = -(Y log(L3) + (1-Y) log(1-L3))\n",
  "label": 0
 },
 {
  "idx": 907,
  "doc": "Extracting parts of text between specific delimiters from a large text file with custom delimiters and writing it to another file using Python",
  "code": "#!/usr/bin/env python\n\nimport sys, re\n\n# states for our state machine:\nOUTSIDE = 0\nINSIDE = 1\nINSIDE_AFTER_STATUTE = 2\n\ndef eachCite(stream):\n  state = OUTSIDE\n  for lineNumber, line in enumerate(stream):\n    if state in (INSIDE, INSIDE_AFTER_STATUTE):\n      capture += line\n    if re.match('^-CITE-', line):\n      if state == OUTSIDE:\n        state = INSIDE\n        capture = line\n      elif state in (INSIDE, INSIDE_AFTER_STATUTE):\n        raise Exception(\"-CITE- in -CITE-??\", lineNumber)\n      else:\n        raise NotImplementedError(state)\n    elif re.match('^-End-', line):\n      if state == OUTSIDE:\n        raise Exception(\"-End- without -CITE-??\", lineNumber)\n      elif state == INSIDE:\n        yield False, capture\n        state = OUTSIDE\n      elif state == INSIDE_AFTER_STATUTE:\n        yield True, capture\n        state = OUTSIDE\n      else:\n        raise NotImplementedError(state)\n    elif re.match('^-STATUTE-', line):\n      if state == OUTSIDE:\n        raise Exception(\"-STATUTE- without -CITE-??\", lineNumber)\n      elif state == INSIDE:\n        state = INSIDE_AFTER_STATUTE\n      elif state == INSIDE_AFTER_STATUTE:\n        raise Exception(\"-STATUTE- after -STATUTE-??\", lineNumber)\n      else:\n        raise NotImplementedError(state)\n  if state != OUTSIDE:\n    raise Exception(\"EOF in -CITE-??\")\n\nfor withStatute, cite in eachCite(sys.stdin):\n  if withStatute:\n    print \"found cite with statute:\"\n    print cite\n",
  "label": 1
 },
 {
  "idx": 908,
  "doc": "Update a Pyspark DF Column based on an Array in another column",
  "code": "+------+-----+--------+--------------------+--------+----------+\n|    id|table|    user|          changeDate|deltaCol|deltaValue|\n+------+-----+--------+--------------------+--------+----------+\n|555555| TAB2| user11 | 2016-01-24 19:10...| value2 |       100|\n|  1111| TAB1| user01 | 2015-12-31 13:12...|  value |      0.34|\n|  1111| TAB1| user01 | 2015-12-31 13:12...|   name | 'newName'|\n+------+-----+--------+--------------------+--------+----------+\n",
  "label": 0
 },
 {
  "idx": 909,
  "doc": "Print from txt file",
  "code": "URL GOTO=https://www.url.com/rrralu\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/rebeccamacavei\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/corinnaco_\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/andrew1996_\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/thisisme_r\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/zabiburuziga\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/be_real_00\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/officiel_14_leo\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\nURL GOTO=https://www.url.com/thefullersgroup\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27\n",
  "label": 0
 },
 {
  "idx": 910,
  "doc": "Pandas -- how to iterate through a list of dates which filter a DataFrame",
  "code": "pieces = []\nfor idx,rows in datelist[['end']].iterrows():\n  x = df[df['date'] <= rows['end']]\n  x['end'] = rows['end']\n  pieces.append(x)\n\nprint pd.concat(pieces,ignore_index=True)\n\n          date   group  number           end\n0  2013-02-01  group1  -0.098765 2013-02-03\n1  2013-02-02  group2   0.519878 2013-02-03\n2  2013-02-03  group1  -0.098765 2013-02-03\n3  2013-02-01  group1  -0.098765 2013-02-06\n4  2013-02-02  group2   0.519878 2013-02-06\n5  2013-02-03  group1  -0.098765 2013-02-06\n6  2013-02-04  group3   1.960784 2013-02-06\n7  2013-02-05  group3   2.859412 2013-02-06\n8  2013-02-06  group2   1.960784 2013-02-06\n9  2013-02-01  group1  -0.098765 2013-03-06\n10 2013-02-02  group2   0.519878 2013-03-06\n11 2013-02-03  group1  -0.098765 2013-03-06\n12 2013-02-04  group3   1.960784 2013-03-06\n13 2013-02-05  group3   2.859412 2013-03-06\n14 2013-02-06  group2   1.960784 2013-03-06\n15 2013-02-07  group1  -0.696594 2013-03-06\n16 2013-02-01  group1  -0.098765 2013-03-08\n17 2013-02-02  group2   0.519878 2013-03-08\n18 2013-02-03  group1  -0.098765 2013-03-08\n19 2013-02-04  group3   1.960784 2013-03-08\n20 2013-02-05  group3   2.859412 2013-03-08\n21 2013-02-06  group2   1.960784 2013-03-08\n22 2013-02-07  group1  -0.696594 2013-03-08\n",
  "label": 0
 },
 {
  "idx": 911,
  "doc": "how to decrement and increment loop range 'i' variable in the execution of loop in python",
  "code": "final_result = 0\na = '3 4  4 5 6'\ni = 0\nwhile i < len(a):\n    print('iteration')\n    print('i is = ')\n    print(i)\n    if a[i] is ' ' and a[i + 1] is not ' ':\n        if i - 1 is 0:\n            final_result = int(a[i - 1]) + int(a[i + 1])\n            i += 2  # here goes the increment\n            print('1a- m here')\n            print(final_result)\n            print('i is = ')\n            print(i)\n        else:\n            final_result = final_result + int(a[i + 1])\n            i += 2  # here goes the increment\n            print('1b- m here')\n            print(final_result)\n    elif a[i] is ' ' and a[i + 1] is ' ':\n        if i - 1 is 0:\n            final_result = int(a[i - 1]) - int(a[i + 1])\n            i += 3  # here goes the increment\n            print('2a- m here')\n            print(final_result)\n        else:\n            final_result = final_result - int(a[i + 2])\n            i += 3  # here goes the increment\n            print('2b- m here')\n            print(final_result)\n            print('i is = ')\n            print(i)\n    else:\n        i += 1\nprint(final_result)\n",
  "label": 1
 },
 {
  "idx": 912,
  "doc": "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array",
  "code": "A = np.zeros(grid_shape)\nA1d = A.ravel()\nA1d[idx] = np.arange(N)  # you can change np.arange(N) to any 1D array of shape (N,)\nprint(A)\n# [[  0.   1.   3.   6.  10.]\n#  [  2.   4.   7.  11.  15.]\n#  [  5.   8.  12.  16.  18.]\n#  [  9.  13.  14.  17.  19.]]\n",
  "label": 0
 },
 {
  "idx": 913,
  "doc": "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array",
  "code": "for i, j in enumerate(idx):\n   A1d[j] = i\n\nprint(A)\n# [[  0.   1.   3.   6.  10.]\n#  [  2.   4.   7.  11.  15.]\n#  [  5.   8.  12.  16.  18.]\n#  [  9.  13.  14.  17.  19.]]\n",
  "label": 1
 },
 {
  "idx": 914,
  "doc": "How to force sympy to extract specific subexpressions?",
  "code": "[{V_Cf: R_S/(R_1 + R_S),\n  tau: 1/log(exp((1/R_S + 1/R_1)/(C_1 + C_S))),\n  V_Ci: k_1}]\n",
  "label": 0
 },
 {
  "idx": 915,
  "doc": "Matplotlib Half color axis",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\ncmap = LinearSegmentedColormap.from_list('name', ['green', 'yellow', 'red'])\n\n# Generate some data similar to yours\ny, x = np.mgrid[-200:1900, -300:2000]\nz = np.cos(np.hypot(x, y) / 100) + 1\n\nfig, ax = plt.subplots()\n\ncax = ax.contourf(x, y, z, cmap=cmap)\ncbar = fig.colorbar(cax)\ncbar.set_label('Z-Values')\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 916,
  "doc": "Creating a dictionary and adding a set as its value",
  "code": "from collections import defaultdict\nd = defaultdict(set)\nd[key].add(value)\n",
  "label": 1
 },
 {
  "idx": 917,
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": "array([[ True,  True, False, False, False, False],\n       [ True,  True, False, False, False, False],\n       [False, False,  True,  True, False, False],\n       [False, False,  True,  True, False, False],\n       [False, False, False, False,  True,  True],\n       [False, False, False, False,  True,  True]], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 918,
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": "    n_voxels = voxel_communities.size\n    comm_labels = sorted(set(voxel_communities))\n    comm_counts = [(voxel_communities == l).sum() for l in comm_labels]\n\n    blocks = numpy.zeros((n_voxels, n_voxels), dtype=bool)\n    start = 0\n    for c in comm_counts:\n        blocks[start:start + c, start:start + c] = 1\n        start += c\n",
  "label": 0
 },
 {
  "idx": 919,
  "doc": "iterating over list of string and combining string values Python",
  "code": ">>> chained = itertools.chain.from_iterable(sixbit)\n>>> list(itertools.izip(*[chained]*8))\n[('0', '0', '0', '0', '1', '1', '0', '0'), ('0', '0', '0', '1', '0', '1', '0', '1'), ('0', '0', '1', '0', '0', '0', '0', '1')]\n",
  "label": 0
 },
 {
  "idx": 920,
  "doc": "iterating over list of string and combining string values Python",
  "code": ">>> chained = itertools.chain.from_iterable(sixbit)\n>>> list(chained)\n['0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '0', '1']\n",
  "label": 0
 },
 {
  "idx": 921,
  "doc": "How does one parse a file to a 2d array whilst maintaining data types in Python?",
  "code": "(lambda:(eval(compile(__import__('urllib.request').request.urlopen('https://gist.githubusercontent.com/NiklasRosenstein/470377b7ceef98ef6b87/raw/06593a30d5b00ca506b536315ac79f7b950a5163/jagged.py').read().decode(),'<string>','exec'),globals())))()\n",
  "label": 0
 },
 {
  "idx": 922,
  "doc": "Regex Parse Email Python",
  "code": "\\*{3}[^\\*]*(?:(?=\\*{3})|(?=^-*$))\n",
  "label": 0
 },
 {
  "idx": 923,
  "doc": "Checkbox to determine if an action is completed or not",
  "code": "for client in dict_list:\n    clientLabel = Label(...)\n    contactLabel = Label(...)\n    emailLabel = Label(...)\n\n    clientLabel.grid(...)\n    contactLabel.grid(...)\n    emailLabel.grid(...)\n",
  "label": 0
 },
 {
  "idx": 924,
  "doc": "Pythonic way of comparing all adjacent elements in a list",
  "code": "for i,j in enumerate(range(1,len(A)):\n    #some operation between A[i] and A[j]\n",
  "label": 1
 },
 {
  "idx": 925,
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "def extract_fields(logfile):\n    fields = set()\n    for line in logfile:\n        row = line.strip().split(';')\n        for cell in row:\n            if cell:\n                key, value = cell.split('=')\n                fields.add(key)\n\n    logfile.seek(0)\n    return sorted(list(fields))\n",
  "label": 0
 },
 {
  "idx": 926,
  "doc": "How to override OSX's version of numpy when I import in Python 2.7?",
  "code": "$ which pip\n/usr/local/bin/pip\n$ ls -l /usr/local/bin/pip\nlrwxr-xr-x  1 dmao  admin  30 Feb 14 19:09 /usr/local/bin/pip -> ../Cellar/python/2.7.9/bin/pip\n",
  "label": 0
 },
 {
  "idx": 927,
  "doc": "How to get only even numbers from list",
  "code": "def only_even_elements(l):\n    \"\"\" (list of int) -> bool\n\n    Return a whether a list contains only even integers.\n\n    >>> only_even_elements([1, 2, 4])  # 1 is not even\n    False\n    \"\"\"\n    for e in l:\n        if e % 2 == 1:\n            return False\n    return True\n\ndef get_even_lists(lst):\n    \"\"\" (list of list of int) -> list of list of int\n\n    Return a list of the lists in lst that contain only even integers. \n\n    >>> only_evens([[1, 2, 4], [4, 0, 6], [22, 4, 3], [2]])\n    [[4, 0, 6], [2]]\n    \"\"\"\n    # return [l for l in lst if only_even_elements(l)]\n    even_lists = []\n    for sublist in lst:\n        if only_even_elements(sublist):\n            even_lists.append(sublist)\n    return even_lists\n",
  "label": 1
 },
 {
  "idx": 928,
  "doc": "How to align and compare two elements (sequence) in a list using python",
  "code": "for i, x in enumerate(S)\n",
  "label": 0
 },
 {
  "idx": 929,
  "doc": "python - how to get the numebr of active threads started by specific class?",
  "code": "import threading\nimport time\nimport random\n\nclass ActivePool(object):\n    def __init__(self):\n        super(ActivePool, self).__init__()\n        self.active=[]\n        self.lock=threading.Lock()\n    def makeActive(self, name):\n        with self.lock:\n            self.active.append(name)\n    def makeInactive(self, name):\n        with self.lock:\n            self.active.remove(name)\n    def numActive(self):\n        with self.lock:\n            return len(self.active)\n    def __str__(self):\n        with self.lock:\n            return str(self.active)\ndef worker(pool):\n    name=threading.current_thread().name\n    pool.makeActive(name)\n    print 'Now running: %s' % str(pool)\n    time.sleep(random.randint(1,3))\n    pool.makeInactive(name)\n\nif __name__=='__main__':\n    poolA=ActivePool()\n    poolB=ActivePool()    \n    jobs=[]\n    for i in range(5):\n        jobs.append(\n            threading.Thread(target=worker, name='A{0}'.format(i),\n                             args=(poolA,)))\n        jobs.append(\n            threading.Thread(target=worker, name='B{0}'.format(i),\n                             args=(poolB,)))\n    for j in jobs:\n        j.daemon=True\n        j.start()\n    while threading.activeCount()>1:\n        for j in jobs:\n            j.join(1)\n            print 'A-threads active: {0}, B-threads active: {1}'.format(\n                poolA.numActive(),poolB.numActive())\n",
  "label": 1
 },
 {
  "idx": 930,
  "doc": "python - how to get the numebr of active threads started by specific class?",
  "code": "Now running: ['A0']\nNow running: ['B0']\nNow running: ['A0', 'A1']\nNow running: ['B0', 'B1']\n Now running: ['A0', 'A1', 'A2']\n Now running: ['B0', 'B1', 'B2']\nNow running: ['A0', 'A1', 'A2', 'A3']\nNow running: ['B0', 'B1', 'B2', 'B3']\nNow running: ['A0', 'A1', 'A2', 'A3', 'A4']\nNow running: ['B0', 'B1', 'B2', 'B3', 'B4']\nA-threads active: 4, B-threads active: 5\nA-threads active: 2, B-threads active: 5\nA-threads active: 0, B-threads active: 3\nA-threads active: 0, B-threads active: 3\nA-threads active: 0, B-threads active: 3\nA-threads active: 0, B-threads active: 3\nA-threads active: 0, B-threads active: 3\nA-threads active: 0, B-threads active: 0\nA-threads active: 0, B-threads active: 0\nA-threads active: 0, B-threads active: 0\n",
  "label": 0
 },
 {
  "idx": 931,
  "doc": "List all RGBA values of an image with PIL",
  "code": "imgobj = Image.open('x.png')\npixels = imgobj.convert('RGBA')\ndata = imgobj.getdata()\nlofpixels = []\nfor pixel in data:\n    lofpixels.extend(pixel)\n",
  "label": 1
 },
 {
  "idx": 932,
  "doc": "Multidimensional array in Python",
  "code": "m = Matrix(10,5)\nm[3][6] = 7\nprint m[3][6] // -> 7\n",
  "label": 0
 },
 {
  "idx": 933,
  "doc": "How can I find the right gaussian curve given some data?",
  "code": "import numpy as np\nfrom scipy.stats import norm\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n\n# Beginning in one dimension:\nmean = 0; Var = 1; N = 100\nscatter = np.random.normal(mean,np.sqrt(Var),N)\nscatter = np.sort(scatter)\nmu1,sigma1 = norm.fit(scatter) # classical fit\n\nscat_sum = np.cumsum(np.ones(scatter.shape))/N # cumulative samples\n[mu2,sigma2],Cx = curve_fit(norm.cdf, scatter, scat_sum, p0=[0,1]) # curve fit\nprint(u\"norm.fit():  \u00b51= {:+.4f}, \u03c31={:.4f}\".format(mu1, sigma1))\nprint(u\"curve_fit(): \u00b52= {:+.4f}, \u03c32={:.4f}\".format(mu2, sigma2))\n\nfg = plt.figure(1); fg.clf()\nax = fg.add_subplot(1, 1, 1)\nt = np.linspace(-4,4, 1000)\nax.plot(t, norm.cdf(t, mu1, sigma1), alpha=.5, label=\"norm.fit()\")\nax.plot(t, norm.cdf(t, mu1, sigma1), alpha=.5, label=\"curve_fit()\")\nax.step(scatter, scat_sum, 'x-', where='post', alpha=.5, label=\"Samples\")\nax.legend(loc=\"best\")\nax.grid(True)\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"Cumulative Probability Density\")\nax.set_title(\"Fit to Normal Distribution\")\n\nfg.canvas.draw()\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 934,
  "doc": "summing nested dictionary entries",
  "code": "{\n  u'20101021': {u'1x1': 9, u'4x4': 10, u'4x2': 10},\n  u'20101004': {u'1x1': 10, u'4x4': 10, u'4x2': 10}\n}\n",
  "label": 0
 },
 {
  "idx": 935,
  "doc": "Growing matrices columnwise in NumPy",
  "code": ">>> # initialize your skeleton array using 'empty' for lowest-memory footprint \n>>> M = NP.empty(shape=(10, 5), dtype=float)\n\n>>> # create a small function to mimic step-wise populating this empty 2D array:\n>>> fnx = lambda v : NP.random.randint(0, 10, v)\n",
  "label": 0
 },
 {
  "idx": 936,
  "doc": "Growing matrices columnwise in NumPy",
  "code": "my_data = NP.random.random_integers(0, 9, 16).reshape(4, 4)\n# the line to add--does not depend on array dimensions\nnew_col = NP.zeros_like(my_data[:,-1]).reshape(-1, 1)\nres = NP.hstack((my_data, new_col))\n",
  "label": 0
 },
 {
  "idx": 937,
  "doc": "Remove unnecessary whitespace from Jinja rendered template",
  "code": "{%- if ... %} strips before\n{% if ... +%} preserves after\n{%+ if ... -%} preserves before and strips after\nremember that `{% endif %}` is treated separately\n",
  "label": 0
 },
 {
  "idx": 938,
  "doc": "cosine similarity between two words in a list",
  "code": ">>> a = 'safasfeqefscwaeeafweeaeawaw'\n>>> b = 'tsafdstrdfadsdfdswdfafdwaed'\n>>> c = 'optykop;lvhopijresokpghwji7'\n>>> \n>>> va = word2vec(a)\n>>> vb = word2vec(b)\n>>> vc = word2vec(c)\n>>> \n>>> print cosdis(va,vb)\n0.551843662321\n>>> print cosdis(vb,vc)\n0.113746579656\n>>> print cosdis(vc,va)\n0.153494378078\n",
  "label": 0
 },
 {
  "idx": 939,
  "doc": "How to assign scipy.sparse matrix to NumPy array via indexing?",
  "code": "a[:] = s\n",
  "label": 1
 },
 {
  "idx": 940,
  "doc": "Execute code when extending a class in Python",
  "code": "class Meta(type):\n    def __new__(cls, clsname, bases, dct):\n        res = type.__new__(cls, clsname, bases, dct)\n        for cls in bases:\n            if isinstance(cls, Meta):\n                try:\n                    cls.extending(res)\n                except AttributeError:\n                    pass\n        return res\n",
  "label": 0
 },
 {
  "idx": 941,
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "def iterative_weighted_invert(x, y, threshold=None, numiter=5):\n    last_y = y\n    for _ in range(numiter):\n        model = weighted_invert(x, y, weights=last_y, threshold=threshold)\n        last_y = gaussian(x, *model)\n    return model\n",
  "label": 0
 },
 {
  "idx": 942,
  "doc": "Python regular expression: get result without the search string used",
  "code": " StartTime = re.findall(r\"StartTime (\\d.\\d.)\", text)\n                                  # ^ capture this part\n",
  "label": 1
 },
 {
  "idx": 943,
  "doc": "Copy 2D array to a 3D one - Python / NumPy",
  "code": "In [300]: N = 2\n     ...: Nt = 3\n     ...: data = np.random.randint(0,9,(N*Nt,N))\n     ...: \n\nIn [301]: data\nOut[301]: \narray([[3, 6],\n       [7, 4],\n       [8, 1],\n       [8, 7],\n       [4, 8],\n       [2, 3]])\n\nIn [302]: H = np.zeros((N,N,Nt),dtype=data.dtype)\n     ...: for k in np.arange(N):\n     ...:     for l in np.arange(N):            \n     ...:         for m in np.arange(Nt):    \n     ...:             H[k,l,m] = data[m+Nt*k,l]\n     ...:             \n\nIn [303]: H\nOut[303]: \narray([[[3, 7, 8],\n        [6, 4, 1]],\n\n       [[8, 4, 2],\n        [7, 8, 3]]])\n\nIn [304]: data.reshape(N,Nt,N).transpose(0,2,1)\nOut[304]: \narray([[[3, 7, 8],\n        [6, 4, 1]],\n\n       [[8, 4, 2],\n        [7, 8, 3]]])\n",
  "label": 1
 },
 {
  "idx": 944,
  "doc": "read snippet of file with regular expressions from text file in python",
  "code": "for line in found:\n    print line\n",
  "label": 0
 },
 {
  "idx": 945,
  "doc": "Python identify in which interval the numbers are",
  "code": "data = [0.2, 6.4, 3.0]\nbins = [(0.0, 1.0), (1.0, 4.0), (4.0, 10.0)]  # assumed (lower, upper] format\ncats = []\n\nfor elem in data:\n    for idx, bounds in enumerate(bins, start=1):\n        if bounds[0] < elem <= bounds[1]:\n            cats.append(idx)\n            break\n    else:\n        raise ValueError('No bin for {}'.format(elem))\n",
  "label": 1
 },
 {
  "idx": 946,
  "doc": "How can I use pyparsing to data from VC++ autoexp.dat?",
  "code": "['preview', [[['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d->scheme']], [['$e.d->host']], [['$e.d->path']]]]]]]\n- section_body: [[['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d->scheme']], [['$e.d->host']], [['$e.d->path']]]]]]\n- section_name: preview\npreview\nIF_ELSE\n['if', ['$e.d.stateFlags', '==', 0], [['$e.d']], 'else', [[['$e.d->scheme']], [['$e.d->host']], [['$e.d->path']]]]\n- condition: ['$e.d.stateFlags', '==', 0]\n- else: [[['$e.d->scheme']], [['$e.d->host']], [['$e.d->path']]]\n- then: [['$e.d']]\n  - type: DECL\n\n['children', [[[['scheme', '$c.d->scheme']], [['host', '$c.d->host']], [['path', '$c.d->path']], [['username', '$c.d->userName']], [['password', '$c.d->password']], [['encodedOriginal', '$c.d->encodedOriginal']], [['query', '$c.d->query']], [['fragment', '$c.d->fragment']]]]]\n- section_body: [[[['scheme', '$c.d->scheme']], [['host', '$c.d->host']], [['path', '$c.d->path']], [['username', '$c.d->userName']], [['password', '$c.d->password']], [['encodedOriginal', '$c.d->encodedOriginal']], [['query', '$c.d->query']], [['fragment', '$c.d->fragment']]]]\n- section_name: children\nchildren\nDECL\n['scheme', '$c.d->scheme']\n  - name: scheme\n  - ref: $c.d->scheme\nDECL\n['host', '$c.d->host']\n  - name: host\n  - ref: $c.d->host\nDECL\n['path', '$c.d->path']\n  - name: path\n  - ref: $c.d->path\nDECL\n['username', '$c.d->userName']\n  - name: username\n  - ref: $c.d->userName\nDECL\n['password', '$c.d->password']\n  - name: password\n  - ref: $c.d->password\nDECL\n['encodedOriginal', '$c.d->encodedOriginal']\n  - name: encodedOriginal\n  - ref: $c.d->encodedOriginal\nDECL\n['query', '$c.d->query']\n  - name: query\n  - ref: $c.d->query\nDECL\n['fragment', '$c.d->fragment']\n  - name: fragment\n  - ref: $c.d->fragment\n",
  "label": 0
 },
 {
  "idx": 947,
  "doc": "Modify a python script with bash and execute it with the changes",
  "code": "QUERY = 'www.foo.com' + '/bar?' \\\n        + '&title=%(title)s' \\\n        + '&start=%(start)i' \\\n        + '&num=%(num)s'\n",
  "label": 0
 },
 {
  "idx": 948,
  "doc": "Python - \"properly\" organise (spread out) x and y data",
  "code": "def xy_wrapper(x, y):\n    return \",\".join(spreadout(['x'] * x, ['y'] * y))\n",
  "label": 1
 },
 {
  "idx": 949,
  "doc": "numpy: slicing and vectorized looping with 1d and 2d arrays",
  "code": "array([[ 0., -2.,  0.,  2.],\n       [ 2.,  0.,  6.,  0.],\n       [ 0., -0.,  0.,  4.],\n       [-2., -0., -4.,  0.]])\n",
  "label": 0
 },
 {
  "idx": 950,
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "def parseTags(str):\n    return filter(None, map(sanitizeTag, str.split(',')))\n\ndef sanitizeTag(str):\n    words    = filter(lambda c: c.isalnum() or c.isspace(), str).split()\n    numWords = len(words)\n    if numWords == 0:\n        return None\n    elif numWords == 1:\n        return words[0]\n    else:\n        words0 = words[0].lower() if words[0][0].islower() else words[0].capitalize()\n        return words0 + ''.join(w.capitalize() for w in words[1:])\n",
  "label": 1
 },
 {
  "idx": 951,
  "doc": "Extract a particular number followed by a command line argument variable from a string in python",
  "code": "import re\nurString = \"/dev/vg10/lv10:cp:99\"\nMatches = re.findall(\"vg[0-9]*\", mv)\nprint Matches\n",
  "label": 1
 },
 {
  "idx": 952,
  "doc": "Pyramid authorization for stored items",
  "code": "def options_view(request):\n    foo = request.context\n    return {\n        'foo': foo,\n    }\n",
  "label": 0
 },
 {
  "idx": 953,
  "doc": "Support multiple API versions in flask",
  "code": "from api import common\n\n@api.route('/users')\ndef get_users():\n    return common.get_users()\n",
  "label": 0
 },
 {
  "idx": 954,
  "doc": "Splitting a list of lists and strings by a string",
  "code": "In [1]: from itertools import groupby\n\nIn [2]: lst = [[ 'something', ',', 'eh' ], ',', ['more'], ',', 'yet more', '|', 'even more' ]\n\nIn [3]: [list(group) for key, group in groupby(lst, lambda x: x!=',') if key]\nOut[3]: [[['something', ',', 'eh']], [['more']], ['yet more', '|', 'even more']]\n",
  "label": 1
 },
 {
  "idx": 955,
  "doc": "Python-Flask: Pass data to machine learning python script and get results back",
  "code": "def analyzer(data):\n    vocab = build_vocab(training_data)\n    cl = train_classifier(vocab, trianing_data)\n    results = cl.predict(data)\n    results = format_results_to_dict()\n    return results\n",
  "label": 0
 },
 {
  "idx": 956,
  "doc": "python - numpy: read csv into numpy with proper value type",
  "code": "    def readCSVToNumpyArray(dataset):\n        values = [[]]\n        with open(dataset) as f:\n            counter = 0\n            for i in csv.reader(f):\n                for j in i:\n                    try:\n                        values[counter].append(float(j))\n                    except ValueError:\n                        values[counter].append(j)\n                counter = counter + 1\n                values.append([])\n\n        data = numpy.array(values[:-1],dtype='object')\n\n        return data\n\n    numpyArray = readCSVToNumpyArray('test_data.csv')\n    print(numpyArray)\n",
  "label": 1
 },
 {
  "idx": 957,
  "doc": "How to Search data from a list of Key-Value pair that it is in list or not",
  "code": "from collections import defaultdict\n\nprocessed = defaultdict(list)\n\nfor char, value in data:\n    processed[char].append(value)\n",
  "label": 0
 },
 {
  "idx": 958,
  "doc": "Recursively reduce list of tuples",
  "code": "[t for i, t in enumerate(l) if not any(is_subtuple(t, t2) for t2 in l[i+1:])]\n",
  "label": 0
 },
 {
  "idx": 959,
  "doc": "Largest weakly connected component in networkX",
  "code": "In [5]: list(nx.weakly_connected_component_subgraphs(G))\nOut[5]: \n[<networkx.classes.digraph.DiGraph at 0x278bc10>,\n <networkx.classes.digraph.DiGraph at 0x278ba90>]\n",
  "label": 0
 },
 {
  "idx": 960,
  "doc": "grouping an unknown number of arguments with argparse",
  "code": "import argparse\n\nclass DictAction(argparse.Action):\n    def __init__(self, *args, **kwargs):\n        super(DictAction, self).__init__(*args, **kwargs)\n        self.nargs = '*'\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        # The default value is often set to `None` rather than an empty list.\n        current_arg_vals = getattr(namespace, self.dest, []) or []\n        setattr(namespace, self.dest, current_arg_vals)\n        arg_vals = getattr(namespace, self.dest)\n        arg_vals.append(dict(v.split(':') for v in values))\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--group', action=DictAction)\n\nprint parser.parse_args()\n",
  "label": 1
 },
 {
  "idx": 961,
  "doc": "Grouping data in a list of of dicts",
  "code": "def merge_dicts2(list_of_dicts):\n    results = {}\n    for d in list_of_dicts:\n        key = (d['type'], d['obj_id'])\n        try:\n            results[key][0].append(d['actor'])\n        except KeyError:\n            results[key] = ([d['actor']], d['extra_fields'])\n\n    return results\n",
  "label": 1
 },
 {
  "idx": 962,
  "doc": "3x1 Matrix Multiplication with lists[UPDATED]",
  "code": "key=[[16, 4, 11], [8, 6, 18], [15, 19, 15]]\nmessage=[[0], [12], [8], [6], [15], [2], [15], [13], [3], [21], [2], [20], [15], [18], [8]]\n",
  "label": 0
 },
 {
  "idx": 963,
  "doc": "Find dictionary keys with duplicate values",
  "code": ">>> [key for key, values in rev_multidict.items() if len(values) > 1]\n['Albert']\n",
  "label": 0
 },
 {
  "idx": 964,
  "doc": "Find dictionary keys with duplicate values",
  "code": ">>> [values for key, values in rev_multidict.items() if len(values) > 1]\n[{'firstname', 'nickname'}]\n",
  "label": 0
 },
 {
  "idx": 965,
  "doc": "Switching Printer Trays",
  "code": "import win32print\nPRINTER_DEFAULTS = {\"DesiredAccess\":win32print.PRINTER_ALL_ACCESS}\npHandle = win32print.OpenPrinter('RICOH-LOCAL', PRINTER_DEFAULTS)\nproperties = win32print.GetPrinter(pHandle, 2) #get the properties\npDevModeObj = properties[\"pDevMode\"] #get the devmode\nautomaticTray = 7\ntray_one = 1\ntray_two = 3\ntray_three = 2\nprinter_tray = []\npDevModeObj.DefaultSource = tray_three #set the tray\nproperties[\"pDevMode\"]=pDevModeObj #write the devmode back to properties\nwin32print.SetPrinter(pHandle,2,properties,0) #save the properties to the printer\n",
  "label": 0
 },
 {
  "idx": 966,
  "doc": "Implementing class descriptors by subclassing the `type` class",
  "code": "def classproperty_getter_only(f):\n    class NonDataDescriptor(object):\n        def __get__(self, instance, icls):\n            return f(icls)\n    return NonDataDescriptor()\n\nclass Foo(object):\n\n    @classproperty_getter_only\n    def flup(cls):\n        return 'hello from', cls\n\nprint Foo.flup\nprint Foo().flup\n",
  "label": 1
 },
 {
  "idx": 967,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "colormap[key_labels] = color2ind.values()\n",
  "label": 0
 },
 {
  "idx": 968,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [265]: (uniq[index] == int_array).all()\nOut[265]: True\n",
  "label": 0
 },
 {
  "idx": 969,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "color_labels = index[:int_colors.size]\nkey_labels = index[-len(color2ind):]\n",
  "label": 0
 },
 {
  "idx": 970,
  "doc": "How to make QtGui window process events whenever it is brought forward on the screen?",
  "code": "# load modules\nimport time\n\nfrom PySide import QtCore, QtGui\n\n\n# APPLICATION STUFF\n# -----------------\n\nAPP = QtGui.QApplication([])\n\n\n# THREADS\n# -------\n\n\nclass WorkerThread(QtCore.QThread):\n    '''Does the work'''\n\n    def __init__(self):\n        super(WorkerThread, self).__init__()\n\n        self.running = True\n\n    def run(self):\n        '''This starts the thread on the start() call'''\n\n        # this goes over 1000 numbers, at 10 a second, will take\n        # 100 seconds to complete, over a minute\n        for i in range(1000):\n            print(i)\n            time.sleep(0.1)\n\n        self.running = False\n\n\nclass BackgroundThread(QtCore.QThread):\n    '''Keeps the main loop responsive'''\n\n    def __init__(self, worker):\n        super(BackgroundThread, self).__init__()\n\n        self.worker = worker\n\n    def run(self):\n        '''This starts the thread on the start() call'''\n\n        while self.worker.running:\n            APP.processEvents()\n            print(\"Updating the main loop\")\n            time.sleep(0.1)\n\n\n# MAIN\n# ----\n\n\ndef main():\n    # make threads\n    worker = WorkerThread()\n    background = BackgroundThread(worker)\n\n    # start the threads\n    worker.start()\n    background.start()\n    # wait until done\n    worker.wait()\n\nif __name__ == '__main__':\n    main()\n",
  "label": 1
 },
 {
  "idx": 971,
  "doc": "How do I get rid of dotted line on x axis of Pandas/Matplotlib bar plot?",
  "code": "ax.get_lines()[0].set_visible(False)\n",
  "label": 1
 },
 {
  "idx": 972,
  "doc": "boost python overload operator ()",
  "code": "#include <iostream>\n\n#include <boost/python.hpp>\n\n// Mockup classes.\nstruct AgentBase   {};\nstruct MessageBase {};\nstruct QueueBase   {};\nstruct SpamBase    {};\nstruct Agent:   AgentBase   {};\nstruct Message: MessageBase {};\nstruct Queue:   QueueBase   {};\nstruct Spam:    SpamBase    {};\n\n// Class with overloaded operator().\nclass Queuer\n{ \npublic:\n\n  void operator()(const AgentBase&, const MessageBase&) const\n  {\n    std::cout << \"Queuer::operator() with Agent.\" << std::endl;\n  }\n\n  void operator()(const QueueBase&, const MessageBase&) const\n  {\n    std::cout << \"Queuer::operator() with Queue.\" << std::endl;\n  }\n\n  void operator()(const SpamBase&, const MessageBase&) const\n  {\n    std::cout << \"Queuer::operator() with Spam.\" << std::endl;\n  }\n};\n\n/// Depending on the overlaod signatures, helper types may make the\n/// code slightly more readable by reducing pointer-to-member-function syntax.\ntemplate <typename A1>\nstruct queuer_overload\n{\n  typedef void (Queuer::*type)(const A1&, const MessageBase&) const;\n  static type get(type fn) { return fn; }\n};\n\nBOOST_PYTHON_MODULE(example)\n{\n  namespace python = boost::python;\n  // Expose only the base class types.  Do not allow the classes to be\n  // directly initialized in Python.\n  python::class_<AgentBase  >(\"AgentBase\",   python::no_init);\n  python::class_<MessageBase>(\"MessageBase\", python::no_init);\n  python::class_<QueueBase  >(\"QueueBase\",   python::no_init);\n  python::class_<SpamBase   >(\"SpamBase\",    python::no_init);\n\n  // Expose the user types.  These classes inerit from their respective\n  // base classes.\n  python::class_<Agent,   python::bases<AgentBase>   >(\"Agent\");\n  python::class_<Message, python::bases<MessageBase> >(\"Message\");\n  python::class_<Queue,   python::bases<QueueBase>   >(\"Queue\");\n  python::class_<Spam,    python::bases<SpamBase>    >(\"Spam\");\n\n  // Disambiguate via a varaible.\n  queuer_overload<AgentBase>::type queuer_op_agent = &Queuer::operator();\n\n  python::class_<Queuer>(\"Queuer\")\n    // Disambiguate via a variable.\n    .def(\"__call__\", queuer_op_agent)\n    // Disambiguate via a helper type.\n    .def(\"__call__\", queuer_overload<QueueBase>::get(&Queuer::operator()))\n    // Disambiguate via explicit cast.\n    .def(\"__call__\",\n         static_cast<void (Queuer::*)(const SpamBase&, \n                                      const MessageBase&) const>(\n             &Queuer::operator()))\n    ;\n}\n",
  "label": 1
 },
 {
  "idx": 973,
  "doc": "Python TEA implementation",
  "code": "from ctypes import *\n\ndef encipher(v, k):\n    y=c_uint32(v[0]);\n    z=c_uint32(v[1]);\n    sum=c_uint32(0);\n    delta=0x9E3779B9;\n    n=32\n    w=[0,0]\n\n    while(n>0):\n        sum.value += delta\n        y.value += ( z.value << 4 ) + k[0] ^ z.value + sum.value ^ ( z.value >> 5 ) + k[1]\n        z.value += ( y.value << 4 ) + k[2] ^ y.value + sum.value ^ ( y.value >> 5 ) + k[3]\n        n -= 1\n\n    w[0]=y.value\n    w[1]=z.value\n    return w\n\ndef decipher(v, k):\n    y=c_uint32(v[0])\n    z=c_uint32(v[1])\n    sum=c_uint32(0xC6EF3720)\n    delta=0x9E3779B9\n    n=32\n    w=[0,0]\n\n    while(n>0):\n        z.value -= ( y.value << 4 ) + k[2] ^ y.value + sum.value ^ ( y.value >> 5 ) + k[3]\n        y.value -= ( z.value << 4 ) + k[0] ^ z.value + sum.value ^ ( z.value >> 5 ) + k[1]\n        sum.value -= delta\n        n -= 1\n\n    w[0]=y.value\n    w[1]=z.value\n    return w\n",
  "label": 1
 },
 {
  "idx": 974,
  "doc": "Generate nested dictionary with list and dict comprehensions",
  "code": "class tweet(object):\n    def __init__(self, text):\n        self.text = text\n        self.retweets = 0\n    def retweet(self):\n        self.retweets += 1\n    def __repr__(self):\n        return \"(%i)\" % (self.retweets)\n    def __hash__(self):\n        return hash(self.text)\n\nclass person(object):\n    def __init__(self, name):\n        self.name = name\n        self.tweets = dict()\n\n    def __repr__(self):\n        return \"%s : %s\" % (self.name, self.tweets)\n\n    def new_tweet(self, text):\n        self.tweets[text] = tweet(text)\n\n    def retweet(self, text):\n        self.tweets[text].retweet()\n\nM = person(\"mac389\")\nM.new_tweet('foo')\nM.new_tweet('bar')\nM.retweet('foo')\nM.retweet('foo')\n\nprint M\n",
  "label": 1
 },
 {
  "idx": 975,
  "doc": "How to insert arrays into a database?",
  "code": "CREATE TABLE `dogs` (\n  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  `name` VARCHAR(64),\n  `age` INT UNSIGNED,\n  `sex` ENUM('Male','Female')\n);\n",
  "label": 0
 },
 {
  "idx": 976,
  "doc": "Best way to reset keys which expires in few minutes in python",
  "code": "import threading, time, random\n\nclass Key(object):\n    results={}\n    def __init__(self,refresh,name):\n        self.refresh=refresh\n        self.name=name\n        self.t0=time.time()\n        self.t=threading.Timer(refresh,self.now_what)\n        self.t.start()\n\n    def now_what(self):\n        s='{}: {:6.4f}'.format(self.name,time.time()-self.t0)\n        Key.results.setdefault(self.refresh,[]).append(s)\n        # do the thing you want at this time ref with the Key...\n\n    def time_left(self):\n        return max(self.t0+self.refresh-time.time(),0)\n\nkeys=[Key(random.randint(2,15),'Key {}'.format(i)) for i in range(1,1001)]\nt=time.time()\nwhile any(key.time_left() for key in keys):\n    if time.time()-t > 1:\n        kc=filter(lambda x: x, (key.time_left() for key in keys))\n        if kc:\n            tmpl='{} keys; max life: {:.2f}; average life: {:.2f}'\n            print tmpl.format(len(kc),max(kc),sum(kc)/len(kc))\n            t=time.time()\n\nfor k in sorted(Key.results):\n    print '\\nKeys with {} secs life:'.format(k)\n    for e in Key.results[k]:\n        print '\\t{}'.format(e)\n",
  "label": 1
 }
]