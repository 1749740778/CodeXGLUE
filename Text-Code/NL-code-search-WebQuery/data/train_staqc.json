[
 {
  "idx": 1,
  "doc": "Python: Extract hrefs inside a div",
  "code": "soup = BeautifulSoup(st)                                             \nfor a in soup.findAll('div', {\"class\":\"tab-pane fade in active\"}):   \n    for b in a.findAll('a'):                                         \n        print b.get('href')\n",
  "label": 1
 },
 {
  "idx": 2,
  "doc": "Python: Extract hrefs inside a div",
  "code": "/accounting?id=265\n/downloadpdf?id=265&type=pdf\n/downloadpdf?id=265&type=file\n",
  "label": 0
 },
 {
  "idx": 3,
  "doc": "How do I sort a complex dictionary by a key, which resides deep the dictionary?",
  "code": " Mark = Employees()\n Mark.surname = 'Johnson'\n Mark.salary = 5\n Mark.car_man = 'Volvo'\n\n John = Employees()\n John.surname = \"Doe\"\n John.salary = 10\n John.car_man = Daewoo\n",
  "label": 0
 },
 {
  "idx": 4,
  "doc": "How can I change the value of a node in a python dictionary by following a list of keys?",
  "code": ">>> from operator import getitem\n>>> lis = ['car', 'ford', 'mustang']\n",
  "label": 0
 },
 {
  "idx": 5,
  "doc": "How can I determine when a user is in the process of entering something as an input in Python?",
  "code": "import msvcrt\none_character= msvcrt.getch()\n",
  "label": 0
 },
 {
  "idx": 6,
  "doc": "Python, remove specific columns from file",
  "code": "['5.76460e+18', '5.83666e+18', '5.83666e+18', '5.76460e+18', '5.83666e+18', '5.83666e+18', '5.83666e+18', '5.83666e+18', '3340']\n",
  "label": 0
 },
 {
  "idx": 7,
  "doc": "Create a game configuration/options (config.cfg) file in Python",
  "code": "[info]\n\nWidth = 100\n\nHeight = 200\n\nName = My Game\n",
  "label": 0
 },
 {
  "idx": 8,
  "doc": "pyspark - multiple input files into one RDD and one output file",
  "code": "rdd = sc.textFile(\"file:///path/*.txt\")\ncounts = rdd.flatMap(lambda line: line.split(\" \")) \\\n...              .map(lambda word: (word, 1)) \\\n...              .reduceByKey(lambda a, b: a + b)\n\ncounts.coalesce(1).saveAsTextFile(\"res.csv\")\n",
  "label": 1
 },
 {
  "idx": 9,
  "doc": "How to find ngram frequency of a column in a pandas dataframe?",
  "code": "import pandas as pd\ndf = pd.DataFrame([\n    'must watch. Good acting',\n    'average movie. Bad acting',\n    'good movie. Good acting',\n    'pathetic. Avoid',\n    'avoid'], columns=['description'])\n",
  "label": 0
 },
 {
  "idx": 10,
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": ">>> x = [1,2,3,4,5,6]\n>>> b = [\"a\",\"b\",\"a\",\"a\",\"c\",\"c\"]\n>>> with_pandas_groupby(np.prod, x, b)\na    12\nb     2\nc    30\n",
  "label": 0
 },
 {
  "idx": 11,
  "doc": "How to apply an array of functions to a value using list comprehension?",
  "code": "your_value = 3\nresult = reduce(lambda x, y: y(x), function_list, your_value)\n",
  "label": 1
 },
 {
  "idx": 12,
  "doc": "Python list comparison to create trees",
  "code": "0 [set([10, 4]), set([13, 7])]\n1 [set([1, 3, 4]), set([8, 2, 28, 6])]\n",
  "label": 0
 },
 {
  "idx": 13,
  "doc": "Django UpdateView without pk in the url",
  "code": "URLs\n# ... omitted\n    url(r'^profile/edit/$', profileviews.ProfileUpdateView.as_view(),\n# ... omitted\n",
  "label": 0
 },
 {
  "idx": 14,
  "doc": "Pandas - group by consecutive ranges",
  "code": "\"\"\"\n   start  end  height    groups  categories\n0      1    3      10   (5, 10]           0\n1      4   10       7   (5, 10]           0\n2     11   17       6   (5, 10]           0\n3     18   26      12  (10, 15]           1\n4     27   30      15  (10, 15]           1\n5     31   40       6   (5, 10]           2\n6     41   42       6   (5, 10]           2\n\"\"\"\n",
  "label": 0
 },
 {
  "idx": 15,
  "doc": "Pandas - group by consecutive ranges",
  "code": "f = {'start':['first'],'end':['last'], 'groups':['first']}\n",
  "label": 0
 },
 {
  "idx": 16,
  "doc": "Pandas - group by consecutive ranges",
  "code": "df['groups']=pd.cut(df.height,[-1,0,5,10,15,1000])\n",
  "label": 0
 },
 {
  "idx": 17,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "if hasattr(instance, self.name + '_is_set')\n",
  "label": 0
 },
 {
  "idx": 18,
  "doc": "Getting World Coordinates with mouse in pygame",
  "code": "    mouse_pos = camera.reverse(pygame.mouse.get_pos())\n    if hit_block:\n        replace_block(mouse_pos)\n",
  "label": 0
 },
 {
  "idx": 19,
  "doc": "How calculate the global coverage?",
  "code": "python {envbindir}/coverage run -p testing/run_tests.py\npython {envbindir}/coverage run -p testing/run_tests.py testing.settings_no_debug\n",
  "label": 0
 },
 {
  "idx": 20,
  "doc": "Using lxml to extract data where all elements are not known in advance",
  "code": "<ADDRESS>\n <STREET>One Main Street</STREET>\n <CITY>Gotham City</CITY>\n <ZIP>99999 0123</ZIP>\n <PHONE>555-123-5467</PHONE>\n </ADDRESS>\n",
  "label": 0
 },
 {
  "idx": 21,
  "doc": "Match rows between two files and mark the matched strings",
  "code": "**NM_134083**  mmu-miR-96-5p   **NM_134083**       0.96213 -0.054\n**NM_177305**  mmu-miR-96-5p   **NM_177305**       0.95707 -0.099\nNM_026184  mmu-miR-93-3p   NM_026184       0.9552  -0.01\n",
  "label": 0
 },
 {
  "idx": 22,
  "doc": "Suppressing the output in libsvm (python)",
  "code": "import svmutil\nx = [[0.2, 0.1], [0.7, 0.6]]\ny = [0, 1]\nsvmutil.svm_train(y, x, '-q')\n",
  "label": 1
 },
 {
  "idx": 23,
  "doc": "Django/jQuery: handling template inheritence and JS files loading",
  "code": "<!DOCTYPE html>\n<html>\n\n<head>...</head>\n<body>\n    {% block content %}{% endblock %}\n    {% block scripts %}{% endblock %}\n</body>\n</html>\n",
  "label": 0
 },
 {
  "idx": 24,
  "doc": "Django/jQuery: handling template inheritence and JS files loading",
  "code": "<!DOCTYPE html>\n<html>\n\n<head>...</head>\n<body>\n    {% include \"content.html\" %}\n    {% include \"js.html\" %}\n</body>\n</html>\n",
  "label": 0
 },
 {
  "idx": 25,
  "doc": "Complete a task during certain time frames within a python script",
  "code": "while currenttime > '23:30:00' and currenttime < '23:40:00':\n",
  "label": 0
 },
 {
  "idx": 26,
  "doc": "Complete a task during certain time frames within a python script",
  "code": "currenttime = strftime('%H:%M:%S')\nprint (\"\"\"23:40:00 to 23:50:00 | %s\"\"\" % (currenttime))\nsleep(1)\n",
  "label": 0
 },
 {
  "idx": 27,
  "doc": "Django app deployment on nGINX",
  "code": "location /yourapp {\n           include uwsgi_params;\n           uwsgi_pass <your app address, eg.localhost>:<portno>;\n                   }\n",
  "label": 0
 },
 {
  "idx": 28,
  "doc": "Get length of subset pandas DataFrame",
  "code": "In [17]: df['len'] = df.groupby('A')['B'].transform(lambda x: len(x))\n\nIn [18]: df\nOut[18]:\n     A  B  C  len\n0  one  2  3    2\n1  one  3  4    2\n2  two  4  6    1\n",
  "label": 0
 },
 {
  "idx": 29,
  "doc": "how to change a node value in python",
  "code": "<area>\n  <media>\n    <options>\n         <name>Mumbai</name>\n    </options>\n </media>\n</area>\n",
  "label": 0
 },
 {
  "idx": 30,
  "doc": "Execute a string as a command",
  "code": "exec(\"print 'hi'\")\n",
  "label": 1
 },
 {
  "idx": 31,
  "doc": "Stop a command line command in script",
  "code": "proc.terminate() # terminate the process.\n",
  "label": 0
 },
 {
  "idx": 32,
  "doc": "Sort a list based on a given distribution",
  "code": "zip(*sorted(zip(sorted(range(len(perc)), key=perc.__getitem__)[::-1],opt)))[1]\n",
  "label": 1
 },
 {
  "idx": 33,
  "doc": "Python: List comprehension list of lists",
  "code": "[[number+1 for number in group] for group in x]\n",
  "label": 1
 },
 {
  "idx": 34,
  "doc": "Python Decorator 3.0 and arguments to the decorator",
  "code": "def f(x):\n  return x\nf = substitude_args({})(f) # notice the double call\n",
  "label": 0
 },
 {
  "idx": 35,
  "doc": "A simple looping command In Python",
  "code": "simple()\n",
  "label": 0
 },
 {
  "idx": 36,
  "doc": "Iterator that supports pushback",
  "code": "pushback_enabled_iterator = PushbackWrapper(original_iterator)\n\nitem = next(pushback_enabled_iterator)\nif went_too_far(item):\n    pushback_enabled_iterator.pushback(item)\n    break;\n",
  "label": 0
 },
 {
  "idx": 37,
  "doc": "Python program: foreign language word-frequency dictionary",
  "code": "import re\nimport collections\n\ndef cleandup(fh):\n    for line in fh:\n        for word in re.split('[^a-z]+', line.lower()):\n            yield word\n\nwith open ('DQ.txt') as doc:\n    wordlist = collections.Counter(cleanedup(doc))\n    print wordlist.most_commond(5)\n",
  "label": 1
 },
 {
  "idx": 38,
  "doc": "Can I cleanse a numpy array without a loop?",
  "code": "deltas[(deltas<0) | (deltas>100)]=0\n",
  "label": 1
 },
 {
  "idx": 39,
  "doc": "Scrapy:newbie attempts to pass the null value",
  "code": "if ranking_list:\n    print ranking_list \n",
  "label": 1
 },
 {
  "idx": 40,
  "doc": "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python",
  "code": "data_copy = list(data)  # you can replace any appearance of data_copy with data if you don't care if it is changed\nwhile data_copy:  # this is equivalent to: while len(data_copy) != 0:\n    to = min(10, len(data_copy))  # If there are less then 10 entries left, the length will be smaller than ten, so that it is either 10 or the (smaller) length. This is the amount of data that's processed\n    f(data_copy[:to])  # make the function call with any value up to 'to'\n    del data_copy[:to]  # delete the data, because we already processed it\n",
  "label": 1
 },
 {
  "idx": 41,
  "doc": "Average multiple vectors of points of different lengths in python",
  "code": "from scipy.interpolate import interp1d\n",
  "label": 0
 },
 {
  "idx": 42,
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": ">>> fL\n['a', 'b', 'c']\n",
  "label": 0
 },
 {
  "idx": 43,
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": "product(*[('A', 'a'), ('B', 'b'), ('C', 'c')])\n",
  "label": 0
 },
 {
  "idx": 44,
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": "product(*zip(L, fL))\n",
  "label": 0
 },
 {
  "idx": 45,
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": ">>> zip(L, fL)\n[('A', 'a'), ('B', 'b'), ('C', 'c')]\n",
  "label": 0
 },
 {
  "idx": 46,
  "doc": "How to do operations with two vectors of different format in python",
  "code": ">>> z\nmatrix([[ 1.  ,  0.  ,  0.  ,  0.25,  0.4 ]])\n",
  "label": 0
 },
 {
  "idx": 47,
  "doc": "How to do operations with two vectors of different format in python",
  "code": "import numpy as np\nfrom scipy.sparse import csr_matrix\n\nx = np.arange(5)+1\n\ny = [1, 0, 0, 1, 2]\ny = csr_matrix(y)\n\nx2 = 1.0 / np.matrix(x)\n\nz = y.multiply(x2)\n",
  "label": 1
 },
 {
  "idx": 48,
  "doc": "reinterpret signed long as unsigned in Python",
  "code": "if x < 0:\n   x += 2 ** 64\n",
  "label": 1
 },
 {
  "idx": 49,
  "doc": "Python how to get sum of numbers in a list that has strings in it as well",
  "code": "sums = dict((k, sum(i for i in v if isinstance(i, int))) for k, v in d.items())\n",
  "label": 1
 },
 {
  "idx": 50,
  "doc": "Naming each item in a list which is a value of a dictionary",
  "code": "for k, v in dct.iteritems():\n    print repr(k)+ \":(\" + \", \".join(\"Country{}:{}\".format(i,c) for i,c in enumerate(v, start=1)) + \")\"\n",
  "label": 1
 },
 {
  "idx": 51,
  "doc": "Parse multi-line string up until first line with certain character",
  "code": "s2 = s1[:s.rfind('\\n')]  #This picks up the newline after \"everything\"\n",
  "label": 0
 },
 {
  "idx": 52,
  "doc": "How to connect QLineEdit focusOutEvent",
  "code": "class Filter(QtCore.QObject):\n    def eventFilter(self, widget, event):\n        # FocusOut event\n        if event.type() == QtCore.QEvent.FocusOut:\n            # do custom stuff\n            print 'focus out'\n            # return False so that the widget will also handle the event\n            # otherwise it won't focus out\n            return False\n        else:\n            # we don't care about other events\n            return False\n",
  "label": 0
 },
 {
  "idx": 53,
  "doc": "Summarize a list of dictionaries based on common key values",
  "code": ">>> dd\ndefaultdict(<type 'list'>, {('11:00am', '1:00pm'): [5], ('10:00am', '7:00pm'): [1, 3], ('8:00am', '5:00pm'): [0, 2, 4]})\n",
  "label": 0
 },
 {
  "idx": 54,
  "doc": "How to thread multiple subprocess instances in Python 2.7?",
  "code": "echo foo |\nfirstCommand - | somePythonRoutine - |\nsecondCommand - | anotherPythonRoutine - |\nthirdCommand - > finalOutput\n",
  "label": 0
 },
 {
  "idx": 55,
  "doc": "Python: sharing a list between threads",
  "code": "l = [0]\n",
  "label": 0
 },
 {
  "idx": 56,
  "doc": "Append in each line of a .txt file a specific string using Python",
  "code": "with open(\"test.txt\", \"r\") as myfile:\n    fil = myfile.read().rstrip('\\n')\nwith open(\"test.txt\", \"w\") as f:\n    f.write(re.sub(r'(?m)^', r'append text', fil))\n",
  "label": 1
 },
 {
  "idx": 57,
  "doc": "How to unpack a list?",
  "code": "first|a|b\n",
  "label": 0
 },
 {
  "idx": 58,
  "doc": "How to unpack a list?",
  "code": "def foo(*mylist):\n    bar(\"first\", *mylist)\n\ndef bar(*vals):\n    print \"|\".join(vals)\n\nfoo(\"a\",\"b\")\n",
  "label": 1
 },
 {
  "idx": 59,
  "doc": "Simple loop for all elements of an etree object?",
  "code": " ['getthis', 'alsoGetThis']\n",
  "label": 0
 },
 {
  "idx": 60,
  "doc": "Elegant way to split list on particular values",
  "code": "defaultdict(<class 'list'>, {'b': [4, 5, 6], 'a': [1, 2, 3]})\n",
  "label": 0
 },
 {
  "idx": 61,
  "doc": "running through a loop and find a condition that match",
  "code": "Example\nblank blank red red blank red blank red red\n. . # # . . . . .\n",
  "label": 0
 },
 {
  "idx": 62,
  "doc": "How to incrementally sample without replacement?",
  "code": "gen = sample_gen(10, [1, 2, 4, 8])\nprint gen.next()\nprint gen.next()\nprint gen.next()\nprint gen.next()\n",
  "label": 0
 },
 {
  "idx": 63,
  "doc": "Is there a reasonable way to add to dictionary values without importing libraries?",
  "code": "{'rope': 1, 'gold coin': 45, 'dagger': 1, 'ruby': 1}\n",
  "label": 0
 },
 {
  "idx": 64,
  "doc": "Is there a reasonable way to add to dictionary values without importing libraries?",
  "code": "inventory = {'rope': 1, 'gold coin': 42,}\nloot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']\n\nfor k in loot:\n    inventory[k] = inventory.get(k, 0) + 1\n\nprint inventory\n",
  "label": 1
 },
 {
  "idx": 65,
  "doc": "Flask : How to update and render a variable periodically?",
  "code": "@app.route('/_stuff', methods= ['GET'])\ndef stuff():\n    cpu=round(getCpuLoad())\n    ram=round(getVmem())\n    disk=round(getDisk())\n    return jsonify(cpu=cpu, ram=ram, disk=disk)\n",
  "label": 0
 },
 {
  "idx": 66,
  "doc": "How to not render a entire string with jinja2",
  "code": "<div>{{ blogpost.text|truncate(1024, True) }}</div>\n",
  "label": 1
 },
 {
  "idx": 67,
  "doc": "How to restart a python script after it finishes",
  "code": "while True:\n    ...\n",
  "label": 1
 },
 {
  "idx": 68,
  "doc": "Passing list of parameters to SQL in psycopg2",
  "code": "'SELECT * FROM table WHERE column IN (1,2,3);'\n",
  "label": 0
 },
 {
  "idx": 69,
  "doc": "have multiple users as one model field in many to one format django models",
  "code": "p = Project.objects.get(name='myproject')\nusers = p.users.all()\n",
  "label": 0
 },
 {
  "idx": 70,
  "doc": "Python - Comparing two lists of sets",
  "code": "l1 = set(s for x in list1 for s in x)\nl2 = set(s for x in list2 for s in x)\n",
  "label": 0
 },
 {
  "idx": 71,
  "doc": "Python - Comparing two lists of sets",
  "code": ">>> print common\nset(['3123', '3115', '3107', '3126'])\n>>> len(common)\n4\n",
  "label": 0
 },
 {
  "idx": 72,
  "doc": "Pandas: Collapse first n rows in each group by aggregation",
  "code": "df[\"grp_idx\"] = np.where(df.groupby(\"id\").cumcount()<3, 0, df[\"grp_idx\"])\n",
  "label": 0
 },
 {
  "idx": 73,
  "doc": "How to use scipy to optimize the position of n points?",
  "code": "from scipy.optimize import minimize\n\nx0 = [] # fill with your initial guesses\nnew_points = minimize(fitness, x0, method='Nelder-Mead')  # or whatever algorithm\n",
  "label": 0
 },
 {
  "idx": 74,
  "doc": "How to use scipy to optimize the position of n points?",
  "code": "def fitness(points):\n    # calculates fitness value\n",
  "label": 0
 },
 {
  "idx": 75,
  "doc": "Escape string to be valid python expression",
  "code": ">>> print(example.encode('unicode_escape').decode('ascii'))\nFoo '\" \\\\ Bar\n>>> example.encode('unicode_escape').decode('ascii')\n'Foo \\'\" \\\\\\\\ Bar'\n",
  "label": 0
 },
 {
  "idx": 76,
  "doc": "How to use argparse during runtime to conditionally get further input?",
  "code": "auth_parse.parse_args([\"J\", \"o\", \"h\", \"n\", \" \", \"S\", \"m\", \"i\", \"t\", \"h\"])\n",
  "label": 0
 },
 {
  "idx": 77,
  "doc": "Nested options with argparse",
  "code": "import argparse\n\nparser = argparse.ArgumentParser()\nsubparsers = parser.add_subparsers(title='subcommands')\n\nparser_foo = subparsers.add_parser('foo')\nparser_foo.set_defaults(target='foo')\n\nparser_bar = subparsers.add_parser('bar')\nparser_bar.add_argument('more')\nparser_bar.set_defaults(target='bar')\n",
  "label": 1
 },
 {
  "idx": 78,
  "doc": "Create a list of keys given a value in a dictionary",
  "code": "[k for k, v in child_parent.items() if v == 0]\n",
  "label": 1
 },
 {
  "idx": 79,
  "doc": "How to pass variable arguments from bash script to python script",
  "code": "#!/bin/bash\n\ndeclare -a list1\ndeclare -a list2\n\nlist1=(\"Hello\" \"there\" \"honey\")\nlist2=(\"More\" \"strings\" \"here\")\n\ndeclare -a joined\n\njoined=($(./pytest.py ${list1[@]} ${list2[@]}))\necho ${joined[@]}\n",
  "label": 0
 },
 {
  "idx": 80,
  "doc": "how to sort a list of string by every element's numeric value",
  "code": "a.sort(key=lambda x:int(x.split()[1]))\nprint a\n",
  "label": 1
 },
 {
  "idx": 81,
  "doc": "how to sort a list of string by every element's numeric value",
  "code": "['part 1', 'part 2', 'part 3', 'part 10']\n",
  "label": 0
 },
 {
  "idx": 82,
  "doc": "how to sort a list of string by every element's numeric value",
  "code": "a = [\"part 1\", \"part 3\" , \"part 10\", \"part 2\"]\nprint sorted(a, key=lambda x:int(x.split()[1]))\n",
  "label": 1
 },
 {
  "idx": 83,
  "doc": "Replace given line in files in Python",
  "code": "\u0444\u0432\u044b\u0430\u0444\u044b\u0432\nsdadf\n\u8bd5\u8bd5\n\u963f\u65af\u8fbe\u0430\n\u963f\u65af\u987f\u98de\n",
  "label": 0
 },
 {
  "idx": 84,
  "doc": "How to reset an unordered index to an ordered one in python?",
  "code": "transactional.reset_index(inplace = True, drop=True)\n",
  "label": 1
 },
 {
  "idx": 85,
  "doc": "recursive way to go through a nested list and remove all of a select value",
  "code": "[1, [2], 5]\n",
  "label": 0
 },
 {
  "idx": 86,
  "doc": "Python OptParse combine multiple options",
  "code": "{'q': None, 'b': True, 't': True}\n",
  "label": 0
 },
 {
  "idx": 87,
  "doc": "How to treat a hex as string?",
  "code": "'{:#x}'.format(0x61cc1000)\n",
  "label": 1
 },
 {
  "idx": 88,
  "doc": "How to treat a hex as string?",
  "code": "\"{0:x}\".format(0x61cc1000)\n",
  "label": 1
 },
 {
  "idx": 89,
  "doc": "How can i extract metdata from django models",
  "code": "from django.contrib.auth.models import User\nget_model_metadata(User, meta_whitelist=['max_length'])\n",
  "label": 0
 },
 {
  "idx": 90,
  "doc": "how to join multiple sorted files in Python alphabetically?",
  "code": "import heapq\nimport contextlib\n\nfiles = [open(fn) for fn in inFiles]\nwith contextlib.nested(*files):\n    with open('output', 'w') as f:\n        f.writelines(heapq.merge(*files))\n",
  "label": 1
 },
 {
  "idx": 91,
  "doc": "Python Pandas DataFrame how to Pivot",
  "code": "df_wanted = pd.pivot_table(\n    df_orig, \n    index=['AN', 'Bincode', 'BC_all'], \n    columns=['Treatment', 'Timepoint'], \n    values=['RIA_avg', 'sum14N_avg']\n)\n",
  "label": 1
 },
 {
  "idx": 92,
  "doc": "How do I generate a sequence of integer numbers in a uniform distribution?",
  "code": ">>> runs = 8\n>>> gen = getNum1To4(8)\n>>> for n in range(runs): print gen.next()\n2\n1\n3\n1\n3\n4\n4\n2\n",
  "label": 0
 },
 {
  "idx": 93,
  "doc": "Rotate photo via python",
  "code": "pill.show()\n",
  "label": 0
 },
 {
  "idx": 94,
  "doc": "Rotate photo via python",
  "code": "rotated_img = pill_img.rotate(90)\nrotated_img.show()\n",
  "label": 0
 },
 {
  "idx": 95,
  "doc": "How to store a name and score into a list?",
  "code": "scores.append({'name': name, 'score': score})\n",
  "label": 1
 },
 {
  "idx": 96,
  "doc": "Inversing a twodimensional array in python",
  "code": "tempArray = [list(reversed(x)) for x in reversed(self.topArea)]\n",
  "label": 1
 },
 {
  "idx": 97,
  "doc": "How to create a timer on python",
  "code": ">>> from timeit import default_timer\n>>> start = default_timer()\n>>> # Martijn reads another post somewhere\n... \n>>> print default_timer() - start\n19.1996181011\n",
  "label": 1
 },
 {
  "idx": 98,
  "doc": "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]",
  "code": "hashlookup:          0.11s     100%\nunrolled_bitwise:    0.26s     229%\nlog_e:               0.30s     268%\nstringcount:         0.30s     270%\nlog_2:               0.34s     301%\nilog:                0.41s     363%\nbitwise:             0.87s     778%\nolgn:                1.02s     912%\nbitcounter:          1.42s    1264%\n",
  "label": 0
 },
 {
  "idx": 99,
  "doc": "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]",
  "code": "hashlookup:          0.13s     100%\nlookup:              0.15s     109%\nstringcount:         0.29s     220%\nunrolled_bitwise:    0.36s     272%\nlog_e:               0.60s     450%\nbitcounter:          0.64s     479%\nlog_2:               0.69s     515%\nilog:                0.81s     609%\nbitwise:             1.10s     821%\nolgn:                1.42s    1065%\n",
  "label": 0
 },
 {
  "idx": 100,
  "doc": "Extracting text from HTML file using Python (Music Artist / Title)",
  "code": "pip install beautifulsoup4\npip install requests\npip install lxml\n",
  "label": 0
 },
 {
  "idx": 101,
  "doc": "Delete files with python through OS shell",
  "code": "import os\n[os.remove(os.path.join(\"E:\\\\test\",f)) for f in os.listdir(\"E:\\\\test\") if f.endswith(\".txt\")]\n",
  "label": 1
 },
 {
  "idx": 102,
  "doc": "numpy random numpers in specified shape of any complexity",
  "code": "import random\n\ndef shaperand(s):\n    return [shaperand(e) if isinstance(e, list) else random.random() for e in s]\n",
  "label": 1
 },
 {
  "idx": 103,
  "doc": "How can I cluster a list of lists in Python based on string indices? Need insight",
  "code": "Introduction 0 11 0\nFloating point numbers 0 11 33\nIEEE Standard 754 0 11 58\n",
  "label": 0
 },
 {
  "idx": 104,
  "doc": "Mulitprocess Pools with different functions",
  "code": ">>> print result_squares.get(timeout=1)\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n>>> print result_cubes.get(timeout=1)\n[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n",
  "label": 0
 },
 {
  "idx": 105,
  "doc": "How to use an array to keep track of different numbers?",
  "code": "Boxes to buy: 10 Cards Found: 9; 1; 2; 8; 5; 7; 10; 6; 4; 3 Total Amount Of Cards: 31\n",
  "label": 0
 },
 {
  "idx": 106,
  "doc": "python matplotlib dash-dot-dot - how to?",
  "code": "import matplotlib.pyplot as plt\n\nline, = plt.plot([1,5,2,4], '-')\nline.set_dashes([8, 4, 2, 4, 2, 4]) \nplt.show()\n",
  "label": 1
 },
 {
  "idx": 107,
  "doc": "Exclude weekends in python django query set",
  "code": "Sample.objects.filter(date__month=month).exclude(date__day__in = weekends)\n",
  "label": 1
 },
 {
  "idx": 108,
  "doc": "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts",
  "code": "mylist = [{\"greeting\":\"HELLO WORLD!\"}, {\"greeting\":\"Hello Mars\"}, {\"greeting\":\"Hello World!!!\"}, {\"greeting\":\"hello world\"}]\nunique(mylist, ['greeting'])\n\nprint mylist\n",
  "label": 0
 },
 {
  "idx": 109,
  "doc": "Finding a parent key from a dict given an intermediate key using python",
  "code": "def find_parent_keys(d, target_key, parent_key=None):\n  for k, v in d.items():\n    if k == target_key:\n      yield parent_key\n    if isinstance(v, dict):\n      for res in find_parent_keys(v, target_key, k):\n        yield res\n",
  "label": 1
 },
 {
  "idx": 110,
  "doc": "Finding a parent key from a dict given an intermediate key using python",
  "code": "['dev2', 'dev1']\n[None]\n",
  "label": 0
 },
 {
  "idx": 111,
  "doc": "Separating file extensions using python os.path module",
  "code": ">>> import os\n>>> 'filename.ext1.ext2'.split(os.extsep)\n['filename', 'ext1', 'ext2']\n",
  "label": 1
 },
 {
  "idx": 112,
  "doc": "Best way to convert value in nested list to string",
  "code": "value = [ \",\".join(map(str,i)) for i in value ]\n",
  "label": 1
 },
 {
  "idx": 113,
  "doc": "Best way to convert value in nested list to string",
  "code": "value = [ \",\".join(str(x) for x in i) for i in value ]\n",
  "label": 1
 },
 {
  "idx": 114,
  "doc": "calculate distance between two chains in PDB file",
  "code": "N-C 51.70\nN-O 52.83\nN-N 51.30\nC-C 51.14\nC-O 52.29\nC-N 50.71\nC-C 50.00\nC-O 51.14\nC-N 49.56\n",
  "label": 0
 },
 {
  "idx": 115,
  "doc": "How to count how many positions away an element is in a list?",
  "code": ">>> list1=[34,5,1,7,5,3,8,512,8,43]\n>>> max_ele = max(list1)\n>>> print(list1.index(max_ele))\n7\n",
  "label": 1
 },
 {
  "idx": 116,
  "doc": "How to count how many positions away an element is in a list?",
  "code": "print(list1.index(max(list1)))\n",
  "label": 1
 },
 {
  "idx": 117,
  "doc": "How to exit a supervisor process with fabric file?",
  "code": "$ fab super_status -H localhost\n",
  "label": 0
 },
 {
  "idx": 118,
  "doc": "How to exit a supervisor process with fabric file?",
  "code": "$ fab -l\n",
  "label": 0
 },
 {
  "idx": 119,
  "doc": "Parsing html for domain links",
  "code": "url = 'domain.com/'\nfor domain in list:\n    domain_minus_www = domain\n    if domain_minus_www.startswith('www.'):\n        domain_minus_www = domain_minus_www[4:]\n    if url.startswith(domain) or url.startswith(domain_minus_www):\n        ... do something ...\n",
  "label": 1
 },
 {
  "idx": 120,
  "doc": "Add numpy array as column to Pandas data frame",
  "code": "   0  1  2     newcol\n0  1  2  3  [0, 1, 0]\n1  4  5  6  [0, 0, 1]\n2  7  8  9  [1, 0, 0]\n",
  "label": 0
 },
 {
  "idx": 121,
  "doc": "Difference of elements to find same adjacent",
  "code": "numbers = [1,3,7,11,25,36,57,678,999]\ncount = sum([numbers[i] == numbers[i+1] for i in range(len(numbers)-1)])\n>>> count\n8\n",
  "label": 1
 },
 {
  "idx": 122,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "#ifndef ITESTCLASS_H_\n#define ITESTCLASS_H_\n\n// Created by Cython when providing 'public api' keywords\n#include \"../elps_api.h\"\n\n#include \"../../inc/TestClass.h\"\n\nnamespace elps {\n\nclass ITestClass : public TestClass {\npublic:\n    PyObject *m_obj;\n\n    ITestClass(PyObject *obj);\n    virtual ~ITestClass();\n    virtual int override_me();\n};\n\n} /* namespace elps */\n#endif /* ITESTCLASS_H_ */\n",
  "label": 0
 },
 {
  "idx": 123,
  "doc": "How to recursively sum and store all child values in a tree",
  "code": "F:\\so>python test-tree.py\nchild.get_all_weight() 58\nchild.get_all_weight() 7\n115\n\nchild.get_all_weight() 10\nchild.get_all_weight() 20\n80\n\nchild.get_all_weight() 115\nchild.get_all_weight() 80\n295\n",
  "label": 0
 },
 {
  "idx": 124,
  "doc": "Filtering for row-wise patterns in columns with a sequence of 0 and 1",
  "code": "res = {col: t[col][t[col] != 0] for col in df.columns}\n",
  "label": 1
 },
 {
  "idx": 125,
  "doc": "Filtering for row-wise patterns in columns with a sequence of 0 and 1",
  "code": "res = {}\nt = df - df.shift(1)\nfor col in df.columns:\n    res[col] = t[col][t[col] != 0]\n",
  "label": 1
 },
 {
  "idx": 126,
  "doc": "How to find number of matches in the array or dictionary?",
  "code": "my_list = [1,4,7,4,5,7,1,3]\nprint my_list.count(4)\n",
  "label": 1
 },
 {
  "idx": 127,
  "doc": "Computing 16-bit checksum of ICMPv6 header",
  "code": "def build_pseudo_header(src_ip, dest_ip, payload_len):\n    source_ip_bytes = bytearray.fromhex(src_ip)\n    dest_ip_bytes = bytearray.fromhex(dest_ip)\n    next_header = struct.pack(\">I\", 58)\n    upper_layer_len = struct.pack(\">I\", payload_len)\n    return source_ip_bytes + dest_ip_bytes + upper_layer_len + next_header\n",
  "label": 0
 },
 {
  "idx": 128,
  "doc": "Computing 16-bit checksum of ICMPv6 header",
  "code": "def build_icmpv6_chunk(type_and_code, other):\n    type_code_bytes = bytearray.fromhex(type_and_code)\n    checksum = struct.pack(\">I\", 0)  # make sure checksum is set to 0 here\n    other_bytes = bytearray.fromhex(other)\n    return type_code_bytes + checksum + other_bytes\n",
  "label": 0
 },
 {
  "idx": 129,
  "doc": "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?",
  "code": "In [24]: df.groupby(['year']).mean()\nOut[24]: \n             A         B         C         D         id\nyear                                                   \n2003  0.160187 -0.258744 -0.062440  0.056729  57.750000\n2004  0.419713 -0.477434 -0.137516  0.114353  27.333333\n",
  "label": 0
 },
 {
  "idx": 130,
  "doc": "How to pivot/cross-tab data in Python 3?",
  "code": "Column headings: ['apples', 'peaches']\n'New York' [8, 6]\n'Vermont' ['uh-oh', 1]\n",
  "label": 0
 },
 {
  "idx": 131,
  "doc": "Generate two random strings with dash in between",
  "code": ">>> pick(5)\nOSD-711\nKRH-340\nMDE-271\nZJF-921\nLUX-920\n>>> pick(0)\n>>> pick(3)\nSFT-252\nXSL-209\nMAF-579\n",
  "label": 0
 },
 {
  "idx": 132,
  "doc": "how to pick random items from a list while avoiding picking the same item in a row",
  "code": "def choice_without_repetition(lst):\n    prev = None\n    while True:\n        i = random.randrange(len(lst))\n        if i != prev:\n            yield lst[i]\n            prev = i\n",
  "label": 1
 },
 {
  "idx": 133,
  "doc": "how to pick random items from a list while avoiding picking the same item in a row",
  "code": "lst = [1,2,3,4,5,6,7,8]\nfor x in choice_without_repetition(lst):\n    print x\n",
  "label": 0
 },
 {
  "idx": 134,
  "doc": "how to pick random items from a list while avoiding picking the same item in a row",
  "code": "def choice_without_repetition(lst):\n    i = 0\n    while True:\n        i = (i + random.randrange(1, len(lst))) % len(lst)\n        yield lst[i]\n",
  "label": 1
 },
 {
  "idx": 135,
  "doc": "chunk of data into fixed lengths chunks and then add a space and again add them all as a string",
  "code": "x=\"a85b080040010000\"\nprint re.sub(r\"(.{2})\",r\"\\1 \",x)\n",
  "label": 1
 },
 {
  "idx": 136,
  "doc": "What is the proper way to perform a contextual search against NoSQL key-value pairs?",
  "code": "SELECT * FROM things WHERE name like 'mon%'\n",
  "label": 0
 },
 {
  "idx": 137,
  "doc": "What is the proper way to perform a contextual search against NoSQL key-value pairs?",
  "code": "db.things.find({name:{$regex:'mon'}}).forEach(printjson);\n",
  "label": 0
 },
 {
  "idx": 138,
  "doc": "Regex? Match part of or whole word",
  "code": "('potato',)\n('potat',)\n('pota',)\n",
  "label": 0
 },
 {
  "idx": 139,
  "doc": "Extracting Text from Parsed HTML with Python",
  "code": "from BeautifulSoup import BeautifulSoup\n\nhtml = ('<html><head><title>Page title</title></head>'\n       '<body>'\n       '<table><tr>'\n       '<td class=\"name\"><a href=\"/torrent/32726/0/\">Slackware Linux 13.0 [x86 DVD ISO]</a></td>'\n       '<td class=\"name\"><a href=\"/torrent/32727/0/\">Slackware Linux 14.0 [x86 DVD ISO]</a></td>'\n       '<td class=\"name\"><a href=\"/torrent/32728/0/\">Slackware Linux 15.0 [x86 DVD ISO]</a></td>'\n       '</tr></table>'\n       'body'\n       '</html>')\nsoup = BeautifulSoup(html)\nlinks = [td.find('a') for td in soup.findAll('td', { \"class\" : \"name\" })]\nfor link in links:\n    print link.string\n",
  "label": 1
 },
 {
  "idx": 140,
  "doc": "Appium - Clean app state at the first test and last test, but not between tests",
  "code": "xcrun simctl erase <udid here>\n",
  "label": 0
 },
 {
  "idx": 141,
  "doc": "How to calculate cohen's d in Python?",
  "code": "-0.5567679522645598\n",
  "label": 0
 },
 {
  "idx": 142,
  "doc": "How to match integers in NLTK CFG?",
  "code": "(S (NP I) (VP (V shot) (NP (NUM #NUM#) (N elephants))))\n",
  "label": 0
 },
 {
  "idx": 143,
  "doc": "How to match integers in NLTK CFG?",
  "code": "import nltk\n\ngroucho_grammar = nltk.CFG.fromstring(\"\"\"\nS -> NP VP\nPP -> P NP\nNP -> Det N | Det N PP | 'I' | NUM N\nVP -> V NP | VP PP\nDet -> 'an' | 'my'\nN -> 'elephant' | 'pajamas' | 'elephants'\nV -> 'shot'\nP -> 'in'\nNUM -> '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10'\n\"\"\")\n\nsent = 'I shot 3 elephants'.split()\nparser = nltk.ChartParser(groucho_grammar)\nfor tree in parser.parse(sent):\n    print(tree)\n",
  "label": 1
 },
 {
  "idx": 144,
  "doc": "how to convert value of column defined as character into integer in python",
  "code": "try:\n    int(myvar)\nexcept ValueError:\n    ...Handle the exception...\n",
  "label": 1
 },
 {
  "idx": 145,
  "doc": "Efficient way of creating a permutated 2D array with a range of integers",
  "code": "X,Y = np.meshgrid(np.arange(0,100), np.arange(0,100))\nresult = np.vstack((Y.ravel(), X.ravel())).T\nresult\n# array([[ 0,  0],\n#        [ 0,  1],\n#        [ 0,  2],\n#           ..., \n",
  "label": 1
 },
 {
  "idx": 146,
  "doc": "Find and replace a string in Python",
  "code": "In [219]: customize_string(line,\"Short\")\nOut[219]: 'TeacherShort  =  Small  |1-2|  StudentShort'\n",
  "label": 0
 },
 {
  "idx": 147,
  "doc": "Python sorting array according to date",
  "code": "['q//Attachments/Swoop_coverletter_311386_20120103.doc', \n 'q//Attachments/Swoop_reSume_311386_20120103.doc', \n 'q//Attachments/Swoop_Resume_311386_20100901.doc', \n 'q//Attachments/Swoop_coverletter_311386_20100901.doc', \n 'q//Attachments/Swoop_RESUME_311386_20091012.doc', \n 'q//Attachments/Swoop_coverletter_311386_20091012.doc', \n '']\n",
  "label": 0
 },
 {
  "idx": 148,
  "doc": "Python Check a 2d list for empty strings?",
  "code": "\n# combine the last two\ndef is_full(self):  # python functions/methods are usually lower case\n    for row in self.data:  # no need to index everything like c\n        if any(cell == ' ' for cell in row):  # any/all are convenient testers\n            return False  # if you find even one, it's done.\n    return True  # if you couldn't disqualify it, then it looks full\n",
  "label": 1
 },
 {
  "idx": 149,
  "doc": "Python Check a 2d list for empty strings?",
  "code": "# straightforward but deep\ndef is_full(self):\n    for row in self.data:\n        for cell in row:\n            if cell == ' ':\n                return False\n    return True\n",
  "label": 1
 },
 {
  "idx": 150,
  "doc": "Python Check a 2d list for empty strings?",
  "code": "\n# one line, not especially readable\ndef is_full(self):\n    return not any(cell == ' ' for row in d for cell in row)\n",
  "label": 1
 },
 {
  "idx": 151,
  "doc": "How can you find where python imported a particular module from?",
  "code": "import module\n\nprint module.__file__\n",
  "label": 1
 },
 {
  "idx": 152,
  "doc": "Python Sorting Regular Expression",
  "code": "{'playerc': ('39', '29', '18'), 'player b': ('38', '93', '75'), 'player a': ('34', '45', '56')}\n",
  "label": 0
 },
 {
  "idx": 153,
  "doc": "Python Sorting Regular Expression",
  "code": "import re\n\nplayer_string = \"player a 34 45 56 player b 38 93 75 playerc 39 29 18 playerd 38 98\"\n\npattern = re.compile(r\"([\\w ]*?)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\")\nmatches = pattern.findall(player_string)\nd = {}\nfor m in matches :\n    print m\n    d[m[0].strip()] = m[1:]\n\nprint d\n",
  "label": 1
 },
 {
  "idx": 154,
  "doc": "tuple of datetime objects in Python",
  "code": ">>> d = datetime.datetime(2013, 8, 15, 12, 0, 0)\n>>> print week_start_end(d)\n(datetime.datetime(2013, 8, 11, 0, 0), datetime.datetime(2013, 8, 17, 23, 59, 59, 999999))\n",
  "label": 0
 },
 {
  "idx": 155,
  "doc": "Try/Except Every Method in Class?",
  "code": "@decorate_all_methods(Http500Resistant)\nclass A(object):\n    ...\n",
  "label": 0
 },
 {
  "idx": 156,
  "doc": "Try/Except Every Method in Class?",
  "code": "class A(object): ...\nA = decorate_all_methods(Http500Resistant)(A)\n",
  "label": 0
 },
 {
  "idx": 157,
  "doc": "How to count how many posts each link has on a reddit-like app?",
  "code": "{% for link in links %}\n    {{ link.post_count }}\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 158,
  "doc": "pandas pivot_table percentile / quantile",
  "code": "In [135]: df = pd.DataFrame([['a',2,3],\n                             ['a',5,6],\n                             ['a',7,8], \n                             ['b',9,10], \n                             ['b',11,12], \n                             ['b',13,14]], columns=list('abc'))\n",
  "label": 0
 },
 {
  "idx": 159,
  "doc": "Modifying HTML using python html package",
  "code": "<table>\n <tr>\n  <td>\n   Something\n  </td>\n </tr>\n</table>\n",
  "label": 0
 },
 {
  "idx": 160,
  "doc": "How can I execute shell command with a | pipe in it",
  "code": "import subprocess\n\nsubprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)\n",
  "label": 1
 },
 {
  "idx": 161,
  "doc": "Inserting a folder containing specific routes to a bottle application in Python",
  "code": "import bottle\n\nconfig_app = bottle.Bottle()\n\n@config_app.route('/config1')\ndef config1():    \n    return 'some config data'\n",
  "label": 0
 },
 {
  "idx": 162,
  "doc": "Split field to array when accessed",
  "code": "cat = Categories.objects.get(id=1)\nprint cat.get_spamwords_as_list()\n",
  "label": 0
 },
 {
  "idx": 163,
  "doc": "Broken XML file parsing and using XPATH",
  "code": ">>> s = \"\"\"<A>\n  <B>\n    <C>\n  </B>\n  <B></A>\"\"\"\n>>> fix_xml(s)\nAdding closing tag <C> at line 4\nAdding closing tag <B> at line 7\n<A>\n  <B>\n    <C>\n  </C>\n</B>\n  <B>\n</B>\n</A>\n",
  "label": 0
 },
 {
  "idx": 164,
  "doc": "Finding index values in a pandas data frame where columns are the same",
  "code": "mask = df[['PhaseA','PhaseB','PhaseC']].isin([415,423,427,432]).all(axis=1)\ndf.ix[mask]\n",
  "label": 1
 },
 {
  "idx": 165,
  "doc": "How to parse the header files of the pcap file?",
  "code": "In [90]: data.data.src\nOut[90]: '\\xc0\\xa8\\n\\n'\n",
  "label": 0
 },
 {
  "idx": 166,
  "doc": "Casting string/buffer data using swig wrapped typedef structs and enums in python",
  "code": "import proto\nproto.struct_token_type_delta.from_buffer(bytearray(b'\\xff\\x11\\x22'))\n",
  "label": 0
 },
 {
  "idx": 167,
  "doc": "Search multiple strings in multiple files",
  "code": "fgrep -rlf messages.txt dir\n",
  "label": 1
 },
 {
  "idx": 168,
  "doc": "python regex comma separated group",
  "code": ">>> re.sub(r'(?<=\\s)(?!.*nodev)(?=\\S*,\\S*)\\S+', r'\\g<0>,nodev', s)\n'/dev/mapper/ex_s-l_home /home  ext4    rw,exec,auto,nouser,async,nodev    1  2'\n>>> re.sub(r'(?<=\\s)(?!.*nodev)(?=\\S*,\\S*)\\S+', r'\\g<0>,nodev', s2)\n'/dev/mapper/ex_s-l_home /home  ext4    rw,exec,auto,nodev,nouser,async    1  2'\n",
  "label": 0
 },
 {
  "idx": 169,
  "doc": "How to request a File in Google Drive",
  "code": "from apiclient.discovery import build\n\ndef build_service(credentials):\n  http = httplib2.Http()\n  http = credentials.authorize(http)\n  return build('drive', 'v2', http=http)\n",
  "label": 0
 },
 {
  "idx": 170,
  "doc": "splitting string in Python (2.7)",
  "code": "r'\\(\\s*passengers:\\s*(\\d{1,3}|\\?)\\s+ crew:\\s*(\\d{1,3}|\\?)\\s*\\)'\n",
  "label": 0
 },
 {
  "idx": 171,
  "doc": "splitting string in Python (2.7)",
  "code": ">>> import re\n>>> numbers = re.compile(r'\\(\\s*passengers:\\s*(\\d{1,3}|\\?)\\s+ crew:\\s*(\\d{1,3}|\\?)\\s*\\)')\n>>> numbers.search('26   (passengers:22  crew:4)').groups()\n('22', '4')\n>>> numbers.search('32   (passengers:?  crew: ?)').groups()\n('?', '?')\n",
  "label": 1
 },
 {
  "idx": 172,
  "doc": "Make scatter plot from set of points in tuples",
  "code": "x,y = zip(*s)\nplt.scatter(x,y)\n",
  "label": 1
 },
 {
  "idx": 173,
  "doc": "any() function in Python with a callback",
  "code": ">>> any(isinstance(e, int) and e > 0 for e in [1,2,'joe'])\nTrue\n",
  "label": 1
 },
 {
  "idx": 174,
  "doc": "Run same test on multiple datasets",
  "code": "@pytest.fixture(scope='module', params=[load_dataset1, load_dataset2])\ndef data(request):\n    loader = request.param\n    dataset = loader()\n    return dataset\n",
  "label": 1
 },
 {
  "idx": 175,
  "doc": "Run same test on multiple datasets",
  "code": "@pytest.fixture(scope='module', params=[load_dataset1, load_dataset2])\ndef data(request):\n    loader = request.param\n    dataset = loader()\n    def fin():\n        # finalize dataset-related resource\n        pass\n    request.addfinalizer(fin)\n    return dataset\n",
  "label": 1
 },
 {
  "idx": 176,
  "doc": "how to iterate over all files in path?",
  "code": "import os\npath = \"c:\\\\Python27\\\\test\"\n\nfor name in os.listdir(path):\n    if name.endswith('.txt'):\n        fpath = os.path.join(path, name)\n        with open(fpath) as fin:\n            print fpath, 'opened'\n",
  "label": 1
 },
 {
  "idx": 177,
  "doc": "Convert a python list into function",
  "code": "1.0\n2.0\n3.0\n3.4\n",
  "label": 0
 },
 {
  "idx": 178,
  "doc": "Python: Effective reading from a file using csv module",
  "code": "  while titles[-1] == '':\n    titles.pop()\n",
  "label": 0
 },
 {
  "idx": 179,
  "doc": "how to know the type of sql query result before it is executed in sqlalchemy",
  "code": "[c['type'].python_type for c in query.column_descriptions]\n",
  "label": 1
 },
 {
  "idx": 180,
  "doc": "How to let js make a request from python and preserve the loaded site in place when answered by python",
  "code": "<div id=\"result_from_server\"></div>\n",
  "label": 0
 },
 {
  "idx": 181,
  "doc": "How to let js make a request from python and preserve the loaded site in place when answered by python",
  "code": "<script type=\"text/javascript\">\n('#result_from_server').load('/some_html');\n</script>\n",
  "label": 0
 },
 {
  "idx": 182,
  "doc": "How do you create a list of values in Python within a certain range?",
  "code": ">>> [ str(x).zfill(5) for x in range(10) ]\n['00000', '00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009']\n",
  "label": 1
 },
 {
  "idx": 183,
  "doc": "How should I subtract two dataframes and in Pandas and diplay the required output?",
  "code": "df['calc'] = (df['Order_101']-df['Order_102']) / 100\n",
  "label": 0
 },
 {
  "idx": 184,
  "doc": "to delete records from a file in python",
  "code": "foo\nbar\n44 foo\n",
  "label": 0
 },
 {
  "idx": 185,
  "doc": "How can I use a list comprehension to extend a list in python?",
  "code": "accumulationList = []\nfor x in originalList:\n    accumulationList.extend(doSomething(x))\nreturn accumulationList\n",
  "label": 1
 },
 {
  "idx": 186,
  "doc": "Boost.Python: Ownership of pointer variables",
  "code": "//The node class should be held by std::auto_ptr\nclass_<Node, std::auto_ptr<Node> >(\"Node\")\n//expose the thin wrapper function as node.add_child()\n.def(\"addChild\", &node_add_child)\n;\n",
  "label": 0
 },
 {
  "idx": 187,
  "doc": "Extracting data from file with differing amounts of columns",
  "code": "$ awk  '{print $(NF-2)}' /tmp/genes.txt\n9268558\n76229363\n",
  "label": 1
 },
 {
  "idx": 188,
  "doc": "Python convert single column of data into multiple columns",
  "code": " row = 0         row = 1        row = 2\n9501.7734375    4396.1953125    9088.046875\n9279.390625     4197.1796875    8680.6953125\n8615.1640625    3994.4296875    8253.0546875\n",
  "label": 0
 },
 {
  "idx": 189,
  "doc": "Using Eval in Python to create class variables",
  "code": "for variable in self.variable_list:\n       var_type,var_text_ctrl,var_name = variable\n       if var_type == 'f' :\n           setattr(self, var_name, var_text_ctrl.GetValue())\n",
  "label": 1
 },
 {
  "idx": 190,
  "doc": "How can I get a Tuple from a list in python (3.3)",
  "code": "matching_results = [t for t in list_ if t[0] == c_code]\n",
  "label": 1
 },
 {
  "idx": 191,
  "doc": "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2",
  "code": "In [276]: df[(df['fold'] >= 2) | (df['fold'] <= -0.6)]\nOut[276]:\n   label         Y88_N          diff       div      fold\n0      0  25273.626713  17348.581851  2.016404  2.016404\n1      1  29139.510491  -4208.868050  0.604304 -0.604304\n5      5  28996.634708  10934.944533  2.031293  2.031293\n",
  "label": 1
 },
 {
  "idx": 192,
  "doc": "Search with employee_id in openerp?",
  "code": "<button name=\"%(hr_holidays.action_your_action_form_test)d\" string=\"Leaves\" type=\"action\" context=\"{'search_default_employee_id':employee_id}\" />\n",
  "label": 1
 },
 {
  "idx": 193,
  "doc": "pythonic solution for finding the other element in a list of length two",
  "code": "return  pair[not pair.index(core)]\n",
  "label": 1
 },
 {
  "idx": 194,
  "doc": "pythonic solution for finding the other element in a list of length two",
  "code": "return set(pair) - [core]\n",
  "label": 1
 },
 {
  "idx": 195,
  "doc": "pythonic solution for finding the other element in a list of length two",
  "code": "return pair[0] if pair[0] != core else pair[1]\n",
  "label": 1
 },
 {
  "idx": 196,
  "doc": "Creating a subplot instead of separate plots",
  "code": "fig, axes = plt.subplots(2)\n\nplt.subplot2grid((1,5), (0,0), colspan=3)\n# here plot something\n\nplt.subplot2grid((1,5), (0,3), colspan=2)\n# here plot something\n\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 197,
  "doc": "finding the max of a column in an array",
  "code": "[[ 0.51972266  0.35930957  0.60381998]\n [ 0.34577217  0.27908173  0.52146593]\n [ 0.12101346  0.52268843  0.41704152]\n [ 0.24181773  0.40747905  0.14980534]]\n\n[ 0.51972266  0.52268843  0.60381998]\n\n[ 0.60381998  0.52146593  0.52268843  0.40747905]\n",
  "label": 0
 },
 {
  "idx": 198,
  "doc": "Split a string by three delimiters, and adding them to different lists",
  "code": "['Poles', 'Magnet', '?', 'Battery']\n['Charge', 'Ends', 'Magic', 'Metal']\nCharge\n",
  "label": 0
 },
 {
  "idx": 199,
  "doc": "Print two report in Odoo8",
  "code": "def print_reports(self, cr, uid, ids, context):\n    \"\"\"DO NOT EDIT !\"\"\"\n",
  "label": 0
 },
 {
  "idx": 200,
  "doc": "How can I set a code for users when they enter a valud URL or not with PYTHON/Flask?",
  "code": "from mechanize import Browser\n\nbr = Browser()    \nr = br.open(\"http://www.example.com/\")\n\nif r.code == 200:\n    for link in br.links():\n        print link\nelse:\n    print \"Error loading page\"\n",
  "label": 1
 },
 {
  "idx": 201,
  "doc": "python + auto ssh proccess to get date info",
  "code": "import paramiko\nssh = paramiko.SSHClient()\n# Uncomment the following line for the equivalent of -oStrictHostKeyChecking=no\n#ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect('103.116.140.151', username='user', password='diana_123')\nstdin, stdout, stderr = ssh.exec_command(\"date\")\ndate = stdout.read()\nprint(date)\n",
  "label": 1
 },
 {
  "idx": 202,
  "doc": "Append to arrays in loop",
  "code": "{'Group3': ['DDDD'], 'Group4': ['BBBBB'], 'Group1': ['EEEE'], 'Group2': ['CCCCC'], 'Group5': ['AAAA']}\n",
  "label": 0
 },
 {
  "idx": 203,
  "doc": "greedy regex split python every nth line",
  "code": ">>> s = 'Four score and seven years ago.'\n>>> ss = s + 5*' '; [ss[i:i+6] for i in range(0, len(s) - 1, 6)]\n['Four s', 'core a', 'nd sev', 'en yea', 'rs ago', '.     ']\n",
  "label": 1
 },
 {
  "idx": 204,
  "doc": "Sum of calculation in a variable",
  "code": ">>> calc()\nEnter an expression: 8 + 5 - 7\n6\n",
  "label": 0
 },
 {
  "idx": 205,
  "doc": "Dynamic Table Creation and ORM mapping in SqlAlchemy",
  "code": ">>> from sqlalchemy.orm import mapper\n>>> mapper(Player, players_table) \n<Mapper at 0x...; Player>\n",
  "label": 0
 },
 {
  "idx": 206,
  "doc": "Transform string in a list with elements separated on Python",
  "code": "rem_spaces = str.maketrans({' ':None})\n\nfrom binascii import unhexlify\n\nunhexlify(u.translate(rem_spaces))\nOut[13]: b'\\x01\\xa02\\x00\\x00\\x00\\x00\\xfe\\x12o\\x04'\n",
  "label": 1
 },
 {
  "idx": 207,
  "doc": "List names of all available MS SQL databases on server using python",
  "code": "master\ntempdb\nmodel\nmsdb\nmyDb\n",
  "label": 0
 },
 {
  "idx": 208,
  "doc": "python mock patch top level packages",
  "code": "import unittest.mock as mock\n\nmock_argparse = mock.Mock()\nwith mock.patch.dict('sys.modules', argparse=mock_argparse):\n    import argparse\n    print(argparse.ArgumentParser()) \n# <Mock name='mock.ArgumentParser()' id='140681471282448'>\n",
  "label": 0
 },
 {
  "idx": 209,
  "doc": "alternate for multiple constructors",
  "code": "default = MyClass.create_default_parser()\n",
  "label": 0
 },
 {
  "idx": 210,
  "doc": "Python - filling a list of tuples with zeros in places of missing indexes",
  "code": "result, last = [], 0.0\nfor d in data:\n    result.extend((r,0) for r in range(int(last), int(d[0])))\n    result.append(d)\n    last = d[0]+1\n",
  "label": 1
 },
 {
  "idx": 211,
  "doc": "grouping values for grammar generation in python",
  "code": "NP---> N_NNP N_NN_S_NU N_NNP N_NNP\nVGF---> V_VM_VF\nNP---> N_NN\n",
  "label": 0
 },
 {
  "idx": 212,
  "doc": "parsing single text items from xml with Python",
  "code": "$ pip install lxml\n",
  "label": 0
 },
 {
  "idx": 213,
  "doc": "Test subclass behaviour?",
  "code": "class TestA2(TestCaseA):\n    def setUp(self):\n        self.thing = A2()\n",
  "label": 0
 },
 {
  "idx": 214,
  "doc": "Test subclass behaviour?",
  "code": "import unittest\nclass TestCaseA(unittest.TestCase):\n    def setUp(self):\n        self.thing = A()\n\n    def test_does_x():\n        self.assertTrue(self.thing.does_x())\n",
  "label": 0
 },
 {
  "idx": 215,
  "doc": "Using multiple (similar) generator expressions",
  "code": "new_row = [item.translate(trans) for item in row]\n",
  "label": 0
 },
 {
  "idx": 216,
  "doc": "Convert dataFrame to list",
  "code": "print df.values.flatten()\n[2 0 1 0 1 0]\n\nprint df.iloc[:, 0].values.flatten()\n[2 0 1 0 1 0]\n",
  "label": 1
 },
 {
  "idx": 217,
  "doc": "Python extract info from a local html file",
  "code": "soup = BeautifulSoup(data, \"html.parser\")\n",
  "label": 0
 },
 {
  "idx": 218,
  "doc": "How can I find all subclasses of a given class in Python?",
  "code": "print([cls.__name__ for cls in vars()['Foo'].__subclasses__()])\n# ['Bar', 'Baz']\n",
  "label": 1
 },
 {
  "idx": 219,
  "doc": "How can I find all subclasses of a given class in Python?",
  "code": "class Foo(object): pass\nclass Bar(Foo): pass\nclass Baz(Foo): pass\nclass Bing(Bar): pass\n",
  "label": 0
 },
 {
  "idx": 220,
  "doc": "Use BeautifulSoup to extract text before the first child tag",
  "code": ">>> from BeautifulSoup import BeautifulSoup\n>>> soup = BeautifulSoup('<div class=a>Category: <a href=\"/\">a link</a></div>')\n>>> soup.find('a')\n<a href=\"/\">a link</a>\n>>> soup.find('a').previousSibling\nu'Category: '\n>>> \n",
  "label": 1
 },
 {
  "idx": 221,
  "doc": "How to get a list of the elements in TreeView? PyGtk",
  "code": "model[0]\n",
  "label": 0
 },
 {
  "idx": 222,
  "doc": "Convert date to second from a reference - Python",
  "code": "2012-03-09 09:17:14.698500+00:00 1331284634\n",
  "label": 0
 },
 {
  "idx": 223,
  "doc": "Python: replace multiple values of a Matrix",
  "code": "[[0, 0, 1, 0], [1, 0, \"x\", \"x\"], [\"x\", \"x\", \"x\", \"x\"], [0, 1, 0, 0]]\n",
  "label": 0
 },
 {
  "idx": 224,
  "doc": "Sum corresponding elements of multiple python dictionaries",
  "code": ">>> print c\nCounter({'d': 20, 'c': 13, 'b': 8, 'a': 3})\n",
  "label": 0
 },
 {
  "idx": 225,
  "doc": "Match multiple lines in a file using regular expression python",
  "code": "import re\n\nregex = re.match(r'''(^\n    \\s*\n    (clns|bfd|ip)\n    \\s+\n    (routing|graceful-restart|default-network|default-gateway|subnet-zero|cef)\n$)+''', re.MULTILINE | re.VERBOSE)\n",
  "label": 1
 },
 {
  "idx": 226,
  "doc": "How to define a chi2 value function for arbitrary function?",
  "code": "['a1', 'a2', 'a3', 'a4']\n",
  "label": 0
 },
 {
  "idx": 227,
  "doc": "How do I get the number of posts on each day with annotation in Django?",
  "code": "day_counts = Post.objects.filter(author=someuser).values('posted_day').annotate(\n                                       dailycount=Count('posted_day')).order_by()\n",
  "label": 0
 },
 {
  "idx": 228,
  "doc": "Create PDF from a list of images",
  "code": "pip install fpdf\n",
  "label": 0
 },
 {
  "idx": 229,
  "doc": "Execute coroutine from `call_soon` callback function",
  "code": "loop = asyncio.get_event_loop()\ncoro = hello_world(loop)\nasyncio.ensure_future(coro)\nloop.run_forever()\nloop.close()\n",
  "label": 0
 },
 {
  "idx": 230,
  "doc": "Call app template in a different app's template",
  "code": "{% block 'title' %}\n{{ contact.title }}\n{% endblock %}\n\n{% block 'content' %}\n{% endblock %}\n",
  "label": 0
 },
 {
  "idx": 231,
  "doc": "How to make unique combinations of the following list of tuples",
  "code": "from itertools import product\nnames = [('Bob', 'Tom'), ('GreenWood', 'Pearson')]\nfor item in product(*names):\n    print(item)\n",
  "label": 1
 },
 {
  "idx": 232,
  "doc": "How to make unique combinations of the following list of tuples",
  "code": "Bob GreenWood\nBob Pearson\nTom GreenWood\nTom Pearson\n",
  "label": 0
 },
 {
  "idx": 233,
  "doc": "How to search a string with the url patterns in django?",
  "code": "if getattr(my_view, \"name\", None) == \"User Profile View\":\n    ...\n",
  "label": 0
 },
 {
  "idx": 234,
  "doc": "How to encode a python dictionary and decode in jquery? (via a cookie)",
  "code": "var dict = $.parseJSON($.cookie('MyCookie'));\n",
  "label": 0
 },
 {
  "idx": 235,
  "doc": "How to encode a python dictionary and decode in jquery? (via a cookie)",
  "code": "import urlib.parse, json\ncookie_data = urllib.parse.quote(json.dumps(mydict))\n",
  "label": 0
 },
 {
  "idx": 236,
  "doc": "How to use malloc and free with python ctypes?",
  "code": "x.c\n#include <stdio.h>\n#define DLL_EXPORTS\n#include \"x.h\"\n\nvoid func(struct example* p)\n{\n    int i;\n    strcpy_s(p->data,p->len,\"hello, world!\");\n    for(i = 0; i < p->count; i++)\n        p->doubles[i] = 1.1 * (i + 1);\n}\n",
  "label": 0
 },
 {
  "idx": 237,
  "doc": "How to use malloc and free with python ctypes?",
  "code": "Output\nbefore: Example(b'',[0.0,0.0,0.0,0.0,0.0])\nafter: Example(b'hello, world!',[1.1,2.2,3.3000000000000003,4.4,5.5])\n",
  "label": 0
 },
 {
  "idx": 238,
  "doc": "How to use malloc and free with python ctypes?",
  "code": "x.h\n#ifdef DLL_EXPORTS\n#define DLL_API __declspec(dllexport)\n#else\n#define DLL_API __declspec(dllimport)\n#endif\n\nstruct example {\n    char* data;\n    int len;          // of data buffer\n    double* doubles;\n    int count;        // of doubles\n};\n\nDLL_API void func(struct example* p);\n",
  "label": 0
 },
 {
  "idx": 239,
  "doc": "Borda Count using python?",
  "code": "{'A': 12.0, 'C': 5.5, 'B': 8.5, 'E': 1.0, 'D': 3.0}\n",
  "label": 0
 },
 {
  "idx": 240,
  "doc": "Inspecting data descriptor attributes in python",
  "code": "def __get__(self, obj, objtype):\n    print 'Retrieving', self.name\n    if obj is None:  # accessed as class attribute\n        return self  # return the descriptor itself\n    else:  # accessed as instance attribute\n        return self.val  # return a value\n",
  "label": 1
 },
 {
  "idx": 241,
  "doc": "Inspecting data descriptor attributes in python",
  "code": "Retrieving var \"x\"\n('__weakref__', <attribute '__weakref__' of 'MyClass' objects>)\n('x', <__main__.RevealAccess object at 0x7f32ef989890>)\n",
  "label": 0
 },
 {
  "idx": 242,
  "doc": "Evaluate multiple variables in one 'if' statement?",
  "code": "if var1 == var2 == var3 == var4 == False:\n",
  "label": 1
 },
 {
  "idx": 243,
  "doc": "Matrix triple product with theano",
  "code": "np.dot(A[:, None, :] * B[None, :, :], C.T)\n",
  "label": 1
 },
 {
  "idx": 244,
  "doc": "Is it possible to use 'else' in a python list comprehension?",
  "code": "table = ''.join(chr(index) if index in ords_to_keep else replace_with\n                for index in xrange(15))\n",
  "label": 1
 },
 {
  "idx": 245,
  "doc": "Getting specific field from chosen Row in Pyspark DataFrame",
  "code": "result.rdd.map(lambda x: x.gender).first()\n",
  "label": 0
 },
 {
  "idx": 246,
  "doc": "Computer Shut Off Python 3.4",
  "code": "import subprocess\nsubprocess.call(['osascript', '-e',\n'tell app \"System Events\" to shut down'])\n",
  "label": 1
 },
 {
  "idx": 247,
  "doc": "Regex for location matching - Python",
  "code": ">>> x = 'London, ENG, United Kingdom / Melbourne, VIC, Australia / Palo Alto, CA USA'\n>>> re.findall(r'(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)\n['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']\n",
  "label": 1
 },
 {
  "idx": 248,
  "doc": "matching a multiline make-line variable assignment with a python regexp",
  "code": "'    \\n\\nFOO=a \\\\    \\n\\n  b\\n\\n  '\n---------------------\na \\    \n-----\n'a \\\\    '\n---------------------\na \\    \n\n  b\n\n\n-----\n'a \\\\    \\n\\n  b\\n\\n  '\n",
  "label": 0
 },
 {
  "idx": 249,
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "import pandas as pd\n\ndata = {'product_id': [23, 65, 66, 98, 998, 798],\n        'category': ['cat1', 'cat2', 'cat1', 'cat1', 'cat1', 'cat2'],\n        'number_of_purchase': [18,19,4,9,1,8]}\n\ndf = pd.DataFrame(data)\nprint df\n",
  "label": 0
 },
 {
  "idx": 250,
  "doc": "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame",
  "code": "  category  number_of_purchase  product_id\n0     cat1                  18          23\n1     cat2                  19          65\n2     cat1                   4          66\n3     cat1                   9          98\n4     cat1                   1         998\n5     cat2                   8         798\n",
  "label": 0
 },
 {
  "idx": 251,
  "doc": "Efficient ways to duplicate array/list in Python",
  "code": "copy(a) 3.98940896988\nlist(a) 2.54542589188\na[:] 1.96630120277                   #winner\na[0:len(a)] 10.5431251526\n",
  "label": 0
 },
 {
  "idx": 252,
  "doc": "Tools for creating text as bitmaps (anti-aliased text, custom spacing, transparent background)",
  "code": "$ convert -background none input.svg output.png\n",
  "label": 0
 },
 {
  "idx": 253,
  "doc": "Python iterate list of dicts and create a new one",
  "code": "for entry in inputlist:\n    entry['r'] = min(mxr, calculateRange(x, entry['x'], y, entry['y']))\n",
  "label": 1
 },
 {
  "idx": 254,
  "doc": "Delete newline / return carriage in file output",
  "code": "TestingThisWordlistWithReturnsBetweenLines\n",
  "label": 0
 },
 {
  "idx": 255,
  "doc": "Delete newline / return carriage in file output",
  "code": "aqua:test$ cat newwordlist.txt \nTesting\nThis\nWordlist\nWith\nReturns\nBetween\nLines\n",
  "label": 0
 },
 {
  "idx": 256,
  "doc": "Convert Country Names to Country Code using Python DictReader/DictWriter",
  "code": "name\nKazakhstan\nUkraine\n",
  "label": 0
 },
 {
  "idx": 257,
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "{% for file in entry.files.all %}\n",
  "label": 0
 },
 {
  "idx": 258,
  "doc": "Replace character in line inside a file",
  "code": "import fileinput\nfor line in fileinput.input(filename, inplace = True):\n    sample, value = line.split(':')\n    value = int(value)     #convert value to int for calculation purpose\n    if some_condition: \n           # do some calculations on sample and value\n           # modify sample, value if required \n\n    #now the write the data(either modified or still the old one) to back to file\n    print \"{}:{}\".format(sample, value)\n",
  "label": 1
 },
 {
  "idx": 259,
  "doc": "Selenium (Python): How to insert value on a hidden input?",
  "code": "from selenium import webdriver\n\ndriver = webdriver.Firefox()\ndriver.get('http://jsfiddle.net/falsetru/mLGnB/show/')\nelem = driver.find_element_by_css_selector('div.dijitReset>input[type=hidden]')\ndriver.execute_script('''\n    var elem = arguments[0];\n    var value = arguments[1];\n    elem.value = value;\n''', elem, '2013-11-26')\n",
  "label": 1
 },
 {
  "idx": 260,
  "doc": "How can I properly join these strings together (by column then row)?",
  "code": "print ('#'*10 + '\\n')*10\n",
  "label": 1
 },
 {
  "idx": 261,
  "doc": "How can I properly join these strings together (by column then row)?",
  "code": "print '\\n'.join( ''.join('#' for column in range(10)) for row in range(10))\n",
  "label": 1
 },
 {
  "idx": 262,
  "doc": "For loop syntax in Python without using range() or xrange()",
  "code": "for ind, i in enumerate(lst):\n    for j in lst[ind+1: ]: \n        #Do Something\n",
  "label": 1
 },
 {
  "idx": 263,
  "doc": "Django: Converting an entire set of a Model's objects into a single dictionary",
  "code": "modelDict = DictModelAdaptor(DictModel)\nmodelDict[\"name\"] = \"Bob Jones\"\n",
  "label": 0
 },
 {
  "idx": 264,
  "doc": "How to split a string by a string except when the string is in quotes in python?",
  "code": "import re\np = re.compile(r'((?:(?!\\band\\b)[^\\'])*(?:\\'[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*\\'(?:(?!\\band\\b)[^\\'])*)*)(?:and|$)')\ns = \"section_category_name = 'computer and equipment expense' and date >= 2015-01-01 and date <= 2015-03-31\"\nprint([x for x in p.findall(s) if x])\n",
  "label": 1
 },
 {
  "idx": 265,
  "doc": "Randomize a generator",
  "code": "random_combinations_sample(a_large_set, 3, 10)\n",
  "label": 0
 },
 {
  "idx": 266,
  "doc": "How could I delete certain columns then write wanted columns into csv python",
  "code": "ID,Name,Nickname,Income,Car\n1,A,test,12k,Benz\n2,B,test1,23k,Audi\n3,C,test2,20k,BMW\n",
  "label": 0
 },
 {
  "idx": 267,
  "doc": "How could I delete certain columns then write wanted columns into csv python",
  "code": "ID,Name,Income\n1,A,12k\n2,B,23k\n3,C,20k\n",
  "label": 0
 },
 {
  "idx": 268,
  "doc": "How could I delete certain columns then write wanted columns into csv python",
  "code": "Nickname\nCar\n",
  "label": 0
 },
 {
  "idx": 269,
  "doc": "google app engine - ndb query to only get a few columns in python",
  "code": "class userData(ndb.Model):\n    id = ndb.StringProperty()\n    name = ndb.StringProperty()\n    emailAddress = ndb.StringProperty()\n\nuser = userData.query().filter(ndb.GenericProperty('id') ==  \"requiredId\")\\\n                       .fetch(projection=[userData.id, userData.name])\n",
  "label": 1
 },
 {
  "idx": 270,
  "doc": "Finding superstrings in a set of strings in python",
  "code": "['136 139 277 24', '246']\n",
  "label": 0
 },
 {
  "idx": 271,
  "doc": "Splitting a string @ once using different seps",
  "code": "date, time = the_string.split(' ')\nyears, months, days = date.split('-')\nhours, minute, seconds = time.split(\":\")\n",
  "label": 1
 },
 {
  "idx": 272,
  "doc": "List database tables with SQLAlchemy",
  "code": "from sqlalchemy import inspect\ninspector = inspect(engine)\n\nfor table_name in inspector.get_table_names():\n   for column in inspector.get_columns(table_name):\n       print(\"Column: %s\" % column['name'])\n",
  "label": 0
 },
 {
  "idx": 273,
  "doc": "insert into sqlite table with unique column",
  "code": "python -mtimeit -s'import test' 'test.filter_nonunique_rows_in_Python()'\n",
  "label": 0
 },
 {
  "idx": 274,
  "doc": "insert into sqlite table with unique column",
  "code": "python -mtimeit -s'import test' 'test.insert_with_try_catch_blocks()'\n",
  "label": 0
 },
 {
  "idx": 275,
  "doc": "How to make a field computed only if some condition is fulfilled in Odoo 8?",
  "code": "@api.one\n@api.depends('child_ids', 'child_ids.value')\ndef _compute_value(self):\n    if self.child_ids:\n        self.value = sum(\n            [child.value for child in self.child_ids])\n    else:\n        self.value = self.value_manual\n",
  "label": 0
 },
 {
  "idx": 276,
  "doc": "How to make a field computed only if some condition is fulfilled in Odoo 8?",
  "code": "computed_field = fields.Char(compute='comp', inverse='inv', store=True)\nboolean_field = fields.Boolean()\n\n@api.one\ndef comp(self):\n    ...\n\n@api.one\ndef inv(self):\n    ...\n",
  "label": 0
 },
 {
  "idx": 277,
  "doc": "How to make a field computed only if some condition is fulfilled in Odoo 8?",
  "code": "value_manual = fields.Float()\nmanual = fields.Boolean(compute='_is_manual', default=True)\n\n@api.one\n@api.depends('child_ids')\ndef _is_manual(self):\n    self.manual = len(self.child_ids) == 0\n",
  "label": 0
 },
 {
  "idx": 278,
  "doc": "How to make a field computed only if some condition is fulfilled in Odoo 8?",
  "code": "<field name=\"boolean_field\" />\n<field name=\"computed_field\" attrs=\"{'readonly': [('boolean_field','=',True)]}\" />\n",
  "label": 0
 },
 {
  "idx": 279,
  "doc": "expose C++ function to python",
  "code": "size: 2\nvalues:\n1 2\n3 4\n",
  "label": 0
 },
 {
  "idx": 280,
  "doc": "expose C++ function to python",
  "code": "import hello\n\na1 = hello.A(1,2)\na2 = hello.A(3,4)\nret = hello.get_a(a1, a2)\nprint \"size:\", len(ret)\nprint \"values:\"\nfor x in ret:\n  print x.a, x.b \n",
  "label": 0
 },
 {
  "idx": 281,
  "doc": "How do I collapse categorical data into a single record in R or Python?",
  "code": "import pandas as pd\n\ndf = pd.read_clipboard() # from your sample\n\ndf\n   ID Code\n0   1    A\n1   1    B\n2   1    C\n3   2    A\n4   2    C\n5   3    B\n6   3    C\n",
  "label": 0
 },
 {
  "idx": 282,
  "doc": "Converting json to html table in python",
  "code": "infoFromJson = json.loads(jsonfile)\nprint json2html.convert(json = infoFromJson)\n",
  "label": 1
 },
 {
  "idx": 283,
  "doc": "Converting json to html table in python",
  "code": "$ pip install json2html\n",
  "label": 0
 },
 {
  "idx": 284,
  "doc": "Python: Automatically initialize instance variables?",
  "code": ">>> c = process(1, 2, 3, 4, 5, 6)\n>>> c.PID\n1\n>>> dir(c)\n['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'\n",
  "label": 0
 },
 {
  "idx": 285,
  "doc": "Get a value from a dictionary without linking to the memory location",
  "code": ">>> import copy\n>>> C = copy.copy(D[\"A\"])\n>>> C.append(4)\n>>> D[\"A\"]\n[1, 2, 3]\n",
  "label": 1
 },
 {
  "idx": 286,
  "doc": "Rolling mean with customized window with Pandas",
  "code": "import pandas as pd\n\ndata = pd.Series(range(1, 9))\n\ndata_mean = pd.rolling_mean(data, window=5).shift(-2)\nprint(data_mean)\n",
  "label": 1
 },
 {
  "idx": 287,
  "doc": "Django how to update more than a row field at once",
  "code": "t.value1 = 1\nt.value2 = 2\nt.save()\n",
  "label": 1
 },
 {
  "idx": 288,
  "doc": "Selecting Tags With Multiple Part Class in BeautifulSoup",
  "code": "test1\ntest2\n",
  "label": 0
 },
 {
  "idx": 289,
  "doc": "Check if all elements of one array is in another array",
  "code": ">>> is_slice_in_list(B,A)\nTrue\n>>> is_slice_in_list(C,A)\nTrue\n>>> is_slice_in_list(D,A)\nFalse\n",
  "label": 0
 },
 {
  "idx": 290,
  "doc": "Iterating over a list while incrementing another variable at the same time",
  "code": "from string import ascii_lowercase\nalphabets = dict(zip(ascii_lowercase, range(1,27)))\n",
  "label": 1
 },
 {
  "idx": 291,
  "doc": "Iterating over a list while incrementing another variable at the same time",
  "code": "{char:i for char,i in zip(ascii_lowercase, range(1,27))}\n",
  "label": 1
 },
 {
  "idx": 292,
  "doc": "Test if two lists of lists are equal",
  "code": "True\n",
  "label": 0
 },
 {
  "idx": 293,
  "doc": "How to make POS n-grams more effective?",
  "code": "Loading brown corpus took 0.154870033264\nSentence tokenizing corpus took 3.77206301689\nWord tokenizing corpus took 13.982845068\nLoading and tokenizing corpus took 17.8847839832\nTagging sentence by sentence took 1114.65085101\nTagging sentences by batch took 1104.63432097\n",
  "label": 0
 },
 {
  "idx": 294,
  "doc": "Python's safest method to store and retrieve passwords from a database",
  "code": "def set_password(self, raw_password):\n    import random\n    algo = 'sha1'\n    salt = get_hexdigest(algo, str(random.random()), str(random.random()))[:5]\n    hsh = get_hexdigest(algo, salt, raw_password)\n    self.password = '%s$%s$%s' % (algo, salt, hsh)\n",
  "label": 0
 },
 {
  "idx": 295,
  "doc": "Python's safest method to store and retrieve passwords from a database",
  "code": "def check_password(raw_password, enc_password):\n    \"\"\"\n    Returns a boolean of whether the raw_password was correct. Handles\n    encryption formats behind the scenes.\n    \"\"\"\n    algo, salt, hsh = enc_password.split('$')\n    return hsh == get_hexdigest(algo, salt, raw_password)\n",
  "label": 0
 },
 {
  "idx": 296,
  "doc": "Numpy drawing from urn",
  "code": ">>> sample(10, [2, 4, 8, 16])\narray([2, 3, 1, 4])\n",
  "label": 0
 },
 {
  "idx": 297,
  "doc": "How do I get Python2.x `map` functionality in Python3.x?",
  "code": "from itertools import zip_longest, starmap\n\ndef map2x(func, *iterables):\n    zipped = zip_longest(*iterables)\n    if func is None:\n        return zipped\n    return starmap(func, zipped)\n",
  "label": 1
 },
 {
  "idx": 298,
  "doc": "How to isolate group nodes in maya with python",
  "code": "selection = [node for node in selection if is_group(node)]\n",
  "label": 0
 },
 {
  "idx": 299,
  "doc": "Regular expression to find a word after multiple spaces",
  "code": ">>> string = 'I love my           world of dreams'\n>>> print re.search (r'(?<=my) +([^ -.]*)', string).group(1)\nworld\n",
  "label": 1
 },
 {
  "idx": 300,
  "doc": "How to find and select a table in html code with xpath",
  "code": "tables = root.cssselect('h3:contains(Impact) ~ table')\n",
  "label": 1
 },
 {
  "idx": 301,
  "doc": "Conditionally disable caching decorator based on instance variable",
  "code": "@conditional(cache_region('long_term'))\ndef get(self, arg):\n    return arg + 1\n",
  "label": 0
 },
 {
  "idx": 302,
  "doc": "Pythonic way to split comma separated numbers into pairs",
  "code": "zip(t[::2], t[1::2])\n",
  "label": 1
 },
 {
  "idx": 303,
  "doc": "Turning binary string into an image with PIL",
  "code": "\nIn [79]: %timeit using_fromarray()\n1 loops, best of 3: 1.67 s per loop\n\nIn [80]: %timeit using_putdata()\n1 loops, best of 3: 632 ms per loop\n",
  "label": 0
 },
 {
  "idx": 304,
  "doc": "Scrapy: Passing item between methods",
  "code": "item = response.meta['item']\n",
  "label": 0
 },
 {
  "idx": 305,
  "doc": "String slicing with delimiter changing in length",
  "code": "24.1\n",
  "label": 0
 },
 {
  "idx": 306,
  "doc": "String slicing with delimiter changing in length",
  "code": "x = '20.06.2009 05:00:00        2.6'\ny = '20.06.2009 06:00:00       21.5'\nitems = [x, y]\n\nvalue = 0\nfor item in items:\n    value += float(item.rsplit(' ', 1)[1])\n\nprint(value)\n",
  "label": 1
 },
 {
  "idx": 307,
  "doc": "Selenium Steam community market listings python",
  "code": "Starting at: $0.63\nStarting at: $0.27\n",
  "label": 0
 },
 {
  "idx": 308,
  "doc": "Return the largest value of a given element of tuple keys in a dictionary",
  "code": "largest_key = max(my_dict, key=lambda x: x[1])\n",
  "label": 1
 },
 {
  "idx": 309,
  "doc": "What's an easy and fast way to put returned XML data into a dict?",
  "code": "import xml.etree.ElementTree as xee\ncontents='''\\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Ip>74.125.45.100</Ip>\n  <Status>OK</Status>\n  <CountryCode>US</CountryCode>\n  <CountryName>United States</CountryName>\n  <RegionCode>06</RegionCode>\n  <RegionName>California</RegionName>\n  <City>Mountain View</City>\n  <ZipPostalCode>94043</ZipPostalCode>\n  <Latitude>37.4192</Latitude>\n  <Longitude>-122.057</Longitude>\n  <TimezoneName>America/Los_Angeles</TimezoneName>\n  <Gmtoffset>-25200</Gmtoffset>\n  <Isdst>1</Isdst>\n</Response>'''\n\ndoc=xee.fromstring(contents)\nprint dict(((elt.tag,elt.text) for elt in doc))\n",
  "label": 1
 },
 {
  "idx": 310,
  "doc": "Key Value For Loop Template - Django Inquiry",
  "code": "  for k,v in values[1].items():\n",
  "label": 0
 },
 {
  "idx": 311,
  "doc": "exit from ipython",
  "code": ">>> import sys\n>>> class Quitter(object):\n...     def __repr__(self):\n...         sys.exit()\n... \n>>> exit = Quitter()\n",
  "label": 1
 },
 {
  "idx": 312,
  "doc": "exit from ipython",
  "code": "In [2]: exit\n",
  "label": 0
 },
 {
  "idx": 313,
  "doc": "python - sorting a list of lists by a key that's substring of each element",
  "code": "import time\ndef key(item):\n    return time.strptime(item[0][-16:], \"%d/%m/%y \u00e0 %H:%M\")\n",
  "label": 0
 },
 {
  "idx": 314,
  "doc": "How to deal with special characters in make command expansion?",
  "code": "VAR2 := $(shell python -c 'print(\"include_path_with[weird]characters\")')\ng++ main.cpp -I'$(OUT)'\n",
  "label": 1
 },
 {
  "idx": 315,
  "doc": "How to deal with special characters in make command expansion?",
  "code": "g++ main.cpp -I\"$$(python -c 'print(\"include_path_with[weird]characters\")')\"\n",
  "label": 1
 },
 {
  "idx": 316,
  "doc": "combining lists inside values in pyspark",
  "code": "(b'\"20599\"', [7.0, b'\"349802972X\"', 'bamberg, franken, germany', 'NULL'])\n(b'\"120675\"', [0.0, b'\"0972189408\"', 'crescent city, california, usa', 45])\n(b'\"166487\"', [6.0, b'\"8422626993\"', 'santander, n/a, spain', 103])\n(b'\"166487\"', [7.0, b'\"8440639228\"', 'santander, n/a, spain', 103])\n",
  "label": 0
 },
 {
  "idx": 317,
  "doc": "How do I write a logging middleware for pyramid/pylons 2?",
  "code": "class LoggerMiddleware(object):\n    '''WSGI middleware'''\n\n    def __init__(self, application):\n\n        self.app = application\n\n    def __call__(self, environ, start_response):\n\n        # write logs\n\n        try:\n            return self.app(environ, start_response)\n        except Exception, e:\n            # write logs\n            pass\n        finally:\n            # write logs\n            pass\n",
  "label": 0
 },
 {
  "idx": 318,
  "doc": "Alternatives to cartesian in Spark?",
  "code": "rdd = sc.parallelize([\n    (1, [3, 10, 11]), (2, [3, 4, 10, 11]),\n    (3, [1, 4]), (4, [2, 3, 10])])\n",
  "label": 0
 },
 {
  "idx": 319,
  "doc": "MySQL select all components of a product",
  "code": "SELECT t3.alt_bilesen\n  FROM urunler_seviyeler t1\n  JOIN urunler_seviyeler t2 ON t2.parcano = t1.alt_bilesen\n  JOIN urunler_seviyeler t3 ON t3.parcano = t2.alt_bilesen\n WHERE t1.parcano = 'E40'\n",
  "label": 0
 },
 {
  "idx": 320,
  "doc": "MySQL select all components of a product",
  "code": "SELECT t1.alt_bilesen\n  FROM urunler_seviyeler t1 \n WHERE t1.parcano = 'E40'\n",
  "label": 0
 },
 {
  "idx": 321,
  "doc": "How can display the lines from linux log file in browser",
  "code": "{{ lines|linebreaks }}\n",
  "label": 1
 },
 {
  "idx": 322,
  "doc": "How can display the lines from linux log file in browser",
  "code": "{{ lines|linebreaksbr }}\n",
  "label": 1
 },
 {
  "idx": 323,
  "doc": "Sort dictionary alphabetically when the key is a string (name)",
  "code": "for i in sortednames:\n   values=dictUsers[i]\n   print(\"Name= \" + i)\n   print (\"   Age= \" + values.age)\n   print (\"   Address= \" + values.address)\n   print (\"   Phone Number= \" + values.phone)\n",
  "label": 0
 },
 {
  "idx": 324,
  "doc": "Printing inherited class in Python",
  "code": "    def __str__(self):\n        result = \"\"\n        for i in range(self.x):\n            for j in range(self.y):\n                result += '*' if i in [0, self.x - 1] or j in [0, self.y - 1] else ' '\n            result += '\\n'\n        return result\n",
  "label": 0
 },
 {
  "idx": 325,
  "doc": "Returning a list in each iteration using list comprehension",
  "code": "print([item for lang in languages_list for item in [lang.code] + list(lang.alt)])\n",
  "label": 1
 },
 {
  "idx": 326,
  "doc": "to get max number after concatenation in list",
  "code": "[9, 94, 4, 14, 1]\n9944141\n",
  "label": 0
 },
 {
  "idx": 327,
  "doc": "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?",
  "code": "[[ 1.          0.75390625  0.77441406  0.60723877]\n [ 1.          0.79052734  0.77441406  0.77441406]\n [ 1.          1.          1.          1.        ]]\n",
  "label": 0
 },
 {
  "idx": 328,
  "doc": "How do I print a sorted Dictionary in Python 3.4.3",
  "code": ">>> class1 = { 'Ethan':'9','Ian':'3','Helen':'8','Holly':'6' }\n>>> print(sorted(class1.items()))\n[('Ethan', '9'), ('Helen', '8'), ('Holly', '6'), ('Ian', '3')]\n",
  "label": 1
 },
 {
  "idx": 329,
  "doc": "How do I print a sorted Dictionary in Python 3.4.3",
  "code": ">>> for k,v in sorted(class1.items()):\n...     print(k, v)\n...\nEthan 9\nHelen 8\nHolly 6\nIan 3\n",
  "label": 1
 },
 {
  "idx": 330,
  "doc": "How to create a Dictionary in Python with 2 string keys to access an integer?",
  "code": "from collections import defaultdict\ndic2 = defaultdict(dict)\ndic2['New York']['Chicago'] = 25\n",
  "label": 1
 },
 {
  "idx": 331,
  "doc": "Accessing an object created in another module using python",
  "code": "from module import desired_object\n",
  "label": 0
 },
 {
  "idx": 332,
  "doc": "Numpy averaging with multi-dimensional weights along an axis",
  "code": "np.average(a.reshape(48, -1), weights=b.ravel()), axis=1)\n",
  "label": 1
 },
 {
  "idx": 333,
  "doc": "How to insert a python program into a bash script?",
  "code": "#!/bin/bash\n\npython - 1 2 3 << 'EOF'\nimport sys\n\nprint 'Argument List:', str(sys.argv)\nEOF\n",
  "label": 1
 },
 {
  "idx": 334,
  "doc": "Django ImageField upload_to path",
  "code": "from django.conf.urls.static import static\nfrom django.conf import settings\nurlpatterns = [....\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n",
  "label": 0
 },
 {
  "idx": 335,
  "doc": "Print tree without recursion",
  "code": "def print_nonrec_depthfirst(node):\n    stack = [node]\n    while stack:\n        node = stack.pop()\n        print node\n        for c in node.children:\n            stack.append(c)\n",
  "label": 1
 },
 {
  "idx": 336,
  "doc": "QTableView item selection based on a QStandardItem data attribute",
  "code": "def matPlotSelected(self, qStandardItems):\n\n    selModel = self.selectionModel()\n    model = self.model()\n\n    for item in qStandardItems:\n        idx = model.indexFromItem(item)\n        selModel.select(idx, selModel.Select)\n",
  "label": 0
 },
 {
  "idx": 337,
  "doc": "Combining lists and performing a check",
  "code": "attendees = [(a.profile, a.verified, a.from_user)\n                 for a in Attendee.objects.filter(event=event)]\n",
  "label": 0
 },
 {
  "idx": 338,
  "doc": "Numerical value of a name",
  "code": "sum(ord(character) - 96 for character in name.lower() if character != \" \")\n",
  "label": 0
 },
 {
  "idx": 339,
  "doc": "Numerical value of a name",
  "code": "def main():\n    \"\"\"To print a names numeric value\"\"\"\n    name = input(\"Enter your full name here: \")\n    return sum(ord(character) - 96 for character in name.lower() if character != \" \")\n",
  "label": 1
 },
 {
  "idx": 340,
  "doc": "Numerical value of a name",
  "code": ">>> main()\nEnter your full name here: a\n1\n>>> main()\nEnter your full name here: abc\n6\n>>> main()\nEnter your full name here: a b          c\n6\n",
  "label": 0
 },
 {
  "idx": 341,
  "doc": "Uploading files using Django Admin",
  "code": "class Router(models.Model):\n    specifications = models.FileField(upload_to='router_specifications')\n",
  "label": 0
 },
 {
  "idx": 342,
  "doc": "python for loop using lambda syntax",
  "code": "from itertools import imap\n\nfor a, b, c, d in imap(lambda y: x[y*4:y*4+4], xrange(len(x)//4)):\n\n    ...  more code  ...\n",
  "label": 1
 },
 {
  "idx": 343,
  "doc": "python for loop using lambda syntax",
  "code": "x = ['1', '1377877381', 'off', '0', \n     '2', '1377886582', 'on', '0', \n     '3', '1376238596', 'off', '0', \n     '4', '1377812526', 'off', '0']\n",
  "label": 0
 },
 {
  "idx": 344,
  "doc": "Comparing two pandas dataframes for differences",
  "code": "try:\n    assert_frame_equal(csvdata, csvdata_old)\n    return True\nexcept:  # appeantly AssertionError doesn't catch all\n    return False\n",
  "label": 1
 },
 {
  "idx": 345,
  "doc": "Selecting text nodes with text not equal to a value",
  "code": "['WEP', 'WPA2-PSK']\n",
  "label": 0
 },
 {
  "idx": 346,
  "doc": "R's relevel() and factor variables in linear regression in pandas",
  "code": "   a  b   c  blue  orange  red\n0  1  5   9     0       0    1\n1  2  6  10     1       0    0\n2  3  7  11     0       0    0\n3  4  8  12     0       0    1\n4  3  4   3     0       1    0\n5  3  4   3     1       0    0\n6  3  4   3     0       0    1\n",
  "label": 0
 },
 {
  "idx": 347,
  "doc": "R's relevel() and factor variables in linear regression in pandas",
  "code": "import statsmodels.formula.api as smf\nmodel = smf.ols('a ~ b + c + blue + orange + red', df).fit()\nprint(model.summary())\n",
  "label": 0
 },
 {
  "idx": 348,
  "doc": "Python: how to create a list from elements that don't meet a certain condition",
  "code": "small_names = filter(lambda n: len(n)<=4, names)\n#equivalent to: small_names = [n for n in names if len(n) <=4]\n\nprint(small_names) # ['jake', 'Brad', 'Tony']\n",
  "label": 1
 },
 {
  "idx": 349,
  "doc": "Merge some part of the list together using python",
  "code": "words.setdefault(key, []).append(word)\n",
  "label": 0
 },
 {
  "idx": 350,
  "doc": "Merge some part of the list together using python",
  "code": ">>> from itertools import groupby\n>>> [' '.join(w.split()[1] for w in words) \n...        for key, words in groupby(raw, key=lambda e: e.split()[0])]\n['tops opts pots', 'pie epi']\n",
  "label": 1
 },
 {
  "idx": 351,
  "doc": "How to create a vector of Matrices in python",
  "code": "flowmap = np.array([...]) # your flow map\nlistOfFlowMaps.append(flowmap) # add the flow map to the list\n",
  "label": 0
 },
 {
  "idx": 352,
  "doc": "Open file, read it, process, and write back - shortest method in Python",
  "code": "import fileinput\n\nfor line in fileinput.input (\"b.txt\",inplace=1):\n    print \"%d: %s\" % (fileinput.lineno(),line),\n",
  "label": 1
 },
 {
  "idx": 353,
  "doc": "Setting path in Python",
  "code": "import os\n\npsqldir = 'C:/Program Files/PostgreSQL/9.2/bin'\nos.environ['PATH'] = '%s;%s' % (os.environ['PATH'], psqldir)\nos.system('foo')\n",
  "label": 1
 },
 {
  "idx": 354,
  "doc": "Web scraping with Python",
  "code": "from html5lib import HTMLParser, treebuilders\n\nparser = HTMLParser(tree=treebuilders.getTreeBuilder(\"beautifulsoup\"))\n\ntext = \"a<b>b<b>c\"\nsoup = parser.parse(text)\nprint soup.prettify()\n",
  "label": 1
 },
 {
  "idx": 355,
  "doc": "Web scraping with Python",
  "code": "<html>\n <head>\n </head>\n <body>\n  a\n  <b>\n   b\n   <b>\n    c\n   </b>\n  </b>\n </body>\n</html>\n",
  "label": 0
 },
 {
  "idx": 356,
  "doc": "How to modify the metavar for a positional argument in pythons argparse?",
  "code": "% test.py -h\nusage: test.py [-h] start stop step\n\nPrint a range.\n\npositional arguments:\n  start       Specify start.\n  stop        Specify stop.\n  step        Specify step.\n\noptional arguments:\n  -h, --help  show this help message and exit\n",
  "label": 0
 },
 {
  "idx": 357,
  "doc": "How can I get a list of package locations from a PIP requirements file?",
  "code": "Flask-Login\n0.3.0\nUser session management for Flask\nhttps://github.com/maxcountryman/flask-login\n",
  "label": 0
 },
 {
  "idx": 358,
  "doc": "Comparing List of Arguments to it self?",
  "code": "if a.count( a[0] ) != len(a)\n",
  "label": 1
 },
 {
  "idx": 359,
  "doc": "Extract html cell data XPath",
  "code": "src = \"\"\"<tr align=\"center\" class=\"tableRow1Font\" >\n<td>OPEN</td>\n<td>80002</td>\n<td>\n<span style=\"font-weight:bold;\">\nACCY\n</span> \n<A HREF=\"http://bulletin.gwu.edu/search/?P=ACCY+2001\" target=\"_blank\">\n<span style=\"font-weight:bold;\">\n2001\n</span>\n</A>\n</td>\n<td>10</td>\n<td>Intro Financial Accounting</td>\n<td>3.00</td>\n<td> Ray, K</td>\n<td><a href=\"http://virtualtour.gwu.edu/#MON\" target=\"_blank\" >MON</a> 113</td>\n<td>MW<br>12:45PM - 02:00PM</td>\n<td>08/25/14 - 12/06/14</td>\n<td>\n</td>\n</tr>\"\"\"\n\nfrom lxml import html\n\ntree = html.fromstring(src)\ntds = tree.xpath(\"//td/descendant-or-self::*/text()[normalize-space()]\")\n\nprint \", \".join([td.strip() for td in tds])\n",
  "label": 1
 },
 {
  "idx": 360,
  "doc": "Merge two arrays into a matrix in python and sort",
  "code": "A2, B2 = zip(*sorted(zip(A,B), key=lambda x: x[1]))\n",
  "label": 1
 },
 {
  "idx": 361,
  "doc": "Merge two arrays into a matrix in python and sort",
  "code": "C = zip(A, B)\nD = sorted(C, key=lambda x: x[1])\nA2, B2 = zip(*D)\n",
  "label": 1
 },
 {
  "idx": 362,
  "doc": "Terminating subprocess in python",
  "code": "vinay 7874 7795  7 22:10 pts/0 00:00:00 python ./manage.py runserver --noreload\n",
  "label": 0
 },
 {
  "idx": 363,
  "doc": "Sorting a List by frequency of occurrence in a list",
  "code": "from collections import Counter\nprint sorted(a, key=Counter(a).get, reverse=True)\n# [5, 5, 5, 5, 3, 3, 3, 4, 4, 4, 1, 1, 2]\n",
  "label": 1
 },
 {
  "idx": 364,
  "doc": "How do you clone a class in Python?",
  "code": "4303713312\n4303831072\n",
  "label": 0
 },
 {
  "idx": 365,
  "doc": "PANDAS: merging calculated data in groupby dataframe into main dataframe",
  "code": "df_container = []\nfor customer_id, group in grouped_data:\n    group['days_since'] = (group['date'] - group['date'].shift().fillna(pd.datetime(2000,1,1))).astype('timedelta64[D]')\n    df_container.append(group)\n\ndata_df = pd.concat(df_container)\n",
  "label": 1
 },
 {
  "idx": 366,
  "doc": "SCons to generate variable number of targets",
  "code": "a int a(){}\nb int b(){}\nc int c(){}\nd int d(){}\ng int g(){}\n",
  "label": 0
 },
 {
  "idx": 367,
  "doc": "IronPython import two enums with the same name",
  "code": "import System.Windows as Module1\nimport ESS.MS.Framework.UIG.Mask as Module2\n\n//...\nModule1.WindowState\nModule2.WindowState\n",
  "label": 1
 },
 {
  "idx": 368,
  "doc": "IronPython import two enums with the same name",
  "code": "from System.Windows import WindowState as WindowState1\nfrom ESS.MS.Framework.UIG.Mask import WindowState as WindowState2\n",
  "label": 1
 },
 {
  "idx": 369,
  "doc": "What is the standard way to add N seconds to datetime.time in Python?",
  "code": "11:34:59\n11:35:02\n",
  "label": 0
 },
 {
  "idx": 370,
  "doc": "Generate random string from regex character set",
  "code": "import invRegex\nimport inverse_regex\nprint(repr(''.join(invRegex.invert('.'))))\nprint(repr(''.join(inverse_regex.ipermute('.'))))\n",
  "label": 0
 },
 {
  "idx": 371,
  "doc": "Using variable as keyword passed to **kwargs in Python",
  "code": "def update_by_email(email=None, **kwargs):\n    print(kwargs)\n",
  "label": 0
 },
 {
  "idx": 372,
  "doc": "Using variable as keyword passed to **kwargs in Python",
  "code": "{'name': 'joe'}\n",
  "label": 0
 },
 {
  "idx": 373,
  "doc": "Outputting Multi-row CSV Files from Multiple Dictionaries",
  "code": "symbol,ev_ebitda,asset\nmsft,40,60\ncvx,40,60\nbaba,40,60\n",
  "label": 0
 },
 {
  "idx": 374,
  "doc": "jinja2 print to console or logging",
  "code": "...<p>Hello world!</p> {{\"debug text!\"|debug}}...\n",
  "label": 0
 },
 {
  "idx": 375,
  "doc": "Vectorized construction of DatetimeIndex in Pandas",
  "code": "0   2012-01-05 10:30:00\n1   2013-03-20 20:40:30\ndtype: datetime64[ns]\n",
  "label": 0
 },
 {
  "idx": 376,
  "doc": "Flask-WTF: how pass structered object to form",
  "code": "channel_obj = db.TVChannel().get_id(channel_id) #load a channel's infos into an object\nchannel     = ChannelForm(request.form, obj=channel_obj) #load channel form\nchannel.CITY1adapt.process_data(channel_obj.streams['City1']['adapt'])\n#and others links\n",
  "label": 0
 },
 {
  "idx": 377,
  "doc": "Get system metrics using PowerShell",
  "code": "0\n",
  "label": 0
 },
 {
  "idx": 378,
  "doc": "Remove following duplicates in a tuple",
  "code": "x not in seen and True\n",
  "label": 0
 },
 {
  "idx": 379,
  "doc": "Remove following duplicates in a tuple",
  "code": "x not in seen\n",
  "label": 0
 },
 {
  "idx": 380,
  "doc": "Beautiful Soup [Python] and the extracting of text in a table",
  "code": ">>> print trimmed_text\nThis is a sample text\n>>>\n",
  "label": 0
 },
 {
  "idx": 381,
  "doc": "Redirect stdout to logger in Python",
  "code": "INFO:demo:An INFO message\nDEBUG:demo:An DEBUG message\n",
  "label": 0
 },
 {
  "idx": 382,
  "doc": "Sqlalchemy: bulk correlated update to link tables",
  "code": "UPDATE stopovers SET location_id=(SELECT locations.id \nFROM locations \nWHERE locations.x = stopovers.x AND locations.y = stopovers.y\nLIMIT ? OFFSET ?)\n",
  "label": 0
 },
 {
  "idx": 383,
  "doc": "Calculate number of jumps in Dijkstra's algorithm?",
  "code": "1000 loops, best of 3: 138 \u00b5s per loop\n100 loops, best of 3: 2.81 ms per loop\n100 loops, best of 3: 10.8 ms per loop\n",
  "label": 0
 },
 {
  "idx": 384,
  "doc": "Iterating through large lists with potential conditions in Python",
  "code": "def EntryMatches(e):\n  if use_currency and not (e.currency == currency):\n    return False\n  if use_category and not (e.category == category):\n    return False\n  return True\n",
  "label": 0
 },
 {
  "idx": 385,
  "doc": "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?",
  "code": "import foo_core\nimport optparse\n\ndef main():\n    # parse the command-line options\n    # the real work is done by foo_core\n\nif __name__ == \"__main__\":\n   main()\n",
  "label": 0
 },
 {
  "idx": 386,
  "doc": "Concat every 4 strings from a list?",
  "code": ">>> from itertools import starmap\n>>> list(starmap('{}.{}.{}.{}:{}'.format,zip(*[iter(data)]*5)))\n['192.168.0.1:80', '192.168.0.2:8080']\n",
  "label": 1
 },
 {
  "idx": 387,
  "doc": "Creating a dictionary and adding a set as its value",
  "code": "from collections import defaultdict\nd = defaultdict(set)\nfor num in datasource:\n    d[key].add(num)\n",
  "label": 1
 },
 {
  "idx": 388,
  "doc": "py2exe: excluding parts of a package that wants to import all its parts",
  "code": "try: from BigPackage.SmallSubset import TheOnlyFunctionIReallyNeed\nexcept ImportError: from BigPackageSmallSubset import TheOnlyFunctionIReallyNeed\n",
  "label": 0
 },
 {
  "idx": 389,
  "doc": "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields",
  "code": "          Distance#1 Race#1  Rank#1  Time#1 Distance#2 Race#2  Rank#2  Time#2\nAthlete                                                                      \nA.Moyet         400m      A       2   49.00        NaN    NaN     NaN     NaN\nC.Marconi       800m      B       5  104.12        NaN    NaN     NaN     NaN\nM.Smith         400m      A       1   48.57       800m      B       3  102.66\n",
  "label": 0
 },
 {
  "idx": 390,
  "doc": "Python Find n words before and after a certain words",
  "code": "69 DoS (69, 72)\n[('file ... Department of Something is called (', 'DoS', ') and then more texts and more')]\nfile ... Department of Something is called ( DoS ) and then more texts and more\n",
  "label": 0
 },
 {
  "idx": 391,
  "doc": "Average of key values in a list of dictionaries",
  "code": "[dict(zip(d.keys(), [np.array(d.values()).mean().round().astype(int)])) for d in L]\n",
  "label": 1
 },
 {
  "idx": 392,
  "doc": "how to get unique values set from a repeating values list",
  "code": "xxxd - 4\nxxxa - 1,3,2\nxxxb - 2\nxxxc - 3\n",
  "label": 0
 },
 {
  "idx": 393,
  "doc": "Choose a file starting with a given string",
  "code": "import os\npath = 'C:/'\nfiles = [i for i in os.listdir(path) if os.path.isfile(os.path.join(path,i)) and \\\n         '001_MN_DX' in i]\n",
  "label": 1
 },
 {
  "idx": 394,
  "doc": "Localized random points using numpy and pandas",
  "code": "coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], covs, 200) \n                         for i in range(10)])\n",
  "label": 0
 },
 {
  "idx": 395,
  "doc": "Generating passwords in Python 3.1.1",
  "code": "passwd = getpass('Password: ')\nsalt = passwd_encrypt[:4]\nh = hashlib.md5()\nh.update(salt)\nh.update(passwd.encode())\nif passwd_encrypt != salt + h.hexdigest():\n    raise LoginFailed()\n",
  "label": 0
 },
 {
  "idx": 396,
  "doc": "parse blocks of text from text file using Python",
  "code": "write_file(\"outputfile.txt\", out_text)\n",
  "label": 0
 },
 {
  "idx": 397,
  "doc": "Pandas count number of elements in each column less than x",
  "code": "df[df < 2.0 ].count() \n",
  "label": 0
 },
 {
  "idx": 398,
  "doc": "Python: How can I print out an object as a regular dictionary without reference?",
  "code": "print b.__dict__\n{'a': 2, 'o': 2}\n",
  "label": 0
 },
 {
  "idx": 399,
  "doc": "Counting elements matching a pattern in a tuple of tuples",
  "code": "def f(m): pass\n%timeit f(m)\n10000000 loops, best of 3: 110 ns per loop\n",
  "label": 0
 },
 {
  "idx": 400,
  "doc": "How can I sort a 2D list?",
  "code": "a = [['D', 'C', 'B', 'A'],\n     ['1', '3', '2', '0'],\n     ['1', '3', '2', '0']]\n",
  "label": 0
 },
 {
  "idx": 401,
  "doc": "In python, return value only when the function is used in an assignment",
  "code": "def f(return_something=True):\n    if return_something:\n        return 'something'\n    print \"I won't return something\"\n",
  "label": 0
 },
 {
  "idx": 402,
  "doc": "how to represent a number value as a string in python?",
  "code": ">>> ord('C')\n67\n",
  "label": 0
 },
 {
  "idx": 403,
  "doc": "Pythonic way of comparing all adjacent elements in a list",
  "code": "for i,j in zip(range(0,len(A)-1), range(1,len(A))):\n    #some operation between A[i] and A[j]\n",
  "label": 1
 },
 {
  "idx": 404,
  "doc": "Skip/pass over view function so the next can execute in Flask",
  "code": "@app.route('/<path:url>')\ndef feature_or_catch(url):\n    slug  = url\n    if '/' not in slug and slug_in_database(slug):\n        return \"feature: \" + slug\n    return \"catch: \" + url\n",
  "label": 1
 },
 {
  "idx": 405,
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "Sequence=3433;Status=true;Report=223313;Profile=xxxx;\nSequence=0323;Status=true;Header=The;Report=43838;Profile=xxxx;\nSequence=5323;Status=true;Report=6541998;Profile=xxxx;\n",
  "label": 0
 },
 {
  "idx": 406,
  "doc": "Numpy interconversion between multidimensional and linear indexing",
  "code": "# Fast conversion to linear index\nb_F = numpy.cumprod([1] + nbins)[:-1]\nb_C = numpy.cumprod([1] + nbins[::-1])[:-1][::-1]\n\nbox_index_F = numpy.dot(b_F,binassign)\nbox_index_C = numpy.dot(b_C,binassign)\n",
  "label": 0
 },
 {
  "idx": 407,
  "doc": "Using Numba to improve finite-differences laplacian",
  "code": ">>100000 loops, best of 3: 19.1 \u00b5s per loop\n>>The slowest run took 8.55 times longer than the fastest. This could mean that an intermediate result is being cached \n>>100000 loops, best of 3: 2.4 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 408,
  "doc": "Python3 Rename files in a directory importing the new names from a txt file",
  "code": "1111.1.0000.1234567\n1111.1.0000.1234568\n1111.1.0000.1234569 \n",
  "label": 0
 },
 {
  "idx": 409,
  "doc": "Python3 Rename files in a directory importing the new names from a txt file",
  "code": "0000.1.0000.1234567,1234567\n0000.1.0000.1234568,1234568\n0000.1.0000.1234569,1234569\n0000.1.0000.1234570,1234570\n0000.1.0000.1234571,1234571\n",
  "label": 0
 },
 {
  "idx": 410,
  "doc": "How to set a Python object's field/member by name",
  "code": "keyMapping = { 'From': 'msg_from',\n               'To': 'msg_to',\n               'Body': 'msg_body' }\nfor k, v in keyMapping.items():\n    if form.getfirst(k):\n        setattr(msg, v, form.getfirst(k))\n",
  "label": 1
 },
 {
  "idx": 411,
  "doc": "Deleting consonants from a string in Python",
  "code": "translate (unicode)  |  2.33\ndict.fromkeys        |  2.39\ntranslate (bytes)    |  4.17\ntranslate (bytearray)|  4.21\nList Comprehension   | 86.6\nRegular expressions  | 74.3\nGenerator exp        | 97.1\n",
  "label": 0
 },
 {
  "idx": 412,
  "doc": "Deleting consonants from a string in Python",
  "code": "def eliminate_consonants(x):\n        vowels= ['a','e','i','o','u']\n        for char in x:\n            if char in vowels:\n                print(char,end = \"\")\n\neliminate_consonants('mississippi')\n",
  "label": 1
 },
 {
  "idx": 413,
  "doc": "Deleting consonants from a string in Python",
  "code": " ''.join([c for c in x if c in 'aeiou'])\n",
  "label": 1
 },
 {
  "idx": 414,
  "doc": "how to mask the specific array data based on the shapefile",
  "code": "mask = np.zeros((height, width))\nvalue = np.zeros((height, width))\nfor y in range(height):\n    for x in range(width):\n        if not point_is_in_mask(mask, (x, y)):\n            value[y][x] = np.nan\n",
  "label": 0
 },
 {
  "idx": 415,
  "doc": "Printing a list into grid",
  "code": ">>> for values in List:\n...     print (\" \".join([chars for chars in values]), \"\\n\")\n",
  "label": 1
 },
 {
  "idx": 416,
  "doc": "Printing a list into grid",
  "code": "a a a a a a a a a\n\nb b b b b b b b b\n\nc c c c c c c c c\n",
  "label": 0
 },
 {
  "idx": 417,
  "doc": "Call a C++ project main() in Python in Visual Studio?",
  "code": "int main(int argc, char** argv)\n{\n  assert(argc == 3);\n  assert(argv[1] == std::string(\"foo\");\n  assert(argv[2] == std::string(\"bar\");\n}\n",
  "label": 0
 },
 {
  "idx": 418,
  "doc": "How to get only even numbers from list",
  "code": "def get_even_lists(lst):\n    \"\"\" (list of list of int) -> list of list of int\n\n    Return a list of the lists in lst that contain only even integers. \n\n    >>> only_evens([[1, 2, 4], [4, 0, 6], [22, 4, 3], [2]])\n    [[4, 0, 6], [2]]\n    \"\"\"\n    even_lists = []\n    for sublist in lst:\n        for i in sublist:\n            if i % 2 == 1:\n                break\n        else:\n            even_lists.append(sublist)\n    return even_lists\n",
  "label": 1
 },
 {
  "idx": 419,
  "doc": "Create a list property in Python",
  "code": "foo = Foo([1,2,3])\nprint(foo.list)\nprint(foo.list[1])\nfoo.list[1] = 12\nprint(foo.list)\n",
  "label": 0
 },
 {
  "idx": 420,
  "doc": "Python - sum variables from a text file",
  "code": "with open(\"numberGood.txt\") as f:\n    print(sum(float(line) for line in f))\n",
  "label": 1
 },
 {
  "idx": 421,
  "doc": "Python - sum variables from a text file",
  "code": "$ cat numberGood.txt \n10.01\n19.99\n30.0\n40\n$ python3\n>>> with open(\"numberGood.txt\") as f:\n...     print(sum(float(line) for line in f))\n... \n100.0\n",
  "label": 1
 },
 {
  "idx": 422,
  "doc": "appending a single string to each element of a list in python",
  "code": "fred@wherever.com, wilma@wherever.com\n",
  "label": 0
 },
 {
  "idx": 423,
  "doc": "How to make array of array of dictionaries in python",
  "code": ">>> set_sim(['Player9','Player4'], .02)\n>>> set_sim(['Player3','Player4'], .8)\n>>> set_sim(['Player12','Player4'], 1.5)\n\n>>> get_other_players('Player4')\nPlayer9 = 0.02\nPlayer3 = 0.8\nPlayer12 = 1.5\n",
  "label": 0
 },
 {
  "idx": 424,
  "doc": "Getting crawled information in dictionary format",
  "code": "{'Job ID': 'EE-1213256', \n 'Manages Others': 'Not Specified', \n 'Job Type': 'Information Technology,  Engineering,  Professional Services', \n 'Relocation': 'No', \n 'Education': '4 Year Degree', \n 'Base Pay': '$140,000.00 - $160,000.00 /Year', \n 'Experience': 'At least 5 year(s)', \n 'Industry': 'Computer Software, Banking - Financial Services, Biotechnology', \n 'Employment Type': 'Full-Time', \n 'Required Travel': 'Not Specified'}\n",
  "label": 0
 },
 {
  "idx": 425,
  "doc": "Python Sum of Squares Function",
  "code": ">>> def sum_of_squares_of_digits(value):\n...     return sum(int(c) ** 2 for c in str(value))\n... \n>>> sum_of_squares_of_digits(987)\n194\n",
  "label": 0
 },
 {
  "idx": 426,
  "doc": "Matplotlib - Move X-Axis label downwards, but not X-Axis Ticks",
  "code": "pl.xlabel(\"...\", labelpad=20)\n",
  "label": 1
 },
 {
  "idx": 427,
  "doc": "Matplotlib - Move X-Axis label downwards, but not X-Axis Ticks",
  "code": "ax.xaxis.labelpad = 20\n",
  "label": 1
 },
 {
  "idx": 428,
  "doc": "Multidimensional array in Python",
  "code": "m = Matrix(4,5,2,6)\nm[2,3,1,3] = 'x'\nm[2,3,1,3] // -> 'x'\n",
  "label": 0
 },
 {
  "idx": 429,
  "doc": "Truncating multi-indexed dataframe",
  "code": "                         val1\nDate                gas      \n2013-01-01 00:00:05 o3      1\n2013-01-01 00:00:10 so2     2\n",
  "label": 0
 },
 {
  "idx": 430,
  "doc": "Truncating multi-indexed dataframe",
  "code": "Date                 gas\n2013-01-01 00:00:05  o3     1\n2013-01-01 00:00:10  so2    2\nName: val1, dtype: int64\n",
  "label": 0
 },
 {
  "idx": 431,
  "doc": "How can I find the right gaussian curve given some data?",
  "code": "norm.fit():  \u00b51= +0.1534, \u03c31=1.0203\ncurve_fit(): \u00b52= +0.1135, \u03c32=1.0444\n",
  "label": 0
 },
 {
  "idx": 432,
  "doc": "Reading input from raw_input() without having the prompt overwritten by other threads in Python",
  "code": "$ ./threads_input2.py\nInterrupting text!\nInterrupting text!\nInterrupting text!\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nnaparte family. No, I warn you, that if you do not tell me we are at war,\n",
  "label": 0
 },
 {
  "idx": 433,
  "doc": "Fast way to find index of array in array of arrays",
  "code": "In [34]: %timeit find_index(arr, x)\n1 loops, best of 3: 209 ms per loop\n\nIn [35]: %timeit find_index2(arr, x)\n1 loops, best of 3: 370 ms per loop\n",
  "label": 0
 },
 {
  "idx": 434,
  "doc": "Fast way to find index of array in array of arrays",
  "code": "def find_index2(arr, x):\n    return np.where((arr == x).all(axis=1))[0]\n",
  "label": 0
 },
 {
  "idx": 435,
  "doc": "How to Use both Scala and Python in a same Spark project?",
  "code": "val data = List(\"john\",\"paul\",\"george\",\"ringo\")\n\nval dataRDD = sc.makeRDD(data)\n\nval scriptPath = \"./test.py\"\n\nval pipeRDD = dataRDD.pipe(scriptPath)\n\npipeRDD.foreach(println)\n",
  "label": 0
 },
 {
  "idx": 436,
  "doc": "How to Use both Scala and Python in a same Spark project?",
  "code": "#!/usr/bin/python\n\nimport sys\n\nfor line in sys.stdin:\n  print \"hello \" + line\n",
  "label": 0
 },
 {
  "idx": 437,
  "doc": "How do I take an integer from a list intending to use it?",
  "code": ">>> one = [1, 2, 3, 4]\n",
  "label": 0
 },
 {
  "idx": 438,
  "doc": "How do I take an integer from a list intending to use it?",
  "code": ">>> a = one[1]\n>>> a\n2\n>>> a + a\n4\n",
  "label": 1
 },
 {
  "idx": 439,
  "doc": "How do I take an integer from a list intending to use it?",
  "code": ">>> one[0]\n1\n>>> one[2]\n2\n",
  "label": 1
 },
 {
  "idx": 440,
  "doc": "How do I take an integer from a list intending to use it?",
  "code": ">>> one[1] + one[1]\n4\n",
  "label": 1
 },
 {
  "idx": 441,
  "doc": "How to print JSON with keys in numeric order (i.e. as if the string keys were integers)",
  "code": "import json\n\nd = dict({'2':'two', '11':'eleven'})\njson.dumps({int(x):d[x] for x in d.keys()}, sort_keys=True)\n",
  "label": 1
 },
 {
  "idx": 442,
  "doc": "Require one out of two keyword arguments",
  "code": "if len(kargs.viewkeys() & {'dollar', 'euro'}) != 1:\n    raise ValueError('One keyword argument is required: dollar=x or euro=x')\n",
  "label": 1
 },
 {
  "idx": 443,
  "doc": "Return rows only if all items of category are True",
  "code": ">>> df.groupby(\"Category\")[\"Boolean\"].all()\nCategory\nA    False\nB    False\nC     True\nD     True\nName: Boolean, dtype: bool\n",
  "label": 0
 },
 {
  "idx": 444,
  "doc": "Updating a TKinter GUI from a multiprocessing calculation",
  "code": "@classmethod\ndef main(cls):\n    \"Create an application containing a single TrimDirView widget.\"\n    tkinter.NoDefaultRoot()\n    root = cls.create_application_root()\n    cls.attach_window_icon(root, ICON)\n    view = cls.setup_class_instance(root)\n    cls.main_loop(root)\n",
  "label": 0
 },
 {
  "idx": 445,
  "doc": "pysvn: How to find out if local dir is under version control?",
  "code": ">>> import pysvn\n>>> client = pysvn.Client()\n>>> client.info('/tmp')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\npysvn._pysvn_2_7.ClientError: '/tmp' is not a working copy\n",
  "label": 1
 },
 {
  "idx": 446,
  "doc": "HTML data from Beautiful Soup needs formatting",
  "code": "[                     0     1      2     3        4      5\n0                Class  Fail  Error  Skip  Success  Total\n1  Regression_TestCase     1      9     0      219    229\n2                Total     1      9     0      219    229]\n",
  "label": 0
 },
 {
  "idx": 447,
  "doc": "How do I reference classes using IronPython?",
  "code": "from System.Collections import *\n# create an instance of Hashtable\nh = Hashtable() \n\nfrom System.Collections.Generic import *\n# create an instance of List<string>\nl = List[str]()\n",
  "label": 0
 },
 {
  "idx": 448,
  "doc": "How to avoid getting imaginary/complex number python",
  "code": "z.real\n",
  "label": 1
 },
 {
  "idx": 449,
  "doc": "Python & Beautifulsoup web scraping - select a paragraph with a specific child tag",
  "code": "text of interest\n",
  "label": 0
 },
 {
  "idx": 450,
  "doc": "Sending non-string argument in a POST request to a Tornado server",
  "code": "raw_packed = self.get_argument('packed_arg', None)\npacked = {}\nif raw_packed: \n    packed = tornado.escape.json_decode(raw_packed)\narg1 = packed.get('arg1')\narg2 = packed.get('arg2')\n",
  "label": 0
 },
 {
  "idx": 451,
  "doc": "how to get content inside CDATA of XML tag django",
  "code": "from bs4 import BeautifulSoup, CData\nimport urllib\n\nsource_txt = urllib.urlopen(\"http://voanews.com/api/epiqq\")\nsoup = BeautifulSoup.BeautifulSoup(source_txt.read())\nfor cd in soup.findAll(text=True):\n    if isinstance(cd, CData):\n        print 'CData value: %r' % cd        \n",
  "label": 0
 },
 {
  "idx": 452,
  "doc": "Real Hierarchical Builds with SCons?",
  "code": "# This SConstruct orchestrates building 2 subdirs\nimport os\n\nImport('env')\nsubdirs = ['src', 'test']\n\nfor subdir in subdirs:\n    SConscript(os.path.join(subdir, 'SConscript'), exports = ['env'])\n",
  "label": 0
 },
 {
  "idx": 453,
  "doc": "Real Hierarchical Builds with SCons?",
  "code": "# This SConstruct does nothing more than load the SConscript in this dir\n# The Environment() is created in the SConstruct script\n# This dir can be build standalone by executing scons here, or together\n# by executing scons in the parent directory\nenv = Environment()\nSConscript('SConscript', exports = ['env'])\n",
  "label": 0
 },
 {
  "idx": 454,
  "doc": "Real Hierarchical Builds with SCons?",
  "code": "# This SConstruct orchestrates building 3 subdirs\n\nimport os\n\nsubdirs = ['libfoo_subrepo', 'barapp_subrepo', 'test']\nenv = Environment()\n\nfor subdir in subdirs:\n    SConscript(os.path.join(subdir, 'SConscript'), exports = ['env'])\n",
  "label": 0
 },
 {
  "idx": 455,
  "doc": "Real Hierarchical Builds with SCons?",
  "code": "# This SConstruct does nothing more than load the SConscript in this dir\n# The Environment() is created in the SConstruct script\n# This dir can be built standalone by executing scons here, or together\n# by executing scons in the parent directory\nenv = Environment()\nSConscript('SConscript', exports = ['env'])\n",
  "label": 0
 },
 {
  "idx": 456,
  "doc": "recursively (or non-recursively) iterating through python array and get the elements",
  "code": "def flatten(lst):\n    if not lst:\n        return []\n    elif not isinstance(lst, list):\n        return [lst] \n    else:\n        return flatten(lst[0]) + flatten(lst[1:])\n",
  "label": 1
 },
 {
  "idx": 457,
  "doc": "Mimic curl in python",
  "code": "import requests\n\nurl = \"http://geocoding.geo.census.gov/geocoder/locations/addressbatch\"\ndata = {'benchmark': 'Public_AR_Census2010'}\nfiles = {'addressFile': open('t.csv')}\n\nresponse = requests.post(url, data=data, files=files)\nprint response.content\n",
  "label": 1
 },
 {
  "idx": 458,
  "doc": "Transposing dataframe and sorting",
  "code": "                value\ncol \nArnston,Arnston 0\nBerg,Berg       0\nCarlson,Carlson 0\nArnston,Berg    1\nArnston,Carlson 2\nBerg,Carlson    3\n",
  "label": 0
 },
 {
  "idx": 459,
  "doc": "Dumping multiple variables to disk in Json. One variable per line",
  "code": "{\n\"variable_2\": \"something_else\", \n\"variable_1\": \"something\"\n}\n",
  "label": 0
 },
 {
  "idx": 460,
  "doc": "How to parse Apple's IAP receipt mal-formatted JSON?",
  "code": "trailingcomma = re.compile(r',(\\s*})')\nresult = trailingcomma.sub(r'\\1', result)\n",
  "label": 0
 },
 {
  "idx": 461,
  "doc": "BeautifulSoup scraping information from multiple divs using loops into JSON",
  "code": "{'podcasts': [{'description': 'Description 1',\n               'link': 'link1.mp3',\n               'title': 'Title 1'},\n              {'description': 'Description 2',\n               'link': 'link2.mp3',\n               'title': 'Title 2'}]}\n",
  "label": 0
 },
 {
  "idx": 462,
  "doc": "Creating a Distance Matrix?",
  "code": "import pandas as pd\nfrom scipy.spatial import distance_matrix\n\ndata = [[5, 7], [7, 3], [8, 1]]\nctys = ['Boston', 'Phoenix', 'New York']\ndf = pd.DataFrame(data, columns=['xcord', 'ycord'], index=ctys)\n",
  "label": 0
 },
 {
  "idx": 463,
  "doc": "Creating a Distance Matrix?",
  "code": " pd.DataFrame(distance_matrix(df.values, df.values), index=df.index, columns=df.index)\n",
  "label": 0
 },
 {
  "idx": 464,
  "doc": "Changing prompt working directory via Python script",
  "code": "doskey x=xdir.cmd $*\n",
  "label": 0
 },
 {
  "idx": 465,
  "doc": "Changing prompt working directory via Python script",
  "code": "$ x subdir\n",
  "label": 0
 },
 {
  "idx": 466,
  "doc": "How to merge item in list",
  "code": ">>> a1\n[1, 2, 3]\n>>> a2\n[4, 5, 6]\n>>> [item for item in itertools.chain(a1, a2)]\n",
  "label": 1
 },
 {
  "idx": 467,
  "doc": "How to merge item in list",
  "code": ">>> a\n[[1, 2, 3], [4, 5, 6]]\n>>> sum(a, [])\n",
  "label": 1
 },
 {
  "idx": 468,
  "doc": "Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__",
  "code": "class class_b(context_mixin):\n    def __init__(self):\n        self.a = class_a()\n    @contextlib.contextmanager\n    def context(self):\n        with self.a:\n            print('class_b enter')\n            try:\n                yield self\n            finally:\n                print('class_b exit')\n",
  "label": 0
 },
 {
  "idx": 469,
  "doc": "Multiple Forms and Formsets in CreateView",
  "code": "FatherInlineFormSet = inlineformset_factory(Father,\n    Son,\n    form=SonInline,\n    extra=1,\n    can_delete=False,\n    can_order=False\n)\n",
  "label": 0
 },
 {
  "idx": 470,
  "doc": "Search for a variable in a file and get its value with python",
  "code": "['Tom', 'Bob', 'Anny']\n200.0\n['Saly', 'Alice']\n",
  "label": 0
 },
 {
  "idx": 471,
  "doc": "Python json-rpc help, how to extract data",
  "code": " bal, pay_tax = access.getinfo()[\"balance\"], access.getinfo()[\"paytxfee\"]\n .....\n",
  "label": 0
 },
 {
  "idx": 472,
  "doc": "saving the number into the variable in every run of cycle python",
  "code": ">>> try_parse('123')\n'123'\n>>> try_parse('12n3')\n'12'\n>>> try_parse('')\n''\n>>> try_parse('4.13n3')\n'4.13'\n",
  "label": 0
 },
 {
  "idx": 473,
  "doc": "remove newline and whitespace parse XML with python Xpath",
  "code": "import lxml.etree as et\n\nxml = et.parse(\"feed.xml\")\nns = {\"ns\": 'http://www.w3.org/2005/Atom'}\nfor n in xml.xpath(\"//ns:category\", namespaces=ns):\n    t  = n.xpath(\"./../ns:summary\", namespaces=ns)[0]\n    print(t.xpath(\"normalize-space(.)\"))\n",
  "label": 0
 },
 {
  "idx": 474,
  "doc": "Adding a constant to a closure expression",
  "code": "new_a = make_subtract(a, a(100))\n",
  "label": 0
 },
 {
  "idx": 475,
  "doc": "Getting file path from command line arguments in python",
  "code": ">>> \nTrue\nC:\\Users\\310176421\\Desktop\\Python\\print.py\n>>>\n",
  "label": 0
 },
 {
  "idx": 476,
  "doc": "How to get python dictionaries into a pandas time series dataframe where key is date object",
  "code": "                      t2    t1\n2013-03-17 18:19:00  400  1000\n2013-03-17 18:20:00  300  3000\n",
  "label": 0
 },
 {
  "idx": 477,
  "doc": "Python Version Specific Code",
  "code": "if sys.version_info.major == 3 and sys.version_info.minor == 4:\n    print(\"I like Python 3.4\")\n",
  "label": 1
 },
 {
  "idx": 478,
  "doc": "How to remove all \"document.write(' ');\" with beautifulsoup",
  "code": "<table>\n <tr>\n  <td>\n   <span class=\"prod\">\n   some text\n   </span>\n  </td>\n  <td>\n   <span class=\"prod\">\n    7.70.022\n   </span>\n  </td>\n </tr>\n</table>\n",
  "label": 0
 },
 {
  "idx": 479,
  "doc": "finding nearest points in python",
  "code": "[3, 5]\n",
  "label": 0
 },
 {
  "idx": 480,
  "doc": "list comprehension on multiple lists of lists",
  "code": "[\n    [[regex(p, s) for p in patterns] for s in strings]\n    for strings, patterns in zip(a, b)\n]\n",
  "label": 1
 },
 {
  "idx": 481,
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "%timeit (np.diff(np.sign(big)) != 0).sum()\n1 loops, best of 3: 97.6 ms per loop\n",
  "label": 0
 },
 {
  "idx": 482,
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "%timeit (np.diff(np.sign(my_array)) != 0).sum()\n10000 loops, best of 3: 22.2 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 483,
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "%timeit ((my_array[:-1] * my_array[1:]) < 0).sum()\n100000 loops, best of 3: 11.6 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 484,
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "8\n",
  "label": 0
 },
 {
  "idx": 485,
  "doc": "Display menu bar items of IE using Python",
  "code": "VK_MENU = 0x12\nVK_F = 0x46\n\ndef show_menu(handle):\n    for key in (VK_MENU, VK_F):\n        send_message(window_handle, WM_KEYDOWN, key, 0)\n        send_message(window_handle, WM_KEYUP, key, 0)\n",
  "label": 0
 },
 {
  "idx": 486,
  "doc": "Python pandas idxmax for multiple indexes in a dataframe",
  "code": "Date\n2007-04-26    706\n2007-04-27    708\n2007-04-28     45\ndtype: int64\n",
  "label": 0
 },
 {
  "idx": 487,
  "doc": "Python: Extracting specific data with html parser",
  "code": "Swahili\nEnglish\nRussian\n",
  "label": 0
 },
 {
  "idx": 488,
  "doc": "Loops to minimize function of arrays in python",
  "code": "L = len(X)\nK = np.identity(L) - np.ones((L, L)) / L\n",
  "label": 0
 },
 {
  "idx": 489,
  "doc": "Can I use one import and expose keywords from multiple python libraries?",
  "code": "class Selenium2Library(\n_LoggingKeywords, \n_RunOnFailureKeywords, \n_BrowserManagementKeywords, \n_ElementKeywords, \n_TableElementKeywords,\n_FormElementKeywords,\n_SelectElementKeywords,\n_JavaScriptKeywords,\n_CookieKeywords,\n_ScreenshotKeywords,\n_WaitingKeywords\n",
  "label": 0
 },
 {
  "idx": 490,
  "doc": "Can I use one import and expose keywords from multiple python libraries?",
  "code": "class _BLibrary(object):\n\ndef __init__(self):\n    pass\ndef fun2(self):\n    print 'fun2'\ndef fun3(self):\n    print 'fun3'\n",
  "label": 0
 },
 {
  "idx": 491,
  "doc": "Can I use one import and expose keywords from multiple python libraries?",
  "code": "import _ALibrary\nimport _BLibrary\nclass CommonLibrary(_BLibrary._BLibrary,_ALibrary._ALibrary):\ndef __init__(self):\n    for base in CommonLibrary.__bases__:\n        base.__init__(self)\n",
  "label": 0
 },
 {
  "idx": 492,
  "doc": "How to read folder structure and assign it to datastructure?",
  "code": "import os\n\nrootDir = '.'\nfiles = {}\nfor dirName, subdirList, fileList in os.walk(rootDir):\n    files[dirName] = fileList\n",
  "label": 1
 },
 {
  "idx": 493,
  "doc": "Loop through dictionary with django",
  "code": "d['dict1'] = [('value1', '1'), ('value2', '2')]\nd['dict2'] = [('value1', '3'), ('value2', '4')]\n",
  "label": 0
 },
 {
  "idx": 494,
  "doc": "Comparing two dictionaries in list in python",
  "code": "b\n",
  "label": 0
 },
 {
  "idx": 495,
  "doc": "Comparing two dictionaries in list in python",
  "code": "lst=[{\"a\":2,\"b\":3,\"c\":4},{\"b\":4}]\nfor a in lst[0]:\n    if a in lst[1]]:\n        print a\n",
  "label": 1
 },
 {
  "idx": 496,
  "doc": "Pygame- Sprite set position with mouseclick",
  "code": "def update(self): \n    # current position is self.rect.topleft\n    # starting position is self.start_pos\n    # to move the Sprite/Rect, you can also use the move functions\n    self.rect.move_ip(10, 20) # moves the Sprite 10px vertically and 20px horizontally\n",
  "label": 0
 },
 {
  "idx": 497,
  "doc": "How to increment a variable on a for loop in jinja template?",
  "code": "{% for i in p %}\n  {{ loop.index }}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 498,
  "doc": "How to increment a variable on a for loop in jinja template?",
  "code": "{% set count = 1 %}\n{% for i in p %}\n  {{ count }}\n  {% set count = count + 1 %}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 499,
  "doc": "Gurobi, How to change a continuous variable to a binary variable",
  "code": "x.vtype = GRB.BINARY\n",
  "label": 0
 },
 {
  "idx": 500,
  "doc": "Regex to extract all URLs from a page",
  "code": ">>> for uri in extract_urls('http://foo.bar/baz irc://freenode.org/bash'):\n...   print uri\nhttp://foo.bar/\nirc://freenode.org\n",
  "label": 0
 },
 {
  "idx": 501,
  "doc": "Merging repeated items in a list into a python dictionary",
  "code": "from collections import defaultdict\n\nresult = defaultdict(list)\n\nfor key, *values in data:\n    result[key].extend(values)\n",
  "label": 1
 },
 {
  "idx": 502,
  "doc": "python- combining list and making them a dictionary",
  "code": "d = {i:[elements.pop(0)] for i in one[:-1]}.update({one[-1]:[elements]})\n",
  "label": 1
 },
 {
  "idx": 503,
  "doc": "pandas multiindex assignment from another dataframe",
  "code": "In [85]: df\nOut[85]: \n          1st       2nd       3rd\nA a  0.229970  0.730824  0.784356\n  b  0.584390  0.628337  0.318222\n  c       NaN       NaN       NaN\n  d       NaN       NaN       NaN\nB a  0.257192  0.624273  0.221279\n  b  0.787023  0.056342  0.240735\n  c       NaN       NaN       NaN\n  d       NaN       NaN       NaN\n",
  "label": 0
 },
 {
  "idx": 504,
  "doc": "Spawning a thread in python",
  "code": "def do_stuff(data):\n    print 'alice does stuff with %s' % data\n",
  "label": 0
 },
 {
  "idx": 505,
  "doc": "Spawning a thread in python",
  "code": "def do_stuff(data):\n    print 'bob does stuff with %s' % data\n",
  "label": 0
 },
 {
  "idx": 506,
  "doc": "Python drag and drop, get filenames",
  "code": "python \"dropScript.py\" %*\n",
  "label": 0
 },
 {
  "idx": 507,
  "doc": "Django - access foreign key data in an annotated query",
  "code": "from django.db.models import Count\n\nusers = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')\n",
  "label": 0
 },
 {
  "idx": 508,
  "doc": "in python, how to manipulate namespace of an instance",
  "code": "def get_data():\n    return 'bar'\n",
  "label": 0
 },
 {
  "idx": 509,
  "doc": "Using beautifulsoup to parse tag with some text",
  "code": "from BeautifulSoup import BeautifulSoup\n\ntext = \"\"\"\n<dt>PLZ:</dt>\n<dd>\n8047\n</dd>\"\"\"\n\nnumber = BeautifulSoup(text).find(\"dt\",text=\"PLZ:\").parent.findNextSiblings(\"dd\")\nprint BeautifulSoup(''.join(number[0]))\n",
  "label": 1
 },
 {
  "idx": 510,
  "doc": "Using beautifulsoup to parse tag with some text",
  "code": "number = BeautifulSoup(text).find(\"dt\",text=\"PLZ:\").parent.findNext(\"dd\").contents[0]\n",
  "label": 1
 },
 {
  "idx": 511,
  "doc": "Getting stats about each row and putting them into a new column. Pandas",
  "code": "df['count of not x'] = df.apply(lambda x: (x[['y','z']] != x['x']).sum(), axis=1)\ndf['unique'] = df.apply(lambda x: x[['x','y','z']].nunique(), axis=1)\n",
  "label": 1
 },
 {
  "idx": 512,
  "doc": "Creating multiple csv files from data within a csv file",
  "code": "awk -F, -vOFS=, -vc=1 'NR == 1 {for (i=1; i<NF; i++) {if ($i != \"\") {g[c]=i; f[c++]=$i}}} NR>2 { for (i=1; i < c; i++) {print $1,$2, $g[i] > \"file_\"f[i]\".csv\" }}' data.csv\n",
  "label": 1
 },
 {
  "idx": 513,
  "doc": "Printing row and columns in reverse",
  "code": "for row in zip(*contents):\n    print(row)\n",
  "label": 1
 },
 {
  "idx": 514,
  "doc": "Python - re - need help for regular expression",
  "code": "re.search('\\[([^\\]]*)\\]', html_template)\n",
  "label": 1
 },
 {
  "idx": 515,
  "doc": "Python - re - need help for regular expression",
  "code": "re.search('\\[(.*?)\\]', html_template)\n",
  "label": 1
 },
 {
  "idx": 516,
  "doc": "Override python logging for test efficiency",
  "code": "logging.disable(logging.NOTSET)\n",
  "label": 0
 },
 {
  "idx": 517,
  "doc": "Pass a counter to every python logging method",
  "code": "DEBUG   : 5: First Event\nWARNING : 7: Second Event\n",
  "label": 0
 },
 {
  "idx": 518,
  "doc": "How do I use BeautifulSoup to move tag contents from one soup to a template soup",
  "code": "<div id=\"here\"><script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n<script src=\"//cdn.sstatic.net/Js/stub.en.js?v=283ea58c715b\"></script>\n<link href=\"//cdn.sstatic.net/stackoverflow/all.css?v=71d362e7c10c\" rel=\"stylesheet\"   type=\"text/css\">\n</link></div>\n",
  "label": 0
 },
 {
  "idx": 519,
  "doc": "How do I use BeautifulSoup to move tag contents from one soup to a template soup",
  "code": "from bs4 import BeautifulSoup\n\nhtml = \"\"\"<html><body><div id=\"here\"></div></body></html>\"\"\"\n\nsoup = BeautifulSoup(html)\ndiv = soup.find(\"div\", id=\"here\")\n\nhtml2 = \"\"\"<html><body><script   src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n           <script src=\"//cdn.sstatic.net/Js/stub.en.js?v=283ea58c715b\"></script>\n           <link rel=\"stylesheet\" type=\"text/css\"  href=\"//cdn.ss  tatic.net/stackoverflow/all.css?   v=71d362e7c10c\">\n           </body></html>\"\"\"\n\nsoup1 = BeautifulSoup(html2)\nvalue = soup1.body.extract()\n\ndiv.append(value)\nprint div\n",
  "label": 1
 },
 {
  "idx": 520,
  "doc": "How to append the second return value, directly to a list, in Python",
  "code": "[6, 7, 1, 2, 3, 5]\n",
  "label": 0
 },
 {
  "idx": 521,
  "doc": "Speeding up linear interpolation of many pixel locations in NumPy",
  "code": " original version: 0.463063955307\n   better version: 0.204537153244\n     best version: 0.121845006943\n",
  "label": 0
 },
 {
  "idx": 522,
  "doc": "Customizing time of the datetime object in python",
  "code": "2016-04-22 16:11:08.171845\n2016-05-22 16:11:08.171845\n2016-04-22 00:00:00\n2016-05-22 23:59:59\n",
  "label": 0
 },
 {
  "idx": 523,
  "doc": "How can a Python module single file be installed using pip and PyPI?",
  "code": "import example\nexample.example()\n# or\nfrom example import example\nexample()\n",
  "label": 0
 },
 {
  "idx": 524,
  "doc": "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?",
  "code": "html = '''<li class=\"nv-talk\"><a href=\"/wiki/Template_talk:Data_structures\" title=\"Template talk:Data structures\"><span title=\"Discuss this    template\" style=\";;background:none    transparent;border:none;;\">t</span></a></li>    '''\nsoup = BeautifulSoup(html)\na_tag = soup.find('a')\na_tag.find_parents(attrs={'class':'nv-talk'})\n",
  "label": 1
 },
 {
  "idx": 525,
  "doc": "Match series of (non-nested) balanced parentheses at end of string",
  "code": "paren_pattern = re.compile(r\"\\(([^()]*)\\)(?=(?:\\s*\\([^()]*\\))*\\s*$)\")\n\ndef getParens(s):\n  return paren_pattern.findall(s)\n",
  "label": 1
 },
 {
  "idx": 526,
  "doc": "Match series of (non-nested) balanced parentheses at end of string",
  "code": "getParens = re.compile(r\"\\(([^()]*)\\)(?=(?:\\s*\\([^()]*\\))*\\s*$)\").findall\n",
  "label": 1
 },
 {
  "idx": 527,
  "doc": "What is the best practice to add tuples to a set?",
  "code": "exl_set = set([a.node])\n",
  "label": 1
 },
 {
  "idx": 528,
  "doc": "How to change a DateTimeIndex in a pandas dataframe to all the same year?",
  "code": "import pandas as pd\ndf = pd.read_table('data', sep='\\s{2,}').set_index('observation_date')\ndf.index = pd.DatetimeIndex(df.index)\ndf.index = df.index + pd.DateOffset(year=2013)\nprint(df)\n",
  "label": 1
 },
 {
  "idx": 529,
  "doc": "How to change a DateTimeIndex in a pandas dataframe to all the same year?",
  "code": "             Charge 1  Charge 2\n2013-01-31  35.535318  0.073390\n2013-02-28  27.685739  0.050302\n2013-01-31  27.671290  0.296882\n2013-02-28  26.647262  0.225714\n2013-03-31  21.495699  0.362151\n",
  "label": 0
 },
 {
  "idx": 530,
  "doc": "Using Py_BuildValue() to create a list of tuples in C",
  "code": "[(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11), (12, 13, 14, 15)]\n",
  "label": 0
 },
 {
  "idx": 531,
  "doc": "Modify a python script with bash and execute it with the changes",
  "code": "start=0\nfor ... in ...\ndo\n    echo \"Foo:$foo\"\n    echo \"Bar:$bar\"\n    ./pythonScript.py --argument1 \"arg\" --start \"$start\"\n    ((start += 20))  # bash only\ndone    \n",
  "label": 0
 },
 {
  "idx": 532,
  "doc": "Python - \"properly\" organise (spread out) x and y data",
  "code": ">>> spreadout(range(6), list(\"ABC\"))\n[5, 'C', 4, 3, 'B', 2, 1, 'A', 0]\n>>> xy_wrapper(5, 17)\n'x,y,y,y,y,x,y,y,y,x,y,y,y,y,x,y,y,y,x,y,y,y'\n",
  "label": 0
 },
 {
  "idx": 533,
  "doc": "How do I test if a string exists in a Genshi stream?",
  "code": "stream = stream | Transformer('.//head').append(tag.script(functionNameCode, type=\"text/javascript\"))\n",
  "label": 0
 },
 {
  "idx": 534,
  "doc": "How to start at a specific step in a script?",
  "code": "if start >= 1:\n    function1()\nif start >= 2:\n    function2()\nif start >= 3:\n    function3()\n",
  "label": 1
 },
 {
  "idx": 535,
  "doc": "How to start at a specific step in a script?",
  "code": "f = [None, function1, function2, function3, ...]\nfor f in f_list[start:]:\n    f()\n",
  "label": 1
 },
 {
  "idx": 536,
  "doc": "customize django runserver output",
  "code": "doc = {\n                'record_hash': hash,\n                'level': record.level,\n                'channel': record.channel or u'',\n                'location': u'%s:%d' % (record.filename, record.lineno),\n                \"message\": record.msg,\n                'module': record.module or u'<unknown>',\n                'occurrence_count': 0,\n                'solved': False,\n                'app_id': app_id,\n                'sql': sql,\n            }\n",
  "label": 0
 },
 {
  "idx": 537,
  "doc": "customize django runserver output",
  "code": "from django.db import connection\nsql=connection.queries\n",
  "label": 0
 },
 {
  "idx": 538,
  "doc": "Check list of tuples where first element of tuple is specified by defined string",
  "code": "[('A', 2), ('A', 1)]\n",
  "label": 0
 },
 {
  "idx": 539,
  "doc": "Generate permutations of a list of lists with variable lengths",
  "code": "from itertools import product\n\nlsts = [['A', 'G'], ['A', 'C', 'G'], 'T']\noutput = [''.join(combo) for combo in product(*lsts)]\n",
  "label": 1
 },
 {
  "idx": 540,
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": ">>> parseTags(\"tHiS iS a tAg, AnD tHIs, \\t\\n!&#^ , se@%condcomment$ , No!pUnc$$, ifNOSPACESthenPRESERVEcaps\")\n['thisIsATag', 'AndThis', 'secondcomment', 'NopUnc', 'ifNOSPACESthenPRESERVEcaps']\n",
  "label": 0
 },
 {
  "idx": 541,
  "doc": "capturing the usernames after List: tag",
  "code": "['username1', 'username2', 'username3', 'username4', 'username5']\n['User1', 'User2', 'User3', 'User4', 'User5']\n['tech.sw.host']\n",
  "label": 0
 },
 {
  "idx": 542,
  "doc": "Comparing two lists items in python",
  "code": "s = \"\"\"d.complex.1\n10\n11\n12\n10\n11\n12\"\"\"\n\nfile_dict = file_loader(s.split(\"\\n\"))\nprint file_dict\nprint count_number(file_dict, '10')\n",
  "label": 0
 },
 {
  "idx": 543,
  "doc": "Extract a particular number followed by a command line argument variable from a string in python",
  "code": "In [445]: Matches\nOut[445]: ['vg10']\n\nIn [446]: int(*re.findall(r'[0-9]+', Matches[0]))\nOut[446]: 10\n",
  "label": 1
 },
 {
  "idx": 544,
  "doc": "finding index of an item closest to the value in a list that's not entirely sorted",
  "code": ">>> min(enumerate(a), key=lambda x: abs(x[1]-11.5))\n(16, 11.33447)\n",
  "label": 1
 },
 {
  "idx": 545,
  "doc": "finding index of an item closest to the value in a list that's not entirely sorted",
  "code": "min(range(len(a)), key=lambda i: abs(a[i]-11.5))\n",
  "label": 1
 },
 {
  "idx": 546,
  "doc": "Indexing pandas dataframe to return first data point from each day",
  "code": "                        date  val\n20130101 2013-01-01 01:00:00    0\n20130102 2013-01-02 01:00:00    3\n20130104 2013-01-04 14:00:00    5\n",
  "label": 0
 },
 {
  "idx": 547,
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "def vigenere(row, column):\n    ''' \n    Return a character from a vigenere square by \n    row and column letter.\n    vigenere('L', 'G') returns 'R'\n    '''\n    alpha = string.ascii_uppercase\n    rowindex = alpha.find(row)\n    columnindex = alpha.find(column)\n    return vigsquare()[rowindex*26 + columnindex]\n\nprint vigsquare(printable=True)\nvigenere('L', 'G')\n",
  "label": 0
 },
 {
  "idx": 548,
  "doc": "Most efficient way to delete needless newlines in Python",
  "code": "import re\n\nwith open('gutenberg.txt') as stream:\n    oldtext = stream.read()\n\n    newtext = re.sub(r'(?<!\\n)\\n(?![\\n\\t])', ' ', oldtext.replace('\\r', ''))\n\n    print(newtext)\n",
  "label": 1
 },
 {
  "idx": 549,
  "doc": "Python create instance from list of classes",
  "code": "class_register[self.__class__.__name__] = self.__class__\n",
  "label": 1
 },
 {
  "idx": 550,
  "doc": "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide",
  "code": "df.loc[mask, 'B'] = df.loc[mask, 'A'].map(na_map)\n\n       A    B\n0    Red  628\n1    Red  149\n2    Red  123\n3  Green  575\n4  Green  687\n5  Green  456\n6   Blue  159\n7   Blue  789\n",
  "label": 0
 },
 {
  "idx": 551,
  "doc": "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide",
  "code": "0    False\n1    False\n2     True\n3    False\n4    False\n5     True\n6    False\n7     True\n",
  "label": 0
 },
 {
  "idx": 552,
  "doc": "Sum of all numbers inside a string",
  "code": "['1.25', '3.455', '3.7']\n",
  "label": 0
 },
 {
  "idx": 553,
  "doc": "Set global constant cross all the view",
  "code": "_thread_local = threading.local()\n",
  "label": 0
 },
 {
  "idx": 554,
  "doc": "Set global constant cross all the view",
  "code": "def get_constant_value()\n    return getattr(_thread_local, 'CONSTANT_NAME', None)\n\ndef set_constant_value(value):\n    CONSTANT_NAME = value\n",
  "label": 0
 },
 {
  "idx": 555,
  "doc": "Store all stdout to file while still displaying it on screen",
  "code": "$ python2 out.py \nCode finished\n$ ls\nelem1.log  elem2.log  out.py\n",
  "label": 0
 },
 {
  "idx": 556,
  "doc": "Store all stdout to file while still displaying it on screen",
  "code": "print 'this on screen'\n\nwith Logger(\"/tmp/1/main.log\", \"w\") as sys.stdout:\n     print 'this on screen an in main.log'\n\n     with Logger(\"/tmp/1/sub.log\", \"w\") as sys.stdout:\n          print 'this on screen, in man.log and in sub.log'\n\nprint 'only on screen again'\n",
  "label": 0
 },
 {
  "idx": 557,
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "thing.data IS DISTINCT FROM %(param_1)s\nthing.data <=> %s\n",
  "label": 0
 },
 {
  "idx": 558,
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "from sqlalchemy import Column, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nclass Thing(Base):\n    __tablename__ = 'thing'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(NullComparisons(50))\nprint(Thing.data != 'hi')\n",
  "label": 0
 },
 {
  "idx": 559,
  "doc": "Creating a table out of data in python",
  "code": "Column 1                Column 2                Column 3                Column 4            \n\nbread                   milk                    sugar                   tea                 \n\neggs                    shampoo                 clothes                 tiger               \n\nbeads                   washing machine         juice                   mixed herbs    \n",
  "label": 0
 },
 {
  "idx": 560,
  "doc": "Creating a table out of data in python",
  "code": "your_list = ['bread', 'milk', 'sugar', 'tea']\n\nprint(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format('Column 1', 'Column 2', 'Column 3', 'Column 4'))\nprint(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format(your_list[0], your_list[1], your_list[2], your_list[3]))\n",
  "label": 1
 },
 {
  "idx": 561,
  "doc": "Reading files in parallel in python",
  "code": "[{1: 10, 2: 11, 3: 12}, {1: 13, 2: 14, 3: 15}, {1: 16, 2: 17, 3: 18}]\nAverage age with population 2 is 14 years old\n",
  "label": 0
 },
 {
  "idx": 562,
  "doc": "change multiple lines in file python using regex",
  "code": "1.0,2.5,3.2\n4.1,5.2,6.2\n7.6,8.0,9.3\n",
  "label": 0
 },
 {
  "idx": 563,
  "doc": "Python - list of dicts into function that only accepts *dicts",
  "code": "def foo(*bars):\n    for bar in bars:\n        print(bar)\n\nlist_of_things = ['one', 'two', 'three']\n\nfoo(*list_of_things)\n",
  "label": 1
 },
 {
  "idx": 564,
  "doc": "How to remove an array containing certain strings from another array in Python",
  "code": "['blah', 'tete', 'head']\n",
  "label": 0
 },
 {
  "idx": 565,
  "doc": "How to remove an array containing certain strings from another array in Python",
  "code": "[i for i in a if not any(x in i for x in b)]\n",
  "label": 1
 },
 {
  "idx": 566,
  "doc": "finding nth combination (incremental approach) of letters (list)",
  "code": ">>> get_nth_pow('eht', 34)\n'the'\n",
  "label": 0
 },
 {
  "idx": 567,
  "doc": "Where is the configuration information of installed packages?",
  "code": "pip show <package name>\n",
  "label": 1
 },
 {
  "idx": 568,
  "doc": "Efficiently detect sign-changes in python",
  "code": "import numpy\na = [1, 2, 1, 1, -3, -4, 7, 8, 9, 10, -2, 1, -3, 5, 6, 7, -10]\nzero_crossings = numpy.where(numpy.diff(numpy.sign(a)))[0]\n",
  "label": 1
 },
 {
  "idx": 569,
  "doc": "Extarct particulr part of json string using python regex",
  "code": ">>> p = json.loads('''{\"sweep_enabled\":true,\"product\":\"XYZ\",\"page\":\"XYZ Profile\",\"list\":{\\\"id\\\":205782,\\\"name\\\":\\\"Robert Shriwas\\\",\\\"gender\\\":\\\"F\\\",\\\"practicing_since\\\":null,\\\"years\\\":21,\\\"specializations\\\":[\\\"Mentor\\\"]},\"form\":{\"q\":\"\",\"city\":\"Delhi\",\"locality\":null},\"cerebro\":true}''')\n",
  "label": 0
 },
 {
  "idx": 570,
  "doc": "How do I convert data from a list of lists to a readable table (or group of columns)?",
  "code": "Knight             500         500           0           0\nMage                 0           0         500         500\nMage                 0           0         500         500\nMage                 0           0         500         500\nMage                 0           0         500         500\n",
  "label": 0
 },
 {
  "idx": 571,
  "doc": "Cmd module '~' completion",
  "code": "def complete(text, state):\n    return (glob.glob(os.path.expanduser(text)+'*')+[None])[state]\n",
  "label": 0
 },
 {
  "idx": 572,
  "doc": "Using regex to find a string starting with /team/ and ending with /Euro_2012",
  "code": ">>> import re\n>>> sample = '''\\\n... /team/Croatia/Euro_2012\n... /team/Netherlands/Euro_2012\n... /team/Netherlands/WC2014\n... '''\n>>> re.findall(r'/team/.*?/Euro_2012', sample)\n['/team/Croatia/Euro_2012', '/team/Netherlands/Euro_2012']\n>>> re.findall(r'/team/[\\w\\d%.~+-/]*?/Euro_2012', sample)\n['/team/Croatia/Euro_2012', '/team/Netherlands/Euro_2012']\n",
  "label": 1
 },
 {
  "idx": 573,
  "doc": "splitting one csv into multiple files in python",
  "code": "split(open('/your/pat/input.csv', 'r'));\n",
  "label": 0
 },
 {
  "idx": 574,
  "doc": "Split string elements of a list with multiple separators/conditions. Any good Python library?",
  "code": "$ python location_regexes.py \n['Washington', 'Miami', 'New York', 'Kaslo/Nelson area', 'Plymouth', 'DF - outskirts-']\n['DC', 'FL', 'NY', 'Canada', 'UK/England', 'Mexico']\n[['38.206471', '-111.165271']]\n",
  "label": 0
 },
 {
  "idx": 575,
  "doc": "Search for brackets in a case insensitive using regular expressions",
  "code": "import re\n\ns = \"foo[bar]baz\"\nm = re.search(\"[\\[\\]]\", s)\nprint m.group(0)\n# => '['\n\nt = \"foo-bar]baz\"\nn = re.search(\"[\\[\\]]\", t)\nprint n.group(0)\n# => ']'\n",
  "label": 1
 },
 {
  "idx": 576,
  "doc": "Possibility of writing dictionary items in columns",
  "code": "('c4:7d:4f:53:24:be', 'ac:81:12:62:91:df')  ('a8:5b:4f:2e:fe:09', 'de:62:ef:4e:21:de')\n5.998999999999998   7.89899999\n0.0013169999    0.1564799999967539\n4.000000000000097   8.764380000972\n",
  "label": 0
 },
 {
  "idx": 577,
  "doc": "How do you read in a text (.txt) file as a .py file in Python 2.7?",
  "code": "{'hello': 'world'}\n",
  "label": 0
 },
 {
  "idx": 578,
  "doc": "How do you read in a text (.txt) file as a .py file in Python 2.7?",
  "code": "d = {\"hello\": \"world\"}\n",
  "label": 0
 },
 {
  "idx": 579,
  "doc": "How do you read in a text (.txt) file as a .py file in Python 2.7?",
  "code": "{u'hello': u'world'}\n",
  "label": 0
 },
 {
  "idx": 580,
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "from xml.etree.ElementTree import fromstring, ElementTree\n\ndata = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n    <to> Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>\n\"\"\"\n\ntree = ElementTree(fromstring(data))\nprint [item.tag for item in tree.getiterator()]\n",
  "label": 1
 },
 {
  "idx": 581,
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "['note', 'to', 'from', 'heading', 'body']\n",
  "label": 0
 },
 {
  "idx": 582,
  "doc": "Using a global flag for python RegExp compile",
  "code": "with flag_regexen(re.DOTALL):\n    <do stuff with all regexes DOTALLed>\n",
  "label": 0
 },
 {
  "idx": 583,
  "doc": "Python handling newline and tab characters when writing to file",
  "code": ">>> test_str = \"/*\\n test.cpp\\n *\\n *\\n *\\n\\t2013.02.30\\n *\\n */\\n\"\n>>> test_str.encode('unicode_escape')\nb'/*\\\\n test.cpp\\\\n *\\\\n *\\\\n *\\\\n\\\\t2013.02.30\\\\n *\\\\n */\\\\n'\n",
  "label": 0
 },
 {
  "idx": 584,
  "doc": "Gtk 3 python entry color",
  "code": "GtkEntry {\n    color: darkgrey;\n}\n\nGtkEntry:focused {\n    color: black;\n}\n",
  "label": 0
 },
 {
  "idx": 585,
  "doc": "Using a loop to make a dictionary",
  "code": "{'01000001': 'A',\n '01000010': 'B',\n '01000011': 'C',\n '01000100': 'D',\n '01000101': 'E',\n 'A': '01000001',\n 'B': '01000010',\n 'C': '01000011',\n 'D': '01000100',\n 'E': '01000101'}\n",
  "label": 0
 },
 {
  "idx": 586,
  "doc": "Other ways to replace single character",
  "code": "0.233116149902\n0.409259080887\n2.64006495476\n0.612321138382\n0.302225828171\n",
  "label": 0
 },
 {
  "idx": 587,
  "doc": "Python Relating k-means cluster to instance",
  "code": "clusters = dict(zip(lables, model[1]))\n",
  "label": 0
 },
 {
  "idx": 588,
  "doc": "How to rename variables in a loop in Python",
  "code": "arraysDict = {}\nfor i in range(0,3):\n    arraysDict['x{0}'.format(i)] = [1,2,3]\n\nprint arraysDict\n# {'x2': [1, 2, 3], 'x0': [1, 2, 3], 'x1': [1, 2, 3]}\nprint arraysDict['x1']\n# [1,2,3]\n",
  "label": 1
 },
 {
  "idx": 589,
  "doc": "Sqlalchemy \"double layer\" query",
  "code": "DBSession.query(Alert.id).join(Like).join(Post).filter(Post.id==2).all()\n",
  "label": 0
 },
 {
  "idx": 590,
  "doc": "python - numpy: read csv into numpy with proper value type",
  "code": "    [['A' 1.0 2.0 3.0 4.0 5.0]\n     ['B' 6.0 7.0 8.0 9.0 10.0]\n     ['C' 11.0 12.0 13.0 14.0 15.0]\n     ['A' 16.0 17.0 18.0 19.0 20.0]]\n",
  "label": 0
 },
 {
  "idx": 591,
  "doc": "Pipe delimiter file, but no pipe inside data",
  "code": "foo,bar|baz,spam\n",
  "label": 0
 },
 {
  "idx": 592,
  "doc": "Sampling keys due to their values",
  "code": "def build_cdf(distrib):\n    cdf = []\n    val = 0\n    for key, freq in distrib.items():\n        val += freq\n        cdf.append((val, key))\n    return (val, cdf)\n",
  "label": 0
 },
 {
  "idx": 593,
  "doc": "Sampling keys due to their values",
  "code": "import random\ndef sample_from_cdf(val_and_cdf):\n    (val, cdf) = val_and_cdf;\n    rand = random.uniform(0, val)\n    # use bisect.bisect_left to reduce search time from O(n) to O(log n).\n    return [key for index, key in cdf if index > rand][0]\n",
  "label": 0
 },
 {
  "idx": 594,
  "doc": "take column headers only from ASCII file in python",
  "code": "pd.read_csv(file_path, nrows=1).columns\n",
  "label": 1
 },
 {
  "idx": 595,
  "doc": "Python: Create Dictionary From List with [0] = Key and [1:]= Values",
  "code": "data = [['cups', 'cusp', 'cpus', 'cpsu', 'csup', 'cspu',],\n        ['pups', 'pusp','upsp', 'upps', 'upsp', 'uspp']]\n\nresult = {each[0]:each[1:] for each in data}           \nprint result\n",
  "label": 1
 },
 {
  "idx": 596,
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "# The basics for defining a DSN (Data Source Name)\n# [data_source_name]\n#       host = <hostname or IP address>\n#       port = <port number to connect to - probably 1433>\n#       tds version = <TDS version to use - probably 8.0>\n\n# Define a connection to the MSSQL server.\n[mssql]\n        host = mssql_server_ip_or_domain_name\n        port = 1433\n        tds version = 8.0\n",
  "label": 0
 },
 {
  "idx": 597,
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "# Define a connection to the MSSQL server.\n# The Description can be whatever we want it to be.\n# The Driver value must match what we have defined in /etc/odbcinst.ini\n# The Database name must be the name of the database this connection will connect to.\n# The ServerName is the name we defined in /etc/freetds/freetds.conf\n# The TDS_Version should match what we defined in /etc/freetds/freetds.conf\n[mssql]\nDescription             = MSSQL Server\nDriver                  = freetds\nDatabase                = MyDatabase\nServerName              = mssql\nTDS_Version             = 8.0\n",
  "label": 0
 },
 {
  "idx": 598,
  "doc": "Copying the contents of a variable to the clipboard",
  "code": "addToClipBoard(your_variable)\n",
  "label": 0
 },
 {
  "idx": 599,
  "doc": "Copying the contents of a variable to the clipboard",
  "code": "import os\ndef addToClipBoard(text):\n    command = 'echo ' + text.strip() + '| clip'\n    os.system(command)\n",
  "label": 1
 },
 {
  "idx": 600,
  "doc": "Combine multiple heatmaps in matplotlib",
  "code": "contour(D1,cmap='Blues')\ncontour(D2,cmap='Reds')\ncontour(D2,cmap='Reds')\n",
  "label": 1
 },
 {
  "idx": 601,
  "doc": "Python: compare an array element-wise with a float",
  "code": ">>> A>.2\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n",
  "label": 0
 },
 {
  "idx": 602,
  "doc": "How to automatically rerun a python program after it finishes? Supervisord?",
  "code": "[program:myprog]\ncommand=/opt/myprog/bin/myprog --opt1 --opt2\ndirectory=/opt/myprog\nuser=myuser\n",
  "label": 0
 },
 {
  "idx": 603,
  "doc": "removing first four and last four characters of strings in list, OR removing specific character patterns",
  "code": "def remove_cruft(s):\n    return s[4:-4]\n\nsites=['www.hattrick.com', 'www.google.com', 'www.wampum.net', 'www.newcom.com']\n[remove_cruft(s) for s in sites]\n",
  "label": 1
 },
 {
  "idx": 604,
  "doc": "How to search & replace in Python?",
  "code": "s = re.sub('(\\d\\d)', r'\\1-', s, 1)\n",
  "label": 1
 },
 {
  "idx": 605,
  "doc": "How to search & replace in Python?",
  "code": "import re\ni = re.search('\\d', s).start()\ns = s[:i] + '-' + s[i:]\n",
  "label": 1
 },
 {
  "idx": 606,
  "doc": "Allocate items according to an approximate ratio in Python",
  "code": "def allocate_goals(prop_low, prop_high):\n    all_goals = prop_low + prop_high * 3\n    while True:\n        yield random.choice(all_goals)\n",
  "label": 0
 },
 {
  "idx": 607,
  "doc": "Python CSVkit compare CSV files",
  "code": "\n,reference,name,house\n0,2348A,john,37\n1,76A,harry ,433\n",
  "label": 0
 },
 {
  "idx": 608,
  "doc": "Pandas Compute Unique Values per Column as Series",
  "code": "   count  nunique\nA      5        4\nB      5        2\nC      5        3\nD      5        4\n",
  "label": 0
 },
 {
  "idx": 609,
  "doc": "Using pandas to plot data",
  "code": "d = pd.pivot_table(df,index=df.index, columns='Name', values='Activity').fillna(0)\n",
  "label": 0
 },
 {
  "idx": 610,
  "doc": "Python: Converting Unicode code point filenames to strings",
  "code": "-#U2605-#U79c1- -\u2605-\u79c1-\n",
  "label": 0
 },
 {
  "idx": 611,
  "doc": "Python: Converting Unicode code point filenames to strings",
  "code": "#! /usr/bin/python3\nimport re\n\ndef makeNice(s):\n    return re.subn('(#U[0-9a-f]{4})', lambda cp: chr(int(cp.groups()[0][2:],16)), s) [0]\n\na = '-#U2605-#U79c1-'\nprint(a, makeNice(a))\n",
  "label": 1
 },
 {
  "idx": 612,
  "doc": "How to pass additional parameters (besides of arguments) to a function in Python",
  "code": "x0 = 1\ndef fun2(f1, x):\n    return f1(x)\n",
  "label": 0
 },
 {
  "idx": 613,
  "doc": "Combine multidimensional array by group python",
  "code": "[['test', '172.18.74.146, 172.18.74.148', '13:05:43.834, 2015_08_07', '2015_08_07'], \n['blah', '172.18.74.149, 172.18.74.146', '11:18:33.846, 2015_08_12', '2015_08_12']]\n",
  "label": 0
 },
 {
  "idx": 614,
  "doc": "Sorting a list based on associated scores",
  "code": "{'item1': 220, 'item3': 100, 'item2': 240, 'item4': 200}\n",
  "label": 0
 },
 {
  "idx": 615,
  "doc": "Sorting a list based on associated scores",
  "code": "output == ['item2', 'item1', 'item4', 'item3']\n",
  "label": 0
 },
 {
  "idx": 616,
  "doc": "Get non-contiguous columns from a list of lists",
  "code": ">>> [itemgetter(0,2)(i) for i in a]\n[(1, 3), (4, 6)]\n",
  "label": 1
 },
 {
  "idx": 617,
  "doc": "Get non-contiguous columns from a list of lists",
  "code": ">>> a = [[1,2,3],[4,5,6]]\n>>> from operator import itemgetter\n>>> map(itemgetter(0,2), a)\n[(1, 3), (4, 6)]\n>>> \n",
  "label": 1
 },
 {
  "idx": 618,
  "doc": "how to find the line number where specific text exists?",
  "code": "4\n",
  "label": 0
 },
 {
  "idx": 619,
  "doc": "Customize sphinxdoc theme",
  "code": "[theme]\ninherit = default\nstylesheet = style.css\npygments_style = pygments.css\n",
  "label": 0
 },
 {
  "idx": 620,
  "doc": "Customize sphinxdoc theme",
  "code": "html_theme = 'theme' # use the theme in subdir 'theme'\nhtml_theme_path = ['.'] # make sphinx search for themes in current dir\n",
  "label": 0
 },
 {
  "idx": 621,
  "doc": "Customize sphinxdoc theme",
  "code": ".. role:: strike\n   :class: strike\n",
  "label": 0
 },
 {
  "idx": 622,
  "doc": "How to set the alpha value for each element of a numpy array",
  "code": "plt.imshow(np.dstack([ca_map, ca_map, ca_map, alpha], ...)\n",
  "label": 1
 },
 {
  "idx": 623,
  "doc": "Dictionary from variables that may not be initialized",
  "code": ">>> x = 1\n>>> y = 3\n>>> z = None\n>>> d = {k:v for k,v in locals().items() if v is not None and not k.startswith('__')}\n>>> d\n{'y': 3, 'x': 1}\n",
  "label": 1
 },
 {
  "idx": 624,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "0 2 4 6 8 10\n",
  "label": 0
 },
 {
  "idx": 625,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": " print_table()\n",
  "label": 0
 },
 {
  "idx": 626,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "0 2 4 6 8 10 12 14 16 18 20\n",
  "label": 0
 },
 {
  "idx": 627,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "0 1 2 3 4 5 6 7 8 9 10  \n0 2 4 6 8 10 12 14 16 18 20 \n0 3 6 9 12 15 18 21 24 27 30 \n...\n0 10 20 30 40 50 60 70 80 90 100 \n",
  "label": 0
 },
 {
  "idx": 628,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "0 1 2 3 4 5 6 7 8 9 10 \n0 2 4 6 8 10 12 14 16 18 20 \n",
  "label": 0
 },
 {
  "idx": 629,
  "doc": "How to generalize a multiplication table for (n * m)",
  "code": "def print_table(n = 10):\n    for i in range(1, n + 1):\n        print_multiples(i)\n",
  "label": 0
 },
 {
  "idx": 630,
  "doc": "Using other keys for the waitKey() function of opencv",
  "code": "Upkey : 2490368\nDownKey : 2621440\nLeftKey : 2424832\nRightKey: 2555904\nSpace : 32\nDelete : 3014656\n...... # Continue yourself :)\n",
  "label": 0
 },
 {
  "idx": 631,
  "doc": "Iterate through each value of list in order, starting at random value",
  "code": ">>> start = randint(0, len(numbers))\n>>> start\n1\n",
  "label": 0
 },
 {
  "idx": 632,
  "doc": "how can I have commas instead of space in a given set of number",
  "code": ">>> s = \"39401.99865    7292.4753   8541.03675  6098.54185  106352.218  7300.4485   5699.983    5538.44755  5934.8514   7477.62475  5956.7409   9170.98 9481.5082   6063.4508   9380.92255\" \n>>> [float(item) for item in s.split()]\n[39401.99865, 7292.4753, 8541.03675, 6098.54185, 106352.218, 7300.4485, 5699.983, 5538.44755, 5934.8514, 7477.62475, 5956.7409, 9170.98, 9481.5082, 6063.4508, 9380.92255]\n",
  "label": 1
 },
 {
  "idx": 633,
  "doc": "how can I have commas instead of space in a given set of number",
  "code": ">>> map(float, s.split())\n[39401.99865, 7292.4753, 8541.03675, 6098.54185, 106352.218, 7300.4485, 5699.983, 5538.44755, 5934.8514, 7477.62475, 5956.7409, 9170.98, 9481.5082, 6063.4508, 9380.92255]\n",
  "label": 1
 },
 {
  "idx": 634,
  "doc": "django serialize foreign key objects",
  "code": "import json\n",
  "label": 0
 },
 {
  "idx": 635,
  "doc": "Summing similar elements within a tuple-of-tuples",
  "code": "(('a', 'b', 10), ('a', 'c', 4), ('b', 'c', 1))\n",
  "label": 0
 },
 {
  "idx": 636,
  "doc": "python count business weeks",
  "code": "def week_difference(start, end):\n    assert start <= end\n    start_year, start_week, start_dayofweek = start.isocalendar()\n    end_year, end_week, end_dayofweek = end.isocalendar()\n\n    return ((end_year - start_year) * 52) - start_week + end_week\n",
  "label": 1
 },
 {
  "idx": 637,
  "doc": "Finding common elements from two lists of lists",
  "code": ">>> print any.__doc__\nany(iterable) -> bool\n\nReturn True if bool(x) is True for any x in the iterable.\nIf the iterable is empty, return False.\n",
  "label": 0
 },
 {
  "idx": 638,
  "doc": "Python App Engine serving files with Google Cloud Storage",
  "code": "webapp2.Route(r'/dynserve/<resource:(.*)>', handler=DynServe)\n",
  "label": 0
 },
 {
  "idx": 639,
  "doc": "How to do a groupby of a list of lists",
  "code": "[('2013-01-04', u'crid2557171372', 78874),\n\u00a0('2013-01-04', u'crid7990924609', 976410),\n\u00a0('2013-01-04', u'crid9904536154', 1104937)]\n",
  "label": 0
 },
 {
  "idx": 640,
  "doc": "Reading/Writing out a dictionary to csv file in python",
  "code": "value1 = 'one'\nvalue2 = 'two'\nd = { \n        'key1': (value1, value2), \n        'key2': (value1, value2), \n        'key3': (value1, value2)\n    }\nCSV =\"\\n\".join([k+','+\",\".join(v) for k,v in d.items()]) \nprint CSV #You can store this string variable to file as you wish\n# with open(\"filename.csv\", \"w\") as file:\n    # file.write(CSV)\n",
  "label": 1
 },
 {
  "idx": 641,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['new column'] = 0\nmask = df['data column'] >= 3\ndf.loc[mask, 'new column'] = 1\n",
  "label": 0
 },
 {
  "idx": 642,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['moving average'] = df['running total'] / df['count'].astype('float')\n",
  "label": 0
 },
 {
  "idx": 643,
  "doc": "call function through variable or without parentheses in python",
  "code": "os.path.join(ls(), 'foo.txt')  # produce the value first\n",
  "label": 0
 },
 {
  "idx": 644,
  "doc": "call function through variable or without parentheses in python",
  "code": "os.path.join(ls, 'foo.txt')    # throws an AttributeError.\n",
  "label": 0
 },
 {
  "idx": 645,
  "doc": "Run multiple threads until one exits in python",
  "code": "calculate1 started\ncalculate2 started\ncalculate2 found the result!\nGot result: 3.14\n",
  "label": 0
 },
 {
  "idx": 646,
  "doc": "Best way to Convert pairs of base 10 integers to ascii characters in python",
  "code": ">>> ''.join(pairs)\n'4F'\n",
  "label": 0
 },
 {
  "idx": 647,
  "doc": "stdout from python to stdin java",
  "code": "p.stdin.write(\"haha\")\n",
  "label": 0
 },
 {
  "idx": 648,
  "doc": "stdout from python to stdin java",
  "code": "import subprocess\n\np = subprocess.Popen(\n    [\n        'java',  \n        '-cp',\n        '/Users/7stud/java_programs/myjar.jar',\n        'MyProg'\n    ],\n    stdout = subprocess.PIPE, \n    stdin = subprocess.PIPE,\n)\n\n\np.stdin.write(\"haha\\n\")\nprint \"i am done\" \nprint p.stdout.readline().rstrip()\n",
  "label": 0
 },
 {
  "idx": 649,
  "doc": "stdout from python to stdin java",
  "code": "public class MyProg {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String data = in.next();\n\n        System.out.println(\"Java program received: \" + data);\n    }\n}\n",
  "label": 0
 },
 {
  "idx": 650,
  "doc": "Remove duplicates in python list but remember the index",
  "code": "l = [1, 1, 2, 3]\ninds, unq = [],[]\nseen = set()\nfor i, ele in enumerate(l):\n    if ele not in seen:\n        inds.append(i)\n        unq.append(ele)\n    seen.add(ele)\n",
  "label": 1
 },
 {
  "idx": 651,
  "doc": "Combine methods with identical structure but different parameters",
  "code": "def method(self, key):\n    some_list = list(irrelevant_extraction_function(key, self.some_dict))\n    self.storage[key] = [item['address'] for item in some_list]\n",
  "label": 0
 },
 {
  "idx": 652,
  "doc": "Extract from a match to next match if patten found in between",
  "code": "<Iteration_hit>Elememt2 Element2\n    abc2 hit 1\n  </Iteration_hit>\n\n<Iteration_hit>Elememt4 Element4\n    abc4 hit 1\n  </Iteration_hit>\n",
  "label": 0
 },
 {
  "idx": 653,
  "doc": "Comparing List and get indices in python",
  "code": "mac_list = mac_list.set_index(\"mac_address\")\n",
  "label": 0
 },
 {
  "idx": 654,
  "doc": "Comparing List and get indices in python",
  "code": "new_mac_list = ['20c9d0892feb', '3480b3d51d5f', '20c9d0892feb', '249cji39fj4g']\n",
  "label": 0
 },
 {
  "idx": 655,
  "doc": "Comparing List and get indices in python",
  "code": "mac_list = pd.DataFrame(res, columns = [\"frequency\"])\nprint(mac_list)\n\n              frequency\n20c9d0892feb        4.0\n249cji39fj4g        1.0\n28e34789c4c2        1.0\n3480b3d51d5f        2.0\n4480ebb4e28c        1.0\n4c60de5dad72        1.0\n4ca56dab4550        1.0\n",
  "label": 0
 },
 {
  "idx": 656,
  "doc": "How to index a user input list in Python 2.x?",
  "code": "cities_to_countries = dict(zip(cities, countries))\n",
  "label": 0
 },
 {
  "idx": 657,
  "doc": "JSON to Pandas: is there a more elegant solution?",
  "code": "import pandas as pd\nimport json\nimport urllib\n\njs = json.loads(urllib.urlopen(\"test.json\").read())\ndata = js[\"data\"]\nrows = [row[\"row\"] for row in data] # Transform the 'row' keys to list of lists.\ndf = pd.DataFrame(rows, columns=js[\"columns\"])\nprint df\n",
  "label": 1
 },
 {
  "idx": 658,
  "doc": "JSON to Pandas: is there a more elegant solution?",
  "code": "   rank          name    deaths\n0     1    Mao Zedong  63000000\n1     2  Jozef Stalin  23000000\n",
  "label": 0
 },
 {
  "idx": 659,
  "doc": "django-mptt get_descendants for a list of nodes",
  "code": "T1 \n---T1.1 \n---T1.2 \nT2 \nT3 \n---T3.3 \n------T3.3.3 \n",
  "label": 0
 },
 {
  "idx": 660,
  "doc": "Validity of a string based on some conditions",
  "code": "True\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nFalse\n",
  "label": 0
 },
 {
  "idx": 661,
  "doc": "How do you @rpc _returns polymorphic types in spyne?",
  "code": "application = Application([SomeService], 'tns',\n    in_protocol=Soap11(validator='lxml'),\n    out_protocol=Soap11(polymorphic=True)\n)\n",
  "label": 0
 },
 {
  "idx": 662,
  "doc": "How do you @rpc _returns polymorphic types in spyne?",
  "code": "class A(ComplexModel):\n    i = Integer\n\nclass B(A):\n    s = Unicode\n\nclass C(A):\n    d = DateTime\n",
  "label": 0
 },
 {
  "idx": 663,
  "doc": "How do I compute all possibilities for an array of numbers/bits (in python, or any language for that matter)",
  "code": "(0, 0, 0, 0, 0)\n(0, 0, 0, 0, 1)\n(0, 0, 0, 1, 0)\n(0, 0, 0, 1, 1)\n(0, 0, 1, 0, 0)\netc...\n",
  "label": 0
 },
 {
  "idx": 664,
  "doc": "How do I compute all possibilities for an array of numbers/bits (in python, or any language for that matter)",
  "code": "from itertools import product\nfor i in product([0,1], repeat=5): \n    print i\n",
  "label": 1
 },
 {
  "idx": 665,
  "doc": "django one session per user",
  "code": "auth.login(request, user)\nuser.userattributes.set_session_key(request.session.session_key)\n",
  "label": 0
 },
 {
  "idx": 666,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "df.apply(lambda x: int(ids[x.UsedFName, x.UsedLName]), axis=1)\n",
  "label": 0
 },
 {
  "idx": 667,
  "doc": "Remove outer list from list of list in python",
  "code": ">>> def f(a, b, c):\n...    print(a, b, c)\n...\n>>> f(*[1, 2, 3])\n1 2 3\n",
  "label": 1
 },
 {
  "idx": 668,
  "doc": "Remove outer list from list of list in python",
  "code": "for element in itertools.product(*d.values()):\n    sortedList = sorted(list(element))\n",
  "label": 1
 },
 {
  "idx": 669,
  "doc": "Remove outer list from list of list in python",
  "code": "*[[0, 4], [2], [3]]\n",
  "label": 1
 },
 {
  "idx": 670,
  "doc": "Python: How to time script from beginning to end?",
  "code": "from datetime import datetime\nstart = datetime.now()\n",
  "label": 0
 },
 {
  "idx": 671,
  "doc": "Python: How to time script from beginning to end?",
  "code": "difference = datetime.now() - start\n",
  "label": 0
 },
 {
  "idx": 672,
  "doc": "Adding a simple value to a string",
  "code": "path2 = '\"C:\\\\Users\\\\bgbesase\\\\Documents\\\\Brent\\\\Code\\\\Visual Studio' + '\"'\n",
  "label": 1
 },
 {
  "idx": 673,
  "doc": "Grammar rule extraction from parsed result",
  "code": ">>> rules = [str(p) for p in ptree.productions()]\n>>> rules\n['S -> VP', 'VP -> VB NP ADVP', \"VB -> 'get'\", 'NP -> PRP', \"PRP -> 'me'\", 'ADVP -> RB', \"RB -> 'now'\"]\n",
  "label": 0
 },
 {
  "idx": 674,
  "doc": "How to use PyBrain?",
  "code": "  320   f   60\n   \\   |  / \n    \\  | /\n     \\ |/  \n l--------------r\n       |\n       |\n       |\n",
  "label": 0
 },
 {
  "idx": 675,
  "doc": "How to avoid defining a variable to hold a function result which might be needed only once",
  "code": "# last value returned by decorated function is accessible as 'last' attribute\ndef save_last(f):\n    def w(*args, **kwargs): # w is the 'wrapper' function\n        w.last=f(*args, **kwargs)\n        return w.last\n    return w\n",
  "label": 0
 },
 {
  "idx": 676,
  "doc": "Generate numbers with 3 digits",
  "code": "[\"{0:03}\".format(i) for i in range(121)]\n",
  "label": 1
 },
 {
  "idx": 677,
  "doc": "Generate numbers with 3 digits",
  "code": "print \"\\n\".join(<either of the above expressions>)\n",
  "label": 0
 },
 {
  "idx": 678,
  "doc": "Using DataFrame to get matrix of identifiers",
  "code": "            a1  a15  a3  a4  a5  a8\ndate                               \n2011-01-02   0    0   0   0   0   1\n2011-01-05   1    0   0   0   0   0\n2011-01-12   1    1   1   1   0   0\n2011-01-19   1    1   0   0   1   0\n",
  "label": 0
 },
 {
  "idx": 679,
  "doc": "How to write defaultdict in more pythonic way?",
  "code": "headers = {key for count in counts_to_display.values() for key in count}\n",
  "label": 1
 },
 {
  "idx": 680,
  "doc": "Python: Append dictionary in another file",
  "code": "import pickle\nsome_dict = {'this':1,'is':2,'an':3,'example':4}\n\nwith open('saved_dict.pkl','w') as pickle_out:\n    pickle.dump(some_dict,pickle_out)\n",
  "label": 0
 },
 {
  "idx": 681,
  "doc": "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy",
  "code": "[ 2.0480375425  1.89065215839]\n",
  "label": 0
 },
 {
  "idx": 682,
  "doc": "how to get cookie in template webpy",
  "code": "import web\ntemplate_globals = {\n    \"cookies\": web.cookies,\n}\nrender = web.template.render('templates/', globals=template_globals, base='layout', cache=False)\n",
  "label": 1
 },
 {
  "idx": 683,
  "doc": "More efficient solution? Dictionary as sparse vector",
  "code": "   0\na  3\nb  4\nc  2\n",
  "label": 0
 },
 {
  "idx": 684,
  "doc": "Python: Scrape Data from Web after Inputing Info",
  "code": "105.95\n105.95\n105.52\n108.77\n110.65\n109.25\n109.02\n105.77\n104.70\n105.11\n104.97\n103.88\n107.48\n105.07\n107.90\n...\n90.57\n",
  "label": 0
 },
 {
  "idx": 685,
  "doc": "Passing multple files with asterisk to python shell in Windows",
  "code": "['*.txt']\n",
  "label": 0
 },
 {
  "idx": 686,
  "doc": "Passing multple files with asterisk to python shell in Windows",
  "code": "from glob import glob\nfrom sys import argv\n\nfor filename in glob(argv[1]):\n    print filename\n",
  "label": 1
 },
 {
  "idx": 687,
  "doc": "How many factors in an integer",
  "code": "def factors(n):\n    return filter(lambda i: n % i == 0, range(1, n + 1))\n",
  "label": 1
 },
 {
  "idx": 688,
  "doc": "Execute regex located in an external file in python",
  "code": "{\n \"email\" : \"([^@|\\\\s]+@[^@]+\\\\.[^@|\\\\s]+)\",\n \"phone\" : \"(\\\\d{3}[-\\\\.\\\\s]??\\\\d{3}[-\\\\.\\\\s]??\\\\d{4}|\\\\(\\\\d{3}\\\\)\\\\s*\\\\d{3}[-\\\\.\\\\s]??\\\\d{4}|\\\\d{3}[-\\\\.\\\\s]??\\\\d{4})\"\n}\n",
  "label": 0
 },
 {
  "idx": 689,
  "doc": "How to sort (list/tuple) of lists/tuples?",
  "code": "sorted_by_second = sorted(data, key=lambda tup: tup[1])\n",
  "label": 1
 },
 {
  "idx": 690,
  "doc": "SQLAlchemy (sql) conditionnal query",
  "code": "import sqlalchemy as sa\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n    __tablename__ = \"product\"\n    id = sa.Column(sa.Integer, primary_key=True)\n    actual = sa.Column(sa.String)\n    target = sa.Column(sa.String)\n",
  "label": 0
 },
 {
  "idx": 691,
  "doc": "How to know the filetype through python",
  "code": ">>> mimetypes.guess_type('http://upload.wikimedia.org/wikipedia/commons/9/9a/PNG_transparency_demonstration_2.png')\n('image/png', None)\n",
  "label": 1
 },
 {
  "idx": 692,
  "doc": "Pandas: transforming the DataFrameGroupBy object to desired format",
  "code": "df.columns=['code/colour','id:amount']\n",
  "label": 0
 },
 {
  "idx": 693,
  "doc": "lxml findall div and span tags",
  "code": "import lxml.html\nfrom lxml.cssselect import CSSSelector\ncontent = result.read()\npage_html = lxml.html.fromstring(content)\n\nelements = page_html.xpath('//*[self::div or self::span]')\n",
  "label": 1
 },
 {
  "idx": 694,
  "doc": "Batch Scripting: Running python script on all directories in a folder",
  "code": "for /D %%d in (%1) do (\n   echo processing %%d\n   script.py %%d\n)\n",
  "label": 1
 },
 {
  "idx": 695,
  "doc": "How to get the caller class name inside a function of another class in python?",
  "code": "\u27a4 python test.py\nA.a()\nB.b()\n  I was called by __main__.A.a()\n",
  "label": 0
 },
 {
  "idx": 696,
  "doc": "Python, using BeautifulSoup parsing values from a table",
  "code": "[u'5392', u'17', u'479', u'6', u'333', u'21', u'15', u'35', u'11', u'3', u'24', u'291', u'198', u'15']\n[u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?', u'?']\n",
  "label": 0
 },
 {
  "idx": 697,
  "doc": "Python: Removing random whitespace from a string of numbers",
  "code": "s = '20101002  100224   1    1044      45508  1001  1002  1003  1004  1005  1006'\nnew_s = ' '.join(s.split())\nprint(new_s)\n",
  "label": 1
 },
 {
  "idx": 698,
  "doc": "How do I get the modified date/time of a file in Python?",
  "code": "os.stat(filepath).st_mtime\n",
  "label": 1
 },
 {
  "idx": 699,
  "doc": "Use Python zip to save data in separate columns from a binary file",
  "code": "columns = []\nfor n in range(8):\n    columns.append([item for item in itertools.islice(e, n, None, 8)])\n",
  "label": 1
 },
 {
  "idx": 700,
  "doc": "Use Python zip to save data in separate columns from a binary file",
  "code": "import itertools\na = [item for item in itertools.islice(e, 0, None, 8)]\nb = [item for item in itertools.islice(e, 1, None, 8)]\nc = [item for item in itertools.islice(e, 2, None, 8)]\n",
  "label": 1
 },
 {
  "idx": 701,
  "doc": "Pandas check for future condition by group",
  "code": "Setup\nfrom StringIO import StringIO\nimport pandas as pd\n\ntext = \"\"\"id      date        item\n1    2000-01-01     'foo'\n1    2000-01-02     'pants'\n1    2000-01-03     'bar'\n2    2000-01-02     'organ'\n2    2000-02-01     'beef'\n3    2000-01-01     'pants'\n3    2000-01-10     'oranges'\n3    2000-02-20     'pants'\"\"\"\n\ndf = pd.read_csv(StringIO(text), delim_whitespace=True, parse_dates=[1])\n",
  "label": 0
 },
 {
  "idx": 702,
  "doc": "How to sort python dictionary based on similar values and keys?",
  "code": "[27, 28, 29, 1]\n",
  "label": 0
 },
 {
  "idx": 703,
  "doc": "Beautiful soup, html table parsing",
  "code": "[u'Logged-in users', u'True', u'True', u'True', u'True']\n[u'User 1', u'Confirm', u'Confirm', u'Site', u'Confirm']\n[u'User 2', u'Confirm', u'Confirm', u'Confirm', u'Confirm']\n[u'User 3', u'Confirm', u'Confirm', u'Confirm', u'Confirm']\n[u'User 4', u'Confirm', u'Site', u'Site', u'Confirm']\n",
  "label": 0
 },
 {
  "idx": 704,
  "doc": "Effective regex for multiple strings with characters and numbers",
  "code": "regex = re.compile(r'\\b(?=[0-9U])(?:[0-9]+\\s*U\\.?S\\.?D|U\\.?S\\.?D\\s*[0-9]+)\\b', re.I)\n\nresult = [x.strip(' USD.usd') for x in regex.findall(yourstring)]\n",
  "label": 1
 },
 {
  "idx": 705,
  "doc": "Calculate weighted average using a pandas/dataframe",
  "code": "In [14]: g.wa.sum()\nOut[14]:\nDate\n01/01/2012    0.791667\n01/02/2012    0.722222\nName: wa, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 706,
  "doc": "Calculate weighted average using a pandas/dataframe",
  "code": "In [15]: g.wa.transform(\"sum\")\nOut[15]:\n0    0.791667\n1    0.791667\n2    0.791667\n3    0.722222\n4    0.722222\nName: wa, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 707,
  "doc": "background process in python with -e option on terminal",
  "code": ">>> print os.getpid()\n3556\n>>> os.execl( '/usr/bin/gvim', 'gvim' )\n",
  "label": 0
 },
 {
  "idx": 708,
  "doc": "How to post an image in Python just like byte array in Java?",
  "code": ">>> r = requests.get(url1)\n>>> files = {'image': r.content}   \n>>> r = requests.post(url2, files=files)\n",
  "label": 1
 },
 {
  "idx": 709,
  "doc": "How to see if section of python code completes within a given time",
  "code": "timeout = 5.2 #Time in sec\nfor i in range(len(arr1)):\n    res1 = run_with_timeout(timeout, foo1,arr1[i]))\n",
  "label": 0
 },
 {
  "idx": 710,
  "doc": "Returning elements from a loop, one at a time",
  "code": "for a_dict in dict_generator:\n    print a_dict\n",
  "label": 0
 },
 {
  "idx": 711,
  "doc": "manipulate column fields for clean representation",
  "code": "awk -F '[ ,]' '{sub(/:.+$/, \"\", $3); a[$3]+=$11} END{for (i in a) print i, a[i]}' file\n10.20.10.144 2896\n",
  "label": 1
 },
 {
  "idx": 712,
  "doc": "Python Decimals format",
  "code": "'%.3g'%(num)\n",
  "label": 1
 },
 {
  "idx": 713,
  "doc": "Python Decimals format",
  "code": "1.0 --> 1\n1.2 --> 1.2\n1.23 --> 1.23\n1.234 --> 1.23\n1.2345 --> 1.23\n",
  "label": 0
 },
 {
  "idx": 714,
  "doc": "How to XOR literal with a string",
  "code": "i = int.from_bytes(b, byteorder='big', signed=False)\n",
  "label": 0
 },
 {
  "idx": 715,
  "doc": "How to XOR literal with a string",
  "code": "b = bytes('abcd', 'ascii')\n",
  "label": 0
 },
 {
  "idx": 716,
  "doc": "What is the idiomatic way of invoking a list of functions in Python?",
  "code": "map(lambda x: x, range(10))\n",
  "label": 0
 },
 {
  "idx": 717,
  "doc": "Parse a file into a dictionary of arrays",
  "code": "my_dict={}\nwith open('file.dat', 'rb') as csvfile:\n    dataReader=csv.reader(csvfile)\n    for name,item1,item2 in dataReader:\n         my_dict.setdefault(name,[]).append([item1,item2])\n",
  "label": 1
 },
 {
  "idx": 718,
  "doc": "Convert empty dictionary to empty string",
  "code": ">>> d['f'] = 12\n>>> str(d or '')\n\"{'f': 12}\"\n",
  "label": 1
 },
 {
  "idx": 719,
  "doc": "Jinja2 to put a whole element in <option>",
  "code": "mydict = {'5min': '5-Min', '1hour': 'Hour', '1day': 'Day'}\n",
  "label": 0
 },
 {
  "idx": 720,
  "doc": "Convert a string with whitespaces to a dataframe with desired dimensions in Python",
  "code": "   0  1  2  3\n0  A  B  C  D\n1  E  F  G  H\n2  I  J  K  L\n",
  "label": 0
 },
 {
  "idx": 721,
  "doc": "How can I create a list with the first column?",
  "code": "In [15]: with open(\"abc\") as f:\n   ....:     for line in f:\n   ....:         spl=line.split()\n   ....:         if '18' in spl:\n   ....:             print line\n   ....:             break\n   ....:             \n18  :   mp4 [360x640]\n",
  "label": 1
 },
 {
  "idx": 722,
  "doc": "How can I determine when a user is in the process of entering something as an input in Python?",
  "code": "import sys, termios\nprevious_mode= termios.tcgetattr( sys.stdin.fileno() )\n",
  "label": 0
 },
 {
  "idx": 723,
  "doc": "Dynamic module loading in python",
  "code": "references = map(__import__, modules)\n",
  "label": 1
 },
 {
  "idx": 724,
  "doc": "How to convert an urlopen into a string in python",
  "code": "data = web.urlopen(message)\nstr_data = data.read()\n",
  "label": 1
 },
 {
  "idx": 725,
  "doc": "How to convert an urlopen into a string in python",
  "code": "<httplib.HTTPMessage instance at 0x7fceeb2ca638>\n",
  "label": 0
 },
 {
  "idx": 726,
  "doc": "How to find ngram frequency of a column in a pandas dataframe?",
  "code": "from sklearn.feature_extraction.text import CountVectorizer\nword_vectorizer = CountVectorizer(ngram_range=(1,2), analyzer='word')\nsparse_matrix = word_vectorizer.fit_transform(df['description'])\nfrequencies = sum(sparse_matrix).toarray()[0]\npd.DataFrame(frequencies, index=word_vectorizer.get_feature_names(), columns=['frequency'])\n",
  "label": 1
 },
 {
  "idx": 727,
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": " 3 levels,      100 values: 136 us per loop\n 3 levels,     1000 values: 259 us per loop\n 3 levels,  1000000 values: 205 ms per loop\n\n10 levels,      100 values: 297 us per loop\n10 levels,     1000 values: 447 us per loop\n10 levels,  1000000 values: 262 ms per loop\n\n26 levels,      100 values: 617 us per loop\n26 levels,     1000 values: 795 us per loop\n26 levels,  1000000 values: 299 ms per loop\n",
  "label": 0
 },
 {
  "idx": 728,
  "doc": "Applying a function by bins on a vector in Numpy",
  "code": "In [174]: for nlevels in (3, 10, 26):\n   .....:     for size in (100, 1000, 10e5):\n   .....:         x, b = gen_data(nlevels, size)\n   .....:         print '%2d levels, ' % nlevels, '%7d values:' % size,\n   .....:         %timeit function_to_time(np.prod, x, b)\n   .....:     print\n",
  "label": 0
 },
 {
  "idx": 729,
  "doc": "how to set the buttons size inside a spinner in kivy?",
  "code": "from kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.button import Button\nfrom kivy.uix.spinner import Spinner\nfrom kivy.base import runTouchApp\nfrom kivy.properties import ObjectProperty\n\nBuilder.load_string('''\n<MyButton>:\n    size_hint: None, None\n    size: 20, 20\n\n<MyWidget>:\n    MySpinner:\n        id:some_id\n        text:\"some text\"\n        values:(\"1\",\"2\",\"3\")\n        size_hint:(None,None)\n        size: root.width/4,root.height/12\n''')\n\nclass MyButton(Button):\n    pass\n\nclass MySpinner(Spinner):\n    option_cls = ObjectProperty(MyButton) # setting this property inside kv doesn't seem to work\n\nclass MyWidget(BoxLayout):\n    pass    \n\nrunTouchApp(MyWidget())\n",
  "label": 1
 },
 {
  "idx": 730,
  "doc": "Create a list with all possible permutations from a know list of objects, but make the final list x in size",
  "code": "# A simple example\nimport itertools\nlst = [0, 1]\nprint(list(itertools.product(lst, repeat=2)))\n# [(0, 0), (0, 1), (1, 0), (1, 1)]\n",
  "label": 1
 },
 {
  "idx": 731,
  "doc": "Pandas - group by consecutive ranges",
  "code": "df = pd.DataFrame([[1,3,10], [4,10,7], [11,17,6], [18,26, 12],\n[27,30, 15], [31,40,6], [41, 42, 6]], columns=['start','end', 'height'])\n",
  "label": 0
 },
 {
  "idx": 732,
  "doc": "How to filter results of a groupby in pandas",
  "code": "def filtermax(g, filter_on, filter_items, max_over):\n    infilter = g.index.isin(filter_items).sum() > 0\n    if infilter:\n        return g[g[max_over] == g.ix[filter_items][max_over].max()]\n    else:\n        return g[g[max_over] == g[max_over].max()]\n    return g\n",
  "label": 1
 },
 {
  "idx": 733,
  "doc": "compare list elements",
  "code": "diff_list = list(diff)\n",
  "label": 0
 },
 {
  "idx": 734,
  "doc": "vectorize numpy unique for subarrays",
  "code": "In [586]: timeit [(np.bincount(i)>0).sum() for i in data]\n1 loops, best of 3: 248 ms per loop\n\nIn [587]: %%timeit                                       \nsdata=np.sort(data,axis=1)\n(np.diff(sdata)>0).sum(axis=1)+1\n   .....: \n1 loops, best of 3: 280 ms per loop\n",
  "label": 0
 },
 {
  "idx": 735,
  "doc": "regex/python to find and replace specific number within string",
  "code": "import re\n\ndef callback(match):\n    return match.group(0).replace('17', '19')\n\ns = \"[ 17 plane_17 \\ 23 25 17 99 150 248 \\ noname ]\"\n\ns = re.compile(r'\\\\.+?\\\\').sub(callback, s)\n\nprint s\n",
  "label": 1
 },
 {
  "idx": 736,
  "doc": "Call method in a class which called the current class",
  "code": "class Test1(object):\n    def __init__(self):\n        pass\n    def a(self):\n        print(\"Running a of Test1\")\n        test_instance2 = Test2(self)\n    def z(self):\n        print(\"Running z of Test1\")\n\nclass Test2:\n    def __init__(self, a):\n        self.b(a)\n    def b(self, a):\n        print('Running b of Test2')\n        a.z()\n",
  "label": 1
 },
 {
  "idx": 737,
  "doc": "Call method in a class which called the current class",
  "code": "class Test2:\n    def __init__(self, a):\n        self.a = a\n        self.b()\n    def b(self, a):\n        print('Running b of Test2')\n        self.a.z()\n",
  "label": 0
 },
 {
  "idx": 738,
  "doc": "Sorting data from a csv alphabetically, highest to lowest and average",
  "code": "for name in sorted(entries):\n    ave_score = total_scores[name] / entries[name]\n    print(name,ave_score) #sep=\", \")\n",
  "label": 0
 },
 {
  "idx": 739,
  "doc": "how to update global variable in python",
  "code": "import pickle\ndef update():\n  lis = pickle.load( open( \"lis.pkl\", \"rb\" ) ) # Load the list\n  #do something with lis                     #modify it \n  pickle.dump( lis, open( \"lis.pkl\", \"wb\" ) )  #save it again\n",
  "label": 1
 },
 {
  "idx": 740,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "self.circumference = 2 * pi * self.r \n",
  "label": 0
 },
 {
  "idx": 741,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "3\n4\n5\nthis is the __get__ else statement running\n78.53981633974483\nthis is the __get__ else statement running\n78.53981633974483\nthis is the __get__ else statement running\n31.41592653589793\nthis is the __get__ else statement running\n0.0\nSetting circle.x to non-integer fails\nSetting circle.y to non-integer fails\nSetting circle.area fails\nSetting circle.circumference fails\nSetting circle.distance_to_origin fails\n5.6\n",
  "label": 0
 },
 {
  "idx": 742,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "if hasattr(circle, '_circumference_is_set')\n",
  "label": 0
 },
 {
  "idx": 743,
  "doc": "Using descriptor class to raise RuntimeError when user tries to change object's value",
  "code": "setattr(instance, self.name + '_is_set', True) \n",
  "label": 0
 },
 {
  "idx": 744,
  "doc": "SQLite Python printing in rows?",
  "code": "A1\nA2\nB1\nB2\nA3\nA4\n",
  "label": 0
 },
 {
  "idx": 745,
  "doc": "SQLite Python printing in rows?",
  "code": ">>> cur.execute(\"SELECT * FROM seats ORDER BY code\")\n<sqlite3.Cursor object at 0x10b1a8730>\n>>> for letter, rows in groupby(cur, key=lambda r: r[0][0]):\n...     print ' '.join([r[0] for r in rows])\n... \nA1 A2 A3 A4 A5 A6 A7 A8\nB1 B2 B3 B4 B5 B6 B7 B8\nC1 C2 C3 C4 C5 C6 C7 C8\n",
  "label": 0
 },
 {
  "idx": 746,
  "doc": "python 3: Adding .csv column sums in to dictionaries with header keys",
  "code": "def sumColumns1(columnfile):\n    import csv\n    with open(columnfile) as csvfile:\n        r = csv.reader(csvfile)\n        names = next(r)\n        sums = [ 0 for _ in names ]\n        for line in r:\n            for i in range(len(sums)):\n                sums[i] += int(0 if line[i]=='' else line[i])\n        return dict(zip(names,sums))\n",
  "label": 1
 },
 {
  "idx": 747,
  "doc": "voronoi and lloyd relaxation using python/scipy",
  "code": "region_point = np.argsort(vor.point_region)\npoints = region_point[regions-1]\n",
  "label": 1
 },
 {
  "idx": 748,
  "doc": "How calculate the global coverage?",
  "code": "coverage erase\ntox\ncoverage combine\ncoveralls\n",
  "label": 0
 },
 {
  "idx": 749,
  "doc": "Combine variable and for each loop python",
  "code": "def zipMap(func, iterable):\n    for x in iterable:\n        yield x,func(x)\n",
  "label": 0
 },
 {
  "idx": 750,
  "doc": "Remove word extension in python",
  "code": "from nltk.stem import WordNetLemmatizer\n\ns = \"\"\"\n You all are so beautiful soooo beautiful\n Thought that was a really awesome quote\n Beautiful things don't ask for attention\n \"\"\"\n\nwnl = WordNetLemmatizer()\nprint \" \".join([wnl.lemmatize(i) for i in s.split()]) #You all are so beautiful soooo beautiful Thought that wa a really awesome quote Beautiful thing don't ask for attention\n",
  "label": 1
 },
 {
  "idx": 751,
  "doc": "Remove word extension in python",
  "code": "print wnl.lemmatize('going') #going\n",
  "label": 0
 },
 {
  "idx": 752,
  "doc": "How do I add space between two variables after a print in Python",
  "code": "print str(count) + '  ' + str(conv)\n",
  "label": 1
 },
 {
  "idx": 753,
  "doc": "How do I add space between two variables after a print in Python",
  "code": "print '%d  %.2f' % (count, conv)\n",
  "label": 1
 },
 {
  "idx": 754,
  "doc": "How do I add space between two variables after a print in Python",
  "code": "print str(count) + '    ' + str(conv)\n",
  "label": 1
 },
 {
  "idx": 755,
  "doc": "Django reverse url to onetoonefield on success",
  "code": "class Profile(models.Model):\n    user = models.OneToOneField(User)\n",
  "label": 0
 },
 {
  "idx": 756,
  "doc": "Average inter signout time in pandas dataframe",
  "code": "for group,value in tab.groupby('date'):\n    print group\n    print pd.to_datetime(value.time).diff().mean()\n\n## 2012-05-01\n## 0   00:14:03.901400\n## dtype: timedelta64[ns]\n## 2012-05-02\n## 0   00:06:21.062500\n## dtype: timedelta64[ns]\n",
  "label": 0
 },
 {
  "idx": 757,
  "doc": "Django app deployment on nGINX",
  "code": "[uwsgi]\n# set the http port\nhttp = :<port_no>\n\n# change to django project directory\nchdir = <project directory>\n\n# add /var/www to the pythonpath, in this way we can use the project.app format\npythonpath = /var/www\n\n# set the project settings name\nenv = DJANGO_SETTINGS_MODULE=<project_name>.settings\n\n# load django\nmodule = django.core.handlers.wsgi:WSGIHandler()\n",
  "label": 0
 },
 {
  "idx": 758,
  "doc": "Django app deployment on nGINX",
  "code": "> uwsgi --ini uwsgi.ini\n",
  "label": 0
 },
 {
  "idx": 759,
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "proxyModel.setView(self.tableview)\n",
  "label": 0
 },
 {
  "idx": 760,
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "def setView(self, view):\n    self._view = view\n",
  "label": 0
 },
 {
  "idx": 761,
  "doc": "How to input data from a web page to Python script most efficiently",
  "code": "<html>\n<body>\n\n<form action=\"test.php\" method=\"get\">\n<input type=\"text\" name=\"name\" />\n<input type=\"submit\" />\n</form>\n\n</body>\n</html> \n",
  "label": 0
 },
 {
  "idx": 762,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "for path,value in traverse(doc):\n    print(\"{} = {}\".format(path,value))\n",
  "label": 0
 },
 {
  "idx": 763,
  "doc": "Compare unequal lists",
  "code": "c = [item for item in b if item in a]\n",
  "label": 0
 },
 {
  "idx": 764,
  "doc": "Compare unequal lists",
  "code": "for i in b:\n    if i in a:\n        print '%d in both sets!' %(i)\n    else:\n        print '%d does not match!' %(i)\n",
  "label": 1
 },
 {
  "idx": 765,
  "doc": "Compare unequal lists",
  "code": ">>> a = [6]\n>>> b = [6,7,8]\n>>> c = [item for item in b if item in a]\n>>> c\n[6]\n>>> \n",
  "label": 0
 },
 {
  "idx": 766,
  "doc": "How to determine tools chosen by waf?",
  "code": "def options(opt):\n    opt.load('compiler_c')\n    opt.load('compiler_cxx')\n\ndef configure(cfg):\n    cfg.load('compiler_c')\n    cfg.load('compiler_cxx')\n\ndef build(bld):\n    print \"Compiler is CC_NAME  %s  CC  %s\"%(bld.env.CC_NAME,bld.env.CC)\n    print \"Compiler is CXX_NAME %s  CXX %s\"%(bld.env.CXX_NAME,bld.env.CXX)\n",
  "label": 1
 },
 {
  "idx": 767,
  "doc": "How to input a line word by word in Python?",
  "code": "import itertools\n\ndef readWords(file_object):\n    word = \"\"\n    for ch in itertools.takewhile(lambda c: bool(c), itertools.imap(file_object.read, itertools.repeat(1))):\n        if ch.isspace():\n            if word: # In case of multiple spaces\n                yield word\n                word = \"\"\n            continue\n        word += ch\n    if word:\n        yield word # Handles last word before EOF\n",
  "label": 0
 },
 {
  "idx": 768,
  "doc": "RQ - Empty & Delete Queues",
  "code": "$ rq-dashboard\nRQ Dashboard, version 0.3.4\n * Running on http://0.0.0.0:9181/\n",
  "label": 0
 },
 {
  "idx": 769,
  "doc": "RQ - Empty & Delete Queues",
  "code": ">>> from redis import Redis\n>>> from rq import Queue\n>>> qfail = Queue(\"failed\", connection=Redis())\n>>> qfail.count\n8\n>>> qfail.empty()\n8L\n>>> qfail.count\n0\n",
  "label": 1
 },
 {
  "idx": 770,
  "doc": "Python Decorator 3.0 and arguments to the decorator",
  "code": "@substitute_args({}) # this function is called and return value is the decorator\ndef f(x):\n  return x\n# that (anonymous) decorator is applied to f\n",
  "label": 0
 },
 {
  "idx": 771,
  "doc": "Is there an easy way to parse an HTML document and remove everything except a particular table?",
  "code": "#!/usr/bin/env python\nimport urllib2\nfrom lxml import html # $ apt-get install python-lxml or $ pip install lxml\n\npage = urllib2.urlopen('http://stackoverflow.com/q/11939631')\ndoc = html.parse(page).getroot()\n\ndiv = doc.get_element_by_id('question')\nfor tr in div.find('table').iterchildren('tr'):\n    for td in tr.iterchildren('td'):\n        print(td.text_content()) # process td\n",
  "label": 1
 },
 {
  "idx": 772,
  "doc": "Is there an easy way to parse an HTML document and remove everything except a particular table?",
  "code": "#!/usr/bin/env python\nfrom pyquery import PyQuery # $ apt-get install python-pyquery or\n                            # $ pip install pyquery\n\n# d is like the $ in jquery\nd = PyQuery(url='http://stackoverflow.com/q/11939631', parser='html')\nfor tr in d(\"#question table > tr\"):\n    for td in tr.iterchildren('td'):\n        print(td.text_content())\n",
  "label": 1
 },
 {
  "idx": 773,
  "doc": "How to send image generated by PIL to browser?",
  "code": "from flask import send_file\n\n@app.route('/path')\ndef view_method():\n    response = send_file(tempFileObj, as_attachment=True, attachment_filename='myfile.jpg')\n    return response\n",
  "label": 0
 },
 {
  "idx": 774,
  "doc": "Iteration Through tuple of dictionaries in Python",
  "code": "for d in reversed(Tuple):\n    if \"2\" in d:\n        Dict[\"2\"] = d[\"2\"]\n        break # last dict in Tuple that has the key\n",
  "label": 1
 },
 {
  "idx": 775,
  "doc": "How to sort an itertools grouper array in python",
  "code": "sorted(lst, key=lambda x: x[1])\n",
  "label": 1
 },
 {
  "idx": 776,
  "doc": "Get seconds since midnight in python",
  "code": "from datetime import datetime\n\nnow = datetime.now()\nseconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds()\n",
  "label": 1
 },
 {
  "idx": 777,
  "doc": "How to convert a python string",
  "code": ">>> unescape_string(string)\n'\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '\n>>> unescape_string('\\\\\\\\n')\n'\\\\n'\n",
  "label": 0
 },
 {
  "idx": 778,
  "doc": "How to convert a python string",
  "code": ">>> string = '\\\\n    this is a docstring for\\\\n    the main function.\\\\n    a,\\\\n    b,\\\\n    c\\\\n    '\n>>> string.decode('string_escape')\n'\\n    this is a docstring for\\n    the main function.\\n    a,\\n    b,\\n    c\\n    '\n>>> print string.decode('string_escape')\n\n    this is a docstring for\n    the main function.\n    a,\n    b,\n    c\n\n>>> '\\\\t\\\\n\\\\r\\\\xa0\\\\040'.decode('string_escape')\n'\\t\\n\\r\\xa0 '\n",
  "label": 0
 },
 {
  "idx": 779,
  "doc": "How to convert a python string",
  "code": "string.decode('string_escape')\n",
  "label": 1
 },
 {
  "idx": 780,
  "doc": "How to count how many data points fall in a bin",
  "code": "bin_counts = [0 for bin in bins]\nfor data_point in data_points:\n    bin_number = data_point // bin_width\n    bin_counts[bin_number] += 1\n",
  "label": 1
 },
 {
  "idx": 781,
  "doc": "Given an iterable, how to apply a function in every possible combination?",
  "code": "product(('A', 'a'), ('B', 'b'), ('C', 'c'))\n",
  "label": 0
 },
 {
  "idx": 782,
  "doc": "How to call __setattr__() correctly in Python3 as part of a class?",
  "code": "class MyClass(object):\n    myattrib = None\n\n    def __setattr__(self, prop, val):\n        super().__setattr__('myattrib', val)\n        print(\"setting myattrib\")\n",
  "label": 1
 },
 {
  "idx": 783,
  "doc": "Able to use any case in input to generate the same dict values in output",
  "code": "while response[0] != 'quit': \n    response = raw_input(\"Please enter who you're looking for, or type 'exit' to quit the program: \").split() \n    try:\n        fn, thing = response[0].capitalize(), response[1].lower()\n        print \"%s's %s is %s\" % (fn, thing, people[fn][thing])  \n    except KeyError: \n        print wrong,\n",
  "label": 1
 },
 {
  "idx": 784,
  "doc": "Able to use any case in input to generate the same dict values in output",
  "code": "while response[0] != 'quit': \n    response = raw_input(\"Please enter who you're looking for, or type 'exit' to quit the program: \").split() \n    try:\n        print \"%s's %s is %s\" % (response[0].capitalize(), response[1].lower(), people[response[0].capitalize()][response[1].lower()])  \n    except KeyError: \n        print wrong,\n",
  "label": 1
 },
 {
  "idx": 785,
  "doc": "Python script to loop through all files in directory, delete any that are less than 200 kB in size",
  "code": "import os, os.path\n\nfileiter = (os.path.join(root, f)\n    for root, _, files in os.walk(dirtocheck)\n    for f in files)\nsmallfileiter = (f for f in fileiter if os.path.getsize(f) < 200 * 1024)\nfor small in smallfileiter:\n    os.remove(small)\n",
  "label": 1
 },
 {
  "idx": 786,
  "doc": "Python: Append a list to an existing list assigned to a key in a dictionary?",
  "code": ">>> tst =  {'taste': ('sweet', 'sour', 'juicy', 'melon-like')}\n>>> tst.get('taste', ()) #default to () if does not exist.  \n('sweet', 'sour', 'juicy', 'melon-like')\n>>> key_list=['yuck!','tasty','smoothie']\n>>> tst['taste'] = tst.get('taste') + tuple(key_list)\n>>> tst\n{'taste': ('sweet', 'sour', 'juicy', 'melon-like', 'yuck!', 'tasty', 'smoothie')}\n",
  "label": 1
 },
 {
  "idx": 787,
  "doc": "python list manipulation nesting vertically, making it look like a matrix",
  "code": "data = [15, 20, 25, 35, -20, -15, -10, -5, 10, 15, 20,\n        25, -25, -20, -15, -10, 5, 10, 15, 20, -35, -25, -20, -15]\nlength = len(data) / 3\ndata = [data[i:i + length] for i in xrange(0, len(data), length)]\n",
  "label": 0
 },
 {
  "idx": 788,
  "doc": "python list manipulation nesting vertically, making it look like a matrix",
  "code": "[[15, 20, 25, 35, -20, -15, -10, -5],\n [10, 15, 20, 25, -25, -20, -15, -10],\n [5, 10, 15, 20, -35, -25, -20, -15]]\n",
  "label": 0
 },
 {
  "idx": 789,
  "doc": "How to transform a pair of values into a sorted unique array?",
  "code": ">>> input_list = [(196, 128), (196, 128), (196, 128), (128, 196),\n...  (196, 128), (128, 196), (128, 196), (196, 128),\n...  (128, 196), (128, 196)]\n>>> sorted(set().union(*input_list))\n[128, 196]\n",
  "label": 1
 },
 {
  "idx": 790,
  "doc": "How to transform a pair of values into a sorted unique array?",
  "code": "sorted(set().union(*input_list))\n",
  "label": 1
 },
 {
  "idx": 791,
  "doc": "Parse multi-line string up until first line with certain character",
  "code": "s2 = s1[:s1.rfind('\\n')]  \n",
  "label": 0
 },
 {
  "idx": 792,
  "doc": "Cycling through possible indentations in python.el in Emacs",
  "code": ";; Indentation: Automatic indentation with indentation cycling is                                                                              \n;; provided, it allows you to navigate different available levels of                                                                           \n;; indentation by hitting <tab> several times.  Also when inserting a                                                                          \n;; colon the `python-indent-electric-colon' command is invoked and                                                                             \n;; causes the current line to be dedented automatically if needed. \n",
  "label": 1
 },
 {
  "idx": 793,
  "doc": "Cycling through possible indentations in python.el in Emacs",
  "code": ";; Indent specific                                                                                                                         \n(define-key map \"\\177\" 'python-indent-dedent-line-backspace)                                                                               \n(define-key map (kbd \"<backtab>\") 'python-indent-dedent-line)                                                                              \n(define-key map \"\\C-c<\" 'python-indent-shift-left)                                                                                         \n(define-key map \"\\C-c>\" 'python-indent-shift-right)                                                                                        \n(define-key map \":\" 'python-indent-electric-colon)      \n",
  "label": 1
 },
 {
  "idx": 794,
  "doc": "Django: css referencing media in static files (django dev / 1.3 / static files)",
  "code": "STATIC_URL = \"/site_media/static/\"\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, \"site_media\", \"static\")\nSTATICFILES_DIRS = (\n    os.path.join(PROJECT_ROOT, \"static_media\"),\n)\n",
  "label": 0
 },
 {
  "idx": 795,
  "doc": "Selecting siblings from html with Python lxml(html) library",
  "code": "for tr in subpage.cssselect('tr.nob-border'):\n    tr.xpath(\"\"\" set:difference(following-sibling::tr[not(contains(@class, \"nob-border\"))],\n                                following-sibling::tr[contains(@class, \"nob-border\")]\n                                                   /following-sibling::tr)\"\"\",\n             namespaces={\"set\": \"http://exslt.org/sets\"})\n",
  "label": 1
 },
 {
  "idx": 796,
  "doc": "Compare rows then take rows out if neccessary",
  "code": "In [135]: df[df.Distance.astype(\"int64\")>=df.Distance.astype(\"int64\").cummax()]\nOut[135]:\n  Area  Distance\n0    1  19626207\n1    2  20174412\n2    3  20174412\n7    8  20195112\n8    9  21127633\n",
  "label": 1
 },
 {
  "idx": 797,
  "doc": "How to only read lines in a text file after a certain string using python?",
  "code": "from itertools import dropwhile\n\nfor files in filepath:\n    with open(files, 'r') as f:\n        dropped = dropwhile(lambda _line: \"Abstract\" not in _line, f)\n        next(dropped,\"\")\n        for line in dropped:\n                print(line)\n",
  "label": 1
 },
 {
  "idx": 798,
  "doc": "How to thread multiple subprocess instances in Python 2.7?",
  "code": "from threading import Thread\n\ndef bind(input_pipe, output_pipe, line_filter):\n    def f():\n        try:\n            for line in iter(input_pipe.readline, b''):\n                line = line_filter(line)\n                if line:\n                    output_pipe.write(line) # no flush unless newline present\n        finally:\n            try:\n                output_pipe.close()\n            finally:\n                input_pipe.close()\n    t = Thread(target=f)\n    t.daemon = True # die if the program exits\n    t.start()\n",
  "label": 0
 },
 {
  "idx": 799,
  "doc": "Search and sort through dictionary in Python",
  "code": "d = {'secondly': 2, 'pardon': 6, 'saves': 1, 'knelt': 1}\na = sorted(d.iteritems(), key=lambda x:x[1], reverse=True)\n",
  "label": 1
 },
 {
  "idx": 800,
  "doc": "Python: Read whitespace separated strings from file similar to readline",
  "code": "def read_by_tokens(fileobj):\n    for line in fileobj:\n        for token in line.split():\n            yield token\n",
  "label": 1
 },
 {
  "idx": 801,
  "doc": "Convert a pandas dataframe in a transactional data format to a list - Python",
  "code": "In [472]: %timeit [gr['purchased_item'].tolist() for n, gr in df.groupby('id')]\n100 loops, best of 3: 2.1 ms per loop\n\nIn [473]: %timeit df.groupby(['id'])['purchased_item'].apply(list).values.tolist()\n1000 loops, best of 3: 1.36 ms per loop\n",
  "label": 0
 },
 {
  "idx": 802,
  "doc": "Flask : How to update and render a variable periodically?",
  "code": "# -*- coding: utf-8 -*-\nfrom flask import Flask\nfrom flask_sockets import Sockets\n\n\napp = Flask(__name__)\nsockets = Sockets(app)\napp.config.from_object('config')\nfrom app import views\n",
  "label": 0
 },
 {
  "idx": 803,
  "doc": "Flask : How to update and render a variable periodically?",
  "code": "function update_values() {\n            $SCRIPT_ROOT = {{ request.script_root|tojson|safe }};\n            $.getJSON($SCRIPT_ROOT+\"/_stuff\",\n                function(data) {\n                    $(\"#cpuload\").text(data.cpu+\" %\")\n                    $(\"#ram\").text(data.ram+\" %\")\n                    $(\"#disk\").text(data.disk+\" %\")\n                });\n        }\n",
  "label": 0
 },
 {
  "idx": 804,
  "doc": "Changing background of a Button to a different shape and Styles like shadow effect etc in kivy python",
  "code": "from kivy.base import runTouchApp\nfrom kivy.lang import Builder\n\nkv = '''\n<ButImage@ButtonBehavior+AsyncImage>\n\nFloatLayout:\n    # we don't specify anything here so float layout takes the entire size of the window.\n    ButImage:\n        id: but\n        # take 50% size of the FloatLayout\n        size_hint: .5, .5\n        # Make Button change it's opacity when pressed for visual indication\n        opacity: 1 if self.state == 'normal' else .5\n        source: 'http://www.victoriamorrow.com/sitebuildercontent/sitebuilderpictures/enter_button.gif'\n        # Introduce Label incase you want text on top of the image\n        Label:\n            center: but.center\n            # change text acc to but state\n            text: \"Normal\" if but.state == 'normal' else 'down'\n'''\n\nif __name__ == '__main__':\n    runTouchApp(Builder.load_string(kv))\n",
  "label": 0
 },
 {
  "idx": 805,
  "doc": "Python PyQt QWebView load site in clicked tab",
  "code": "def load_url(self, url):\n    self.view. load(QtCore.QUrl(url))\n",
  "label": 0
 },
 {
  "idx": 806,
  "doc": "Python PyQt QWebView load site in clicked tab",
  "code": "    #...\n    self.tab2 = support\n\n    self.tabs.addTab(tab1,\"tab1\")\n    self.tabs.addTab(self.tab2,\"SUPPORT\")\n    #\n    self.tabs.currentChanged.connect(self.load_on_show)\n",
  "label": 0
 },
 {
  "idx": 807,
  "doc": "Python PyQt QWebView load site in clicked tab",
  "code": "def load_on_show(self):\n    idx = self.tabs.currentIndex()\n    if idx == 1:\n        url = \"http://www.google.com\"\n        print url\n        self.tab2.load_url(url)\n",
  "label": 0
 },
 {
  "idx": 808,
  "doc": "have multiple users as one model field in many to one format django models",
  "code": "u = User.objects.get(username='someuser')\nu.tasks.all()  # Because of `related_name` in Task.assignee\n",
  "label": 0
 },
 {
  "idx": 809,
  "doc": "have multiple users as one model field in many to one format django models",
  "code": "class Project(models.Model):\n    name = models.CharField(max_length=100)\n    users = models.ManyToManyField(User)\n\nclass Task(models.Model):\n    project = models.ForeignKey(Project, related_name='project_tasks')\n    name = models.CharField(max_length=300)\n    assignee = models.ForeignKey(User, related_name='tasks')\n",
  "label": 0
 },
 {
  "idx": 810,
  "doc": "have multiple users as one model field in many to one format django models",
  "code": "users = p.project_tasks.all()  # Because of `related_name` in Task.project\n",
  "label": 0
 },
 {
  "idx": 811,
  "doc": "Pythonic way of looping over variable that is either an element or a list",
  "code": "if is_iterable(test):\n    for x in test:\n        do_stuff(x)\nelse:\n    do_stuff(test)\n",
  "label": 0
 },
 {
  "idx": 812,
  "doc": "How to Define Google Endpoints API File Download Message Endpoint",
  "code": "import base64\n\nmyFile = open(\"mock.jpg\", \"wb\")\nimg = base64.b64decode(value)  #value is the returned string\nmyFile.write(img)\nmyFile.close()\n",
  "label": 0
 },
 {
  "idx": 813,
  "doc": "Most efficient way to index words in a document?",
  "code": "SELECT `sentence_id`, `word_id` FROM `sentences_words`\nWHERE `word_id` IN (\n    SELECT `id` FROM `words` WHERE `word` IN ('word1', 'word2', 'word3')\n);\n",
  "label": 0
 },
 {
  "idx": 814,
  "doc": "Killing Thread and releasing memory in Python",
  "code": " t = Thread(target=some_long_running_external_process)\n t.start()\n",
  "label": 0
 },
 {
  "idx": 815,
  "doc": "Catch Keyboard Interrupt in program that is waiting on an Event",
  "code": "while not finished_event.wait(.1): # timeout in seconds\n    pass\n",
  "label": 1
 },
 {
  "idx": 816,
  "doc": "Catch Keyboard Interrupt in program that is waiting on an Event",
  "code": "while thread.is_alive():\n    thread.join(.1)\n",
  "label": 1
 },
 {
  "idx": 817,
  "doc": "Flex: detecting user idle?",
  "code": "application.systemManager.addEventListener(FlexEvent.IDLE, onIdle);\n",
  "label": 1
 },
 {
  "idx": 818,
  "doc": "How to pass variable arguments from bash script to python script",
  "code": "#!/usr/bin/python\n\nimport sys\n\nfor i in sys.argv:\n    print \"hi\"\n",
  "label": 0
 },
 {
  "idx": 819,
  "doc": "OR style permissions for DjangoRestFramework",
  "code": "permission_classes = (HasNiceHatOrHasNicePants,)\n",
  "label": 0
 },
 {
  "idx": 820,
  "doc": "Data structure for UDP Server parsing JSON objects in python",
  "code": " import threading\n\n t = threading.Thread(target = udp_server, args = (...))\n t.start()\n",
  "label": 0
 },
 {
  "idx": 821,
  "doc": "Getting strings in between two keywords from a file in python",
  "code": "navigated_pages = re.findall(r'EVENT\\(X(.*?)\\) ',data,re.DOTALL|re.MULTILINE)\n",
  "label": 1
 },
 {
  "idx": 822,
  "doc": "Get ALL results of a word mapping with a dictionary",
  "code": ">>> [ ''.join(x) for x in itertools.product( *[(c, d.get(c)) if d.get(c) else c for c in s] ) ]\n['kfc', 'kf3', '1fc', '1f3']\n",
  "label": 1
 },
 {
  "idx": 823,
  "doc": "Get ALL results of a word mapping with a dictionary",
  "code": ">>> [(c, d.get(c)) if d.get(c) else c for c in s]\n[('k', '1'), 'f', ('c', '3')]\n",
  "label": 0
 },
 {
  "idx": 824,
  "doc": "Get ALL results of a word mapping with a dictionary",
  "code": ">>> import itertools\n>>> s = 'kfc'\n>>> d = {'k':'1', 'c':'3'}\n",
  "label": 0
 },
 {
  "idx": 825,
  "doc": "Get ALL results of a word mapping with a dictionary",
  "code": ">>> list( itertools.product( *[(c, d.get(c)) if d.get(c) else c for c in s] ) )\n[('k', 'f', 'c'), ('k', 'f', '3'), ('1', 'f', 'c'), ('1', 'f', '3')]\n",
  "label": 0
 },
 {
  "idx": 826,
  "doc": "container where values expire in python",
  "code": "import time\nc = ExpireCounter()\nassert(len(c) == 0)\nprint(c)\n# deque([])\n\nc.add(datetime.datetime.now())\ntime.sleep(0.75)\nc.add(datetime.datetime.now())    \nassert(len(c) == 2)\nprint(c)\n# deque([datetime.datetime(2010, 11, 19, 8, 50, 0, 91426), datetime.datetime(2010, 11, 19, 8, 50, 0, 842715)])\n\ntime.sleep(0.75)\nassert(len(c) == 1)\nprint(c)\n# deque([datetime.datetime(2010, 11, 19, 8, 50, 0, 842715)])\n",
  "label": 0
 },
 {
  "idx": 827,
  "doc": "Scipy rotate and zoom an image without changing its dimensions",
  "code": "zm1 = clipped_zoom(img, 0.5)\nzm2 = clipped_zoom(img, 1.5)\n\nfig, ax = plt.subplots(1, 3)\nax[0].imshow(img, cmap='gray')\nax[1].imshow(zm1, cmap='gray')\nax[2].imshow(zm2, cmap='gray')\n",
  "label": 0
 },
 {
  "idx": 828,
  "doc": "How can i extract metdata from django models",
  "code": "def get_model_metadata(model_class, meta_whitelist=[]):\n  field_list = model_class._meta.fields\n  return_data = {}\n  for field in field_list:\n    field_name = field.name\n    field_meta = field.__dict__\n    return_meta = {}\n    for meta_name in field_meta:\n      if meta_name in meta_whitelist:\n        return_meta[meta_name] = field_meta[meta_name]\n    if len(return_meta) > 0:\n      return_data[field_name] = return_meta\n  return return_data\n",
  "label": 1
 },
 {
  "idx": 829,
  "doc": "Parse XML file into Python object",
  "code": "[('Name', 'some filename.mp3'), \n ('Encoder', 'Gogo (after 3.0)'), \n ('Bitrate', '131'), \n ('Name', 'another filename.mp3'), \n ('Encoder', 'iTunes'), \n ('Bitrate', '128')]\n",
  "label": 0
 },
 {
  "idx": 830,
  "doc": "How do I generate a sequence of integer numbers in a uniform distribution?",
  "code": "from random import randint\n\ndef getNum1To4(runs):\n    occurences = {n+1:0 for n in range(4)}\n    for i in range(runs):\n        options = [n for n in occurences if occurences[n] < runs / 4]\n        choice = options[randint(0, len(options) - 1)]\n        occurences[choice] += 1\n        yield choice\n",
  "label": 1
 },
 {
  "idx": 831,
  "doc": "Obtaining the combination of elements in a dictionary",
  "code": ">>> for i in itertools.product(*l):\n...     print i\n... \n(1, 4, 2)\n(1, 4, 3)\n(1, 5, 2)\n(1, 5, 3)\n(1, 6, 2)\n(1, 6, 3)\n",
  "label": 0
 },
 {
  "idx": 832,
  "doc": "Obtaining the combination of elements in a dictionary",
  "code": ">>> d = {\"a\": [1], \"b\": [2,3], \"c\": [4,5,6]}\n>>> values = [v for k,v in d.items()]\n>>> values\n[[1], [4, 5, 6], [2, 3]]\n",
  "label": 0
 },
 {
  "idx": 833,
  "doc": "How to store a name and score into a list?",
  "code": "scores = [{'Name':'Sam': 'Score':10}]\n",
  "label": 0
 },
 {
  "idx": 834,
  "doc": "How to run Django management commands against Google Cloud SQL",
  "code": "$ SETTINGS_MODE=prod python manage.py migrate\n",
  "label": 0
 },
 {
  "idx": 835,
  "doc": "Find difference between two multi dimensional lists",
  "code": "print([d2[k] for k in d2.viewkeys() - d1])\nprint([d1[k] for k in d1.viewkeys() - d2])\n",
  "label": 0
 },
 {
  "idx": 836,
  "doc": "Django templates check whether key is existing",
  "code": "{% for key, val in d.items %}\n    {% for key2, val2 in val.items %}\n        {% if val2 %}\n            {% for value in val2 %}\n                {{ value }}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endfor %}\n",
  "label": 1
 },
 {
  "idx": 837,
  "doc": "Operators to measure difference in Python",
  "code": "if abs(a - b) > 5:\n",
  "label": 1
 },
 {
  "idx": 838,
  "doc": "pandas count true values in multi-index frame",
  "code": "arr = df.unstack(['id']).values\n# array([[ True, False,  True],\n#        [ True,  True,  True]], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 839,
  "doc": "pandas count true values in multi-index frame",
  "code": "In [44]: arr[:-1]\nOut[44]: array([[ True, False,  True]], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 840,
  "doc": "Selecting a random value from a dictionary in python",
  "code": "random_word = random.choice(lst)\n",
  "label": 1
 },
 {
  "idx": 841,
  "doc": "numpy random numpers in specified shape of any complexity",
  "code": "a = np.array([[1,2,3],[4,5,6],[7,8,9]])\nnp.random.random(a.shape)\n",
  "label": 1
 },
 {
  "idx": 842,
  "doc": "Extract data / parse from HTML in PHP / Python",
  "code": "from BeautifulSoup import BeautifulSoup\nsoup = BeautifulSoup(raw)\n\nfor x in soup.findAll(\"html:td\"):\n   if x.string == \"Equity share capital\":\n       VALS = [y.string for y in x.parent.findAll() if y.has_key(\"class\")]\n\nprint VALS\n",
  "label": 1
 },
 {
  "idx": 843,
  "doc": "How to check which part of app is consuming CPU?",
  "code": " --- modulename: untitled-2, funcname: main\nuntitled-2.py(19):     a = 2\nuntitled-2.py(20):     tracer.enabled = False\n",
  "label": 0
 },
 {
  "idx": 844,
  "doc": "How do I display dates when plotting in matplotlib.pyplot?",
  "code": "xfmt = mdates.DateFormatter('%b %d')\nax.xaxis.set_major_formatter(xfmt)\n",
  "label": 0
 },
 {
  "idx": 845,
  "doc": "List Comprehensions - How to have strings and integers in one list?",
  "code": "with open(\"in.txt\") as f:\n    for line in f:\n        a, rest = line.split(\":\",1)\n        print([a] + map(int,rest.split(\",\")))\n",
  "label": 1
 },
 {
  "idx": 846,
  "doc": "Multiclass linear SVM in python that return probability",
  "code": "from sklearn import datasets\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import SVC\niris = datasets.load_iris()\nX, y = iris.data, iris.target\nclf = OneVsRestClassifier(SVC(kernel='linear', probability=True, class_weight='auto'))\nclf.fit(X, y)\nproba = clf.predict_proba(X)\n",
  "label": 1
 },
 {
  "idx": 847,
  "doc": "How to create sub list with fixed length from given number of inputs or list in Python?",
  "code": ">>> my_list = [1, 'ab', '', 'No', '', 'NULL', 2, 'bc', '','Yes' ,'' ,'Null']\n>>> x = my_list[:len(my_list)//2]\n>>> y = my_list[len(my_list)//2:]\n>>> x\n[1, 'ab', '', 'No', '', 'NULL']\n>>> y\n[2, 'bc', '', 'Yes', '', 'Null']\n",
  "label": 0
 },
 {
  "idx": 848,
  "doc": "How to create sub list with fixed length from given number of inputs or list in Python?",
  "code": "chunks = [my_list[x:x+size] for x in range(0, len(my_list), size)]\n",
  "label": 1
 },
 {
  "idx": 849,
  "doc": "Trying to do left outer joins to two related tables",
  "code": "SELECT foo.name, bar.name, (SELECT COUNT('*') FROM baz WHERE baz.foo_id=foo.id AND baz.bar_id=bar.id) FROM foo, bar\n",
  "label": 0
 },
 {
  "idx": 850,
  "doc": "Having large lists in main scripts, is there anyway to get it out of the main-script and into another module?",
  "code": "#!/usr/bin/env python\n\nimport questions\n\nprint \"question one is,\", questions.sports_questions[0]\n",
  "label": 0
 },
 {
  "idx": 851,
  "doc": "How do I change the built-in button labels on a gtk.Assistant?",
  "code": "for child in get_buttons_hbox(a).get_children():\n    print child.get_label()\n",
  "label": 0
 },
 {
  "idx": 852,
  "doc": "How do I change the built-in button labels on a gtk.Assistant?",
  "code": "gtk-goto-last\ngtk-go-back\ngtk-go-forward\ngtk-apply\ngtk-cancel\ngtk-close\n",
  "label": 0
 },
 {
  "idx": 853,
  "doc": "Finding a parent key from a dict given an intermediate key using python",
  "code": "d = {\n  'dev': {\n    'dev1': {\n      'mod': {\n        'mod1': {'port': [1, 2, 3]},\n      },\n    },\n    'dev2': {\n      'mod': {\n        'mod3': {'port': []},\n      },\n    },\n  },\n}\n\nprint list(find_parent_keys(d, 'mod'))\nprint list(find_parent_keys(d, 'dev'))\n",
  "label": 0
 },
 {
  "idx": 854,
  "doc": "Check Type: How to check if something is a RDD or a dataframe?",
  "code": "from pyspark.sql import DataFrame\nfrom pyspark.rdd import RDD\n\ndef foo(x):\n    if isinstance(x, RDD):\n        return \"RDD\"\n    if isinstance(x, DataFrame):\n        return \"DataFrame\"\n\nfoo(sc.parallelize([]))\n## 'RDD'\nfoo(sc.parallelize([(\"foo\", 1)]).toDF())\n## 'DataFrame'\n",
  "label": 1
 },
 {
  "idx": 855,
  "doc": "Check Type: How to check if something is a RDD or a dataframe?",
  "code": "from multipledispatch import dispatch\n\n@dispatch(RDD)\ndef baz(x):\n    return \"RDD\"\n\n@dispatch(DataFrame)\ndef baz(x):\n    return \"DataFrame\"\n\nbaz(sc.parallelize([]))\n## 'RDD'\n\nbaz(sc.parallelize([(\"foo\", 1)]).toDF())\n## 'DataFrame'\n",
  "label": 1
 },
 {
  "idx": 856,
  "doc": "multi colored plots in matplotlib plt based on certain properties of data",
  "code": "cmap = ListedColormap(['r', 'g']) # use the colors red and green\nnorm = BoundaryNorm([-1000,0,1000], cmap.N) # map red to negative and green to positive\n                                            # this may work with just 0 in the list\nfig, axes = plt.subplots()\ncolorline(x, data, data, cmap=cmap, norm=norm)\n\nplt.xlim(x.min(), x.max())\nplt.ylim(data.min(), data.max())\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 857,
  "doc": "multi colored plots in matplotlib plt based on certain properties of data",
  "code": "ax.bar(x, data, color=colors)\n",
  "label": 0
 },
 {
  "idx": 858,
  "doc": "Applying sqrt function on a column",
  "code": "import numpy as np\nnp.sqrt(football[['wins', 'losses']].sum(axis=1))\n",
  "label": 1
 },
 {
  "idx": 859,
  "doc": "How to print from itertools count object?",
  "code": "from itertools import count,islice\na = count(1)\nfor item in islice(a,2,4):\n    print item\n",
  "label": 1
 },
 {
  "idx": 860,
  "doc": "How to print from itertools count object?",
  "code": "from itertools import count\na = count(1)\n\nnext(a)\nnext(a)\nprint next(a)\n",
  "label": 1
 },
 {
  "idx": 861,
  "doc": "Parsing text in BS4",
  "code": "price_str = price_str.lstrip('$') # 17.95\n",
  "label": 0
 },
 {
  "idx": 862,
  "doc": "Parsing text in BS4",
  "code": "price_str = price.get_text() # $17.95\n",
  "label": 0
 },
 {
  "idx": 863,
  "doc": "How to exit a supervisor process with fabric file?",
  "code": "from fabric.api import run\n\ndef super_status():\n    uname = \"zen\"\n    pswd = \"then\"\n    cmd = \"supervisorctl -u {uname} -p {pswd} status logproxy\".format(uname=uname, pswd=pswd)\n    # to see the command you are going to call, just for show\n    print cmd\n    # and run it\n    run(cmd)\n",
  "label": 0
 },
 {
  "idx": 864,
  "doc": "Django - how to write users and profiles handling in best way?",
  "code": "$ ./manage.py shell\n>>> from django.contrib.auth import User\n>>> from myUserProfileApp import UserProfile\n>>> for u in User.objects.all():\n...  UserProfile(user=u).save() # Add other params as needed.\n...\n",
  "label": 0
 },
 {
  "idx": 865,
  "doc": "Django - how to write users and profiles handling in best way?",
  "code": "from django.db.models.signals import post_save\nfrom django.contrib.auth import User\nfrom myUserProfileApp import UserProfile\n\ndef make_user_profile(sender, **kwargs):\n    if 'created' not in kwargs or not kwargs['created']:\n        return\n\n    # Assumes that the `ForeignKey(User)` field in \"UserProfile\" is named \"user\".\n    profile = UserProfile(user=kwargs[\"instance\"])\n    # Set anything else you need to in the profile, then...\n    profile.save()\n\npost_save.connect(make_user_profile, sender=User, weak=False)\n",
  "label": 0
 },
 {
  "idx": 866,
  "doc": "Import object from module of same name using __import__",
  "code": "getattr(obj, 'mymod')\n# or\nobj.__dict__['mymod']\n# or\nvars(obj)['mymod']\n",
  "label": 0
 },
 {
  "idx": 867,
  "doc": "Python find which order element is in in a list",
  "code": "text = \"My name is Alice and his name is Bob\"\nwords = text.split(' ')\nindices = [i+2 for i, word in enumerate(words) if word == 'name']\nnames = [words[i] for i in indices if i < len(words)]\n",
  "label": 1
 },
 {
  "idx": 868,
  "doc": "Numpy: get the column and row index of the minimum value of a 2D array",
  "code": "%timeit find_min_idx(x)\n1000000 loops, best of 3: 1.1 \u00b5s per loop\n\n%timeit divmod(x.argmin(), x.shape[1])\n1000000 loops, best of 3: 1.04 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 869,
  "doc": "Waf: How to output a generated file?",
  "code": "bld.new_task_gen (\n  features = \"subst\",\n  source= \"versionfile.ver\",\n  target= \"versionfile.out\",\n  VERSION = bld.env['VERSION'],\n  DATADIR = bld.env['DATADIR'])\n",
  "label": 0
 },
 {
  "idx": 870,
  "doc": "How to add a string to a specific line",
  "code": "exp = 20 # the line where text need to be added or exp that calculates it for ex %2\n\nwith open(filename, 'r') as f:\n    lines = f.readlines()\n\nwith open(filename, 'w') as f:\n    for i,line in enumerate(lines):\n        if i == exp:\n            f.write('------')\n        f.write(line)\n",
  "label": 1
 },
 {
  "idx": 871,
  "doc": "How to add a string to a specific line",
  "code": "def update_file(filename, ln):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n\n    with open(filename, 'w') as f:\n        for idx,line in enumerate(lines):\n            (idx in ln and f.write('------'))\n            f.write(line)\n",
  "label": 1
 },
 {
  "idx": 872,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "#ifndef TESTCLASS_H_\n#define TESTCLASS_H_\n\n\nnamespace elps {\n\nclass TestClass {\n\npublic:\n    TestClass(){};\n    virtual ~TestClass(){};\n\n    int getA() { return this->a; };\n    virtual int override_me() { return 2; };\n    int calculate(int a) { return a * this->override_me(); }\n\nprivate:\n    int a;\n\n};\n\n} /* namespace elps */\n#endif /* TESTCLASS_H_ */\n",
  "label": 0
 },
 {
  "idx": 873,
  "doc": "Elegant Python function to convert CamelCase to snake_case?",
  "code": "def convert(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n",
  "label": 1
 },
 {
  "idx": 874,
  "doc": "Persist and fetch data in with block",
  "code": "@asyncio.coroutine\ndef do_work():\n    test_repo = TestRepository()\n\n    yield from test_repo.some_init()\n    try:\n        res = yield from test_repo.get_by_lim_off(\n                page_size=int(length),\n                offset=start,\n                customer_name=customer_name,\n                customer_phone=customer_phone,\n                return_type=return_type\n            )\n    finally:\n        yield from test_repo.do_persistence()\n        yield from test_repo.fetch_data()\n",
  "label": 1
 },
 {
  "idx": 875,
  "doc": "python - how to convert a nested list to a list of all individual sub-lists",
  "code": "[['A'], ['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'D'], ['A', 'D', 'A'], ['A', 'C'], ['A', 'C', 'B'], ['A', 'C', 'A'], ['A', 'A'], ['A', 'A', 'D']]\n",
  "label": 0
 },
 {
  "idx": 876,
  "doc": "Faster alternative to for loop in for loop",
  "code": "def compute_neighborhoods(data, alphabet):\n    keyset = set(data.keys())\n    for key in data:\n        possible_neighbors = set(generate_neighbors(key, alphabet))\n        neighbors = possible_neighbors & keyset\n\n        identifier = data[key][0]\n\n        for neighbor in neighbors:\n            data[neighbor][1].append(identifier)\n",
  "label": 0
 },
 {
  "idx": 877,
  "doc": "Regex? Match part of or whole word",
  "code": "import re\n\ndef get_matcher(word, minchars):\n    reg = '|'.join([word[0:i] for i in range(len(word), minchars - 1, -1)])\n    return re.compile('(%s)$' % (reg))\n\nmatcher = get_matcher('potato', 4)\nfor s in [\"this is a sentence about a potato\", \"this is a sentence about a potat\", \"this is another sentence about a pota\"]:\n    print matcher.search(s).groups()\n",
  "label": 1
 },
 {
  "idx": 878,
  "doc": "Python, logging print statements while having them print to stdout",
  "code": "sys.stdout = backup\n",
  "label": 0
 },
 {
  "idx": 879,
  "doc": "Python, logging print statements while having them print to stdout",
  "code": "class Tee(object):\n    def __init__(self, *files):\n        self.files = files\n    def write(self, obj):\n        for f in self.files:\n            f.write(obj)\n\nf = open('logfile', 'w')\nbackup = sys.stdout\nsys.stdout = Tee(sys.stdout, f)\n\nprint \"hello world\"  # this should appear in stdout and in file\n",
  "label": 1
 },
 {
  "idx": 880,
  "doc": "Python: Apply function to values in nested dictionary",
  "code": "import collections\n\ndef map_nested_dicts_modify(ob, func):\n    for k, v in ob.iteritems():\n        if isinstance(v, collections.Mapping):\n            map_nested_dicts_modify(v, func)\n        else:\n            ob[k] = func(v)\n\nmap_nested_dicts_modify(x, lambda v: v + 7)\n# x is now\n#    {'a': 8, 'b': {'c': 13, 'g': {'h': 10, 'i': 16}, 'd': 14}, 'e': {'f': 10}}\n",
  "label": 1
 },
 {
  "idx": 881,
  "doc": "Python: Apply function to values in nested dictionary",
  "code": "import collections\n\ndef map_nested_dicts(ob, func):\n    if isinstance(ob, collections.Mapping):\n        return {k: map_nested_dicts(v, func) for k, v in ob.iteritems()}\n    else:\n        return func(ob)\n\nmap_nested_dicts(x, lambda v: v + 7)\n# Creates a new dict object:\n#    {'a': 8, 'b': {'c': 13, 'g': {'h': 10, 'i': 16}, 'd': 14}, 'e': {'f': 10}}\n",
  "label": 1
 },
 {
  "idx": 882,
  "doc": "Python: Opening a file within a print() function",
  "code": "with open('file.txt', 'r') as f:\n    print(f.read())\n",
  "label": 1
 },
 {
  "idx": 883,
  "doc": "Appium - Clean app state at the first test and last test, but not between tests",
  "code": "adb shell pm clear <app package here>\n",
  "label": 0
 },
 {
  "idx": 884,
  "doc": "python- finding total number of items of certain range in a list",
  "code": "l = [1.3, 3, 3.4, 34.5, 3.2, 4, 5.6]\n\n\ndef find_fs(l, i, j):\n    try:\n        start, end = l.index(i), l.index(j)\n        return sum(isinstance(ele, float) for ele in islice(l, start + 1, end))\n    except IndexError:\n        return 0\nprint(find_fs(l,3, 4))\n3\n",
  "label": 1
 },
 {
  "idx": 885,
  "doc": "Pygame draw anti-aliased thick line",
  "code": "length = 10 # Line size\nthickness = 2\nangle = math.atan2(X0[1] - X1[1], X0[0] - X1[0])\n",
  "label": 0
 },
 {
  "idx": 886,
  "doc": "Pandas: Change dataframe values based on dictionary and remove rows with no match",
  "code": "   Chrom\n0     23\n1     21\n2     20\n3     13\n4     12\n5     11\n6     10\n7     17\n8     16\n9     15\n10    14\n11    19\n12    18\n13    22\n14     7\n15     6\n16     5\n17     4\n18     3\n19     2\n20     1\n21     9\n22     8\n",
  "label": 0
 },
 {
  "idx": 887,
  "doc": "Pandas: Change dataframe values based on dictionary and remove rows with no match",
  "code": "          Chrom\n0         chrMT\n1          chrY\n2          chrX\n3         chr13\n4         chr12\n5         chr11\n6         chr10\n7         chr17\n8         chr16\n9         chr15\n10        chr14\n11        chr19\n12        chr18\n13         chrM\n14         chr7\n15         chr6\n16         chr5\n17         chr4\n18         chr3\n19         chr2\n20         chr1\n21         chr9\n22         chr8\n23  unknown_chr\n",
  "label": 0
 },
 {
  "idx": 888,
  "doc": "Pandas: Change dataframe values based on dictionary and remove rows with no match",
  "code": "df[\"Chrom\"] = df[\"Chrom\"].replace(HashTable).astype(int)\n",
  "label": 0
 },
 {
  "idx": 889,
  "doc": "Add fields and correct indentation for json file (using python or ruby)",
  "code": "{\n  \"id\":\"\",\n  \"name\":\"\", \n  \"phone\":\"\",\n  \"email\":\"\", \n  \"website\":\"\", \n  \"location\": {\n    \"latitude\":\"\", \n    \"longitude\":\"\", \n    \"address\": {\n      \"line1\":\"\", \n      \"line2\":\"\", \n      \"line3\":\"\", \n      \"postcode\":\"\",\n      \"city\":\"\", \n      \"country\":\"\"\n     }\n  }\n} \n",
  "label": 0
 },
 {
  "idx": 890,
  "doc": "Regular Expression (Python) to extract strings of text from inside of < and > - e.g. <stringone><string-two> etc",
  "code": "<(.*?)>\n",
  "label": 1
 },
 {
  "idx": 891,
  "doc": "Try/Except Every Method in Class?",
  "code": "import inspect\ndef decorate_all_methods(decorator):\n    def apply_decorator(cls):\n        for k, f in cls.__dict__.items():\n            if inspect.isfunction(f):\n                setattr(cls, k, decorator(f))\n        return cls\n    return apply_decorator\n",
  "label": 0
 },
 {
  "idx": 892,
  "doc": "Remove a level from a pandas MultiIndex",
  "code": "In [77]: MultiIndex.from_tuples(index_3levels.droplevel('l3').unique())\nOut[77]: \nMultiIndex\n[(0, 100), (1, 101)]\n",
  "label": 1
 },
 {
  "idx": 893,
  "doc": "Python Pandas removing substring using another column",
  "code": "In [37]: %timeit testing ['NEW2'] = [e.replace(k, '') for e, k in zip(testing.FULL_NAME.astype('str'), testing.NAME.astype('str'))]\n100 loops, best of 3: 4.67 ms per loop\n",
  "label": 1
 },
 {
  "idx": 894,
  "doc": "Pandas: Get value of mutliple sorting/grouping query",
  "code": "df[df.A % 0.1 == 0]\n",
  "label": 0
 },
 {
  "idx": 895,
  "doc": "Pygame How to use walking animations",
  "code": "...\n\nif event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:\n    player = pygame.image.load(images[counter])\n    counter = (counter + 1) % len(images)\n    playerY = playerY + 5\n...\n",
  "label": 0
 },
 {
  "idx": 896,
  "doc": "Python; Search and Replace; Lists; Strings",
  "code": "a = [s.replace('1','3') for s in self.test_lockCheck()]\n",
  "label": 1
 },
 {
  "idx": 897,
  "doc": "Python; Search and Replace; Lists; Strings",
  "code": "a = {k.replace('1','3'): v for k,v in self.test_lockCheck().iteritems()}\n",
  "label": 1
 },
 {
  "idx": 898,
  "doc": "Obtaining dictionary value in Python",
  "code": "sozluk_ata = {20225: 17, 20232: 9, 20233: 22, 20234: 3, 20235: 28, 20236: 69}\n\nfor key in sozluk_ata:\n    print(key, sozluk_ata[key])\n",
  "label": 1
 },
 {
  "idx": 899,
  "doc": "Splitting Strings in Python with Separator variable",
  "code": "import re\ndef split_string(source,separators):\n    return re.split('[{0}]'.format(re.escape(separators)),source)\n",
  "label": 1
 },
 {
  "idx": 900,
  "doc": "Splitting Strings in Python with Separator variable",
  "code": "def split_string(source,separators):\n    return re.split('(?:'+'|'.join(re.escape(x) for x in separators)+')+',source)\n",
  "label": 1
 },
 {
  "idx": 901,
  "doc": "sum two lists element-by-element in python recursively",
  "code": "def recursive_sum(l1, l2, idx = 0):\n    if idx < min(len(l1), len(l2)):\n        return [l1[idx] + l2[idx]] + recursive_sum(l1, l2, idx + 1)\n    else:\n        return []\n\nprint recursive_sum([1, 2, 3], [4, 5, 6])\n# [5, 7, 9]\n",
  "label": 1
 },
 {
  "idx": 902,
  "doc": "sum two lists element-by-element in python recursively",
  "code": "def recursive_sum(l1, l2, result = None, idx = 0):\n    if result is None:\n        result = []\n    if idx < min(len(l1), len(l2)):\n        result.append(l1[idx] + l2[idx])\n        return recursive_sum(l1, l2, result, idx + 1)\n    else:\n        return result\n",
  "label": 1
 },
 {
  "idx": 903,
  "doc": "Insert nested value in mongodb using python",
  "code": "[         \n    {'ExportPath': 2, 'OrginalName': 1}, \n    {'ExportPath': 4, 'OrginalName': 3},\n    {'ExportPath': 6, 'OrginalName': 5}\n]\n",
  "label": 0
 },
 {
  "idx": 904,
  "doc": "How to do a screenshot of a tkinter application?",
  "code": "from PIL import Image\nfrom pyscreenshot import grab\n\nimg = grab(bbox=(100, 200, 300, 400))\n\n# to keep the aspect ratio\nw = 300\nh = 400\nmaxheight = 600\nmaxwidth = 800\nratio = min(maxwidth/width, maxheight/height)\n# correct image size is not #oldsize * ratio#\n\n# img.resize(...) returns a resized image and does not effect img unless\n# you assign the return value\nimg = img.resize((h * ratio, width * ratio), Image.ANTIALIAS)\n",
  "label": 0
 },
 {
  "idx": 905,
  "doc": "How do i randomly select more than one item from a list in linux scripting?",
  "code": "Stock left\nCOMH000     0\nCOMT000     2\nCOMT001     3\nCT100H000   0\nCOM#005     3\nCOM#004     2\nCOM#006     2\nCOME001     8\n\nPicked: ['CT100H000', 'COMH000', 'COME001', 'COME001', 'COMH000', 'COMT000']\n",
  "label": 0
 },
 {
  "idx": 906,
  "doc": "Passing binary data from Python to C API extension",
  "code": "static PyObject* authenticate(PyObject *self, PyObject *args) {\n\n    PyByteArrayObject *creds;\n\n    if (!PyArg_ParseTuple(args, \"O\", &creds))\n        return NULL;\n\n    char* credsCopy;\n    credsCopy = PyByteArray_AsString((PyObject*) creds);\n}\n",
  "label": 0
 },
 {
  "idx": 907,
  "doc": "Get header row in pandas dataframe",
  "code": "In [6]:\n' '.join(df)\n\nOut[6]:\n'Col_A Col_B Col_C'\n",
  "label": 1
 },
 {
  "idx": 908,
  "doc": "Finding index values in a pandas data frame where columns are the same",
  "code": "Out[53]: \n                     PhaseA  PhaseB  PhaseC  DataCol\nIndex                                               \n2013-01-07 00:02:00     415     423     415      1.2\n2013-01-07 00:04:00     415     423     423      1.2\n",
  "label": 0
 },
 {
  "idx": 909,
  "doc": "Concatenate elements of a list",
  "code": "s = ''.join(l)\n",
  "label": 1
 },
 {
  "idx": 910,
  "doc": "How to parse the header files of the pcap file?",
  "code": "In [87]: data\nOut[87]: Ethernet(src='\\x00\\x1a\\xa0kUf', dst='\\x00\\x13I\\xae\\x84,', data=IP(src='\\xc0\\xa8\\n\\n', off=16384, dst='C\\x17\\x030', sum=25129, len=52, p=6, id=51105, data=TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145)))\n",
  "label": 0
 },
 {
  "idx": 911,
  "doc": "How to parse the header files of the pcap file?",
  "code": "In [88]: data.src\nOut[88]: '\\x00\\x1a\\xa0kUf'\n",
  "label": 0
 },
 {
  "idx": 912,
  "doc": "Joinable PriorityQueue in python's asyncio",
  "code": "class PriorityQueue(Queue):\n    \"\"\"A subclass of Queue; retrieves entries in priority order (lowest first).\n\n    Entries are typically tuples of the form: (priority number, data).\n    \"\"\"\n\n    def _init(self, maxsize):\n        self._queue = []\n\n    def _put(self, item, heappush=heapq.heappush):\n        heappush(self._queue, item)\n\n    def _get(self, heappop=heapq.heappop):\n        return heappop(self._queue)\n",
  "label": 0
 },
 {
  "idx": 913,
  "doc": "Search multiple strings in multiple files",
  "code": "grep -Frlf messages.txt dir\n",
  "label": 1
 },
 {
  "idx": 914,
  "doc": "Pick values only below a certain threshold",
  "code": "def cutoff(threshold, data):\n    sortedData = sorted(data, key=lambda x: x[1])\n    finalList = filter(lambda x: x[1] < threshold, sortedData)\n    return finalList if len(finalList) > 2 else 'No values found'\n",
  "label": 1
 },
 {
  "idx": 915,
  "doc": "How to find defined sequence in the list?",
  "code": ">>> import re\n>>> l = ['A','B','A','A','B','B','A']\n>>> pat = re.compile(r'BAA')\n>>> sequences = pat.findall(''.join(l))\n>>> sequences\n['BAA']\n>>> len(sequences)\n1\n>>> \n",
  "label": 1
 },
 {
  "idx": 916,
  "doc": "Sort NumPy float array column by column",
  "code": "A[np.lexsort(A.T)]\n",
  "label": 1
 },
 {
  "idx": 917,
  "doc": "How to save big (not huge) dictonaries in Python?",
  "code": ">>> npzfile = numpy.load('file.npz')\n>>> npzfile\n<numpy.lib.npyio.NpzFile object at 0x1fa7610>\n>>> npzfile['a']\narray([1, 2])\n>>> npzfile['b']\narray([3, 4])\n>>> npzfile['c']\narray([5, 6])\n",
  "label": 0
 },
 {
  "idx": 918,
  "doc": "How to write small DSL parser with operator module in python",
  "code": "class Rule( object ):\n    def __init__( self, text ):\n        self.text= text\n    def test( self, A, B, C, D, E, F, G ):\n        return eval( self.text )\n\nr1= Rule( \"A==B\" )\nr2= Rule( \"A==B and B==C\" )\nr3= Rule( \"A in {listname!s}\".format( listname=someList ) )\n",
  "label": 1
 },
 {
  "idx": 919,
  "doc": "Python: Alphanumeric Serial Number with some rules",
  "code": ">>> next_string('11A')\n'11B'\n>>> next_string('11A')\n'11B'\n>>> next_string('11Z')\n'121'\n>>> next_string('119')\n'11A'\n>>> next_string('1')\n'2'\n>>> next_string('ZZ')\n'111'\n>>> next_string('ZZ1')\n'ZZ2'\n>>> next_string('ZZ9')\n'ZZA'\n>>> next_string('ZZH')\n'ZZJ'\n",
  "label": 0
 },
 {
  "idx": 920,
  "doc": "Python: Alphanumeric Serial Number with some rules",
  "code": "def next_string(s):\n    if len(s) == 0:\n        return '1'\n    head = s[0:-1]\n    tail = s[-1]\n    if tail == 'Z':\n        return next_string(head) + '1'\n    if tail == '9':\n        return head+'A'\n    if tail == 'H':\n        return head+'J'\n    if tail == 'N':\n        return head+'P'\n    return head + chr(ord(tail)+1)\n",
  "label": 1
 },
 {
  "idx": 921,
  "doc": "How to pick the largest number in a matrix of lists in python?",
  "code": "max((cell[k], x, y)\n    for (y, row) in enumerate(m)\n    for (x, cell) in enumerate(row))[1:]\n",
  "label": 1
 },
 {
  "idx": 922,
  "doc": "What is the best way to pass a method (with parameters) to another method in python",
  "code": "def method1(name):\n    def wrapper(greeting):\n        return greeting + name\n    return wrapper\n\ndef method2(method, question):\n    output = method(greeting = 'Hello ')\n    return output + ', ' + question\n\nmethod2(method1(name = 'Sam'), 'How are you?')\n",
  "label": 1
 },
 {
  "idx": 923,
  "doc": "What is the best way to pass a method (with parameters) to another method in python",
  "code": "def method1(name):\n    def wrapper():\n        return 'Hello ' + name\n    return wrapper\n\ndef method2(method, question):\n    output = method()\n    return output + ', ' + question\n\nmethod2(method1(name = 'Sam'), 'How are you?')\n",
  "label": 1
 },
 {
  "idx": 924,
  "doc": "Render lists of posts grouped by date",
  "code": "{% for date, group in by_date %}<div>\n    <p>{{ date.isoformat() }}</p>\n    {% for post in group %}<div>\n        {{ post.title }}\n        ...\n    </div>{% endfor %}\n</div>{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 925,
  "doc": "scale two matrices with scipy or sklearn",
  "code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X1)\noutput = scaler.transform(X2)\n",
  "label": 1
 },
 {
  "idx": 926,
  "doc": "scale two matrices with scipy or sklearn",
  "code": "scaler.std_\nscaler.mean_\n",
  "label": 0
 },
 {
  "idx": 927,
  "doc": "How should I subtract two dataframes and in Pandas and diplay the required output?",
  "code": "MvT101group.columns = MvT101group.columns.map(lambda x: str(x) + '_101')\nMvT102group.columns = MvT102group.columns.map(lambda x: str(x) + '_102')\n",
  "label": 0
 },
 {
  "idx": 928,
  "doc": "How should I subtract two dataframes and in Pandas and diplay the required output?",
  "code": "df = df.merge(MvT101group, left_on=['Order'], right_index=True, how='left')\ndf = df.merge(MvT102group, left_on=['Order'], right_index=True, how='left')\n",
  "label": 0
 },
 {
  "idx": 929,
  "doc": "packaging with numpy and test suite",
  "code": "python setup.py install\npython setup.py clean --all\n",
  "label": 0
 },
 {
  "idx": 930,
  "doc": "to delete records from a file in python",
  "code": "with open(\"in.txt\") as f:\n    lines = f.readlines()\n    for ind, line in enumerate(lines):\n        if line.startswith(\"55\"):\n            lines[ind] = \"\"\n    with open(\"in.txt\",\"w\") as f:\n        f.writelines(lines)\n",
  "label": 1
 },
 {
  "idx": 931,
  "doc": "to delete records from a file in python",
  "code": "with open(your_f) as f:\n    lines = f.readlines()\n    for ind, line in enumerate(lines): \n        if your condition: # if line contains a match \n            lines[ind] =\"\" # set line to empty string\n    with open(your_f,\"w\") as f: # reopen with w to overwrite\n        f.writelines(lines) # write updated lines\n",
  "label": 1
 },
 {
  "idx": 932,
  "doc": "How can I use a list comprehension to extend a list in python?",
  "code": "return sum(map(doSomething, originalList), [])\n",
  "label": 1
 },
 {
  "idx": 933,
  "doc": "Boost.Python: Ownership of pointer variables",
  "code": "//The node class should be held by std::auto_ptr\nclass_<Node, std::auto_ptr<Node> >(\"Node\")\n",
  "label": 0
 },
 {
  "idx": 934,
  "doc": "Sum grouped Pandas dataframe by single column",
  "code": "print test.groupby(['GroupID','Sample','SampleMeta']).sum()\n\n                           Value\nGroupID Sample SampleMeta       \n1       S1     S1_meta         2\n2       S2     S2_meta         1\n",
  "label": 1
 },
 {
  "idx": 935,
  "doc": "Python C API - How to construct object from PyObject",
  "code": ">>> import example\n>>> game = example.GameObject()\n>>> component = game.add_component(example.CameraComponent)\nCameraComponent()\n>>> assert(isinstance(component, example.CameraComponent))\n>>> try:\n...     game.add_component(component) # throws Boost.Python.ArgumentError\n...     assert(False)\n... except TypeError:\n...     assert(True)\n...\n",
  "label": 0
 },
 {
  "idx": 936,
  "doc": "XPATH: If there is element with certain value assume \"phone\" then get it's sibling value",
  "code": ">>> hxs.xpath('//td[contains(., \"Phone\")]/following-sibling::td[1]').re(r'(\\d[\\d ]+\\d)')\n[u'020 641512']\n>>> \n",
  "label": 1
 },
 {
  "idx": 937,
  "doc": "How can I get a Tuple from a list in python (3.3)",
  "code": "matching_results = [t for t in list_ if t[0] in c_codes]\n",
  "label": 1
 },
 {
  "idx": 938,
  "doc": "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2",
  "code": "In [277]: df.query('fold >=2 | fold <=-0.6')\nOut[277]:\n   label         Y88_N          diff       div      fold\n0      0  25273.626713  17348.581851  2.016404  2.016404\n1      1  29139.510491  -4208.868050  0.604304 -0.604304\n5      5  28996.634708  10934.944533  2.031293  2.031293\n",
  "label": 1
 },
 {
  "idx": 939,
  "doc": "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2",
  "code": "In [278]: df[pd.eval('df.fold >=2 | df.fold <=-0.6')]\nOut[278]:\n   label         Y88_N          diff       div      fold\n0      0  25273.626713  17348.581851  2.016404  2.016404\n1      1  29139.510491  -4208.868050  0.604304 -0.604304\n5      5  28996.634708  10934.944533  2.031293  2.031293\n",
  "label": 1
 },
 {
  "idx": 940,
  "doc": "How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python?",
  "code": "conn = MySQLdb(host...)\n\nc = conn.cursor()\nc.execute(\"INSERT INTO...\")\nnewID = c.lastrowid\n",
  "label": 1
 },
 {
  "idx": 941,
  "doc": "Python getting a string (key + value) from Python Dictionary",
  "code": "def checkCommonNodes(id, rs):\n    id_key, id_value = id.split('_')\n    for r in rs:\n        try:\n            if r[id_key] == id_value:\n                print \"\".join('{}_{}'.format(k,v) for k,v in r.iteritems())\n        except KeyError:\n            continue\n",
  "label": 1
 },
 {
  "idx": 942,
  "doc": "Django get list of models in application",
  "code": "for model in get_models(app):\n    new_object = model() # Create an instance of that model\n    model.objects.filter(...) # Query the objects of that model\n    model._meta.db_table # Get the name of the model in the database\n    model._meta.verbose_name # Get a verbose name of the model\n    # ...\n",
  "label": 0
 },
 {
  "idx": 943,
  "doc": "How to consistently ignore one byte from a string",
  "code": "In [63]: test\nOut[63]: 'hello\\x00world'\nIn [68]: for my_bytes in filter(lambda x: x != b'\\x00', test):\n   ....:     print(my_bytes)\n   ....:\nh\ne\nl\nl\no\nw\no\nr\nl\nd\n",
  "label": 1
 },
 {
  "idx": 944,
  "doc": "Plone - Override Zope Schema fields",
  "code": "from collective.documentviewer.settings import Base\nclass CustomSettings(Base):\n    implements(IEnhancedDocumentViewerSchema)\n    use_interface = IEnhancedDocumentViewerSchema\n",
  "label": 0
 },
 {
  "idx": 945,
  "doc": "Creating a subplot instead of separate plots",
  "code": "import matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(2)\n\nplt.subplot2grid((1,5), (0,0), colspan=3)\nplt.plot([1,2,3]) # plot something\n\nplt.subplot2grid((1,5), (0,3), colspan=2)\nplt.plot([1,2,1]) # plot something\n\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 946,
  "doc": "Get last \"column\" after .str.split() operation on column in pandas DataFrame",
  "code": "In [104]: d2[\"price\"] = d2[\"price\"].str.replace(\"p\",\"\").astype(float)\n\nIn [105]: d2\nOut[105]: \n  symbol       date  price\n0    spx  5/25/2001    500\n1    spx  5/25/2001    600\n2    spx  5/25/2001    700\n",
  "label": 0
 },
 {
  "idx": 947,
  "doc": "Get last \"column\" after .str.split() operation on column in pandas DataFrame",
  "code": "In [113]: temp2.apply(lambda x: x[2])\nOut[113]: \n0    p500\n1    p600\n2    p700\nName: ticker\n",
  "label": 0
 },
 {
  "idx": 948,
  "doc": "Print two report in Odoo8",
  "code": "<button string=\"Reports_print\" name=\"print_reports\" type=\"object\"/>\n",
  "label": 0
 },
 {
  "idx": 949,
  "doc": "Print two report in Odoo8",
  "code": "return {\n        'type': 'ir.actions.report.xml',\n        'report_name': 'my_report',\n        'datas': datas,\n        'nodestroy': True\n    }\n",
  "label": 0
 },
 {
  "idx": 950,
  "doc": "python + auto ssh proccess to get date info",
  "code": "ssh-keygen -t rsa\n",
  "label": 0
 },
 {
  "idx": 951,
  "doc": "Switch between assignments to different variables in python? With ternary operator?",
  "code": "test = True\nd = {\"a\": 23, \"b\": 42}\nd[\"a\" if test else \"b\"] = 1\nprint d\n#result: {'a': 1, 'b': 42}\n",
  "label": 1
 },
 {
  "idx": 952,
  "doc": "Numpy: Efficient Way To Extract Subarray",
  "code": "method1: 87.7 ms\nmethod2: 89.2 ms\nmethod3: 115 ms\nmethod4: 141 ms\n",
  "label": 0
 },
 {
  "idx": 953,
  "doc": "how to convert UTF-8 code to symbol characters in python",
  "code": "import urllib.request\n\nurllib.request.urlretrieve('http://stackoverflow.com', 'so.html')\n",
  "label": 1
 },
 {
  "idx": 954,
  "doc": "how to convert UTF-8 code to symbol characters in python",
  "code": "import io\nimport shutil\nfrom urllib.request import urlopen\n\nwith urlopen('http://stackoverflow.com') as u, \\\n     open('so.html', 'w', encoding='utf-8', newline='') as file, \\\n     io.TextIOWrapper(u, encoding=u.headers.get_content_charset('utf-8'), newline='') as t:\n    shutil.copyfileobj(t, file)\n",
  "label": 1
 },
 {
  "idx": 955,
  "doc": "How to return both string and value within HttpResponse?",
  "code": "return JsonResponse({'message': 'a string', 'val': val})\n",
  "label": 1
 },
 {
  "idx": 956,
  "doc": "Scipy sparse matrices element wise multiplication",
  "code": "A.multiply(B)\n",
  "label": 1
 },
 {
  "idx": 957,
  "doc": "Can you make a function that would create several instances of a class for you in Python?",
  "code": ">>> for roomname, room in rooms.items():\n...     print roomname, room.x, room.y\n...     \na 1 1\nc 2 1\nb 1 2\nd 2 2\n",
  "label": 0
 },
 {
  "idx": 958,
  "doc": "How to print available tags while using Robot Framework",
  "code": "$ python /tmp/get_tags.py /tmp/tests/\na tag, another force tag, another tag, default tag, force tag, tag-1, tag-2\n",
  "label": 0
 },
 {
  "idx": 959,
  "doc": "Dynamic Table Creation and ORM mapping in SqlAlchemy",
  "code": ">>> class Player(object):\n...     def __init__(self, name, score):\n...         self.name = name\n...         self.score = score\n...\n...     def __repr__(self):\n...        return \"<Player('%s','%s')>\" % (self.name, self.score)\n",
  "label": 0
 },
 {
  "idx": 960,
  "doc": "Even number check without: if",
  "code": "evens = []\nodds = []\nout = [evens,odds]\nfor elem in numbers:\n    out[elem%2].append(elem)\n\nprint evens\n",
  "label": 1
 },
 {
  "idx": 961,
  "doc": "Remove punctuation from Unicode formatted strings",
  "code": "import unicodedata\nimport sys\n\ntbl = dict.fromkeys(i for i in xrange(sys.maxunicode)\n                      if unicodedata.category(unichr(i)).startswith('P'))\ndef remove_punctuation(text):\n    return text.translate(tbl)\n",
  "label": 1
 },
 {
  "idx": 962,
  "doc": "How do I run python file without path?",
  "code": "python_run my_cool_script.py --foo=bar\n",
  "label": 0
 },
 {
  "idx": 963,
  "doc": "How do I run python file without path?",
  "code": "C:\\Python27\\python.exe my_cool_script.py --foo=bar\n",
  "label": 0
 },
 {
  "idx": 964,
  "doc": "List names of all available MS SQL databases on server using python",
  "code": "from sqlalchemy import create_engine\nengine = create_engine('mssql+pymssql://sa:saPassword@localhost:52865/myDb')\nconn = engine.connect()\nrows = conn.execute(\"select name FROM sys.databases;\")\nfor row in rows:\n    print(row[\"name\"])\n",
  "label": 1
 },
 {
  "idx": 965,
  "doc": "display only one logging line",
  "code": "def mylog(text):\n    logging.info(text)\n    print '\\x1b[80D' + '\\x1b[K'+ text,\n    sys.stdout.flush()\n",
  "label": 1
 },
 {
  "idx": 966,
  "doc": "display only one logging line",
  "code": "import time\nimport sys\n\nprint 'this is a text',\nsys.stdout.flush()\n\ntime.sleep(1)\nprint '\\x1b[80D'+'\\x1b[K'+'Second text',\nsys.stdout.flush()\n",
  "label": 1
 },
 {
  "idx": 967,
  "doc": "Python Regex: Optional White Space Around Matching Group",
  "code": "user = bob\n",
  "label": 0
 },
 {
  "idx": 968,
  "doc": "Python Regex: Optional White Space Around Matching Group",
  "code": " = \n",
  "label": 0
 },
 {
  "idx": 969,
  "doc": "alternate for multiple constructors",
  "code": "class MyClass:\n    def __init__(self, options):\n        self.options = options\n\n    @classmethod\n    def create_default_parser(cls):\n        parser = argparse.ArgumentParser(description='something')\n        parser.add_argument('-v', '--victor', dest='vic', default=\"winning\")\n        options = parser.parse_args()\n        return cls(options)\n",
  "label": 1
 },
 {
  "idx": 970,
  "doc": "Writing to a file in a for loop",
  "code": "myfile = open('xyz.txt', 'w')\nfor line in lines:\n    var1, var2 = line.split(\",\");\n    myfile.write(\"%s\\n\" % var1)\n\nmyfile.close()\ntext_file.close()\n",
  "label": 1
 },
 {
  "idx": 971,
  "doc": "Convert a hashcode to its binary representation",
  "code": "bin(260768607) # Result: '0b1111100010110000001101011111'\n",
  "label": 1
 },
 {
  "idx": 972,
  "doc": "parsing single text items from xml with Python",
  "code": "$ easy_install lxml\n",
  "label": 0
 },
 {
  "idx": 973,
  "doc": "How to make a calculator with strings and numbers as mixed input using parser python ply",
  "code": "tokens = (\n    'NAME','NUMBER', 'times', 'divided_by', 'plus', 'minus', 'plustext', ....\n)\n",
  "label": 0
 },
 {
  "idx": 974,
  "doc": "How to make a calculator with strings and numbers as mixed input using parser python ply",
  "code": "def p_expression_binop(p):\n    '''expression : expression '+' expression\n                  | expression plustext expression\n    '''\n",
  "label": 0
 },
 {
  "idx": 975,
  "doc": "Efficiently Removing Very-Near-Duplicates From Python List",
  "code": "_, unique = np.unique(a.round(decimals=14), return_index=True)\n",
  "label": 0
 },
 {
  "idx": 976,
  "doc": "Efficiently Removing Very-Near-Duplicates From Python List",
  "code": "no_duplicates = a[unique]\n",
  "label": 0
 },
 {
  "idx": 977,
  "doc": "Updating a value in a dictionary inside a dictionary",
  "code": "[dict(contact, phoneNumbers=[\n    dict(phone_dict, phone=phone_dict['phone'].replace('-', '')) \n    for phone_dict in contact['phoneNumbers']])\n for contact in list_of_dicts]\n",
  "label": 1
 },
 {
  "idx": 978,
  "doc": "Updating a value in a dictionary inside a dictionary",
  "code": "for contact_dict in list_of_dicts:\n    for phone_dict in contact_dict['phoneNumbers']:\n        phone_dict['phone'] = phone_dict['phone'].replace('-', '')\n",
  "label": 1
 },
 {
  "idx": 979,
  "doc": "How to find the average of previous sales at each time in python",
  "code": "wholesaler  product  date      \n11209       UME24    2013-12-31     NaN\n13131       UPE55    2012-12-31     NaN\n                     2013-02-23     1.0\n                     2013-04-24     578.5\n52237       UPE54    2013-12-18     NaN\n                     2013-12-31     9.0\n53929       UME24    2013-12-19     NaN\n            UPE54    2012-12-31     NaN\n82204       UPE55    2012-12-31     NaN\n83389       UPE54    2013-12-01     NaN\n                     2013-12-17     9.0\n",
  "label": 0
 },
 {
  "idx": 980,
  "doc": "Get specific data from a .json file and save them to a 2D matrix/dictionary in python",
  "code": " final.append({uniq_ident:vocab})\n",
  "label": 0
 },
 {
  "idx": 981,
  "doc": "PyQt change element in .ui file",
  "code": "class MainWindow(QMainWindow):\n    def __init__(self):\n        QMainWindow.__init__(self)\n        uic.loadUi('window.ui', self)\n\nmain_window = MainWindow()\n",
  "label": 0
 },
 {
  "idx": 982,
  "doc": "PyQt change element in .ui file",
  "code": "@pyqtSlot()\ndef click_my_btn(self, sender):\n    main_window.btn.hide()\n",
  "label": 0
 },
 {
  "idx": 983,
  "doc": "Get the count of the each date entry from onr of the raw from CSV file",
  "code": "with open(\"your_file.csv\") as f:\n    my_list = []\n    for line in f:\n        if line:\n            my_list.append(line.strip().split())\n    for x,y in itertools.groupby(sorted(my_list, key=lambda x:x[0]), key=lambda x:x[0]):\n        print x, len(list(y))\n",
  "label": 1
 },
 {
  "idx": 984,
  "doc": "Solving 5 Linear Equations in Python",
  "code": "[[ 0.125]\n [-1.25 ]\n [ 4.375]\n [-5.25 ]\n [ 3.   ]]\n",
  "label": 0
 },
 {
  "idx": 985,
  "doc": "iterate the range in for loop to satisfy the condition",
  "code": "set_mean = -10\n#calculated_mean = None\n\nenergy = []\ncalculated_mean = float('inf')\nx = 1\nwhile calculated_mean > set_mean:\n    for i in range(x, x+4):  # you can change step size here by passing it as last argument\n        energy.append(i-i*i)  \n        print(energy)\n        calculated_mean =  sum(energy[-2:])/2\n        print(calculated_mean)\n    x = x + 1\n",
  "label": 1
 },
 {
  "idx": 986,
  "doc": "I need to generate x random numbers in an interval from 1 to x but each number have to occur only once",
  "code": "array([3, 2, 8, 7, 0, 9, 6, 4, 5, 1])\n",
  "label": 0
 },
 {
  "idx": 987,
  "doc": "Replacing strings in specific positions into a text and then rewriting all the text",
  "code": "spl[4] = spl[4].replace(\"A\", \"B\")\n",
  "label": 0
 },
 {
  "idx": 988,
  "doc": "Replacing strings in specific positions into a text and then rewriting all the text",
  "code": "spl = line.split()\n",
  "label": 0
 },
 {
  "idx": 989,
  "doc": "Replacing strings in specific positions into a text and then rewriting all the text",
  "code": "file = open('1qib.pdb', 'r')\nfile2 = open('new.pdb', 'w')\n\nfor i, line in enumerate(file):\n    spl = line.split() #1\n    spl[4] = spl[4].replace(\"A\", \"B\") #2\n    newline = \" \".join(spl) #3\n    file2.write(newline) #4\n\nfile.close()\nfile2.close()\n",
  "label": 1
 },
 {
  "idx": 990,
  "doc": "Finding minimum and maximum value for each row, excluding NaN values",
  "code": "In [93]:\nwind_speed = np.array([234,np.NaN,343, np.NaN])\nwind_speed\n\nOut[93]:\narray([ 234.,   nan,  343.,   nan])\n\nIn [94]:\nprint(np.nanmin(wind_speed, axis=0), np.nanmax(wind_speed, axis=0))\n234.0 343.0\n",
  "label": 1
 },
 {
  "idx": 991,
  "doc": "Use BeautifulSoup to extract text before the first child tag",
  "code": "parsed.find('a').previousSibling # or something like that\n",
  "label": 1
 },
 {
  "idx": 992,
  "doc": "Matplotlib: force aspect ratio in series of plots",
  "code": "ax.imshow(image, extent=[0, 10.4, 0, 4.2], aspect=1)\n",
  "label": 1
 },
 {
  "idx": 993,
  "doc": "how to show each element of array separately",
  "code": "    for index, item in enumerate(splits):\n        columns[index].append(item)\n",
  "label": 0
 },
 {
  "idx": 994,
  "doc": "how to show each element of array separately",
  "code": "print columns[0][0]  # first item of first list\n",
  "label": 0
 },
 {
  "idx": 995,
  "doc": "Evaluate integral from sympy as lambda function",
  "code": ">>> f = lambdify(x, integrate(x**2+2,x))\n>>> f(2)\n6.666666666666666\n",
  "label": 1
 },
 {
  "idx": 996,
  "doc": "how to forward fill non-null values in a pandas dataframe based on a set condition",
  "code": "In [12]: df.where(df.replace(0, np.nan).bfill(), 2)\nOut[12]:\n            a  b  c\n2000-03-02  0  0  0\n2000-03-03  0  0  1\n2000-03-04  0  1  1\n2000-03-05  1  2  2\n2000-03-06  2  2  2\n2000-03-07  2  2  2\n",
  "label": 0
 },
 {
  "idx": 997,
  "doc": "How to define a chi2 value function for arbitrary function?",
  "code": "import inspect\n\nchi_squared_template = \"\"\"\ndef chi_squared(%(params)s):\n    return (((f(data_x, %(params)s) - data_y) / errors) ** 2).sum()\n\"\"\"\n\ndef make_chi_squared(f, data_x, data_y, errors):\n    params = \", \".join(inspect.getargspec(f).args[1:])\n    exec chi_squared_template % {\"params\": params}\n    return chi_squared\n",
  "label": 1
 },
 {
  "idx": 998,
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": "2013-09-16 09:30:00,0.0\n2013-09-16 09:31:00,3.0\n2013-09-16 15:59:00,-5.0\n2013-09-16 16:00:00,-3.0\n2013-09-17 09:30:00,1.0\n2013-09-17 09:31:00,-1.0\n",
  "label": 0
 },
 {
  "idx": 999,
  "doc": "Python: Read Content of Hidden HTML Table",
  "code": "for row in soup('table')[5].findAll('tr'):\n    tds = row('td')\n    if not tds:\n        continue\n    print u' '.join([cell.string for cell in tds if cell.string])\n",
  "label": 1
 },
 {
  "idx": 1000,
  "doc": "How do I get the number of posts on each day with annotation in Django?",
  "code": "[{'posted-day': 'the-first-day', 'dailycount': 2}, . . . ,\n {'posted-day': 'the-last-day', 'dailycount': 3}]\n",
  "label": 0
 },
 {
  "idx": 1001,
  "doc": "Mask a 3d array with a 2d mask in numpy",
  "code": "field3d_mask_1 = np.zeros(field3d.shape, dtype=bool)\nfield3d_mask_2 = np.zeros(field3d.shape, dtype=bool)\n\nfor t in range(nt):\n    field3d_mask_1[t,:,:] = field2d > 0.3\n\nfield3d_mask_2[:,:,:] = field2d[np.newaxis,:,:] > 0.3\n\nprint((field3d_mask_1 == field3d_mask_2).all())\n",
  "label": 1
 },
 {
  "idx": 1002,
  "doc": "Execute coroutine from `call_soon` callback function",
  "code": "loop = asyncio.get_event_loop()\ncoro = hello_world(loop)\ncallback = lambda: asyncio.ensure_future(coro)\nloop.call_soon(callback)\nloop.run_forever()\nloop.close()\n",
  "label": 0
 },
 {
  "idx": 1003,
  "doc": "How to create a object of variables, and return it, in Python?",
  "code": "class Example(object):\n    pass\n\nmyobject = Example()\nmyobject.a = \"value\"\n",
  "label": 0
 },
 {
  "idx": 1004,
  "doc": "Addition of multiple arrays in python",
  "code": ">>> arr = np.array([[1,2,3,5,4,3], \n          [5,7,2,4,6,7],\n          [3,6,2,4,5,9]])\n>>> arr.sum(axis=0)\narray([ 9, 15,  7, 13, 15, 19])\n",
  "label": 1
 },
 {
  "idx": 1005,
  "doc": "how do i turn for loop iterator into a neat pythonic one line for loop",
  "code": "list_choices = {}\nfor i in obj:\n    list_choices.setdefault(i.area.region.id, []).append([i.id, i.name])\n",
  "label": 1
 },
 {
  "idx": 1006,
  "doc": "how do i turn for loop iterator into a neat pythonic one line for loop",
  "code": "list_choices[i.area.region.id].append([i.id, i.name])\n",
  "label": 0
 },
 {
  "idx": 1007,
  "doc": "How to make unique combinations of the following list of tuples",
  "code": "('Bob', 'GreenWood')\n('Bob', 'Pearson')\n('Tom', 'GreenWood')\n('Tom', 'Pearson')\n",
  "label": 0
 },
 {
  "idx": 1008,
  "doc": "How does python prevent a class from being subclassed?",
  "code": "class Final(type):\n    def __new__(cls, name, bases, classdict):\n        for b in bases:\n            if isinstance(b, Final):\n                raise TypeError(\"type '{0}' is not an acceptable base type\".format(b.__name__))\n        return type.__new__(cls, name, bases, dict(classdict))\n\nclass Foo:\n    __metaclass__ = Final\n\nclass Bar(Foo):\n    pass\n",
  "label": 1
 },
 {
  "idx": 1009,
  "doc": "How to separate upper and lower case letters in a string",
  "code": "upper, lower = split_upper_lower('AbBZxYp')\n",
  "label": 0
 },
 {
  "idx": 1010,
  "doc": "GIMP Python-fu nested group layers",
  "code": "pdb.gimp_image_insert_layer(<img>, <layer>, <parent>, <position>)\n",
  "label": 0
 },
 {
  "idx": 1011,
  "doc": "How do I delete an object in a django relation (While keeping all related objects)?",
  "code": "more=Many.objects.filter(one=one)\nfor m in more\n    m.one=None\n    m.save()\n#and finally:\none.delete()\n",
  "label": 0
 },
 {
  "idx": 1012,
  "doc": "Evaluate multiple variables in one 'if' statement?",
  "code": "if not (var1 or var2 or var3 or var4):\n",
  "label": 1
 },
 {
  "idx": 1013,
  "doc": "Evaluate multiple variables in one 'if' statement?",
  "code": "if not any((var1, var2, var3, var4)):\n",
  "label": 1
 },
 {
  "idx": 1014,
  "doc": "building full path filename in python,",
  "code": "suffix = '.pdf'\nos.path.join(dir_name, base_filename + suffix)\n",
  "label": 1
 },
 {
  "idx": 1015,
  "doc": "remove the unicode from the output of JSON using scrapy",
  "code": " 'votes_likes': [u'5340',\n                 u'4041',\n                 u'4080',\n                 u'5055',\n                 u'4385',\n                 u'4784',\n                 u'3842',\n                 u'3734',\n                 u'4081',\n                 u'3731',\n                 u'4580',\n                 u'5279',\n                 u'2540',\n                 u'4345',\n                 u'2068',\n                 u'3715',\n                 u'3249',\n                 u'4232',\n                 u'4025',\n                 u'522',\n                 u'2993',\n                 u'2789',\n                 u'3529',\n                 u'3450',\n                 u'3533'],\n",
  "label": 0
 },
 {
  "idx": 1016,
  "doc": "python beginner - how to read contents of several files into unique lists?",
  "code": "PathwayList = {}\nfor InFileName in FileList:\n    sys.stderr.write(\"Processing file %s\\n\" % InFileName)\n    InFile = open(InFileName, 'r')\n    PathwayList[InFile] = InFile.readlines()\n    InFile.close()\n\nfor filename, contents in PathwayList.items():\n    # do something with contents which is a list of strings\n    print filename, contents  \n",
  "label": 1
 },
 {
  "idx": 1017,
  "doc": "Split file and turn it into dictionary in python",
  "code": "import collections\nwith open(\"sample.txt\", \"r\") as datafile:\n    lines = datafile.read()\n    words = lines.split()\n    words_hist = collections.Counter(words)\n    print words_hist\n",
  "label": 1
 },
 {
  "idx": 1018,
  "doc": "Split file and turn it into dictionary in python",
  "code": "hello this file is good\nfile is is good excellent\n",
  "label": 0
 },
 {
  "idx": 1019,
  "doc": "How to create LinkExtractor rule which based on href in Scrapy",
  "code": ">>> import re\n>>> pattern = re.compile(r'^http://example.com/category/\\?.*?(?=page=\\d+)')\n>>> should_match = [\n...     'http://example.com/category/?sort=a-z&page=1',\n...     'http://example.com/category/?page=1&sort=a-z&cache=1',\n...     'http://example.com/category/?page=1&sort=a-z#'\n... ]\n>>> for url in should_match:\n...     print \"Matches\" if pattern.search(url) else \"Doesn't match\"\n... \nMatches\nMatches\nMatches\n",
  "label": 1
 },
 {
  "idx": 1020,
  "doc": "Finding matching submatrices inside a matrix",
  "code": "In [5]: timeit c = signal.fftconvolve(a, numpy.fliplr(numpy.flipud(b)), 'valid')\n100 loops, best of 3: 6.78 ms per loop\n\nIn [6]: timeit c = signal.correlate(a, b, 'valid')\n10 loops, best of 3: 151 ms per loop\n",
  "label": 0
 },
 {
  "idx": 1021,
  "doc": "Remove and insert lines in a text file",
  "code": "with open(\"file1\") as infile, open(\"file2\",\"w\") as outfile:\n    for i,line in enumerate(infile):\n        if i==2:\n            # 3rd line\n            outfile.write(\"new line1\\n\")\n            outfile.write(\"new line2\\n\")\n            outfile.write(\"new line3\\n\")\n        elif i==3:\n            # 4th line\n            pass\n        else:\n            outfile.write(line)\n",
  "label": 1
 },
 {
  "idx": 1022,
  "doc": "Remove and insert lines in a text file",
  "code": "with open(\"file1\") as infile:\n    with open(\"file2\",\"w\") as outfile:\n        for i,line in enumerate(infile):\n            if i==2:\n                # 3rd line\n                outfile.write(\"new line1\\n\")\n                outfile.write(\"new line2\\n\")\n                outfile.write(\"new line3\\n\")\n            elif i==3:\n                # 4th line\n                pass\n            else:\n                outfile.write(line)\n",
  "label": 1
 },
 {
  "idx": 1023,
  "doc": "Python (Maya) pass flags as variables",
  "code": "mesh_options = {'type':'mesh', 'long':True } \nmeshes = cmds.ls(**mesh_options)\n",
  "label": 1
 },
 {
  "idx": 1024,
  "doc": "creating a wxpython scrolled window (frame) by an event",
  "code": "def newFrame(self, event):\n    self.new_window = wx.Frame(self, title='frame2', pos=(800,0))\n\n    self.scroll = wx.ScrolledWindow(self.new_window, -1,size=(500,500))\n    self.scroll.SetScrollbars(1, 1, 1600, 1400)\n    self.new_window.Layout()\n    self.new_window.Fit()\n    self.new_window.Show()\n",
  "label": 1
 },
 {
  "idx": 1025,
  "doc": "Unique duplicate rows with range",
  "code": "candidates = []\nresults = []\nfor line in my_file:\n    candidates.append(line.split('\\t'))\nfor line in candidates:\n    seen = false\n    for possible_match in results:\n        if matching_line(possible_match, line):\n            seen = true\n    if seen:\n        continue\n    else:\n        results.append(line)\n",
  "label": 0
 },
 {
  "idx": 1026,
  "doc": "Getting specific field from chosen Row in Pyspark DataFrame",
  "code": "from pyspark.sql.functions import col\n\nresult = users_df.where(col(\"_id\") == chosen_user).select(col(\"gender\"))\n",
  "label": 0
 },
 {
  "idx": 1027,
  "doc": "python help django navigation",
  "code": "python manage.py --help\n",
  "label": 1
 },
 {
  "idx": 1028,
  "doc": "python help django navigation",
  "code": ">>> help('help')\n\nWelcome to Python 2.5!  This is the online help utility.\n....\n",
  "label": 1
 },
 {
  "idx": 1029,
  "doc": "python periodic looping idiom?",
  "code": "import time\nimport itertools\n\nminute = 60\n\nfor next_time in itertools.count(time.time() + minute, minute):\n    doSomeWork()\n    sleep_time = next_time - time.time()\n    if sleep_time > 0:\n        time.sleep(sleep_time)\n",
  "label": 1
 },
 {
  "idx": 1030,
  "doc": "PySide custom Tab",
  "code": "self.tabWidget.setStyleSheet(\"background-color: rgb(255, 255, 255);\\n\"\n                                    \"border:1px solid rgb(255, 170, 255);\")\n",
  "label": 1
 },
 {
  "idx": 1031,
  "doc": "detecting POS tag pattern along with specified words",
  "code": "def am_able_to(tagged):\n    return any(['am', 'able', 'to', 'VB'] == [tagged[i][0], tagged[i+1][0], tagged[i+2][0], tagged[i+3][1]] for i in xrange(len(tagged) - 3))\n",
  "label": 0
 },
 {
  "idx": 1032,
  "doc": "matching a multiline make-line variable assignment with a python regexp",
  "code": "def test():\n    s = r\"\"\"    \n\nFOO=a \\    \n\n  b\n\n  \"\"\"\n    import re\n    print repr(s)\n    print '---------------------'\n    regex = re.compile(r'^FOO=(.+)(?<!\\\\)$', re.M)\n    print regex.search(s).group(1)\n    print '---------------------'\n    regex = re.compile(r'^FOO=(.+)(?<!\\\\)$', re.M|re.DOTALL)\n    print regex.search(s).group(1)\n\ntest()\n",
  "label": 1
 },
 {
  "idx": 1033,
  "doc": "Compare string in format HH:MM to time now in python",
  "code": ">>>d=datetime.datetime.strptime('15:30','%H:%M')\n",
  "label": 0
 },
 {
  "idx": 1034,
  "doc": "Use of SQL - IN in python",
  "code": "'(%s)' % ','.join(map(str,x))\n",
  "label": 1
 },
 {
  "idx": 1035,
  "doc": "Use of SQL - IN in python",
  "code": "(1,2,3,4,5,6)\n",
  "label": 0
 },
 {
  "idx": 1036,
  "doc": "mongo - find items who at least match an array of values",
  "code": "{'_id': ObjectId('54fa181014d995a397252a1a'), 'item1': ['a', 'b', 'c']}\n",
  "label": 0
 },
 {
  "idx": 1037,
  "doc": "Convert Country Names to Country Code using Python DictReader/DictWriter",
  "code": "mapping = {country.name: country.alpha2 for country in pycountry.countries}\nfor column in csv_file:\n    print column['name'], mapping.get(column['name'], 'No country found')\n",
  "label": 1
 },
 {
  "idx": 1038,
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "{% for file in files.entryfile_set.all %}\n",
  "label": 0
 },
 {
  "idx": 1039,
  "doc": "What is the best way to fetch/render one-to-many relationships?",
  "code": "entry = models.ForeignKey(Entry, related_name='files')\n",
  "label": 0
 },
 {
  "idx": 1040,
  "doc": "Using MongoEngine Document class methods for custom validation and pre-save hooks",
  "code": "class SomeModel(MyDocument):\n    # fields...\n\n    _pre_save_hooks = [\n        some_callable,\n        another_callable\n    ]\n",
  "label": 0
 },
 {
  "idx": 1041,
  "doc": "Replace character in line inside a file",
  "code": ">>> strs = \"sample4:15\"\n",
  "label": 0
 },
 {
  "idx": 1042,
  "doc": "Django, m2m with same model",
  "code": "class OrderProduct(BaseModel):\n    order = models.ForeignKey(Order)\n    product = models.ForeignKey(Product)\n    quantity = models.IntegerField()\n",
  "label": 0
 },
 {
  "idx": 1043,
  "doc": "Accessing a Dynamically Generated Nested Dictionary",
  "code": "def findTerm(self, term):\n    node = self.tree\n    for c in term:\n        c = c.lower()\n        if re.match(\"[a-z]\",c):\n            if c in node[0]:\n                node = node[0][c]\n            else:\n                return False\n    return node[1] != None\n",
  "label": 0
 },
 {
  "idx": 1044,
  "doc": "Selenium (Python): How to insert value on a hidden input?",
  "code": "from selenium import webdriver\n\ndriver = webdriver.Firefox()\ndriver.get('http://matrix.itasoftware.com/')\nelem = driver.find_element_by_xpath(\n    './/input[@id=\"ita_form_date_DateTextBox_0\"]'\n    '/following-sibling::input[@type=\"hidden\"]')\n\nvalue = driver.execute_script('return arguments[0].value;', elem)\nprint(\"Before update, hidden input value = {}\".format(value))\n\ndriver.execute_script('''\n    var elem = arguments[0];\n    var value = arguments[1];\n    elem.value = value;\n''', elem, '2013-11-26')\n\nvalue = driver.execute_script('return arguments[0].value;', elem)\nprint(\"After update, hidden input value = {}\".format(value))\n",
  "label": 1
 },
 {
  "idx": 1045,
  "doc": "Sort generated numbers using another python generator",
  "code": "def generate(self):\n    while any(self.values):\n        r, index = min(v for v in self.values if v)\n        try:\n            self.values[index] = (self.generators[index].next(), index)\n        except StopIteration:\n            self.values[index] = None\n        yield r\n",
  "label": 0
 },
 {
  "idx": 1046,
  "doc": "Read python function from a text file and assign it to variable",
  "code": ">>> b, = ns.values()  # this will only work if only one name was defined\n>>> b()\n5\n",
  "label": 0
 },
 {
  "idx": 1047,
  "doc": "For loop syntax in Python without using range() or xrange()",
  "code": "lst[i:]\n",
  "label": 0
 },
 {
  "idx": 1048,
  "doc": "Extract domain from body of email",
  "code": "from lxml import html\nfrom urlparse import urlparse\ndoc = html.fromstring(html_data)\nlinks = doc.cssselect(\"a\")\ndomains = set([])\nfor link in links:\n    try: href=link.attrib['href']\n    except KeyError: continue\n    parsed=urlparse(href)\n    domains.add(parsed.netloc)\nprint domains\n",
  "label": 0
 },
 {
  "idx": 1049,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": " return (1, 2, 3, 4, ...)  # don't do this\n return Projection(1, 2, 3, 4, ...)  # do this\n return Projection(last_q=last_q, fcast_yr=f_cast_yr, ...)  # or this\n",
  "label": 0
 },
 {
  "idx": 1050,
  "doc": "Randomize a generator",
  "code": "def random_combinations_sample(lst, element_count, sample_size):\n    result = set()\n    while len(result) < sample_size:\n        indices = random.sample(xrange(len(lst)), element_count)\n        sample = tuple(lst[i] for i in sorted(indices))\n        result.add(sample)\n    return list(result)\n",
  "label": 1
 },
 {
  "idx": 1051,
  "doc": "How to strip a specific word from a string?",
  "code": ">>> import re\n>>> papa = 'papa is a good man'\n>>> app = 'app is important'\n>>> papa3 = 'papa is a papa, and papa'\n>>>\n>>> patt = re.compile('(\\s*)papa(\\s*)')\n>>> patt.sub('\\\\1mama\\\\2', papa)\n'mama is a good man'\n>>> patt.sub('\\\\1mama\\\\2', papa3)\n'mama is a mama, and mama'\n>>> patt.sub('', papa3)\n'is a, and'\n",
  "label": 1
 },
 {
  "idx": 1052,
  "doc": "How can I set a true/false variable with if?",
  "code": "def toggleConsole():\n    toggleConsole.show = not getattr(toggleConsole, \"show\", True)\n    console = win32console.GetConsoleWindow()\n    win32gui.ShowWindow(console, int(toggleConsole.show))\n",
  "label": 1
 },
 {
  "idx": 1053,
  "doc": "How to do a basic query on yahoo search engine using Python without using any yahoo api?",
  "code": "\nPython Programming Language \u2013 Official Website (http://www.python.org/)\nPython - Image Results (http://images.search.yahoo.com/search/images?_adv_prop=image&va=python)\nPython (programming language) - Wikipedia, the free encyclopedia (http://en.wikipedia.org/wiki/Python_(programming_language))\n",
  "label": 0
 },
 {
  "idx": 1054,
  "doc": "Splitting a string @ once using different seps",
  "code": "years, months, days = the_string.split('-')\ndays, time = days.split(' ')\ntime = time.split(':')\n",
  "label": 1
 },
 {
  "idx": 1055,
  "doc": "Replace single quotes with double quotes in python, for use with insert into database",
  "code": "re.sub(\"((?<![(,])'(?![,)]))\", \"''\", s)\n",
  "label": 0
 },
 {
  "idx": 1056,
  "doc": "Split string into array with many char pro items",
  "code": "def split_on_parts(s, *parts):\n    return [s[sum(parts[:p]):sum(parts[:p+1])] for p in range(len(parts))]\n",
  "label": 1
 },
 {
  "idx": 1057,
  "doc": "Split string into array with many char pro items",
  "code": "['hel', 'lo ', 'wor', 'ld']\n['hell', 'o w', 'orld']\n",
  "label": 0
 },
 {
  "idx": 1058,
  "doc": "A list as a key for PySpark's reduceByKey",
  "code": "rdd.map(lambda (k, v): (tuple(k), v)).groupByKey()\n",
  "label": 1
 },
 {
  "idx": 1059,
  "doc": "Insert data from one sorted array into another sorted array",
  "code": "a[a[:,0].searchsorted(b[:,0]),1] = b[:,1]\n",
  "label": 1
 },
 {
  "idx": 1060,
  "doc": "Parsing the json file after a specific time interval",
  "code": "f = open(\"test.json\" , \"w+\")\nf.seek(last_position)\nf.read() # now this will start reading from last position\n",
  "label": 0
 },
 {
  "idx": 1061,
  "doc": "generate lists from 3 dimensional array",
  "code": "array([[[ 1,  0,  2],\n        [ 2,  1,  3],\n        [ 3,  2,  4]],\n\n       [[ 0,  1,  5],\n        [ 0,  1,  6],\n        [ 0,  1,  7]],\n\n       [[ 2,  3,  8],\n        [ 2,  3,  9],\n        [ 2,  3, 10]]])\n",
  "label": 0
 },
 {
  "idx": 1062,
  "doc": "Numpy union arrays in order",
  "code": "d = numpy.array([a, b, c]).T.flatten()\n",
  "label": 1
 },
 {
  "idx": 1063,
  "doc": "Python - compare columns in a text file, loop and pop lists",
  "code": "Pat, Bryant, ID2, 29th April, ...   \nPat, Bryant, ID2, 9th May, ... \nJim, Williams, ID3, 10th March, ...  \nJim, Williams, ID3, 17th March, ...   \nJim, Williams, ID3, 21st March, ...\nUnique IDs: 2\n",
  "label": 0
 },
 {
  "idx": 1064,
  "doc": "Webpy: how to set http status code to 300",
  "code": "class MyHandler:\n    def GET(self):\n        raise MultipleChoices(['http://example.com/', 'http://www.google.com/'])\n",
  "label": 0
 },
 {
  "idx": 1065,
  "doc": "Pandas Dataframe row by row fill new column",
  "code": "buy_ratio = (abs(df[\"Buy\"])  > abs(df[\"Sell\"])) * df[\"Price\"] / df[\"Buy\"]\nsell_ratio = (abs(df[\"Buy\"])  <= abs(df[\"Sell\"])) * df[\"Price\"] / df[\"Sell\"]\ndf[\"Ratio\"] = buy_ratio + sell_ratio\n",
  "label": 1
 },
 {
  "idx": 1066,
  "doc": "Pandas Dataframe row by row fill new column",
  "code": "def f(row):\n  if abs(row[\"Buy\"]) > abs(row[\"Sell\"]):\n    return row[\"Price\"] / row[\"Buy\"]\n  else:\n    return row[\"Price\"] / row[\"Sell\"]\n",
  "label": 1
 },
 {
  "idx": 1067,
  "doc": "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?",
  "code": "f = interpolate.UnivariateSpline(x, y, k=3, s=1)\n",
  "label": 0
 },
 {
  "idx": 1068,
  "doc": "removing \"()\" using python",
  "code": ">>> re.sub('\\(.*\\)', '', s)\n'N1B N 1.2620'\n",
  "label": 0
 },
 {
  "idx": 1069,
  "doc": "regex condition that returns only if a \" [word]\" does not trail at the end",
  "code": "(?<!\\d)\\d{4}-\\d{1,5}(?!\\d)\n",
  "label": 1
 },
 {
  "idx": 1070,
  "doc": "combination of two DF, pandas",
  "code": "In [215]:\n\ndf1 = df1.set_index('B')\ndf['D'] = df['B'].map(df1['D'])\ndf\nOut[215]:\n   A  B  C  D\n0  1  1  3  5\n1  1  1  2  5\n2  1  2  5  6\n3  2  2  7  6\n4  2  3  7  4\n",
  "label": 1
 },
 {
  "idx": 1071,
  "doc": "combination of two DF, pandas",
  "code": "In [206]:\n\ndf.merge(df1, how='left', on='B')\nOut[206]:\n   A  B  C  D\n0  1  1  3  5\n1  1  1  2  5\n2  1  2  5  6\n3  2  2  7  6\n4  2  3  7  4\n",
  "label": 1
 },
 {
  "idx": 1072,
  "doc": "Need help detecting a change in a variable outside of a while loop",
  "code": "if GO_TO_MAX_SPEED and NOT_AT_MAX_SPEED:\n    ACCELERATE\n",
  "label": 0
 },
 {
  "idx": 1073,
  "doc": "Handling months in python datetimes",
  "code": "import datetime\n\ndef get_start_of_previous_month(dt):\n    '''\n    Return the datetime corresponding to the start of the month\n    before the provided datetime.\n    '''\n    previous = dt.date().replace(day=1) - datetime.timedelta(days=1)\n    return datetime.datetime.combine(previous.replace(day=1), datetime.time.min)\n",
  "label": 1
 },
 {
  "idx": 1074,
  "doc": "How do I find the maximum amount of possible correct matches in these arrays?",
  "code": "Size of match: 17\nMatch: {2: 28, 3: 32, 4: 22, 5: 38, 6: 34, 7: 37, 8: 30, 9: 23, 10: 24, 11: 29, 12: 26, 13: 21, 15: 20, 16: 31, 17: 27, 18: 35, 19: 25}\n",
  "label": 0
 },
 {
  "idx": 1075,
  "doc": "TensorFlow Resize image tensor to dynamic shape",
  "code": "from tensorflow.python.ops import control_flow_ops\n",
  "label": 0
 },
 {
  "idx": 1076,
  "doc": "How to read complex numbers from file with numpy?",
  "code": ">>> import pandas as pd\n>>> f.seek(0)\n>>> pd.read_csv(f, delimiter=' ', index_col=0, names=['a', 'b'],\n...             converters={1: parse_pair, 2: parse_pair})\n             a           b\n1  (1.2+0.16j)  (2.8+1.1j)\n2  (2.85+6.9j)  (5.8+2.2j)\n",
  "label": 1
 },
 {
  "idx": 1077,
  "doc": "Numpy drawing from urn",
  "code": "red:    6\ngreen:  1\nblue:   8\n",
  "label": 0
 },
 {
  "idx": 1078,
  "doc": "How to add two Sparse Vectors in Spark using Python",
  "code": "from scipy.sparse import csc_matrix\nfrom pyspark.mllib.regression import LabeledPoint\n\nm1 = csc_matrix((\n   v1.values,\n   (v1.indices, [0] * v1.numNonzeros())),\n   shape=(v1.size, 1))\n\nm2 = csc_matrix((\n   v2.values,\n   (v2.indices, [0] * v2.numNonzeros())),\n   shape=(v2.size, 1))\n\nLabeledPoint(0, m1 + m2)\n",
  "label": 1
 },
 {
  "idx": 1079,
  "doc": "Python : How to create a dynamic list of class values",
  "code": "inst1 = Test(2)  # create 2 and attach it to inst1.i\ninst2 = Test(5)  # create 5 and attach it to inst2.i\nMyList = [inst1.i,inst2.i]  # list of objects: [2 ,5]\n",
  "label": 0
 },
 {
  "idx": 1080,
  "doc": "How to count number of repeated keys in several dictionaries?",
  "code": "from collections import Counter\n\ndicts = [\n    {1: 'url1', 3: 'url2', 7: 'url3', 5: 'url4'},\n    {1: 'url1', 7: 'url3'},\n    {5: 'url4', 10: 'url5'},\n]\n\nresult = Counter()\nfor d in dicts:\n    result.update(d.keys())\n\nprint dict(result)\n",
  "label": 1
 },
 {
  "idx": 1081,
  "doc": "How to count number of repeated keys in several dictionaries?",
  "code": "from collections import Counter\nfrom itertools import chain\n\ndicts = [\n    {1: 'url1', 3: 'url2', 7: 'url3', 5: 'url4'},\n    {1: 'url1', 7: 'url3'},\n    {5: 'url4', 10: 'url5'},\n]\n\nresult = Counter(chain.from_iterable(dicts))\n\nprint dict(result)\n",
  "label": 1
 },
 {
  "idx": 1082,
  "doc": "Python: Find a Sentence between some website-tags using regex",
  "code": "doc = BeautifulSoup(html)\nfor a in doc.findAll('a', 'question-hyperlink'):\n    print a.text\n",
  "label": 1
 },
 {
  "idx": 1083,
  "doc": "Python: Find a Sentence between some website-tags using regex",
  "code": "a = re.finditer('<a.+?question-hyperlink\">(.+?)</a>', html)\nfor m in a: \n    print m.group(1)\n",
  "label": 1
 },
 {
  "idx": 1084,
  "doc": "Turning binary string into an image with PIL",
  "code": "import Image\nimport numpy as np\n\nvalue = \"0110100001100101011011000110110001101111\"\n\ncarr = np.array([(255,255,255), (0,0,0)], dtype='uint8')\ndata = carr[np.array(map(int, list(value)))].reshape(-1, 8, 3)\nimg = Image.fromarray(data, 'RGB')\nimg.save('/tmp/out.png', 'PNG')\n",
  "label": 1
 },
 {
  "idx": 1085,
  "doc": "Turning binary string into an image with PIL",
  "code": "import Image\n\nvalue = \"0110100001100101011011000110110001101111\"\n\ncmap = {'0': (255,255,255),\n        '1': (0,0,0)}\n\ndata = [cmap[letter] for letter in value]\nimg = Image.new('RGB', (8, len(value)//8), \"white\")\nimg.putdata(data)\nimg.show()        \n",
  "label": 1
 },
 {
  "idx": 1086,
  "doc": "How to generate list combinations in Python",
  "code": ">>> from itertools import product\n>>> list(product([1, 0], repeat=2))\n[(1, 1), (1, 0), (0, 1), (0, 0)]\n",
  "label": 1
 },
 {
  "idx": 1087,
  "doc": "Invoking top-level function by name in Python",
  "code": "getattr(sys.modules[__name__], func_name)()\n",
  "label": 1
 },
 {
  "idx": 1088,
  "doc": "Invoking top-level function by name in Python",
  "code": "globals()[func_name]()\n",
  "label": 1
 },
 {
  "idx": 1089,
  "doc": "Reading netCDF and creating \"virtual / pseudo\" csv files",
  "code": "import subprocess\nproc = subprocess.Popen(\"/usr/bin/tac\", stdin=subprocess.PIPE)  # Output will go to stdout\nproc.communicate(\"hello\\nworld\\n\")  # This data goes to the subprocess.\n",
  "label": 1
 },
 {
  "idx": 1090,
  "doc": "flask/jinja: creating a leaderboard out of an unordered dict object",
  "code": "{'user': '<user1>', 'negative': 8, 'positive': 32, 'rating': 80.0}\n",
  "label": 0
 },
 {
  "idx": 1091,
  "doc": "flask/jinja: creating a leaderboard out of an unordered dict object",
  "code": "sorted([dict([('user', k)] + list(v.items())) for k, v in a['users'].items()], key=lambda x: x['rating'])\n",
  "label": 1
 },
 {
  "idx": 1092,
  "doc": "Periodically execute function in thread in real time, every N seconds",
  "code": "The simple solution\nimport threading\n\ndef work (): \n  threading.Timer(0.25, work).start ()\n  print \"stackoverflow\"\n\nwork ()\n",
  "label": 1
 },
 {
  "idx": 1093,
  "doc": "Abaqus: script to select elements on a surface",
  "code": "  instance.elementSets['FACENAME'].elements\n",
  "label": 0
 },
 {
  "idx": 1094,
  "doc": "Abaqus: script to select elements on a surface",
  "code": "  instance.sets['facename'].elements\n",
  "label": 0
 },
 {
  "idx": 1095,
  "doc": "How do I write a logging middleware for pyramid/pylons 2?",
  "code": "from paste.httpserver import serve\nfrom pyramid.response import Response\nfrom pyramid.view import view_config\n\n@view_config()\ndef hello(request):\n    return Response('Hello')\n\nif __name__ == '__main__':\n    from pyramid.config import Configurator\n    config = Configurator()\n    config.scan()\n    app = config.make_wsgi_app()\n\n    # Put middleware\n    app = LoggerMiddleware(app)\n\n    serve(app, host='0.0.0.0')\n",
  "label": 0
 },
 {
  "idx": 1096,
  "doc": "Alternatives to cartesian in Spark?",
  "code": "def swap(x):\n    \"\"\"Given a tuple (x1, x2) return (x2, 1)\"\"\"\n    return (x[1], 1)\n\ndef filter_source(x):\n    \"\"\"Check if s1 < s2 in (x, (s1, s2))\"\"\"\n    return x[1][0] < x[1][1]\n\ndef reshape(kv):\n    \"\"\"Reshape ((k1, k2), v) to get final result\"\"\"\n    ((k1, k2), v) = kv\n    return (k1, (k2, v))\n",
  "label": 0
 },
 {
  "idx": 1097,
  "doc": "MySQL select all components of a product",
  "code": "SELECT t4.alt_bilesen\n  FROM urunler_seviyeler t1\n  JOIN urunler_seviyeler t2 ON t2.parcano = t1.alt_bilesen\n  JOIN urunler_seviyeler t3 ON t3.parcano = t2.alt_bilesen\n  JOIN urunler_seviyeler t4 ON t4.parcano = t3.alt_bilesen\n WHERE t1.parcano = 'E40'\n",
  "label": 0
 },
 {
  "idx": 1098,
  "doc": "sound way to feed commands to twisted ssh after reactor.run()",
  "code": "from twisted.application.service import Application\n\nfrom thatmodule import ThingDoer\n\napplication = Application(\"Do Things\")\nThingDoer().setServiceParent(application)\n",
  "label": 0
 },
 {
  "idx": 1099,
  "doc": "sound way to feed commands to twisted ssh after reactor.run()",
  "code": "$ twistd -ny thatfile.tac\n",
  "label": 0
 },
 {
  "idx": 1100,
  "doc": "regex - how to recognise a pattern until a second one is found",
  "code": "show_p=re.compile(\"^(.*)\\.s(\\d*)e(\\d*).*?([^\\.]*)$\")\nshow_p.match(x).groups()\n",
  "label": 1
 },
 {
  "idx": 1101,
  "doc": "how to grab alternating child tags in python beautifulsoup",
  "code": ">>> from bs4 import BeautifulSoup\n>>> soup = BeautifulSoup('''\\\n... <div>\n...     <h3>First header</h3>\n...     <div>First div to go with a header</div>\n...     <h3>Second header</h3>\n...     <div>Second div to go with a header</div>\n... </div>\n... ''')\n>>> for header in soup.select('div h3'):\n...     next_div = header.find_next_sibling('div')\n...     print(header.text, next_div.text)\n... \nFirst header First div to go with a header\nSecond header Second div to go with a header\n",
  "label": 1
 },
 {
  "idx": 1102,
  "doc": "to get max number after concatenation in list",
  "code": "import itertools\n\nnums = [4, 94, 9, 14, 1]\nmax_num = 0\nmax_nums = None\nfor p in itertools.permutations(map(str, nums)):\n    num = int(''.join(p))\n    if num > max_num:\n        max_num = num\n        max_nums = p\nprint map(int, max_nums)\nprint max_num\n",
  "label": 1
 },
 {
  "idx": 1103,
  "doc": "Python : match string inside double quotes and bracket",
  "code": "('\\u4f5c\\u70ba', '', 'act')\n('\\u884c\\u653f\\u4e0a\\u8a34\\u59d4\\u54e1\\u6703', '', 'Administrative Appeals Board')\n('\\u6210\\u4eba', '\\u6210\\u5e74\\u4eba', 'adult')\n('\\u98db\\u6a5f', '\\u822a\\u7a7a\\u5668', 'aircraft')\n('\\u5916\\u7c4d\\u4eba\\u58eb', '', 'alien')\n('\\u4fee\\u8a02', '', 'amend')\n('\\u53ef\\u902e\\u6355\\u7684\\u7f6a\\u884c', '', 'arrestable offence')\n('\\u300a\\u57fa\\u672c\\u6cd5\\u300b', '', 'Basic Law')\n('\\u884c\\u653f\\u9577\\u5b98', '', 'Chief Executive')\n",
  "label": 0
 },
 {
  "idx": 1104,
  "doc": "Find selected features by RandomizedLogisticRegression",
  "code": "from sklearn.datasets import load_iris\nfrom sklearn.linear_model import RandomizedLogisticRegression\n\niris = load_iris()\nX, y = iris.data, iris.target\n\nclf = RandomizedLogisticRegression()\nclf.fit(X,y)\nprint clf.get_support()\n\n#prints [False  True  True  True]\n",
  "label": 1
 },
 {
  "idx": 1105,
  "doc": "Find selected features by RandomizedLogisticRegression",
  "code": "print clf.get_support(indices=True)\n#prints [1 2 3]\n",
  "label": 0
 },
 {
  "idx": 1106,
  "doc": "How to get QTreeWidgetItem if its ItemWidget is known",
  "code": "foundQTreeWidgetItem  = self.findItemWidget(findQWidget) # Don't part argument currentQTreeWidgetItem use in recursive loop\n",
  "label": 0
 },
 {
  "idx": 1107,
  "doc": "Python: Iterating through a set so we don't compare the same objects multiple times?",
  "code": "aSet = set([1,2,3,4])\nlist(combinations(aSet, 2))\n# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n",
  "label": 0
 },
 {
  "idx": 1108,
  "doc": "Accessing an object created in another module using python",
  "code": "# Desired Module:\n\ndesired_object = None\ndef my_func():\n    global desired_object\n    desired_object = SomeObject()\n",
  "label": 0
 },
 {
  "idx": 1109,
  "doc": "Django permissions mixin on CBV, how to apply on 'publish blog' method",
  "code": "class PublishView(UpdateView):\n\n    model = Blog\n\n    def post(self, request, *args, **kwargs):\n        pk = self.kwargs.get('pk', None)\n        Blog.objects.filter(pk=pk).update(publish_date=datetime.datetime.now())\n        return HttpResponseRedirect(\"/blogs/\" + pk)\n",
  "label": 0
 },
 {
  "idx": 1110,
  "doc": "how to access nargs of optparse-add_action?",
  "code": "categories_opt = parser.add_option(..., nargs=4)\n\n# ...\n\nif not options.categories:\n    options.categories = [raw_input('Enter input: ') for _ in range(categories_opt.nargs)]\n",
  "label": 0
 },
 {
  "idx": 1111,
  "doc": "Sorting list of dictionaries with primary key from list of keywords and alphabetical order as secondary key",
  "code": "[{'id': 9, 'name': 'one project', 'otherkey': 'othervalue'},\n {'id': 3, 'name': 'project one', 'otherkey': 'othervalue'},\n {'id': 5, 'name': 'project two', 'otherkey': 'othervalue'},\n {'id': 1, 'name': 'project three', 'otherkey': 'othervalue'},\n {'id': 6, 'name': 'abc project', 'otherkey': 'othervalue'}]\n",
  "label": 0
 },
 {
  "idx": 1112,
  "doc": "Attach callback to Counter() value",
  "code": ">>> c = MagicCounter()\n>>> c['a'] = 1\n>>> c['b'] = 1\n>>> c['c'] = 1\n>>> c\nMagicCounter({'a': 1, 'c': 1, 'b': 1})\n>>> c['abc'] += 1\n>>> c\nMagicCounter({'a': 2, 'c': 2, 'b': 2, 'abc': 1})\n",
  "label": 0
 },
 {
  "idx": 1113,
  "doc": "how to write a conditional list comprehension, with \"extend\" functionality",
  "code": "nouns = [x for key, value in pos_dictionary.iteritems() if key.startswith('NN') for x in value]\n",
  "label": 1
 },
 {
  "idx": 1114,
  "doc": "making new column in pandas dataframes based on filter",
  "code": ">>> (df[cols] > 0).all(axis=1)\n0     True\n1     True\n2     True\n3    False\n4    False\ndtype: bool\n",
  "label": 0
 },
 {
  "idx": 1115,
  "doc": "Using Twitter Bootstrap radio buttons with Flask",
  "code": "<button type=\"button\" class=\"btn{{\" active\" if button in active_btns}}\" name=\"choice1\" value=\"{{ button }}\">{{ button }}</button>\n",
  "label": 0
 },
 {
  "idx": 1116,
  "doc": "Print tree without recursion",
  "code": "def print_nonrec_breathfirst(node):\n    queue = [node]\n    while queue:\n        node, queue = queue[0], queue[1:]\n        print node\n        for c in node.children:\n            queue.append(c)\n",
  "label": 1
 },
 {
  "idx": 1117,
  "doc": "python: how can I get a new value in round robin style every time i invoke the script",
  "code": "import os\nimport collections\n\nsubnets_file = \"subnets.txt\"\n\n# Load the subnets file into a deque\nwith open(subnets_file, 'r') as f:\n    subnets = collections.deque(f.read().splitlines())\n\n# Print the top subnet\nprint subnets[0]\n\n# Rotate the subnets\nsubnets.rotate(-1)\n\n# Save the rotated subnets\nwith open(subnets_file, 'w') as f:\n    for s in subnets:\n        f.write(\"%s\\n\" % s)\n",
  "label": 1
 },
 {
  "idx": 1118,
  "doc": "QTableView item selection based on a QStandardItem data attribute",
  "code": "def populate(self):\n    self.m.clear()\n    root = self.m.invisibleRootItem()\n    selModel = self.t.selectionModel()\n    for item in self.l:\n        e = QtGui.QStandardItem()\n        e.setText(item[0])\n        root.appendRow(e)\n\n        if item[1]:\n            idx = self.m.indexFromItem(e)\n            selModel.select(idx, selModel.Select)\n",
  "label": 0
 },
 {
  "idx": 1119,
  "doc": "Get the indicies of a dataframe to use on a list",
  "code": "import pandas as pd\na = [['Lazy', 'Brown', 'Fox'], ['Jumps', 'Over'], ['Big', 'Blue', 'Sea']]\ndf = pd.DataFrame({'Name':list('ABC'), 'Group':[1,1,2]})\ndf['a'] = a\nprint(df.groupby(['Group'])['a'].sum())\n",
  "label": 1
 },
 {
  "idx": 1120,
  "doc": "Get the indicies of a dataframe to use on a list",
  "code": "In [322]: ['Lazy', 'Brown', 'Fox'] + ['Jumps', 'Over']\nOut[322]: ['Lazy', 'Brown', 'Fox', 'Jumps', 'Over']\n",
  "label": 0
 },
 {
  "idx": 1121,
  "doc": "Get the indicies of a dataframe to use on a list",
  "code": "Group\n1    [Lazy, Brown, Fox, Jumps, Over]\n2                   [Big, Blue, Sea]\nName: a, dtype: object\n",
  "label": 0
 },
 {
  "idx": 1122,
  "doc": "retrive minimum maximum values of a ctype",
  "code": "dt = 'UI32'\nprint( getattr(MaxVal, dt) )\n",
  "label": 0
 },
 {
  "idx": 1123,
  "doc": "python for loop using lambda syntax",
  "code": "[['1', '1377877381', 'off', '0'],\n ['2', '1377886582', 'on', '0'],\n ['3', '1376238596', 'off', '0'],\n ['4', '1377812526', 'off', '0']]\n",
  "label": 0
 },
 {
  "idx": 1124,
  "doc": "Iterate through XML child of a child tags in Python",
  "code": "print ET.tostring(grandchild).strip()\n",
  "label": 0
 },
 {
  "idx": 1125,
  "doc": "How to convert pandas single column data frame to series or numpy vector",
  "code": "tdf['s1']\n",
  "label": 1
 },
 {
  "idx": 1126,
  "doc": "How to run executable from python and pass it arguments asked for?",
  "code": "def create_grid(*commands):\n    process = subprocess.Popen(\n        ['grid.exe'],\n        stdin=subprocess.PIPE)\n\n    process.communicate('\\n'.join(commands) + '\\n')\n",
  "label": 0
 },
 {
  "idx": 1127,
  "doc": "Selecting text nodes with text not equal to a value",
  "code": "from lxml import etree\n\ndata = \"\"\"\n<detection-run>\n    <wireless-network>\n        <SSID>\n            <encryption>WEP</encryption>\n        </SSID>\n    </wireless-network>\n    <wireless-network>\n        <SSID>\n            <encryption>WPA-PSK</encryption>\n        </SSID>\n    </wireless-network>\n    <wireless-network>\n        <SSID>\n            <encryption>WPA2-PSK</encryption>\n        </SSID>\n    </wireless-network>\n</detection-run>\n\"\"\"\n\nroot = etree.fromstring(data)\nprint root.xpath('//encryption[text()!=\"WPA-PSK\"]/text()')\n",
  "label": 1
 },
 {
  "idx": 1128,
  "doc": "Detecting geographic clusters",
  "code": "map(\"county\", plot=T )\nrect(-122.644,36.7307, -121.46,37.98, col=c(\"red\"))\n",
  "label": 0
 },
 {
  "idx": 1129,
  "doc": "Is there a better way to convert from decimal to binary in python?",
  "code": "def grouper(n, iterable, fillvalue=None):\n    # Source: http://docs.python.org/library/itertools.html#recipes\n    \"grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx\"\n    return itertools.izip_longest(*[iter(iterable)]*n,fillvalue=fillvalue)\n\ndef bits2str(bits):\n    for b in grouper(8,bits):\n        yield chr(int(''.join(map(str,b)),2))\n",
  "label": 0
 },
 {
  "idx": 1130,
  "doc": "Dealing with Windows line-endings in Python",
  "code": "\"<ParentRedirec\\r\\ntSequenceID>\"\n",
  "label": 0
 },
 {
  "idx": 1131,
  "doc": "How to import cython function to cython script",
  "code": "cdef trol(int * i)\n",
  "label": 0
 },
 {
  "idx": 1132,
  "doc": "How to import cython function to cython script",
  "code": "from noo cimport trol\n",
  "label": 0
 },
 {
  "idx": 1133,
  "doc": "On using a string as an integer counter (aka index) in a for loop",
  "code": "arrays = {}\nfor file in os.listdir(directoryPath):\n    if file.endswith(\".csv\"):\n       arrays[file] = numpy.genfromtxt(file, delimiter=',')[:,2]\n",
  "label": 1
 },
 {
  "idx": 1134,
  "doc": "Merge some part of the list together using python",
  "code": ">>> from collections import defaultdict\n>>> raw = ['opst tops', 'opst opts', 'opst pots', 'eip pie', 'eip epi']\n>>> words = defaultdict(list)\n>>> for entry in raw:\n...     key, word = entry.split()\n...     words[key].append(word)\n... \n>>> [' '.join(v) for v in words.values()]\n['pie epi', 'tops opts pots']\n",
  "label": 1
 },
 {
  "idx": 1135,
  "doc": "Extracting parts of text between specific delimiters from a large text file with custom delimiters and writing it to another file using Python",
  "code": "with open('myInputFileName') as myInputFile, \\\n     open('myOutputFileName', 'w') as myOutputFile:\n  for withStatute, cite in eachCite(myInputFile):\n    if withStatute:\n      myOutputFile.write(\"found cite with statute:\\n\")\n      myOutputFile.write(cite)\n",
  "label": 0
 },
 {
  "idx": 1136,
  "doc": "Checking if function was not called for x amount of time",
  "code": "def remembercalltimes(f, *args, **kwargs):\n    \"\"\"A decorator to help a function remember when it was last called.\"\"\"\n    def inner(*args, **kwargs):\n        inner.last_called = datetime.now()\n        return f(*args, **kwargs)\n    return inner\n\n@remembercalltimes\ndef myfun():\n    # \u2026 do things\n\n>>> myfun()\n>>> myfun.last_called\n>>> datetime.datetime(2014, 3, 19, 11, 47, 5, 784833)\n",
  "label": 1
 },
 {
  "idx": 1137,
  "doc": "How to modify the metavar for a positional argument in pythons argparse?",
  "code": "import argparse\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description = \"Print a range.\")\n\n    parser.add_argument(\"start\", type = int, help = \"Specify start.\", )\n    parser.add_argument(\"stop\", type = int, help = \"Specify stop.\", )\n    parser.add_argument(\"step\", type = int, help = \"Specify step.\", )\n\n    args=parser.parse_args()\n    print(args)\n",
  "label": 1
 },
 {
  "idx": 1138,
  "doc": "Inheriting context variables inside custom template tags",
  "code": "@register.simple_tag(takes_context=True)\ndef current_time(context, format_string):\n    timezone = context['timezone']\n    return your_get_current_time_method(timezone, format_string)\n",
  "label": 1
 },
 {
  "idx": 1139,
  "doc": "Python find closest match out of list",
  "code": "from functools import partial\ndef difference_func(test_color, other_color):\n    return ???\n\nresult = min(colors, key=partial(difference_func, test_color))\n",
  "label": 0
 },
 {
  "idx": 1140,
  "doc": "Use regex backreferences to create array",
  "code": ">>> my_list=[\"\\tLocation\\tNext Available Appointment: Date\\n\",\"\\tLocation2\\tNext Available Appointment: Date2\\n\"]\n>>> [re.findall(r'^\\t(.*)\\t.*: (.*)$',i) for i in my_list]\n[[('Location', 'Date')], [('Location2', 'Date2')]]\n",
  "label": 0
 },
 {
  "idx": 1141,
  "doc": "Use regex backreferences to create array",
  "code": "import re\n[re.findall(r'^\\t(.*)\\t.*: (.*)$',i) for i in my_list]\n",
  "label": 1
 },
 {
  "idx": 1142,
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "s = set(range(0, 100))\nlast5 = []\ndef get_next_number():\n    reduced_list = list(s - set(last5))\n    i = randint(0, len(reduced_list) - 1)\n    last5.append(reduced_list[i])\n    if len(last5) > 5:\n        last5.pop(0)\n    return reduced_list[i]\n",
  "label": 1
 },
 {
  "idx": 1143,
  "doc": "To sum column with condition",
  "code": "with open('data.txt') as f:\n    next(f)\n    d=dict()\n    for x in f:\n        if x.split()[0] not in d:\n            d[x.split()[0]]=float(x.split()[2])\n        else:\n            d[x.split()[0]]+=float(x.split()[2])\n",
  "label": 1
 },
 {
  "idx": 1144,
  "doc": "How to convert a list of datetime.datetime objects to date in Python?",
  "code": "f = open (file,'r')\nwith open (output,'wt') as m:\n    for line in f:\n        line = line.strip('\\n')\n        domain = line.split(';')\n        try:\n            w = pythonwhois.get_whois(domain)\n            c_date = (w['creation_date'])\n            print (domain,c_date[0].strftime('%Y/%m/%d'))\n\n        except:\n            pass\n",
  "label": 1
 },
 {
  "idx": 1145,
  "doc": "Update a Pyspark DF Column based on an Array in another column",
  "code": "df = df.withColumn('temp', split(df.fieldList, ','))\ndf = df.withColumn('cols', explode(df.temp))\ndf = df.withColumn('col_value', split(df.cols, '='))\ndf = df.withColumn('deltaCol', df.col_value[0])\n       .withColumn('deltaValue',df.col_value[1])\n",
  "label": 1
 },
 {
  "idx": 1146,
  "doc": "Update a Pyspark DF Column based on an Array in another column",
  "code": ">>> res = sqlContext.sql(\"select id, table, user, changeDate, max(value2) as value2, max(value) as value, max(name) as name \\\n... from (select id, table, user, changeDate, case when trim(deltaCol) == 'value2' then deltaValue else Null end value2,\\\n... case when trim(deltaCol) == 'value' then deltaValue else Null end value,\\\n... case when trim(deltaCol) == 'name' then deltaValue else Null end name from delta) t group by id, table, user, changeDate\")\n",
  "label": 0
 },
 {
  "idx": 1147,
  "doc": "Python \u2014 Randomly fill 2D array with set number of 1's",
  "code": "board = [1]*16 + 48*[0]\nrandom.shuffle(board)\nboard = [board[i:i+8] for i in xrange(0, 64, 8)]\n",
  "label": 1
 },
 {
  "idx": 1148,
  "doc": "Python \u2014 Randomly fill 2D array with set number of 1's",
  "code": "board = [[0]*8 for i in xrange(8)]\nfor pos in random.sample(xrange(64), 16):\n    board[pos//8][pos%8] = 1\n",
  "label": 1
 },
 {
  "idx": 1149,
  "doc": "Making use of piped data in python",
  "code": "python echo.py < test.txt\n",
  "label": 0
 },
 {
  "idx": 1150,
  "doc": "SCons to generate variable number of targets",
  "code": "./\n|-SConstruct\n|-src/\n| |-SConscript\n| |-source.txt\n|-build/\n",
  "label": 0
 },
 {
  "idx": 1151,
  "doc": "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood",
  "code": "board = [[1,0]*2000]*1000\n",
  "label": 0
 },
 {
  "idx": 1152,
  "doc": "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood",
  "code": ">>> pprint(getNeighbour(board, 0, 0, 1))\n[0]\n[1, 0] (expected)\n>>> pprint(getNeighbour(board, 2, 2, 1))\n[0, 1, 0]\n[0, 0]\n[0, 1, 0] (expected)\n>>> \n",
  "label": 0
 },
 {
  "idx": 1153,
  "doc": "How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields",
  "code": "\n1Kb76YK9a4mhrif766m321AMocNvzeQxqV\n",
  "label": 0
 },
 {
  "idx": 1154,
  "doc": "How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields",
  "code": "\nQ: 0283437893b491218348bf5ff149325e47eb628ce36f73a1a927ae6cb6021c7ac4\nRIPEMD-160(SHA-256(Q)): cbe57ebe20ad59518d14926f8ab47fecc984af49\nSignature verified correctly: True\n",
  "label": 0
 },
 {
  "idx": 1155,
  "doc": "What is the standard way to add N seconds to datetime.time in Python?",
  "code": "import datetime\n\ndef addSecs(tm, secs):\n    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)\n    fulldate = fulldate + datetime.timedelta(seconds=secs)\n    return fulldate.time()\n\na = datetime.datetime.now().time()\nb = addSecs(a, 300)\nprint a\nprint b\n",
  "label": 1
 },
 {
  "idx": 1156,
  "doc": "Splitting a list in python",
  "code": "def split_list(l, sep):\n    i = 0\n    try:\n        while True:\n            j = l.index(sep, i)\n            yield l[i:j]\n            i = j + 1\n    except ValueError:\n        yield l[i:]\n",
  "label": 1
 },
 {
  "idx": 1157,
  "doc": "Splitting a list in python",
  "code": "['(', '2', '.', 'x', '.', '(', '3', '-', '1', ')']\n['4', ')', '/', '3', '.', 'x', '^', '2']\n",
  "label": 0
 },
 {
  "idx": 1158,
  "doc": "Splitting a list in python",
  "code": "def split_list(l, sep):\n    current = []\n    for x in l:\n        if x == sep:\n            yield current\n            current = []\n        else:\n            current.append(x)\n    yield current\n",
  "label": 1
 },
 {
  "idx": 1159,
  "doc": "MongoDB data Posting",
  "code": "names = [\n    {'name': name0, 'qty': qty0, ...}\n    {'name': name1, 'qty': qty1, ...}\n    {'name': name2, 'qty': qty2, ...}\n    ...\n]\ninsert_names(names)\n",
  "label": 0
 },
 {
  "idx": 1160,
  "doc": "SqlAlchemy Dynamic Where",
  "code": ">>> field in table.c\nTrue\n>>> 'id' in table.c\nTrue\n>>> 'nothere' in table.c\nFalse\n",
  "label": 0
 },
 {
  "idx": 1161,
  "doc": "Compare list w/ sublist",
  "code": "for match in listb_dict.viewkeys() & lista_set:\n    print match, listb_dict[match]\n",
  "label": 0
 },
 {
  "idx": 1162,
  "doc": "Outputting Multi-row CSV Files from Multiple Dictionaries",
  "code": "import csv\n\nsymbol = [\"msft\", \"cvx\", \"baba\"]\nheader = [\"symbol\",\"ev_ebitda\",\"asset\"]\n\nwith open('output.csv', 'wb') as f_output:\n    csv_output = csv.DictWriter(f_output, fieldnames=header)\n    csv_output.writeheader()\n\n    for s in symbol:\n        row = {'asset': 60, 'ev_ebitda': 40, 'symbol': s}\n        csv_output.writerow(row)\n",
  "label": 1
 },
 {
  "idx": 1163,
  "doc": "Dynamic field calculations in Django",
  "code": "class MyModel(models.Model):\n    ...\n    @property\n    def priority(self):\n        return (1 + (date.today() - self.reset_date) / self.days_to_expiration) * self.importance\n",
  "label": 0
 },
 {
  "idx": 1164,
  "doc": "Python regex: How to match an empty string?",
  "code": "(abc_)?\n",
  "label": 0
 },
 {
  "idx": 1165,
  "doc": "writing csv output python",
  "code": "writer = csv.DictWriter(ouf, ['Name'] + months[5:9])\n",
  "label": 0
 },
 {
  "idx": 1166,
  "doc": "writing csv output python",
  "code": "\nwith open(\"data-out.csv\", \"r\") as f:\n    print(f.read())\n\nName,May,June,July,August\nABC,7500,1000,,\nDEF,500,,3000,\nGHI,,3500,,5000\nTotal,8000,4500,3000,5000\n",
  "label": 0
 },
 {
  "idx": 1167,
  "doc": "Compare values in 2 columns and output the result in a third column in pandas",
  "code": "    a_id b_received c_consumed  output\n0    sam       soap        oil       1\n1    sam        oil        NaN       1\n2    sam      brush       soap       0\n3  harry        oil      shoes       1\n4  harry      shoes        oil       1\n5  alice       beer       eggs       0\n6  alice      brush      brush       1\n7  alice       eggs        NaN       1\n",
  "label": 0
 },
 {
  "idx": 1168,
  "doc": "Python transition matrix",
  "code": "b = [[0 for _ in xrange(3)] for _ in xrange(3)]\nfor (x,y), c in Counter(zip(a, a[1:])).iteritems():\n    b[x-1][y-1] = c\n\nprint b\n[[0, 2, 1], [1, 2, 1], [2, 0, 0]]\n",
  "label": 1
 },
 {
  "idx": 1169,
  "doc": "csv to sparse matrix in python",
  "code": "#!/usr/bin/env python\n\nimport csv\nfrom scipy import sparse\n\nrows, columns = 10, 100\nmatrix = sparse.lil_matrix( (rows, columns) )\n\ncsvreader = csv.reader(open('1938894-simplified.csv'))\nfor line in csvreader:\n    row, column = map(int, line)\n    matrix.data[row].append(column)\n\nprint matrix.data\n",
  "label": 1
 },
 {
  "idx": 1170,
  "doc": "Selecting a subset of functions from a list of functions in python",
  "code": "applyfs([mean, std, var, fxn4 ...], mylist)\n",
  "label": 0
 },
 {
  "idx": 1171,
  "doc": "Flask-WTF: how pass structered object to form",
  "code": "class ChannelForm(Form):    \n    _id         = HiddenField()\n    name        = TextField(_('channel name'))    \n    CITY1adapt  = TextField(_('adapt link')) \n    CITY2adapt  = TextField(_('adapt link'))\n    #and so on\n\n    submit      = SubmitField(_('Save'))\n",
  "label": 0
 },
 {
  "idx": 1172,
  "doc": "Fast linear interpolation in Numpy / Scipy \"along a path\"",
  "code": "interp_checked\n100 loops, best of 3: 8.37 ms per loop\n\n%timeit doit()\n100 loops, best of 3: 5.31 ms per loop\n",
  "label": 0
 },
 {
  "idx": 1173,
  "doc": "Fast linear interpolation in Numpy / Scipy \"along a path\"",
  "code": "g(a) = cc[0]*abs(a-aa[0]) + cc[1]*abs(a-aa[1]) + cc[2]*abs(a-aa[2])\n",
  "label": 0
 },
 {
  "idx": 1174,
  "doc": "Fast linear interpolation in Numpy / Scipy \"along a path\"",
  "code": "10 loops, best of 3: 110 ms per loop  \ninterp_checked\n10000 loops, best of 3: 83.9 \u00b5s per loop\nscipy_interpn\n1000 loops, best of 3: 678 \u00b5s per loop\nOutput allclose:\n[True, True, True]\n",
  "label": 0
 },
 {
  "idx": 1175,
  "doc": "Remove following duplicates in a tuple",
  "code": "def replace_dupes(ax):\n    result = []\n    seen = set()\n    for x in ax:\n        if x in seen:\n            result.append('')\n        else:\n            seen.add(x)\n            result.append(x)\n    return result\n\nax = ('0','1','1','1','2','2','2','3')\nprint(replace_dupes(ax))\n# ['0', '1', '', '', '2', '', '', '3']\n",
  "label": 1
 },
 {
  "idx": 1176,
  "doc": "How to check if elements of a list are in a string",
  "code": "black_list = [\"ab:\", \"cd:\", \"ef:\", \"gh:\"]\n\nfor line in some_file:\n    if \":\" in line and not any(x in line for x in black_list):\n        pass\n",
  "label": 1
 },
 {
  "idx": 1177,
  "doc": "How to check if elements of a list are in a string",
  "code": "for line in some_file:\n    if \":\" in line and all(x not in line for x in black_list):\n        pass\n",
  "label": 1
 },
 {
  "idx": 1178,
  "doc": "Exponential Decay on Python Pandas DataFrame",
  "code": "N(2) = N(2) + N(1) * exp(-0.05)\nN(3) = N(3) + (N(2) + N(1) * exp(-0.05))*exp(-0.05)\nN(3) = N(3) + N(2)*exp(-0.05) + N(1)*exp(-0.1)\nN(4) = ...and so on\n",
  "label": 0
 },
 {
  "idx": 1179,
  "doc": "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?",
  "code": " import foo_core\n import gtk # or whatever\n\n def main()\n     # build the GUI\n     # real work is done by foo_core under control of the GUI\n\n if __name__ == \"__main__\":\n     main()\n",
  "label": 0
 },
 {
  "idx": 1180,
  "doc": "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?",
  "code": "try:\n    import foo_gui\n    foo_gui.main()\nexcept ImportError:\n    import foo_cli\n    foo_cli.main()\n",
  "label": 0
 },
 {
  "idx": 1181,
  "doc": "Counting how many unique identifiers there are by merging two columns of data?",
  "code": "import csv\n\nuniq = {} #Create an empty dictionary, which we will use as a hashmap as Python dictionaries support key-value pairs.\n\nifile = open('data.csv', 'r') #whatever your CSV file is named.\nreader = csv.reader(ifile)\n\nfor row in reader:\n    joined = row[0] + row[1] #The joined string is simply the first and second columns in each row.\n    #Check to see that the key exists, if it does increment the occurrence by 1\n    if joined in uniq.keys():\n        uniq[joined] += 1\n    else:\n        uniq[joined] = 1 #This means the key doesn't exist, so add the key to the dictionary with an occurrence of 1\n\nprint uniq #Now output the results\n",
  "label": 1
 },
 {
  "idx": 1182,
  "doc": "Scipy: Centroid of convex hull",
  "code": "class CHull(ConvexHull):\n\n    def __init__(self, points):\n        ConvexHull.__init__(self, points)\n\n    def centrum(self):\n\n        c = []\n        for i in range(self.points.shape[1]):\n            c.append(np.mean(self.points[self.vertices,i]))\n\n        return c\n\n hull = CHull(points)\n c = hull.centrum()\n",
  "label": 0
 },
 {
  "idx": 1183,
  "doc": "Intersection between multiple files",
  "code": "for f in sys.argv[1:]:\n    data = []\n    with open(f) as inp:\n           lines = set(line.rstrip() for line in  inp)\n           data.append(lines)\n    common_lines = data[0].intersection(*data[1:])\n",
  "label": 0
 },
 {
  "idx": 1184,
  "doc": "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields",
  "code": "result = df.set_index(['Athlete', 'race']).unstack('race')\n#           Distance       Race      Rank        Time        \n# race             1     2    1    2    1   2       1       2\n# Athlete                                                    \n# A.Moyet       400m   NaN    A  NaN    2 NaN   49.00     NaN\n# C.Marconi     800m   NaN    B  NaN    5 NaN  104.12     NaN\n# M.Smith       400m  800m    A    B    1   3   48.57  102.66\n",
  "label": 0
 },
 {
  "idx": 1185,
  "doc": "iterating over list of string and combining string values Python",
  "code": ">>> chained = itertools.chain.from_iterable(sixbit)\n>>> [''.join(bits) for bits in itertools.izip(*[chained]*8)]\n['00001100', '00010101', '00100001']\n",
  "label": 0
 },
 {
  "idx": 1186,
  "doc": "sklearn decomposition top terms",
  "code": ">>> X.shape\n(11314, 38865)\n>>> lsa.components_.shape\n(10, 38865)\n>>> km.cluster_centers_.shape\n(3, 10)\n>>> weights = np.dot(km.cluster_centers_, lsa.components_)\n>>> weights.shape\n(3, 38865)\n",
  "label": 0
 },
 {
  "idx": 1187,
  "doc": "Regex Parse Email Python",
  "code": "^[0-9]*\\+.*$\n",
  "label": 0
 },
 {
  "idx": 1188,
  "doc": "eliminate malformed records from a large .csv file",
  "code": "num_headers = 5\nwith open(\"input.csv\", 'r') as file_in, open(\"output.csv\", 'w') as file_out:\n    for i, line in enumerate(file_in):\n        if len(line.split(\",\")) == num_headers:\n            file_out.write(line)\n        else:\n            print \"line %d is malformed\" % i\n",
  "label": 1
 },
 {
  "idx": 1189,
  "doc": "eliminate malformed records from a large .csv file",
  "code": "import csv\nnum_headers = 5\nwith open(\"input.csv\", 'r') as file_in, open(\"output.csv\", 'w') as file_out:\n    csv_in = csv.reader(file_in)\n    csv_out = csv.writer(file_out)\n    for i, row in enumerate(csv_in):\n        if len(row) == num_headers:\n            csv_out.writerow(row)\n        else:\n            print \"line %d is malformed\" % i\n",
  "label": 1
 },
 {
  "idx": 1190,
  "doc": "How to return every 5 items from a list in python?",
  "code": "result = zip(*[iter(a)] * 5)\n",
  "label": 0
 },
 {
  "idx": 1191,
  "doc": "Django unique random as a default value",
  "code": "def unique_rand():\n    for _ in range(5):\n        ...\n    raise ValueError('Too many attempts to generate the code')\n",
  "label": 0
 },
 {
  "idx": 1192,
  "doc": "Python - diff-like order comparision of 2 lists with unequal sizes,",
  "code": ">>> print(\"\\n\".join([\"{}, {} {}OK\".format(i, j, \"\" if i == j else \"N\") for i, j in izip_longest(a, b, fillvalue=\"null\")]))\ne, e OK\nf, f OK\ng, h NOK\nh, i NOK\ni, j NOK\nnull, g NOK\n",
  "label": 1
 },
 {
  "idx": 1193,
  "doc": "Choose a file starting with a given string",
  "code": "import os\npath = 'C:/'\nfiles = []\nfor i in os.listdir(path):\n    if os.path.isfile(os.path.join(path,i)) and '001_MN_DX' in i:\n        files.append(i)\n",
  "label": 1
 },
 {
  "idx": 1194,
  "doc": "Auto Incrementing natural keys with django / postgres",
  "code": "{{ photo.category_image }}\n",
  "label": 0
 },
 {
  "idx": 1195,
  "doc": "Set a DTD using minidom in python",
  "code": "from xml.dom.minidom import DOMImplementation\n\nimp = DOMImplementation()\ndoctype = imp.createDocumentType(\n    qualifiedName='foo',\n    publicId='', \n    systemId='http://www.path.to.my.dtd.com/my.dtd',\n)\ndoc = imp.createDocument(None, 'foo', doctype)\ndoc.toxml()\n",
  "label": 1
 },
 {
  "idx": 1196,
  "doc": "Call the same method in all objects in Python?",
  "code": "for obj in all_objects:\n    if isinstance(obj, Planet):\n        obj.gravity()\n",
  "label": 1
 },
 {
  "idx": 1197,
  "doc": "Python Tkinter GUI Frame: How to call a class method from inside a function of another class?",
  "code": "class Login(tk.Frame):\n    def __init__(self, parent, controller):\n        self.controller = controller\n        ...\n\nclass WelcomePage(tk.Frame):\n    def __init__(self, parent, controller):\n        self.controller = controller\n        ...\n",
  "label": 0
 },
 {
  "idx": 1198,
  "doc": "Python Tkinter GUI Frame: How to call a class method from inside a function of another class?",
  "code": "if actNum == act_num and pinNum == pin_num:\n    ...\n    self.controller.show_frame(WelcomePage)\n    ...\n",
  "label": 0
 },
 {
  "idx": 1199,
  "doc": "Pandas count number of elements in each column less than x",
  "code": "In [3]:\n\n%timeit df[df < 1.0 ].count() \n%timeit (df < 1.0).sum()\n%timeit (df < 1.0).apply(np.count_nonzero)\n1000 loops, best of 3: 1.47 ms per loop\n1000 loops, best of 3: 560 us per loop\n1000 loops, best of 3: 529 us per loop\n",
  "label": 0
 },
 {
  "idx": 1200,
  "doc": "Running program/function in background in Python",
  "code": "$ python script.py\nDone!\n$ \n$ \n",
  "label": 0
 },
 {
  "idx": 1201,
  "doc": "Sort Python list by dict key,value",
  "code": "{RANKS[v]: k for v, k in enumerate(VALUES)}\n",
  "label": 0
 },
 {
  "idx": 1202,
  "doc": "Proxy Check in python",
  "code": "try:\n    urllib.urlopen(\n        \"http://example.com\",\n        proxies={'http':'http://example.com:8080'}\n    )\nexcept IOError:\n    print \"Connection error! (Check proxy)\"\nelse:\n    print \"All was fine\"\n",
  "label": 1
 },
 {
  "idx": 1203,
  "doc": "How to check if an element is in a nested list?",
  "code": "def nested(x, ys):\n    return any(x in nested for nested in ys)\n",
  "label": 1
 },
 {
  "idx": 1204,
  "doc": "How to check if an element is in a nested list?",
  "code": "def flatten(lst):\n    for elem in lst:\n        if isinstance(elem, (list, tuple)):\n            for nested in flatten(elem):\n                yield nested\n        else:\n            yield elem\n\ndef nested(x, ys):\n    return any(x == nested for nested in flatten(ys))\n",
  "label": 1
 },
 {
  "idx": 1205,
  "doc": "Interpolation in SciPy: Finding X that produces Y",
  "code": "x = [70, 80, 90, 100, 110]\ny = [49.7, 80.6, 122.5, 153.8, 163.0]\nf = interpolate.UnivariateSpline(x, y, s=0)\nxnew = np.arange(70,111,1)\n\nplt.plot(x,y,'x',xnew,f(xnew))\n",
  "label": 0
 },
 {
  "idx": 1206,
  "doc": "Covert a list to string",
  "code": "def to_str(lst):\n    if not lst:\n        return ''\n    return str(lst[0]) + to_str(lst[1:])\n",
  "label": 1
 },
 {
  "idx": 1207,
  "doc": "Pythonic way to parse preflib Orders with Ties files",
  "code": ">>> from ast import literal_eval\n>>> s = '1,2,{3,4,5},6'\n>>> [x if isinstance(x, tuple) else (x,) for x \n                         in literal_eval(s.replace('{', '(').replace('}', ')'))]\n[(1,), (2,), (3, 4, 5), (6,)]\n",
  "label": 1
 },
 {
  "idx": 1208,
  "doc": "Python Django how to rotate image and remove black color?",
  "code": "src_im = Image.open(\"test.gif\")\nim = src_im.rotate(30, expand=True)\nim.save(\"result.gif\")\n",
  "label": 0
 },
 {
  "idx": 1209,
  "doc": "How to decode() with a subset of 'ascii'?",
  "code": "def test_if_ascii(text):\n    if isinstance(test, unicode):\n        raise TypeError('hey man, dont feed me unicode plz')\n    return all(32 <= ord(c) <= 126 for c in text)\n",
  "label": 1
 },
 {
  "idx": 1210,
  "doc": "Python word length function example needed",
  "code": "words = text.split()\ntotalwords = len(words)\n",
  "label": 0
 },
 {
  "idx": 1211,
  "doc": "Deleting consonants from a string in Python",
  "code": "'mississippi'.translate(m)\n",
  "label": 0
 },
 {
  "idx": 1212,
  "doc": "Deleting consonants from a string in Python",
  "code": "''.join(c for c in x if c in 'aeiou')\n",
  "label": 1
 },
 {
  "idx": 1213,
  "doc": "Deleting consonants from a string in Python",
  "code": "translate (bytes)    |  2.88\ntranslate (bytearray)|  3.06\nList Comprehension   | 53.2\nRegular expressions  | 57.0\nGenerator exp        | 60.1\ndict.fromkeys        | 71.3\ntranslate (unicode)  | 71.6\n",
  "label": 0
 },
 {
  "idx": 1214,
  "doc": "Deleting consonants from a string in Python",
  "code": "'mississippi'.encode('ascii', 'ignore').translate(None, non_vowels)\n",
  "label": 0
 },
 {
  "idx": 1215,
  "doc": "Opening a text file and then storing the contents into a nested dictionary in python 2.7",
  "code": "with open(infilepath) as infile:\n  answer = {}\n  name = None\n  for line in infile:\n    line = line.strip()\n    if line.startswith(\"NGC\"):\n      name = line\n      answer[name] = {}\n    else:\n      var, val = line.split(':', 1)\n      answer[name][var.strip()] = val.strip()\n",
  "label": 1
 },
 {
  "idx": 1216,
  "doc": "Recreating builtin s.find('substring') function",
  "code": ">>> str1 = 'my best test ever!'\n>>> str2 = 'best'\n>>> for i, char in enumerate(str1):\n...     if str2[0] == char:\n...         print(\"found first instance of letter at, \", i)\n...         print(str2 == str1[i:i + len(str2)])\n... \nfound first instance of letter at,  3\nTrue\n",
  "label": 1
 },
 {
  "idx": 1217,
  "doc": "numpy create 3D array from indexed list",
  "code": "In [132]: p = np.array(\"p_x1y1z1 p_x2y1z1 p_x3y1z1 p_x4y1z1 p_x1y2z1 p_x2y2z1 p_x3y2z1 p_x4y2z1\".split())\n\nIn [133]: p\nOut[133]: \narray(['p_x1y1z1', 'p_x2y1z1', 'p_x3y1z1', 'p_x4y1z1', 'p_x1y2z1', 'p_x2y2z1', 'p_x3y2z1', 'p_x4y2z1'], \n      dtype='|S8')\n",
  "label": 0
 },
 {
  "idx": 1218,
  "doc": "numpy create 3D array from indexed list",
  "code": "In [168]: p.reshape(4, 2, order='F')\nOut[168]: \narray([['p_x1y1z1', 'p_x1y2z1'],\n       ['p_x2y1z1', 'p_x2y2z1'],\n       ['p_x3y1z1', 'p_x3y2z1'],\n       ['p_x4y1z1', 'p_x4y2z1']], \n      dtype='|S8')\n",
  "label": 0
 },
 {
  "idx": 1219,
  "doc": "How to align and compare two elements (sequence) in a list using python",
  "code": "103L Sequence:\nMNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNSLDAAKSELDKAIGRNTNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRAALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL\nDisorder: Posi R 34 K 35 S 36 P 37 S 38 L 39 N 165 N 166 L\n",
  "label": 0
 },
 {
  "idx": 1220,
  "doc": "How to make array of array of dictionaries in python",
  "code": "def get_other_players(player):\n    for pair in similarities.keys():\n        try:\n            other_player = pair[(pair.index(player)+1)%2]\n            print other_player, \"=\", similarities[pair]\n        except ValueError:\n            pass\n",
  "label": 0
 },
 {
  "idx": 1221,
  "doc": "How to make array of array of dictionaries in python",
  "code": ">>> set_sim(['Player3', 'Player1'], 2)\n>>> set_sim(['Player1', 'Player2'], 3)\n>>> set_sim(['Player2', 'Player3'], 3)\n>>> get_sim(['Player3','Player2'])\n3\n>>> similarities\n{('Player1', 'Player2'): 3, ('Player2', 'Player3'): 3, ('Player1', 'Player3'): 2}\n",
  "label": 0
 },
 {
  "idx": 1222,
  "doc": "Python Sum of Squares Function",
  "code": "def sum_of_squares_of_digits(value):\n    return sum(int(c) ** 2 for c in str(value))\n",
  "label": 1
 },
 {
  "idx": 1223,
  "doc": "List all RGBA values of an image with PIL",
  "code": "imgobj = Image.open('x.png')\npixels = imgobj.convert('RGBA')\ndata = imgobj.getdata()\ncounts = collections.Counter(data)\nprint(counts[(0, 0, 0, 255)])  # or some other value\n",
  "label": 1
 },
 {
  "idx": 1224,
  "doc": "Multidimensional array in Python",
  "code": "class Matrix(object):\n    def __init__(self, rows, columns, default=0):\n        self.m = []\n        for i in range(rows):\n            self.m.append([default for j in range(columns)])\n\n    def __getitem__(self, index):\n        return self.m[index]\n",
  "label": 1
 },
 {
  "idx": 1225,
  "doc": "Python: How to remove whitespace from number in a string",
  "code": "(?<=                     look behind to see if there is:\n  \\d                       digits (0-9)\n)                        end of look-behind\n\\s+                      whitespace (\\n, \\r, \\t, \\f, and \" \") (1 or\n                         more times)\n(?=                      look ahead to see if there is:\n  \\d                       digits (0-9)\n)                        end of look-ahead\n",
  "label": 0
 },
 {
  "idx": 1226,
  "doc": "Interactive shell program wrapper in python",
  "code": "Hello World!\nHello World!\n",
  "label": 0
 },
 {
  "idx": 1227,
  "doc": "Fast way to find index of array in array of arrays",
  "code": "[      3      10      17 ..., 8550398 8550405 8550412]\n",
  "label": 0
 },
 {
  "idx": 1228,
  "doc": "XML <arg> value Replacement in Python",
  "code": "for node in tree.iterfind('.//logging/Adapter[@type=\"abcdef\"]/arg'):\n    # so you don't need another inner loop to access <arg> elements\n    if node.get('key') == 'Type A':\n        node.set('value', 'false')\n    # ... if 'Type B' ...\n",
  "label": 1
 },
 {
  "idx": 1229,
  "doc": "summing nested dictionary entries",
  "code": "results = {}\nfor key in data.keys():\n    # key is '20101021', '20101004'...\n    # data[key].keys() is '4x4, '4x2'... so let's make sure\n    # that the result dictionary contains all those '4x4', '4x2'\n    # being zero if nothing better can be calculated.\n    results[key] = dict.fromkeys(data[key].keys(), 0)\n\n    for sub_key in data[key].keys():\n        # sub_key is '4x4', '4x2'...\n        # Also, don't consider a 'valid value' someting that is not a\n        # \"Central Spectrum\" or a \"Full Frame\"\n        valid_values = [\n            int(v) for k, v in data[key][sub_key].items()\n            if k in [\"Central Spectrum\", \"Full Frame\"]\n        ]\n        # Now add the 'valid_values'\n        results[key][sub_key] = sum(valid_values)\nprint results\n",
  "label": 1
 },
 {
  "idx": 1230,
  "doc": "How to send cookie with scrapy CrawlSpider requests?",
  "code": "def start_requests(self):\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36'}\n    for i,url in enumerate(self.start_urls):\n        yield Request(url,cookies={'over18':'1'}, callback=self.parse_item, headers=headers)\n",
  "label": 0
 },
 {
  "idx": 1231,
  "doc": "Extract Text from HTML Python (BeautifulSoup, RE, Other Option?)",
  "code": "from bs4 import BeautifulSoup\n\ndata = \"\"\"\n<td class=\"tl-cell tl-popularity\" data-tooltip=\"7,944,796\" data-tooltip-instant=\"\">\n<div class=\"pop-meter\">\n<div class=\"pop-meter-background\"></div>\n<div class=\"pop-meter-overlay\" style=\"width: 55%\"></div>\n</div>\n</td>\n\"\"\"\n\nsoup = BeautifulSoup(data)\nprint(soup.td['data-tooltip'])\n",
  "label": 1
 },
 {
  "idx": 1232,
  "doc": "How to draw stacked histogram in pandas",
  "code": "import matplotlib.pyplot as plt\nsubset = pd.DataFrame({'fork': {0: True, 1: False, 2: False, 3: False, 4: False, 5: True, 6: False},\n 'percentage_remains': {0: 20.0,\n  1: 9.0909089999999999,\n  2: 2.0,\n  3: 0.0,\n  4: 0.0,\n  5: 33.333333000000003,\n  6: 20.0}})\n",
  "label": 0
 },
 {
  "idx": 1233,
  "doc": "Updating a TKinter GUI from a multiprocessing calculation",
  "code": "@staticmethod\ndef main_loop(root):\n    \"Process all GUI events according to tkinter's settings.\"\n    target = time.clock()\n    while True:\n        try:\n            root.update()\n        except tkinter.TclError:\n            break\n        target += tkinter._tkinter.getbusywaitinterval() / 1000\n        time.sleep(max(target - time.clock(), 0))\n",
  "label": 0
 },
 {
  "idx": 1234,
  "doc": "How to convert dictionary into string",
  "code": "''.join('{}{}'.format(key, val) for key, val in adict.items())\n",
  "label": 1
 },
 {
  "idx": 1235,
  "doc": "Put all files with same name in a folder",
  "code": ">>> from shutil import copyfile\n>>> for date in dict_date:\n        for animal in dict_date[date]:\n        try:\n            os.makedirs(os.path.join(path, date, animal))\n        except os.error:\n            pass\n        for fil in dict_date[date][animal]:\n            copyfile(os.path.join(path, fil), os.path.join(path, date, animal, fil))\n",
  "label": 0
 },
 {
  "idx": 1236,
  "doc": "From list of dictionaries to np array of arrays and vice-versa",
  "code": "df2 = pd.DataFrame(vals, columns=df.columns)\ndf2.to_dict(orient='records')\n\n[{'key1': 10.0, 'key2': nan, 'key3': 19.0},\n {'key1': 20.0, 'key2': 25.0, 'key3': 29.0},\n {'key1': 30.0, 'key2': 35.0, 'key3': 39.0},\n {'key1': 40.0, 'key2': 45.0, 'key3': 49.0}]\n",
  "label": 0
 },
 {
  "idx": 1237,
  "doc": "Iterate over Python list, preserving structure of embedded lists",
  "code": ">>> [[tuple(map(int, pair)) + (2,) for pair in pairs] for pairs in l]\n[[(100, 200, 2), (300, 400, 2), (500, 600, 2)], [(100, 200, 2)], [(100, 200, 2)]]\n",
  "label": 1
 },
 {
  "idx": 1238,
  "doc": "Growing matrices columnwise in NumPy",
  "code": "import numpy as NP\nmy_data = NP.random.random_integers(0, 9, 9).reshape(3, 3)\nnew_col = NP.array((5, 5, 5)).reshape(3, 1)\nres = NP.append(my_data, new_col, axis=1)\n",
  "label": 0
 },
 {
  "idx": 1239,
  "doc": "Get list from server and print each element surrounded by span tag",
  "code": "my_list = ['one', 'two', 'three', 'four']\nself.response.write(','.join(my_list))\n",
  "label": 0
 },
 {
  "idx": 1240,
  "doc": "Power set and Cartesian Product of a set python",
  "code": "def powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n",
  "label": 0
 },
 {
  "idx": 1241,
  "doc": "Parsing through a file",
  "code": "for line in fileinput.readlines():\n    a, b, c = line.split('\\t')      # Variable unpacking; assumes each line has three columns\n    if a == '?':\n        function_a()\n    if b == '?':\n        function_b()\n    if c == '?':\n        function_c()\n",
  "label": 1
 },
 {
  "idx": 1242,
  "doc": "Remove unwanted commas from CSV using Python",
  "code": "['1', 'Flat 5, Park Street']\n",
  "label": 0
 },
 {
  "idx": 1243,
  "doc": "Merge CSVs using Python (or Bash)",
  "code": "ID,Name,ContactNo,Designation\n53,Vikas,9874563210.0, \n23,MyShore,,Software Engineer \n",
  "label": 0
 },
 {
  "idx": 1244,
  "doc": "Merge CSVs using Python (or Bash)",
  "code": "import pandas as pd\ndf1 = pd.DataFrame.from_csv(\"file1.csv\", sep=\",\")\ndf2 = pd.DataFrame.from_csv(\"file2.csv\", sep=\",\")\nfinal_df = df1.reset_index().merge(df2.reset_index(), how=\"outer\").set_index('ID')\n\nfinal_df.to_csv(\"result.csv\", sep=\",\")\n",
  "label": 1
 },
 {
  "idx": 1245,
  "doc": "Interpolating 3d data at a single point in space (Python 2.7)",
  "code": "array([ 1.5])\n",
  "label": 0
 },
 {
  "idx": 1246,
  "doc": "Real Hierarchical Builds with SCons?",
  "code": "# This SConstruct orchestrates building 2 subdirs\nimport os\n\nImport('env')\nsubdirs = ['src', 'test']\n\nfor subdir in subdirs:\n    SConscript(os.path.join(subdir, 'SConscript'), exports = ['env'])\n",
  "label": 0
 },
 {
  "idx": 1247,
  "doc": "Creating random binary files",
  "code": "f.write(struct.pack(\"=I\",random.randint(0,sys.maxint*2+1)))\n",
  "label": 0
 },
 {
  "idx": 1248,
  "doc": "Wxpython closing windows",
  "code": "self.secondFrame = MySecondFrame()\n",
  "label": 0
 },
 {
  "idx": 1249,
  "doc": "Mimic curl in python",
  "code": "from StringIO import StringIO\nimport requests\n\ncsv_data = \"1, 800 Wilshire Blvd, Los Angeles, CA, 90017\"\nbuffer = StringIO()\nbuffer.write(csv_data)\nbuffer.seek(0)\n\nurl = \"http://geocoding.geo.census.gov/geocoder/locations/addressbatch\"\ndata = {'benchmark': 'Public_AR_Census2010'}\nfiles = {'addressFile': buffer}\n\nresponse = requests.post(url, data=data, files=files)\nprint response.content\n",
  "label": 1
 },
 {
  "idx": 1250,
  "doc": "Mimic curl in python",
  "code": "\"1\",\" 800 Wilshire Blvd,  Los Angeles,  CA,  90017\",\"Match\",\"Exact\",\"800 Wilshire Blvd, LOS ANGELES, CA, 90017\",\"-118.25818,34.049366\",\"141617176\",\"L\"\n",
  "label": 0
 },
 {
  "idx": 1251,
  "doc": "Scikit Learn HMM training with set of observation sequences",
  "code": "model.fit(S)\n",
  "label": 1
 },
 {
  "idx": 1252,
  "doc": "python regular expressions in find and replace",
  "code": "r = re.compile(r'(#[a-z]+)(<)')\n",
  "label": 0
 },
 {
  "idx": 1253,
  "doc": "python regular expressions in find and replace",
  "code": "r = re.compile(r'#[a-z]+<')\n",
  "label": 0
 },
 {
  "idx": 1254,
  "doc": "Transposing dataframe and sorting",
  "code": "df = df.reset_index() #Make your index into a column\ndf = pd.melt(df, id_vars = ['index']) #Reshape data\ndf = df[df['index'] <= df['variable']].sort_values(by = 'value') #Remove duplicates, sort\ndf ['col'] = df['index'] +','+ df['variable'] #Concatenate strings\ndf = df[['col','value']] #Remove unnecessary columns\ndf = df.set_index('col') #Set strings to index\ndf\n",
  "label": 1
 },
 {
  "idx": 1255,
  "doc": "How to get the location of a Zope installation from inside an instance?",
  "code": "<eventlog>\n  level INFO\n  <logfile>\n    path /path/to/plone/var/log/instance.log\n    level INFO\n  </logfile>\n</eventlog>\n",
  "label": 0
 },
 {
  "idx": 1256,
  "doc": "How to get the location of a Zope installation from inside an instance?",
  "code": "from App.config import getConfiguration \nimport os\n\neventlog = getConfiguration().eventlog\nlogpath = eventlog.handler_factories[0].instance.baseFilename\nlogfolder = os.path.split(logpath)[0] \n",
  "label": 1
 },
 {
  "idx": 1257,
  "doc": "Step through items in dictionary in python",
  "code": "for key, value in myDict.items():\n    for eachValue in value:\n        for char in eachValue:\n            do something\n",
  "label": 1
 },
 {
  "idx": 1258,
  "doc": "Changing prompt working directory via Python script",
  "code": "# Obviously, this should be more interesting..\nimport sys\nprint \"cd\", sys.argv[1]\n",
  "label": 0
 },
 {
  "idx": 1259,
  "doc": "Python Regex on comma, space",
  "code": "\"Dogs,Cats\".split(\",\")\n",
  "label": 0
 },
 {
  "idx": 1260,
  "doc": "how to sort a list of tuples with list[i][1] as key from biggest to smallest",
  "code": "sorted(alpha_items, key=lambda x: x[1], reverse=True)\n",
  "label": 1
 },
 {
  "idx": 1261,
  "doc": "Installing OSQA on windows (local system)",
  "code": "DATABASE_NAME = 'osqa'             # Or path to database file if using sqlite3.\nDATABASE_USER = 'root'               # Not used with sqlite3.\nDATABASE_PASSWORD = 'PASSWD'               # Not used with sqlite3.  put bitnami here\nDATABASE_ENGINE = 'mysql'  #mysql, etc\n",
  "label": 0
 },
 {
  "idx": 1262,
  "doc": "Is there a way to sandbox test execution with pytest, especially filesystem access?",
  "code": "docker build -t pytest .\n",
  "label": 0
 },
 {
  "idx": 1263,
  "doc": "Python json-rpc help, how to extract data",
  "code": "from decimal import Decimal\n\nprint(access.getinfo()[\"balance\"])\n",
  "label": 0
 },
 {
  "idx": 1264,
  "doc": "remove newline and whitespace parse XML with python Xpath",
  "code": "xml.xpath(\"//*[text()='dive into mark']\", namespaces=ns)\n",
  "label": 0
 },
 {
  "idx": 1265,
  "doc": "Python: Keep track of current column in text file",
  "code": "for i,col in enumerate(fields[5:], 5):\n    ....\n",
  "label": 1
 },
 {
  "idx": 1266,
  "doc": "Getting file path from command line arguments in python",
  "code": "import sys\nimport os\n\nfpath = sys.argv[-1]\n\nprint(os.path.isabs(fpath))\nprint(fpath)\n",
  "label": 1
 },
 {
  "idx": 1267,
  "doc": "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}",
  "code": "{0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 1, 0), 3: (0, 1, 1), 4: (1, 0, 0), 5: (1, 0, 1), 6: (1, 1, 0), 7: (1, 1, 1)}\n",
  "label": 0
 },
 {
  "idx": 1268,
  "doc": "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}",
  "code": "alphabet =  range(2)\nbase = 2\ndict((x*base**2+y*base+z,(x,y,z)) for x in alphabet \n                                  for y in alphabet \n                                  for z in alphabet )\n",
  "label": 0
 },
 {
  "idx": 1269,
  "doc": "How to get python dictionaries into a pandas time series dataframe where key is date object",
  "code": "import pandas as pd\nimport datetime\ntimeseries = {datetime.datetime(2013, 3, 17, 18, 19): {'t2': 400, 't1': 1000},\n                 datetime.datetime(2013, 3, 17, 18, 20): {'t2': 300, 't1': 3000}\n                }\nprint pd.DataFrame.from_dict(timeseries, orient=\"index\")\n",
  "label": 1
 },
 {
  "idx": 1270,
  "doc": "Python Version Specific Code",
  "code": "sys.version_info.major\nsys.version_info.minor\nsys.version_info.micro\n",
  "label": 0
 },
 {
  "idx": 1271,
  "doc": "getting pixels value in a checkerboard pattern in python",
  "code": "checkerboard=arr[idx].reshape(w,h//2)\nprint(checkerboard)\nprint(checkerboard.shape)\n# [[ 1  3]\n#  [ 4  6]\n#  [ 9 11]\n#  [12 14]\n#  [17 19]\n#  [20 22]]\n# (6, 2)\n",
  "label": 0
 },
 {
  "idx": 1272,
  "doc": "getting pixels value in a checkerboard pattern in python",
  "code": "import numpy as np\n# w=2948\n# h=1536\nw=6\nh=4\narr=np.arange(w*h).reshape(w,h)\nprint(arr)\nprint(arr.shape)\n# [[ 0  1  2  3]\n#  [ 4  5  6  7]\n#  [ 8  9 10 11]\n#  [12 13 14 15]\n#  [16 17 18 19]\n#  [20 21 22 23]]\n# (6, 4)\n",
  "label": 0
 },
 {
  "idx": 1273,
  "doc": "Specifying types and patterns using argparse choices",
  "code": "import os\nimport argparse\n\ncases = [n[n.rindex(\".\")+1:] for n in os.listdir(\".\") if n.startswith(\"file.\")]\ncases.append(\"_\")\nparser = argparse.ArgumentParser()\nparser.add_argument('case', choices = cases)\n\nargs = parser.parse_args()\nprint args.case\n",
  "label": 1
 },
 {
  "idx": 1274,
  "doc": "Python regex to remove all words which contains number",
  "code": ">>> words = \"ABCD abcd AB55 55CD A55D 5555\"\n>>> ' '.join(s for s in words.split() if not any(c.isdigit() for c in s))\n'ABCD abcd'\n",
  "label": 1
 },
 {
  "idx": 1275,
  "doc": "Reorder a dictionary to fit a data frame",
  "code": "d = {'Name 1': ['link{}'.format(l) for l in list(range(10))], 'Name 2': ['link{}'.format(l) for l in list(range(10, 20))]}\n\n{'Name 1': ['link0', 'link1', 'link2', 'link3', 'link4', 'link5', 'link6', 'link7', 'link8', 'link9'], 'Name 2': ['link10', 'link11', 'link12', 'link13', 'link14', 'link15', 'link16', 'link17', 'link18', 'link19']}\n",
  "label": 0
 },
 {
  "idx": 1276,
  "doc": "Python code for counting number of zero crossings in an array",
  "code": "import numpy as np\nmy_array = np.array([80.6, 120.8, -115.6, -76.1, 131.3, 105.1, 138.4, -81.3, -95.3,  \n                     89.2, -154.1, 121.4, -85.1, 96.8, 68.2])\n((my_array[:-1] * my_array[1:]) < 0).sum()\n",
  "label": 1
 },
 {
  "idx": 1277,
  "doc": "python read files and stop when a condition satisfies",
  "code": "    if br == True:\n        break\n    else:\n        pass\nif br == True:\n    break\nelse:\n    pass\n",
  "label": 0
 },
 {
  "idx": 1278,
  "doc": "python read files and stop when a condition satisfies",
  "code": "...\n    if \"color=brown\" in part:\n        print part\n        # set some variable to check at the last thing before your other for loops\n        # turnover.\n        br = True\n        break\n",
  "label": 0
 },
 {
  "idx": 1279,
  "doc": "python multiprocessing dynamically created processes and pipes",
  "code": "import multiprocessing as mp\n\ndef mkproc(func):\n    parent_conn, child_conn = mp.Pipe()\n    p = mp.Process(func, args=(child_conn,))\n    p.start()\n    return (p, parent_conn)\n",
  "label": 0
 },
 {
  "idx": 1280,
  "doc": "Extract a value out of n",
  "code": ">>> n = 3\n>>> l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> [i for i in l if i%n==0]\n[0, 3, 6, 9]\n",
  "label": 1
 },
 {
  "idx": 1281,
  "doc": "Finding start and stops of consecutive values block in Python/Numpy/Pandas",
  "code": "a = np.array([\n        [[1, np.nan], [np.nan, np.nan]],\n        [[np.nan, 1], [np.nan, 2]], \n        [[np.nan, np.nan], [np.nan, np.nan]]\n    ])\nget_nans_blocks_length(a)\narray([1, 2, 1, 1, 2, 2], dtype=int64)\n",
  "label": 0
 },
 {
  "idx": 1282,
  "doc": "Finding start and stops of consecutive values block in Python/Numpy/Pandas",
  "code": "a = np.array([\n        [1, np.nan, np.nan, np.nan],\n        [np.nan, 1, np.nan, 2], \n        [np.nan, np.nan, np.nan, np.nan]\n    ])\nget_nans_blocks_length(a)\narray([3, 1, 1, 4], dtype=int64)\n",
  "label": 0
 },
 {
  "idx": 1283,
  "doc": "Loops to minimize function of arrays in python",
  "code": "A = K.dot(np.array([Y, Z]).transpose())\nB = K.dot(np.array([X]).transpose())\n",
  "label": 0
 },
 {
  "idx": 1284,
  "doc": "Loops to minimize function of arrays in python",
  "code": "C = np.linalg.inv(np.transpose(A).dot(A))\nC = C.dot(np.transpose(A)).dot(B)\n",
  "label": 0
 },
 {
  "idx": 1285,
  "doc": "Loops to minimize function of arrays in python",
  "code": "a, b = C.reshape(2)\n",
  "label": 0
 },
 {
  "idx": 1286,
  "doc": "Loops to minimize function of arrays in python",
  "code": "A = np.array([Y, Z, [1]*len(X)]).transpose()\n",
  "label": 0
 },
 {
  "idx": 1287,
  "doc": "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?",
  "code": "any( b == a[i:]+a[:i] for i in range(len(a)))\n",
  "label": 0
 },
 {
  "idx": 1288,
  "doc": "Get value to 2 attribute from a xpath node for anchor tag",
  "code": "for item in list:\n    href, text = item.xpath(\"@href|text()\")\n    print(href, text)\n",
  "label": 1
 },
 {
  "idx": 1289,
  "doc": "(Python) Formatting strings for struct.unpack?",
  "code": "bytearray([222,7])\nOut[15]: bytearray(b'\\xde\\x07')\n\nstruct.unpack('H', bytearray([222,7]))\nOut[16]: (2014,)\n",
  "label": 1
 },
 {
  "idx": 1290,
  "doc": "Python argparser. List of dict in INI",
  "code": ">> my_config = MyConfigParser()\n>> my_config.read('example.cfg')\n>> couples = my_config.get_list_of_tups('section', 'couples')\n>> couples\n[('somekey1', 'somevalue1'), ('somekey2', 'somevalue2'), ('somekey3', 'somevalue3')]\n",
  "label": 0
 },
 {
  "idx": 1291,
  "doc": "check if variable is dataframe",
  "code": "Yes: if isinstance(obj, int):\nNo:  if type(obj) is type(1):\n",
  "label": 1
 },
 {
  "idx": 1292,
  "doc": "Regex to extract all URLs from a page",
  "code": "def extract_urls(your_text):\n  url_re = re.compile(r'\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))')\n  for match in url_re.finditer(your_text):\n    yield match.group(0)\n",
  "label": 1
 },
 {
  "idx": 1293,
  "doc": "python- combining list and making them a dictionary",
  "code": "d = {}\n\n# Create a 1-to-1 mapping for the first n-1 items in `one`\nfor i in one[:-1]:\n    d[i] = [elements.pop(0)]\n\n# Append the remainder of `elements`\nd[one[-1]] = [elements]\n",
  "label": 1
 },
 {
  "idx": 1294,
  "doc": "pandas multiindex assignment from another dataframe",
  "code": "idx = pd.IndexSlice\ndf.loc[idx[:,('a','b')], :] = df_.values\n",
  "label": 0
 },
 {
  "idx": 1295,
  "doc": "Spawning a thread in python",
  "code": "import threading\nimport alice, bob\n\ndef get_work_data():\n    return 'data'\n\ndef main():\n    tasks = [alice.do_stuff, bob.do_stuff]\n    data = get_work_data()\n    for task in tasks:\n        t = threading.Thread(target=task, args=(data,))\n        t.start()\n",
  "label": 1
 },
 {
  "idx": 1296,
  "doc": "Removing word and replacing character in a column of strings",
  "code": "In [183]: df.replace({'DSFS': {r'(\\d+)\\s*\\-\\s*(\\d+).*': r'\\1_\\2'}}, regex=True)\nOut[183]:\n   MemberID Year  DSFS DrugCount\n0  48925661   Y2  9_10        7+\n1  90764620   Y3   8_9         3\n2  61221204   Y1   2_3         1\n",
  "label": 1
 },
 {
  "idx": 1297,
  "doc": "Protection against downloading too big files",
  "code": ">>> import requests\n>>> r = requests.get('https://example.com/big-file', stream=True)\n>>> r.raw\n<requests.packages.urllib3.response.HTTPResponse object at 0x101194810>\n",
  "label": 0
 },
 {
  "idx": 1298,
  "doc": "Protection against downloading too big files",
  "code": ">>> r.headers.get(\"content-length\")\n'33236'\n",
  "label": 0
 },
 {
  "idx": 1299,
  "doc": "Creating a boost::python::object from a std::function",
  "code": ">>> import s\n>>> s.get_string_function(\"Coord\")\n<Boost.Python.function object at 0x1cca450>\n>>> _(1, 4)\n'Coord(x=1, y=4)'\n",
  "label": 0
 },
 {
  "idx": 1300,
  "doc": "Creating a boost::python::object from a std::function",
  "code": "std::function<std::string(int, int)> get_string_function(const std::string& name)\n{\n    return [=](int x, int y)\n    {\n        return name + \"(x=\" + std::to_string(x) + \", y=\" + std::to_string(y) + \")\";\n    };\n}\n",
  "label": 0
 },
 {
  "idx": 1301,
  "doc": "python: convert to HTML special characters",
  "code": ">>> \"\u00dcbelt\u00e4ter\".encode(\"ascii\", \"xmlcharrefreplace\")\nb'&#220;belt&#228;ter'\n",
  "label": 1
 },
 {
  "idx": 1302,
  "doc": "python: convert to HTML special characters",
  "code": ">>> cgi.escape(\"<\u00dcbelt\u00e4ter>\").encode(\"ascii\", \"xmlcharrefreplace\")\nb'&lt;&#220;belt&#228;ter&gt;'\n",
  "label": 1
 },
 {
  "idx": 1303,
  "doc": "python tkinter calender, placing the numbers",
  "code": "[['', '', '', '1', '2', '3', '4'], ['5', '6', '7', '8', '9', '10', '11'], ['12', '13', '14', '15', '16', '17', '18'], ['19', '20', '21', '22', '23', '24', '25'], ['26', '27', '28', '29', '30', '31', '']]\n",
  "label": 0
 },
 {
  "idx": 1304,
  "doc": "Python-like list comprehension in Java",
  "code": "public interface Func<In, Out> {\n    public Out apply(In in);\n}\n",
  "label": 0
 },
 {
  "idx": 1305,
  "doc": "python dictionary values sorting",
  "code": "ranks1 = dict(map(reversed, enumerate(sorted(dict1, key=dict1.get))))\nranks2 = dict(map(reversed, enumerate(sorted(dict2, key=dict2.get))))\ndiffs = dict((k, ranks2[k] - ranks1[k]) for k in dict1)\n",
  "label": 1
 },
 {
  "idx": 1306,
  "doc": "Insertions algorithm in sequence python",
  "code": "12345\n1999888345\n",
  "label": 0
 },
 {
  "idx": 1307,
  "doc": "django object get two fields into a list from a model",
  "code": "PagerDutyPolicy.objects.all()\n",
  "label": 0
 },
 {
  "idx": 1308,
  "doc": "Multiple Database Config in Django 1.2",
  "code": "from asterisk import *\n",
  "label": 0
 },
 {
  "idx": 1309,
  "doc": "Flask route rule as function args",
  "code": "@app.route('/test/<command>')\n@app.route('/test/<command>/<arg1>')\n@app.route('/test/<command>/<arg1>/<arg2>')\ndef test(command=None, arg1=None, arg2=None):\n    a = [arg1, arg2]\n    # Remove any args that are None\n    args = [arg for arg in a if arg is not None]\n    if command == \"say\":\n        return ' '.join(args)\n    else:\n        return \"Unknown Command\"\n",
  "label": 1
 },
 {
  "idx": 1310,
  "doc": "Flask route rule as function args",
  "code": "@app.route('/test/<command>/<path:path>')\ndef test(command, path):\n    args = path.split('/')\n    return \" \".join(args)\n",
  "label": 1
 },
 {
  "idx": 1311,
  "doc": "Best way to make a counter based on time",
  "code": "def make_ticker(seconds):\n    start = time.time()\n    def elapsed():\n        now = time.time()\n        return (now-start)//seconds\n    return elapsed\n\n>>> a = make_ticker(2)\n>>> a()\n0.0\n>>> a()\n1.0\n>>> a()\n1.0\n>>> a()\n2.0\n",
  "label": 1
 },
 {
  "idx": 1312,
  "doc": "How do I use BeautifulSoup to move tag contents from one soup to a template soup",
  "code": "#the above same lines\n\nsoup1 = BeautifulSoup(html2)\nvalue = soup1.body.extract()\n\ndiv.append(value)\n# replaces a tag with whatever\u2019s inside that tag.\ndiv.body.unwrap()\nprint div\n",
  "label": 1
 },
 {
  "idx": 1313,
  "doc": "How do I use BeautifulSoup to move tag contents from one soup to a template soup",
  "code": "<div id=\"here\"><body><script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n<script src=\"//cdn.sstatic.net/Js/stub.en.js?v=283ea58c715b\"></script>\n<link href=\"//cdn.sstatic.net/stackoverflow/all.css?v=71d362e7c10c\" rel=\"stylesheet\"   type=\"text/css\">\n</link></body></div>\n",
  "label": 0
 },
 {
  "idx": 1314,
  "doc": "How can a Python module single file be installed using pip and PyPI?",
  "code": ".\n\u251c\u2500\u2500 example.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 setup.py\n\n0 directories, 4 files\n",
  "label": 0
 },
 {
  "idx": 1315,
  "doc": "Finding if a number is a perfect square",
  "code": "n = 0\nwhile n <= 100:\n    x = math.factorial(n) + 1\n    if isSquare(x):\n        print n\n    n = n + 1\n",
  "label": 0
 },
 {
  "idx": 1316,
  "doc": "What is the best practice to add tuples to a set?",
  "code": "exl_set = set()\nexl_set.add(a.node)\nexl_set.add(b.node)\n",
  "label": 1
 },
 {
  "idx": 1317,
  "doc": "Python identify in which interval the numbers are",
  "code": "import numpy as np\n\ndata = np.array([0.2, 6.4, 3.0, 1.6])\nbins = np.array([0.0, 1.0, 2.5, 4.0, 10.0])\ncats = np.digitize(data, bins)\ncats\n# array([1, 4, 3, 2])\n",
  "label": 1
 },
 {
  "idx": 1318,
  "doc": "Sort Python Dictionary by first four characters in Key",
  "code": ">>> from collections import OrderedDict\n>>> OrderedDict(sorted(yourdict.items(), key=lambda item: int(item[0].split()[0])))\nOrderedDict([('0 -> 332', 877), ('666 -> 999', 4388), ('1333 -> 1665', 7998), ('3000 -> 3332', 9753), ('3666 -> 3999', 6267), ('4000 -> 4332', 4383), ('5666 -> 5999', 4495), ('6333 -> 6665', 7966)])\n",
  "label": 1
 },
 {
  "idx": 1319,
  "doc": "python multiple 'for' statement in one row",
  "code": "for lis in (a_list, b_list, c_list):\n    a, b, c = lis  #assign the items of list fetched from the `tuple` to a, b ,c\n",
  "label": 0
 },
 {
  "idx": 1320,
  "doc": "numpy: slicing and vectorized looping with 1d and 2d arrays",
  "code": "A = np.array([[0., 1., 0., 2.],\n             [1., 0., 3., 0.],\n             [0., 0., 0., 4.],\n             [2., 0., 4., 0.]]) # quadratic, not symmetric Matrix, shape (i, i)\nB = np.array([2., 4., 2., 1.]) # vector shape (i)\n\nC = A*(B[:,None]-B)\n",
  "label": 1
 },
 {
  "idx": 1321,
  "doc": "Sun Grid Engine, force one job per node",
  "code": "exclusive        excl      INT         <=    YES         YES        0        0\n",
  "label": 0
 },
 {
  "idx": 1322,
  "doc": "Sun Grid Engine, force one job per node",
  "code": "qconf -mc\n",
  "label": 0
 },
 {
  "idx": 1323,
  "doc": "What is a clean, pythonic way to have multiple constructors in Python?",
  "code": "class Cheese():\n    def __init__(self, num_holes = None):\n        if num_holes is None:\n            ...\n",
  "label": 1
 },
 {
  "idx": 1324,
  "doc": "What is a clean, pythonic way to have multiple constructors in Python?",
  "code": "class Cheese():\n    def __init__(self, *args, **kwargs):\n        #args -- tuple of anonymous arguments\n        #kwargs -- dictionary of named arguments\n        self.num_holes = kwargs.get('num_holes',random_holes())\n",
  "label": 1
 },
 {
  "idx": 1325,
  "doc": "What is a clean, pythonic way to have multiple constructors in Python?",
  "code": "def f(*args, **kwargs):\n   print 'args: ', args, ' kwargs: ', kwargs\n\n>>> f('a')\nargs:  ('a',)  kwargs:  {}\n>>> f(ar='a')\nargs:  ()  kwargs:  {'ar': 'a'}\n>>> f(1,2,param=3)\nargs:  (1, 2)  kwargs:  {'param': 3}\n",
  "label": 0
 },
 {
  "idx": 1326,
  "doc": "Generate permutations of a list of lists with variable lengths",
  "code": "lsts = [['A', 'G'], ['A', 'C', 'G'], ['T']]\n",
  "label": 0
 },
 {
  "idx": 1327,
  "doc": "Generate permutations of a list of lists with variable lengths",
  "code": ">>> from itertools import product\n>>> lsts = [['A','G'],['A','C','G'],'T']\n>>> [''.join(combo) for combo in product(*lsts)]\n['AAT', 'ACT', 'AGT', 'GAT', 'GCT', 'GGT']\n",
  "label": 1
 },
 {
  "idx": 1328,
  "doc": "capturing the usernames after List: tag",
  "code": ">>> import re\n>>> from string import whitespace\n>>> strs = re.search(r'List:(.*)(\\s\\S*\\w+):', ph, re.DOTALL).group(1)\n>>> strs.translate(None, ':'+whitespace).split(',')\n['username1', 'username2', 'username3', 'username4', 'username5']\n",
  "label": 1
 },
 {
  "idx": 1329,
  "doc": "Comparing two lists items in python",
  "code": "{'d.complex.1': {'11': 2, '10': 2, '12': 2}}\n2\n",
  "label": 0
 },
 {
  "idx": 1330,
  "doc": "Comparing two lists items in python",
  "code": "def count_number(file_dict, num):\n    count = 0\n    for set_name, number_set in file_dict.iteritems():\n        count += number_set.get(num, 0)\n\n    return count\n",
  "label": 0
 },
 {
  "idx": 1331,
  "doc": "finding index of an item closest to the value in a list that's not entirely sorted",
  "code": ">>> a = [25.75443, 26.7803, 25.79099, 24.17642, 24.3526, 22.79056, 20.84866, 19.49222, 18.38086, 18.0358, 16.57819, 15.71255, 14.79059, 13.64154, 13.09409, 12.18347, 11.33447, 10.32184, 9.544922, 8.813385, 8.181152, 6.983734, 6.048035, 5.505096, 4.65799]\n>>> min(range(len(a)), key=lambda i: abs(a[i]-11.5))\n16\n",
  "label": 1
 },
 {
  "idx": 1332,
  "doc": "Pyramid authorization for stored items",
  "code": "config = Configurator()\nconfig.add_route('item_options', '/item/{item}/some_options',\n                 # tell pyramid where in the resource tree to go for this url\n                 traverse='/foos/{item}')\n",
  "label": 0
 },
 {
  "idx": 1333,
  "doc": "Pandas Datframe1 search for match in range of Dataframe2",
  "code": "def temp(row):\n    index = df2[((row-df2).abs() < .3).all(axis=1)].index\n    return df2.loc[index[0], :] if len(index) else [None]*df2.shape[1]\n",
  "label": 1
 },
 {
  "idx": 1334,
  "doc": "Using mimetools.Message in urllib2.urlopen",
  "code": "How a newbie can find the documentation in Python\n% python\nPython 2.7.1 (r271:86832, Jan 29 2011, 13:30:16) \n[GCC 4.2.1 (Apple Inc. build 5664)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import urllib2\n>>> req = urllib2.Request('http://www.google.com')\n>>> resp = urllib2.urlopen(req)\n>>> help(resp.info())\n",
  "label": 0
 },
 {
  "idx": 1335,
  "doc": "Modify all rows in table",
  "code": "UPDATE companies \nSET ico = REPLACE(ico, ' ', '')\nWHERE ico LIKE '% %';\n",
  "label": 1
 },
 {
  "idx": 1336,
  "doc": "Modify all rows in table",
  "code": "UPDATE companies \nSET ico = REPLACE(ico, ' ', '');\n",
  "label": 1
 },
 {
  "idx": 1337,
  "doc": "What is the pythonic way to sort a list with multiple attributes, such that the first is sorted reversely but the second is not?",
  "code": ">>> l = [ ['a','b'], ['x','y'], ['a','y'], ['x', 'b'] ]\n>>> sorted(sorted(l, key=lambda x: x[1]), key=lambda x: x[0], reverse=True)\n[['x', 'b'], ['x', 'y'], ['a', 'b'], ['a', 'y']]\n",
  "label": 1
 },
 {
  "idx": 1338,
  "doc": "What is the pythonic way to sort a list with multiple attributes, such that the first is sorted reversely but the second is not?",
  "code": ">>> l = [ ['a','b'], ['x','y'], ['a','y'], ['x', 'b'] ]\n>>> sorted(l, key=lambda x: (-ord(x[0]), x[1]))\n[['x', 'b'], ['x', 'y'], ['a', 'b'], ['a', 'y']]\n",
  "label": 1
 },
 {
  "idx": 1339,
  "doc": "How to generate combination of fix length strings using a set of characters?",
  "code": "li = []\nfor i in itertools.product([0,1], repeat=4):\n    li.append(''.join(map(str, i)))\nprint (li)\n\n>>> li\n['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']\n",
  "label": 1
 },
 {
  "idx": 1340,
  "doc": "Dictionary As Table In Django Template",
  "code": "<tr>    \n{% for value in field.rows %}\n    <td>{{ value }}</td>\n{% endfor %}\n</tr>\n",
  "label": 0
 },
 {
  "idx": 1341,
  "doc": "Set global constant cross all the view",
  "code": "def process_request(self, request):\n    _thread_local.CONSTANT_NAME = CONSTANT_NAME\n",
  "label": 0
 },
 {
  "idx": 1342,
  "doc": "Creating a table out of data in python",
  "code": "your_list = ['bread', 'milk', 'sugar', 'tea', 'eggs', 'shampoo', 'clothes', 'tiger', 'beads', 'washing machine', 'juice', 'mixed herbs']\n\nprint(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format('Column 1', 'Column 2', 'Column 3', 'Column 4'))\ni = 0\nfor x in range(0, 3):\n    print(\"{0:20}    {1:20}    {2:20}    {3:20}\\n\".format(your_list[i], your_list[i + 1], your_list[i + 2], your_list[i + 3]))\n    i += 4\n",
  "label": 1
 },
 {
  "idx": 1343,
  "doc": "change multiple lines in file python using regex",
  "code": " 1    253.31     78.20     490.0         0 0 1 0 0\n   101         0         0         0         0         0         0          \n     1         2         3         4         5         6\n     2    123.31   -122.20     -20.0         0 0 1 0 0\n   101         0         0         0         0         0         0          \n     7         8         9        10        11        12\n     3     53.21      10.2      90.0         0 0 1 0 0\n   101         0         0         0         0         0         0          \n    13        14        15        11        10        10\n",
  "label": 0
 },
 {
  "idx": 1344,
  "doc": "change multiple lines in file python using regex",
  "code": "1 1.0 2.5 3.2 0 0 1 0 0\n101 0 0 0 0 0 0 \n1 2 3 4 5 6\n2 4.1 5.2 6.2 0 0 1 0 0\n101 0 0 0 0 0 0 \n7 8 9 10 11 12\n3 7.6 8.0 9.3 0 0 1 0 0\n101 0 0 0 0 0 0 \n13 14 15 11 10 10\n",
  "label": 0
 },
 {
  "idx": 1345,
  "doc": "Python - list of dicts into function that only accepts *dicts",
  "code": "one\ntwo\nthree\n",
  "label": 0
 },
 {
  "idx": 1346,
  "doc": "Pandas, Filling between dates with average change between previous rows",
  "code": "[...]\n2015-01-31  1173.278341  590.235315\n2015-02-01  1182.828960  594.911891\n2015-02-02  1192.379580  599.588466\n2015-02-03  1201.832532  604.125411\n2015-02-04  1211.285484  608.662356\n2015-02-05  1211.285484  613.199302\n2015-02-06  1211.285484  617.736247\n[...]\n",
  "label": 0
 },
 {
  "idx": 1347,
  "doc": "python string to date ISO 8601",
  "code": "def YYMMDD0FtoYYYYMMDD(date):\n    return dt.datetime.strftime(dt.datetime.strptime(date, \"%y%m%d0F\"), \"%Y-%m-%d\")\n",
  "label": 1
 },
 {
  "idx": 1348,
  "doc": "Create list of tuples (in a more elegant way)",
  "code": "with open(sys.argv[1]) as f:\n    lst = [tuple(row) for row in csv.reader(f)]\n",
  "label": 1
 },
 {
  "idx": 1349,
  "doc": "Create list of tuples (in a more elegant way)",
  "code": "import sys, csv\n\nwith open(sys.argv[1]) as f:\n    lst = list(csv.reader(f))\n",
  "label": 1
 },
 {
  "idx": 1350,
  "doc": "List Slicing python",
  "code": ">>> myl = ['A','B','C','D','E','F']\n>>> [''.join(myl[i:i+2]) for i in range(0, len(myl), 2)]\n['AB', 'CD', 'EF']\n>>> print '\\n'.join(''.join(myl[i:i+2]) for i in range(0, len(myl), 2))\nAB\nCD\nEF\n",
  "label": 1
 },
 {
  "idx": 1351,
  "doc": "List Slicing python",
  "code": ">>> map(''.join, zip(*[iter(myl)]*2))\n['AB', 'CD', 'EF']\n",
  "label": 1
 },
 {
  "idx": 1352,
  "doc": "Datastore Design Inquiry",
  "code": "class Category(db.Model):\n    title = db.StringProperty()\n    subcategories = db.ListProperty(db.Key)\n    quizzes = db.ListProperty(db.Key)\n\n    def add_sub_category(self, title):\n        new_category = Category(title)\n        new_category.put()\n        self.subcategories.append(new_category)\n        self.put()\n\n        return new_category\n",
  "label": 1
 },
 {
  "idx": 1353,
  "doc": "Get Nodes from xml by specifying limit",
  "code": "from xml.etree import ElementTree as ET\n\n\ndata = \"\"\"<Faculty>\n    <facultyMember>\n        <FirstName>A</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>B</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>C</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>D</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>E</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>F</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>G</FirstName>\n    </facultyMember>\n    <facultyMember>\n        <FirstName>H</FirstName>\n    </facultyMember>\n\n</Faculty>\"\"\"\n\ntree = ET.fromstring(data)\nbegin, end = 3, 6\n\nfor element in tree.findall('.//facultyMember')[begin - 1: end]:\n    print ET.tostring(element).strip()\n",
  "label": 1
 },
 {
  "idx": 1354,
  "doc": "Get Nodes from xml by specifying limit",
  "code": "<facultyMember>\n        <FirstName>C</FirstName>\n    </facultyMember>\n<facultyMember>\n        <FirstName>D</FirstName>\n    </facultyMember>\n<facultyMember>\n        <FirstName>E</FirstName>\n    </facultyMember>\n<facultyMember>\n        <FirstName>F</FirstName>\n    </facultyMember>\n",
  "label": 0
 },
 {
  "idx": 1355,
  "doc": "Radical Use of Admin's Interface",
  "code": "{% block breadcrumbs %}{% if not is_popup %}\n    <div class=\"breadcrumbs\">\n         <a href=\"/admin/\">Home</a> &rsaquo;\n         <a href=\"/admin/yourpath/\">Up One Level</a> &rsaquo; \n         You Are Here\n    </div>\n{% endif %}{% endblock %}\n",
  "label": 1
 },
 {
  "idx": 1356,
  "doc": "Extarct particulr part of json string using python regex",
  "code": ">>> p[\"list\"]\n{u'name': u'Robert Shriwas', u'gender': u'F', u'specializations': [u'Mentor'], u'id': 205782, u'years': 21, u'practicing_since': None}\n",
  "label": 0
 },
 {
  "idx": 1357,
  "doc": "How do I convert data from a list of lists to a readable table (or group of columns)?",
  "code": ">>> data = [['Knight', '500', '500', '0', '0'],\n            ['Mage', '0', '0', '500', '500'],\n            ['Mage', '0', '0', '500', '500'],\n            ['Mage', '0', '0', '500', '500'],\n            ['Mage', '0', '0', '500', '500']]\n\n>>> frmt = '{:10s}' + 4 * '{:>12s}'\n>>> for line in data::\n        print(frmt.format(*line))\n",
  "label": 1
 },
 {
  "idx": 1358,
  "doc": "urllib2 multiple Set-Cookie headers in response",
  "code": "help(httplib.HTTPMessage)\n...\n\nIf multiple header fields with the same name occur, they are combined\naccording to the rules in RFC 2616 sec 4.2:\n\nAppending each subsequent field-value to the first, each separated\nby a comma. The order in which header fields with the same field-name\nare received is significant to the interpretation of the combined\nfield value.\n",
  "label": 0
 },
 {
  "idx": 1359,
  "doc": "Cmd module '~' completion",
  "code": "def completedefault(self, *ignored):\n        # Set the autocomplete preferences\n        readline.set_completer_delims(' \\t\\n;')\n        readline.parse_and_bind(\"tab: complete\")\n        readline.set_completer(complete)\n",
  "label": 0
 },
 {
  "idx": 1360,
  "doc": "how to remove all non english characters and words using NLTK >",
  "code": "cat \nmeoooow \nmouse\n",
  "label": 0
 },
 {
  "idx": 1361,
  "doc": "how to remove all non english characters and words using NLTK >",
  "code": "not cat\n\nnot meoooow\n\nyes mouse\n",
  "label": 0
 },
 {
  "idx": 1362,
  "doc": "Breaking up substrings in Python based on characters",
  "code": "import re\ninputString='type=\"NN\" span=\"123..145\" confidence=\"1.0\" '\npat=re.compile('\"([^\"]*)\"')\nwhile True:\n        mat=pat.search(inputString)\n        if mat is None:\n                break\n        strings.append(mat.group(1))\n        inputString=inputString[mat.end():]\nprint strings\n",
  "label": 1
 },
 {
  "idx": 1363,
  "doc": "Working with multiple columns from a data file",
  "code": "In [63]: cumtrapz(y, x=x, axis=0, initial=0)\nOut[63]: \narray([[  0. ,   0. ,   0. ,   0. ,   0. ],\n       [ 15.5,  21. ,  15. ,  11.5,  16. ],\n       [ 31.5,  36.5,  25.5,  22.5,  32.5],\n       [ 47.5,  47. ,  37. ,  37.5,  44.5]])\n",
  "label": 0
 },
 {
  "idx": 1364,
  "doc": "python csv to dictionary columnwise",
  "code": "columns = []\nwith open(file,'rU') as f: \n    reader = csv.reader(f)\n    for row in reader:\n        if columns:\n            for i, value in enumerate(row):\n                columns[i].append(value)\n        else:\n            # first row\n            columns = [[value] for value in row]\n# you now have a column-major 2D array of your file.\nas_dict = {c[0] : c[1:] for c in columns}\nprint(as_dict)\n",
  "label": 1
 },
 {
  "idx": 1365,
  "doc": "Creating a palindrome list with reverse()",
  "code": "mus.extend(reversed(mus))\n",
  "label": 1
 },
 {
  "idx": 1366,
  "doc": "Creating a palindrome list with reverse()",
  "code": "import itertools\nfor item in itertools.chain(mus, reversed(mus)):\n    do_something...\n",
  "label": 0
 },
 {
  "idx": 1367,
  "doc": "Returning the value of an index in a python list based on other values",
  "code": ">>> import string\n>>> string.lowercase\n'abcdefghijklmnopqrstuvwxyz'\n",
  "label": 0
 },
 {
  "idx": 1368,
  "doc": "Returning the value of an index in a python list based on other values",
  "code": "cdefghijklmnopqrstuvwxyzab\n",
  "label": 0
 },
 {
  "idx": 1369,
  "doc": "Possibility of writing dictionary items in columns",
  "code": "import csv\n\nmydict = {('c4:7d:4f:53:24:be', 'ac:81:12:62:91:df'):\n          [5.998999999999998, 0.0013169999, 4.0000000000000972],\n          ('a8:5b:4f:2e:fe:09', 'de:62:ef:4e:21:de'):\n          [7.89899999, 0.15647999999675390, 8.764380000972, 9.200000000]}\n\nwith open('dict.csv', 'wb') as file:\n    writer = csv.writer(file, delimiter='\\t')\n    writer.writerow(mydict.keys())\n    for row in zip(*mydict.values()):\n        writer.writerow(list(row))\n",
  "label": 1
 },
 {
  "idx": 1370,
  "doc": "Usng the value of a string as a variable name",
  "code": "string = 'someString'\nglobals()[string] = dict()\n",
  "label": 1
 },
 {
  "idx": 1371,
  "doc": "List of distinct XML element names using BeautifulSoup",
  "code": "from bs4 import BeautifulSoup\n\ndata = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n    <to> Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>\n\"\"\"\n\nsoup = BeautifulSoup(data, 'xml')\nprint [tag.name for tag in soup.find_all()]\n",
  "label": 1
 },
 {
  "idx": 1372,
  "doc": "How can I find the average of each similar entry in a list of tuples?",
  "code": "[('Jem', [('Jem', 10), ('Jem', 9), ('Jem', 10)]),\n ('Sam', [('Sam', 10), ('Sam', 2)])]\n",
  "label": 0
 },
 {
  "idx": 1373,
  "doc": "How can I find the average of each similar entry in a list of tuples?",
  "code": "for groupname, grouptuples in groups:\n    values = [t[1] for t in groupvalues]\n    print(\"{name} {avg}\".format(name=groupname, avg=sum(values)/len(values)))\n",
  "label": 0
 },
 {
  "idx": 1374,
  "doc": "Using a global flag for python RegExp compile",
  "code": "from contextlib import contextmanager\n\n@contextmanager\ndef flag_regexen(flag):\n    import re\n    re.my_compile = re.compile\n    re.compile = lambda pattern, flags: re.my_compile(pattern, flags | flag)\n    yield\n    re.compile = re.my_compile\n",
  "label": 0
 },
 {
  "idx": 1375,
  "doc": "Using a string as a variable name",
  "code": "def post(self):\n    return [self.request.get(var) for var in ['var1', 'var2']]\n",
  "label": 1
 },
 {
  "idx": 1376,
  "doc": "progress bar properties python2.72 pywinauto",
  "code": "GetPosition()\nGetState()\nGetStep()\nSetPosition(pos)\nStepIt()\n",
  "label": 0
 },
 {
  "idx": 1377,
  "doc": "Convert a date string into YYYYMMDD",
  "code": "from datetime import datetime\n\ndates = ['30th November 2009', '31st March 2010', '30th September 2010']\n\nfor date in dates:\n    part = date.split()\n    print datetime.strptime('%s %s %s' % (part[0][:-2]), part[1], part[2]), '%d %B %Y').strftime('%Y%m%d')\n",
  "label": 1
 },
 {
  "idx": 1378,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [14]: y[0, :, 0, :]\nOut[14]: \narray([[2, 1],\n       [3, 1]])\n\nIn [15]: y[1, :, 2, :]\nOut[15]: \narray([[3, 2],\n       [2, 0]])\n",
  "label": 0
 },
 {
  "idx": 1379,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [16]: avg = y.mean(axis=(1, 3))\n\nIn [17]: avg\nOut[17]: \narray([[ 1.75,  1.75,  0.75,  2.  ,  1.5 ],\n       [ 0.75,  2.5 ,  1.75,  1.5 ,  0.75],\n       [ 0.75,  1.75,  2.25,  0.25,  1.25],\n       [ 1.5 ,  2.25,  1.25,  1.5 ,  1.5 ]])\n",
  "label": 0
 },
 {
  "idx": 1380,
  "doc": "Python Relating k-means cluster to instance",
  "code": "for d in data:\n    print '%s,%d' % (','.join([str(x) for x in d]), clusters[d[0]])\n",
  "label": 0
 },
 {
  "idx": 1381,
  "doc": "Python Relating k-means cluster to instance",
  "code": "import sklearn.cluster\nimport numpy as np\n\ndata = [\n    ['bob', 1, 3, 7],\n    ['joe', 2, 4, 8],\n    ['bill', 1, 6, 4],\n]\n\nlabels = [x[0] for x in data]\na = np.array([x[1:] for x in data])\nclust_centers = 2\n\nmodel = sklearn.cluster.k_means(a, clust_centers)\n",
  "label": 0
 },
 {
  "idx": 1382,
  "doc": "Python Relating k-means cluster to instance",
  "code": "print clusters['bob']\n",
  "label": 0
 },
 {
  "idx": 1383,
  "doc": "Python-Flask: Pass data to machine learning python script and get results back",
  "code": "$(document).ready(function(){\n    $(\"#submit\").click(function(event){\n        var uInput = $(\"#user-input\").val();\n        $.ajax({\n              type: \"POST\",\n              url: '/learning',\n              data: JSON.stringify({userInput: uInput}),\n              contentType: 'application/json',\n              success: function(response){\n                   $(\"#results\").text(response.results);\n                },\n          });\n    });\n});\n",
  "label": 0
 },
 {
  "idx": 1384,
  "doc": "how to format numbers with commas in python",
  "code": "import random\nresults = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0}\nfor count in range(6000000):\n    die = random.randint(1, 6)\n    results[die] += 1\n\nprint('Here are the results:')\n# Loop over the *keys* of the dictionary, which are the die numbers\nfor die in results:\n    # The format(..., ',d') function formats a number with thousands separators\n    print(die, '=', format(results[die], ',d'))\n# Sum up all the die results and print them out\nprint('Total rolls equal:', sum(results.values()))\n",
  "label": 1
 },
 {
  "idx": 1385,
  "doc": "Drawing a clamped uniform cubic B-spline using Cairo",
  "code": "from collections import namedtuple\n\nclass Point(namedtuple(\"Point\", \"x y\")):\n    __slots__ = ()\n\n    def interpolate(self, other, ratio = 0.5):\n        return Point(x = self.x * (1.0-ratio) + other.x * float(ratio), \\\n                     y = self.y * (1.0-ratio) + other.y * float(ratio))\n",
  "label": 0
 },
 {
  "idx": 1386,
  "doc": "How to find a index of an item in a string?",
  "code": ">>> s = \"asd#1-2#qwe\"\n>>> [i for i, c in enumerate(s) if c=='#']\n[3, 7]\n",
  "label": 1
 },
 {
  "idx": 1387,
  "doc": "How to find a index of an item in a string?",
  "code": ">>> s = \"asd##1-2####qwe\"\n>>> import re\n#Find index of all '##' in s\n>>> [m.start() for m in re.finditer(r'(?=##)', s)]\n[3, 8, 9, 10]\n",
  "label": 1
 },
 {
  "idx": 1388,
  "doc": "Sampling keys due to their values",
  "code": "x = build_cdf({\"a\":0.2, \"b\":0.3, \"c\":0.5});\ny = [sample_from_cdf(x) for i in range(0,100000)];\nprint (len([t for t in y if t == \"a\"]))   # 19864\nprint (len([t for t in y if t == \"b\"]))   # 29760\nprint (len([t for t in y if t == \"c\"]))   # 50376\n",
  "label": 0
 },
 {
  "idx": 1389,
  "doc": "String manipulation in Python (All upper and lower case derivatives of a word)",
  "code": "from itertools import product\ndef randString(istr):\n    l = [(c, c.upper()) if not c.isdigit() else (c,) for c in istr.lower()]\n    return [\"\".join(item) for item in product(*l)]\n\nprint randString(\"aBC1\")\nprint randString(\"A1b2c3\")\n",
  "label": 1
 },
 {
  "idx": 1390,
  "doc": "Combine two lists which have the same item in dict",
  "code": "c_list = [temp[a['category_name']] for a in a_list]\n",
  "label": 0
 },
 {
  "idx": 1391,
  "doc": "Combine two lists which have the same item in dict",
  "code": "temp = {a['category_name']: dict(a) for a in a_list}\nfor b in b_list:\n    temp[b['category_name']].update(b)\nc_list = list(temp.values())    # list() unnecessary in py2.X\n",
  "label": 1
 },
 {
  "idx": 1392,
  "doc": "Combine multiple heatmaps in matplotlib",
  "code": "contourf(D1,cmap='Blues')\ncontourf(D2,cmap='Reds', alpha=0.66)\ncontourf(D2,cmap='Reds', alpha=0.33)\n",
  "label": 1
 },
 {
  "idx": 1393,
  "doc": "Combine multiple heatmaps in matplotlib",
  "code": "pcolor(D1)\ncontour(D2)\n",
  "label": 1
 },
 {
  "idx": 1394,
  "doc": "Recursively reduce list of tuples",
  "code": "def is_subtuple(tup1, tup2):\n    '''Return True if all the elements of tup1 are consecutively in tup2.'''\n    if len(tup2) < len(tup1): return False\n    try:\n        offset = tup2.index(tup1[0])\n    except ValueError:\n        return False\n    # This could be wrong if tup1[0] is in tup2, but doesn't start the subtuple.\n    # You could solve this by recurring on the rest of tup2 if this is false, but\n    # it doesn't apply to your input data.\n    return tup1 == tup2[offset:offset+len(tup1)] \n",
  "label": 0
 },
 {
  "idx": 1395,
  "doc": "Communication between two gnome-terminal sessions",
  "code": "#!/usr/bin/env python\nimport os\nfrom subprocess import Popen\n\nfifo = \"fifo\"\nos.mkfifo(fifo)\np = Popen([\"gnome-terminal\", \"-x\", \"python\", \"handler.py\", fifo])\nwith open(fifo, 'wb') as file:\n    file.write(\"Text sent to handler for display\")\nos.remove(fifo)\np.wait()\n",
  "label": 0
 },
 {
  "idx": 1396,
  "doc": "Communication between two gnome-terminal sessions",
  "code": "#!/usr/bin/env python\nimport shutil\nimport sys\nimport time\n\nprint \"In handler...\"\nwith open(sys.argv[1], 'rb') as file:\n    shutil.copyfileobj(file, sys.stdout)\nsys.stdout.flush()\ntime.sleep(5)\n",
  "label": 0
 },
 {
  "idx": 1397,
  "doc": "Match C++ Strings and String Literals using regex in Python",
  "code": "import re\n\np = re.compile(r'(?P<prefix>(?:\\bu8|\\b[LuU])?)(?:\"(?P<dbl>[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?P<sngl>[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\')|R\"([^\"(]*)\\((?P<raw>.*?)\\)\\4\"')\ns = \"\\\"text'\\\\\\\"here\\\"\\nL'text\\\\'\\\"here'\\nu8\\\"text'\\\\\\\"here\\\"\\nu'text\\\\'\\\"here'\\nU\\\"text'\\\\\\\"here\\\"\\nR\\\"delimiter(text\\\"'\\\"here)delimiter\\\"\"\nprint(s)\nprint('--------- Regex works below ---------')\nfor x in p.finditer(s):\n    if x.group(\"dbl\"):\n        print(x.group(\"dbl\"))\n    elif x.group(\"sngl\"):\n        print(x.group(\"sngl\"))\n    else:\n        print(x.group(\"raw\"))\n",
  "label": 1
 },
 {
  "idx": 1398,
  "doc": "Extract text from webpage using either Python or Applescript",
  "code": "tell application \"Safari\" to set thelinkCount to do JavaScript \"document.links.length \" in document 1\nset theUrl to \"\"\nrepeat with i from 1 to thelinkCount\n    tell application \"Safari\" to set this_link to (do JavaScript \"document.links[\" & i & \"].href\" in document 1) as string\n    if this_link contains \"RNAfold/\" then\n        set theUrl to this_link\n        exit repeat\n    end if\nend repeat\n\nlog theUrl\n",
  "label": 0
 },
 {
  "idx": 1399,
  "doc": "Programming contest like input validator",
  "code": "schema = [ #define a schema\n    SizedInput(\"ages\",int),\n    SizedInput(\"names\",str),\n    MatrixInput(\"matrix\",int),\n]\n",
  "label": 0
 },
 {
  "idx": 1400,
  "doc": "How to Parse an orderedDict?",
  "code": "your_ordered_dict['clicks__c']\n",
  "label": 1
 },
 {
  "idx": 1401,
  "doc": "Python incrementing a Dictionary value entry held within a list",
  "code": "for k, v in PointsOfInterest.iteritems():\n    if k in mypkt.Text:\n        v[1].append(mykt.Text)\n",
  "label": 1
 },
 {
  "idx": 1402,
  "doc": "Python incrementing a Dictionary value entry held within a list",
  "code": "for k, v in PointsOfInterest.iteritems():\n    if k in mypkt.Text:\n        v[1] += 1\n",
  "label": 1
 },
 {
  "idx": 1403,
  "doc": "Python incrementing a Dictionary value entry held within a list",
  "code": "for k, v in PointsOfInterest.iteritems():\n    if k in mypkt.Text:\n        PointsOfInterest[k][1] = PointsOfInterest[k][1] + 1\n",
  "label": 1
 },
 {
  "idx": 1404,
  "doc": "how to search values in a file and replace",
  "code": "with open(filename, 'rb+') as f:\n\n    while True:         \n        line = f.readline()\n        if not line: break        \n        if '=2' in line:\n                f.seek(-len(line),1)\n                f.write(line.split('=2')[0]+'=6')\n                f.flush()\n",
  "label": 1
 },
 {
  "idx": 1405,
  "doc": "How to log e-mail details in AppEngine Admin console?",
  "code": "def logging_debug(what):\n    ''' Function to support cp866 encoding in developers admin console\n    '''\n    if os.environ.get('SERVER_SOFTWARE','').startswith('Devel'):\n        logging.debug(what.encode('cp866'))\n    else:\n        logging.debug(what)\n",
  "label": 0
 },
 {
  "idx": 1406,
  "doc": "Python selenium and fuzzy matching",
  "code": "import re\nelem = browser.find_elements_by_tag_name(\"option\") \nfor ele in elem:\n  m = re.search(r'(Red,.+wooly,.+small,.+UK)', ele.get_attribute(\"innerHTML\"))\n  if m:\n    print m.group(1)\n",
  "label": 1
 },
 {
  "idx": 1407,
  "doc": "Tkinter nested mainloop",
  "code": "main\nmain\nmain\nmain\nmain\n# now close the window\nend main\nend main\nend main\nend main\nend main\n",
  "label": 0
 },
 {
  "idx": 1408,
  "doc": "Tkinter nested mainloop",
  "code": "import Tkinter\n\ndef main():\n    print 'main'\n    t.mainloop()\n    print 'end main'\n\nt = Tkinter.Tk()\nb = Tkinter.Button(t, command = main)\nb.pack()\nt.mainloop()\n",
  "label": 1
 },
 {
  "idx": 1409,
  "doc": "How to search & replace in Python?",
  "code": "s = s[:5] + '-' + s[5:]\n",
  "label": 1
 },
 {
  "idx": 1410,
  "doc": "NLTK: Find contexts of size 2k for a word",
  "code": "words = (w for w in nltk.corpus.brown.words() if re.search(r\"\\w\", w))\n",
  "label": 0
 },
 {
  "idx": 1411,
  "doc": "Python function that takes an input and spits out a month and how many days it has",
  "code": "import datetime\nyear = datetime.date.today().year\n",
  "label": 0
 },
 {
  "idx": 1412,
  "doc": "Python function that takes an input and spits out a month and how many days it has",
  "code": "Enter a month as number: 2\nFeb, 28\n",
  "label": 0
 },
 {
  "idx": 1413,
  "doc": "building reusable package in django",
  "code": "def get_apps():\n    apps = (\n        'apps.store',\n        'apps.other',\n        ...\n    )\n    return [__name__ + '.' + x for x in apps]\n",
  "label": 0
 },
 {
  "idx": 1414,
  "doc": "Pandas Compute Unique Values per Column as Series",
  "code": "import numpy as np\nimport pandas as pd\nnp.random.seed(0)\ndf = pd.DataFrame(np.random.randint(5, size=(5,4)), columns=list('ABCD'))\nprint(df)\n#    A  B  C  D\n# 0  4  0  3  3\n# 1  3  1  3  2\n# 2  4  0  0  4\n# 3  2  1  0  1\n# 4  1  0  1  4\ndct = {func.__name__:df.apply(func) for func in (pd.Series.nunique, pd.Series.count)}\nprint(pd.concat(dct, axis=1))\n",
  "label": 1
 },
 {
  "idx": 1415,
  "doc": "How to recursively call a macro in jinja2?",
  "code": "class Bar\n{\n    int meow;\n    int bark;\n\nclass SubBar\n{\n    int joe;\n    int pete;\n}\n}\n",
  "label": 0
 },
 {
  "idx": 1416,
  "doc": "Using pandas to plot data",
  "code": "df = df.set_index('Date')\n",
  "label": 0
 },
 {
  "idx": 1417,
  "doc": "Python: Converting Unicode code point filenames to strings",
  "code": ">>> cp = '#U79c1'\n>>> chr(int(cp[2:],16))\n'\u79c1'\n",
  "label": 1
 },
 {
  "idx": 1418,
  "doc": "setting a condition for a mixed list",
  "code": ">>> input = [10, [\"ETSc\", \"Juniper Hairstreak\"], [\"ETSc\", \"Spotted Turtle\"], [\"ETSc\", \"Blanding's Turtle\"], \"IWWH\"]\n>>> output = [elt[0] + \" (\" + elt[1] + \")\" if type(elt) == list and elt[0] == \"ETSc\" else str(elt) for elt in input]\n>>> output\n['10', 'ETSc (Juniper Hairstreak)', 'ETSc (Spotted Turtle)', \"ETSc (Blanding's Turtle)\", 'IWWH']\n",
  "label": 1
 },
 {
  "idx": 1419,
  "doc": "setting a condition for a mixed list",
  "code": "def xform(elt):\n    if type(elt) == list and len(elt) > 1 and elt[0] == \"ETSc\":\n        return elt[0] + \" (\" + elt[1] + \")\"\n    else:\n        return str(elt)\n\noutput = [xform(elt) for elt in input]\n",
  "label": 1
 },
 {
  "idx": 1420,
  "doc": "Combine multidimensional array by group python",
  "code": "d = {}\n\nfor nm, ip, tm, dte in data:\n    key = nm, dte\n    if key in d:\n        v = d[key]\n        v[1] += \", {}\".format(ip)\n        v[2] += \", {}\".format(dte)\n    else:\n        d[key] = [nm, ip, tm, dte]\n\nprint(list(d.values()))\n",
  "label": 1
 },
 {
  "idx": 1421,
  "doc": "which random am i looking for to achieve this:",
  "code": ">>> import random\n>>> [random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]\n[']', '[]']\n>>> [random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]\n['[', '[]', ']', '[]', '[]', '[]', '[]']\n",
  "label": 1
 },
 {
  "idx": 1422,
  "doc": "PYMongo : Parsing|Serializing query output of a collection",
  "code": "result = as_class()\nfor key,value in dict_expr.items():\n        result.__setitem__(key,value)\n",
  "label": 0
 },
 {
  "idx": 1423,
  "doc": "Finding combinations that meet a threshold relation",
  "code": "[(8, 3),\n (8, 6),\n (8, 5),\n (8, 1),\n (3, 1),\n (9, 3),\n (9, 8),\n (9, 8),\n (9, 6),\n (9, 5),\n (9, 6),\n (9, 6),\n (9, 5),\n (9, 8),\n (9, 1)]\n",
  "label": 0
 },
 {
  "idx": 1424,
  "doc": "How to flexibly change PYTHONPATH",
  "code": "> cmd /c \"set PYTHONPATH=\\put\\path\\here && python myscript.py\"\n",
  "label": 1
 },
 {
  "idx": 1425,
  "doc": "How to create a new list or new line after a certain number of iterations",
  "code": "import csv\nfrom itertools import izip_longest\n\nwith open('/tmp/line.csv','r') as fin:\n    cr=csv.reader(fin)\n    n=10\n    data=izip_longest(*[iter(list(cr)[0])]*n,fillvalue='')\n    print '\\n'.join(', '.join(t) for t in data)\n",
  "label": 1
 },
 {
  "idx": 1426,
  "doc": "How to create a new list or new line after a certain number of iterations",
  "code": "CLB, HNRG, LPI, MTDR, MVO, NRGY, PSE, PVR, RRC, WES\nACMP, ATLS, ATW, BP, BWP, COG, DGAS, DNR, EPB, EPL\nEXLP, NOV, OIS, PNRG, SEP, APL, ARP, CVX, DMLP, DRQ\nDWSN, EC, ECA, FTI, GLOG, IMO, LINE, NFX, OILT, PNG\nQRE, RGP, RRMS, SDRL, SNP, TLP, VNR, XOM, XTXI, AHGP\n",
  "label": 0
 },
 {
  "idx": 1427,
  "doc": "Is it possible to download apk from google play programmatically to PC?",
  "code": "python download.py com.google.android.gm\n",
  "label": 1
 },
 {
  "idx": 1428,
  "doc": "Union of many Counters",
  "code": "result = Counter()\nfor c in counters:\n    result |= c\n",
  "label": 1
 },
 {
  "idx": 1429,
  "doc": "I want to choose the Transport Layer Security protocol in urllib2",
  "code": "import ssl\nimport urllib2\n\ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n# other settings (see ssl.create_default_context() implementation)\nurllib2.urlopen('https://example.com', context=context).close()\n",
  "label": 1
 },
 {
  "idx": 1430,
  "doc": "Sorting an array by a number string (Python 3.4.2)",
  "code": "sav = sorted(sav, key=lambda x: int(x[3]))\n",
  "label": 1
 },
 {
  "idx": 1431,
  "doc": "Sorting an array by a number string (Python 3.4.2)",
  "code": ">>> sorted(sav, key=lambda x: int(x[3]))\n[['Name: ', 'James', 'Score: ', '1'],\n ['Name: ', 'Alex', 'Score: ', '2'],\n ['Name: ', 'Josh', 'Score: ', '3']]\n",
  "label": 1
 },
 {
  "idx": 1432,
  "doc": "Different databases with the same models on Django",
  "code": "DATABASE_ROUTERS = ('our.custom.database.Router',)\n",
  "label": 0
 },
 {
  "idx": 1433,
  "doc": "how to print a dict which has japanese word using python ",
  "code": "# -*- coding: utf-8 -*-\n\nclass MyDict(dict):\n    def __str__(self):\n        return \"{\"+\", \".join([\"%s: %s\" % (key, self[key]) for key in self])+\"}\" \n\na = {0:\"Velmi \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148\"}\nb = MyDict({0:\"Velmi \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148\"})\nc = \"Velmi \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148\"\nprint(a)\nprint(b)\nprint(c)\n",
  "label": 1
 },
 {
  "idx": 1434,
  "doc": "Parenthesized repetitions in Python regular expressions",
  "code": ">>> import re\n>>> s = '(((TEST (4 5 17 33 38 45 93 101 104 108 113 116 135 146 148)) (TRAIN (0 1 2 3 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 39 40 41 42 43 44 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 94 95 96 97 98 99 100 102 103 105 106 107 109 110 111 112 114 115 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 136 137 138 139 140 141 142 143 144 145 147 149 150 151))) ((TEST (19 35 46 47 48 56 59 61 65 69 71 84 105 107 130)) (TRAIN (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41 42 43 44 45 49 50 51 52 53 54 55 57 58 60 62 63 64 66 67 68 70 72 73 74 75 76 77 78 79 80 81 82 83 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151)))'\n>>> re.findall(r'TEST\\s\\((?:\\d+\\s?)*\\)', s)\n['TEST (4 5 17 33 38 45 93 101 104 108 113 116 135 146 148)', 'TEST (19 35 46 47 48 56 59 61 65 69 71 84 105 107 130)']\n",
  "label": 1
 },
 {
  "idx": 1435,
  "doc": "is there a way to change the return value of a function without changing the function's body?",
  "code": "def g(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        func_value = func(*args, **kwargs)\n        return -func_value\n    return wrapper\n",
  "label": 1
 },
 {
  "idx": 1436,
  "doc": "is there a way to change the return value of a function without changing the function's body?",
  "code": ">>> new_func = g(f)  # your original f(x)\n>>> print(new_func(1))\n0.5\n",
  "label": 0
 },
 {
  "idx": 1437,
  "doc": "Summing similar elements within a tuple-of-tuples",
  "code": "from collections import defaultdict\n\nT1 = (('a', 'b', 2),\n ('a', 'c', 4),\n ('b', 'c', 1),\n ('a', 'b', 8),)\n\nd = defaultdict(int)\n\nfor x, y, z in T1:\n    d[(x, y)] += z\n\nT2 = tuple([(*k, v) for k, v in d.items()])\n\nprint(T2)\n",
  "label": 1
 },
 {
  "idx": 1438,
  "doc": "How do I split items in a list (with delimiter) within a list?",
  "code": ">>> x = ['temp1_a','temp2_b', None, 'temp3_c']\n>>> y, z  = [i if i is None else i.split('_')[0] for i in x ], [i if i is None else i.split('_')[1] for i in x ]\n>>> y\n['temp1', 'temp2', None, 'temp3']\n>>> z\n['a', 'b', None, 'c']\n",
  "label": 1
 },
 {
  "idx": 1439,
  "doc": "python: access multiple values in the value portion of a key:value pair",
  "code": "averages = [float(sum(values)) / len(values) for key, values in pairs]\n",
  "label": 1
 },
 {
  "idx": 1440,
  "doc": "python: access multiple values in the value portion of a key:value pair",
  "code": "averages = dict([(key, float(sum(values)) / len(values)) for key, values in pairs])\n",
  "label": 1
 },
 {
  "idx": 1441,
  "doc": "Finding common elements from two lists of lists",
  "code": "def func(a, b):\n   #sets can't contain mutable items, so convert lists to tuple while storing\n\n   s = set(tuple(y) for x in b for y in x)\n   #s is set([(41, 2, 34), (98, 23, 56), (42, 25, 64),...])\n\n   return any(tuple(item) in s for item in a)\n",
  "label": 1
 },
 {
  "idx": 1442,
  "doc": "How to iterate over a pandas dataframe and compare certain columns based on a third column?",
  "code": "import seaborn as sns\nsns.factorplot('ids', 'data', hue='var', kind='bar', data=df)\n",
  "label": 1
 },
 {
  "idx": 1443,
  "doc": "accessing files in a folder using python",
  "code": "python myscript.py FolderName\n",
  "label": 0
 },
 {
  "idx": 1444,
  "doc": "Find k smallest pairs in two lists",
  "code": "sorted(c, key=sum)[:k]\n",
  "label": 1
 },
 {
  "idx": 1445,
  "doc": "How to get a list of datatypes on Django model?",
  "code": "((<django.db.models.fields.AutoField: id>, None), (<django.db.models.fields.TextField: signature>, None) etc...\n",
  "label": 0
 },
 {
  "idx": 1446,
  "doc": "Getting Every File in a Directory, Python",
  "code": "a = [name for name in os.listdir(\".\") if name.endswith(\".txt\")]\n",
  "label": 1
 },
 {
  "idx": 1447,
  "doc": "Writing to multiple files with Scrapy",
  "code": "$ scrapy crawl authors -o authors.json -a articles=articles.json\n",
  "label": 0
 },
 {
  "idx": 1448,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['diff'] = scalar - df['data']\n",
  "label": 0
 },
 {
  "idx": 1449,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['running total'] = df['data'].cumsum()\n",
  "label": 0
 },
 {
  "idx": 1450,
  "doc": "Scrapy xpath get text of an element that starts with <",
  "code": ">>> soup.find('b', text='Recommended length of visit:').next_sibling\nu'\\n    <1 hour\\n'\n",
  "label": 0
 },
 {
  "idx": 1451,
  "doc": "Extract Numbers and Size Information (KB, MB, etc) from a String in Python",
  "code": "import re\n\n\ntest_string = '44MB\\n12b\\n6GB\\n12pb'\n\nregex = re.compile(r'(\\d+)\\s*([kmgtp]?b)', re.IGNORECASE)\n\norder = ['b', 'kb', 'mb', 'gb', 'tb', 'pb']\n\nfor value, unit in regex.findall(test_string):\n    print(int(value) * (1024**order.index(unit.lower())))\n",
  "label": 1
 },
 {
  "idx": 1452,
  "doc": "Creating multiple copies of list elements",
  "code": "unrolled = [c for c, count in weighted for _ in range(count)]\n",
  "label": 1
 },
 {
  "idx": 1453,
  "doc": "How do you check when a file is done being copied in Python?",
  "code": "while True:\n    newfiles = check_for_new_files()\n    time.sleep(pollinterval)\n    process(newfiles)\n",
  "label": 1
 },
 {
  "idx": 1454,
  "doc": "How do you check when a file is done being copied in Python?",
  "code": "newfiles = []\n\nwhile True:\n    process(newfiles)\n    newfiles = check_for_new_files()\n    time.sleep(pollinterval)\n",
  "label": 1
 },
 {
  "idx": 1455,
  "doc": "Combine methods with identical structure but different parameters",
  "code": "self.storage = {'key_A':[], 'key_B':[]}\n",
  "label": 0
 },
 {
  "idx": 1456,
  "doc": "Comparing List and get indices in python",
  "code": "res = mac_list[\"frequency\"].add(new_freq, fill_value=0)\n\n20c9d0892feb    4.0\n249cji39fj4g    1.0\n28e34789c4c2    1.0\n3480b3d51d5f    2.0\n4480ebb4e28c    1.0\n4c60de5dad72    1.0\n4ca56dab4550    1.0\ndtype: float64\n",
  "label": 0
 },
 {
  "idx": 1457,
  "doc": "Comparing List and get indices in python",
  "code": "new_freq = pd.Series(new_mac_list).value_counts()\n",
  "label": 0
 },
 {
  "idx": 1458,
  "doc": "Spark DataFrame TimestampType - how to get Year, Month, Day values from field?",
  "code": "[(1984, 1, 1), (1984, 1, 1), (1984, 1, 1), (1984, 1, 1), (1984, 1, 1)]\n",
  "label": 0
 },
 {
  "idx": 1459,
  "doc": "Auto increament the invoice number in django backend for new invoice",
  "code": "invoice_no = models.CharField(max_length = 500, default = increment_invoice_number, null = True, blank = True)\n",
  "label": 0
 },
 {
  "idx": 1460,
  "doc": "Prepend line to beginning of a file",
  "code": "def line_prepender(filename, line):\n    with open(filename, 'r+') as f:\n        content = f.read()\n        f.seek(0, 0)\n        f.write(line.rstrip('\\r\\n') + '\\n' + content)\n",
  "label": 1
 },
 {
  "idx": 1461,
  "doc": "lxml etree find closest element before",
  "code": ">>> from lxml import etree\n>>> \n>>> data = \"\"\"\n... <a>\n...     <b>\n...         <d/>\n...     </b>\n... \n...     <c attr1=\"important\"/>\n...     <b>\n...         <d/>\n...     </b>\n...     <c attr1=\"so important\" />\n...     <b></b>\n... </a>\n... \"\"\"\n>>> xmltree = etree.fromstring(data)\n>>> elems = xmltree.xpath('//d')\n>>> \n>>> for el in elems:\n...     try:\n...         print el.xpath(\"preceding::c[@attr1]\")[-1].get(\"attr1\")\n...     except IndexError:\n...         print \"No preceding 'c' element.\"\n... \nNo preceding 'c' element.\nimportant\n",
  "label": 1
 },
 {
  "idx": 1462,
  "doc": "Mongoengine filter query on list embedded field based on last index",
  "code": "db.order.aggregate([{ $project: {last_status: { $arrayElemAt: [{ $slice: [ \"$status\", -1 ] }, 0 ]} }}, {$match: {'last_status.status_code':\"scode\"}} ])\n",
  "label": 0
 },
 {
  "idx": 1463,
  "doc": "Group counted words in python",
  "code": "cnt = Counter(keywords)\n",
  "label": 0
 },
 {
  "idx": 1464,
  "doc": "Conditionally replace several columns with default values in Pandas",
  "code": "df.loc[df.DEFAULT, special]\nOut[40]: \n          A         D         G         I\n2  0.629427  0.532373  0.529779  0.274649\n4  0.226196  0.467896  0.851469  0.971351\n7  0.666459  0.351840  0.414972  0.451190\n8  0.238104  0.277630  0.943198  0.293356\n",
  "label": 1
 },
 {
  "idx": 1465,
  "doc": "How to see traceback on xmlrpc server, not client?",
  "code": "Listening on port 9999...\nHi!\nTraceback (most recent call last):\n  File \"xml.py\", line 13, in _dispatch\n    value = self.server.funcs[method](*params)\n  File \"xml.py\", line 7, in func\n    print x # error!\nNameError: global name 'x' is not defined\nlocalhost - - [11/Jan/2011 17:13:16] \"POST /RPC2 HTTP/1.0\" 200 \n",
  "label": 0
 },
 {
  "idx": 1466,
  "doc": "Regex Python findall. Making things nonredundant",
  "code": "r'(?x) ATG (?: (?<=[AG].. ATG) | (?=G) ) (?:...){8,}? (?:TAA|TAG|TGA)'\n",
  "label": 1
 },
 {
  "idx": 1467,
  "doc": "Regex Python findall. Making things nonredundant",
  "code": "r'(?x) (?: [AG].. ATG | ATG G.. )  (?:...){7,}? (?:TAA|TAG|TGA)'\n",
  "label": 1
 },
 {
  "idx": 1468,
  "doc": "Return random value from list tuple",
  "code": ">>> import random\n>>> moves = [('r', \"rock\"), ('p', \"paper\"), ('s', \"scissors\")]\n>>> random.choice(moves)\n('s', 'scissors')\n",
  "label": 1
 },
 {
  "idx": 1469,
  "doc": "Return random value from list tuple",
  "code": "random.choice(moves)[0]\n",
  "label": 1
 },
 {
  "idx": 1470,
  "doc": "Pandas OR statement ending in series contains",
  "code": "a = (((df.type == 0) & ((df.subtype == 2) | (df.subtype == 3) | \n         (df.subtype == 5) | (df.subtype == 6))) | \n         ((df.type == 5) & ((df.subtype == 3) | (df.subtype == 4) | (df.subtype == 7) | \n         (df.subtype ==  8))))\na.sum()\n",
  "label": 0
 },
 {
  "idx": 1471,
  "doc": "how to make post request in python",
  "code": "import requests\n\nheaders = {'X-API-TOKEN': 'your_token_here'}\npayload = {'title': 'value1', 'name': 'value2'}\n\nr = requests.post(\"http://foo.com/foo/bar\", data=payload, headers=headers)\n",
  "label": 1
 },
 {
  "idx": 1472,
  "doc": "how to make post request in python",
  "code": "import httplib, urllib\n\nheaders = {'X-API-TOKEN': 'your_token_here'}\npayload = \"'title'='value1'&'name'='value2'\"\n\nconn = httplib.HTTPConnection(\"heise.de\")\nconn.request(\"POST\", \"\", payload, headers)\nresponse = conn.getresponse()\n\nprint response\n",
  "label": 1
 },
 {
  "idx": 1473,
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "idinfo = root[0]\n\n#Create keyworks element\nkeywords = ET.SubElement(idinfo, \"keywords\")\ntree.write(tempXmlExportPath)\n\n#Create theme child\ntheme = ET.SubElement(keywords, \"theme\")\ntree.write(tempXmlExportPath)\n\n#Create themekt and themekey grandchildren/insert tag info\nthemekt = ET.SubElement(theme, \"themekt\")\ntree.write(tempXmlExportPath)\nfor tag in tags: #tags list from your dictionary\n    themekey = ET.SubElement(theme, \"themekey\")\n    themekey.text = tag\n    tree.write(tempXmlExportPath)\n",
  "label": 0
 },
 {
  "idx": 1474,
  "doc": "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation",
  "code": "itertools.count(someStartTime,delta)\n",
  "label": 0
 },
 {
  "idx": 1475,
  "doc": "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation",
  "code": "somelist+=[[x+f(t) for x,t in zip(somelist[-1],itertools.count(someStartTime,delta))]]\n",
  "label": 0
 },
 {
  "idx": 1476,
  "doc": "Uploading Django projects set up within virtual environment on Github",
  "code": "$ mkdir my-project; cd my-project\n$ mkvirtualenv my-env-name\n$ pip install django <more-good-stuff>\n$ pip freeze > requirements.txt\n$ git init; git add --all; git commit -m \"Initial Commit\"\n... push to github ...\n",
  "label": 0
 },
 {
  "idx": 1477,
  "doc": "Convert utf string ftom python to javascript dictionary",
  "code": "import json\n\njson_value = json.dumps(python_object)\n",
  "label": 1
 },
 {
  "idx": 1478,
  "doc": "how to get cookie in template webpy",
  "code": "render_partial = web.template.render('templates/', globals=template_globals)\ntemplate_globals.update(render=render_partial)\n",
  "label": 1
 },
 {
  "idx": 1479,
  "doc": "Sorting panda DataFrames based on criteria",
  "code": "data['ranking'] = data.groupby('Cat1')['Counter'].rank(ascending=0)\n",
  "label": 1
 },
 {
  "idx": 1480,
  "doc": "Extract elements of a 2d array with indices from another 2d array",
  "code": "out = data.ravel()[ind.ravel() + np.repeat(range(0, 8*ind.shape[0], 8), ind.shape[1])].reshape(ind.shape)\n",
  "label": 1
 },
 {
  "idx": 1481,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "[[0 1]\n [2 3]\n [4 5]\n [6 7]]\n",
  "label": 0
 },
 {
  "idx": 1482,
  "doc": "Beautiful Soup - how to fix broken tags",
  "code": "re.sub(\">\\s*(/?)(\\!--|\\!DOCTYPE|\\a|abbr|acronym|address|applet|area|\\\n                 b|base|basefont|bdo|big|blockquote|body|br|button|\\\n                 caption|center|cite|code|col|colgroup|\\\n                 dd|del|dfn|dir|div|dl|dt|\\\n                 em|\\\n                 fieldset|font|form|frame|frameset|\\\n                 head|h1|h2|h3|h4|h5|h6|hr|html|\\\n                 i|iframe|img|input|ins|\\\n                 kbd|\\\n                 label|legend|li|link|\\\n                 map|menu|meta|\\\n                 noframes|noscript|\\\n                 object|ol|optgroup|option|\\\n                 p|param|pre|\\\n                 q|\\\n                 s|samp|script|select|small|span|strike|strong|style|sub|sup|\\\n                 table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\\\n                 u|ul|\\\n                 var)>\", \"><\\g<1>\\g<2>>\", s)\n",
  "label": 1
 },
 {
  "idx": 1483,
  "doc": "Check printable for Unicode",
  "code": ">>> isprintable(u'Hello World!')\nTrue\n>>> isprintable(u'Jeg \\u00f8ve mit Norsk.')\nFalse\n",
  "label": 0
 },
 {
  "idx": 1484,
  "doc": "Check printable for Unicode",
  "code": "import re\n# match characters from \u00bf to the end of the JSON-encodable range\nexclude = re.compile(ur'[\\u00bf-\\uffff]')\n\ndef isprintable(s):\n    return not bool(exclude.search(s))\n",
  "label": 1
 },
 {
  "idx": 1485,
  "doc": "Print out a large list from file into multiple sublists with overlapping sequences in python",
  "code": "seq=\"abcdefessdfekgheithrfkopeifhghtryrhfbcvdfersdwtiyuyrterdhcbgjherytyekdnfiwytowihfiwoeirehjiwoqpft\"\n>>> n = 4\n>>> overlap = 5\n>>> division = len(seq)/n\n>>> [seq[i*division:(i+1)*division+overlap] for i in range(n)]\n['abcdefessdfekgheithrfkopeifhg', 'eifhghtryrhfbcvdfersdwtiyuyrt', 'yuyrterdhcbgjherytyekdnfiwyto', 'iwytowihfiwoeirehjiwoqpft']\n",
  "label": 1
 },
 {
  "idx": 1486,
  "doc": "More efficient way to make unicode escape codes",
  "code": "$ cat data.txt\n\\u0441\\u043b\\u043e\\u0432\\u043e\n",
  "label": 0
 },
 {
  "idx": 1487,
  "doc": "How to know the filetype through python",
  "code": "import mimetypes\ntype, subtype = mimetypes.guess_type(filename_or_url)\n",
  "label": 1
 },
 {
  "idx": 1488,
  "doc": "Convert this python dictionary into JSON format?",
  "code": "import json\n\ndict_ = {\"20090209.02s1.1_sequence.txt\": [645045714, 3559.6422951221466, 206045184], \"20090209.02s1.2_sequence.txt\": [645045714, 3543.8322949409485, 234618880]}\nvalues = [{\"file_name\": k, \"file_information\": v} for k, v in dict_.items()]\njson.dumps(values, indent=4)\n",
  "label": 1
 },
 {
  "idx": 1489,
  "doc": "Passing argument to python which is half \"<direct string>\" and half value of a variable",
  "code": "makedir (datetime.date.today().strftime(\"/myfolder/%d %B, %Y\"))\n",
  "label": 1
 },
 {
  "idx": 1490,
  "doc": "Passing argument to python which is half \"<direct string>\" and half value of a variable",
  "code": "makedir (\"/myfolder/%s\" % (datetime.date.today().strftime(\"%d %B, %Y\")))\n",
  "label": 1
 },
 {
  "idx": 1491,
  "doc": "Passing argument to python which is half \"<direct string>\" and half value of a variable",
  "code": "intval = 42\nstrVal = \"The value of intVal is %d\" % (intVal)\n",
  "label": 1
 },
 {
  "idx": 1492,
  "doc": "How to find shortest path for raw data",
  "code": "{ 0: [4191, 949],\n  1: [3002, 4028, 957],\n  2: [2494, 959, 3011],\n  3: [4243, 965],\n  4: [1478], ...}\n",
  "label": 0
 },
 {
  "idx": 1493,
  "doc": "How to find shortest path for raw data",
  "code": "[[4191, 949], [3002, 4028, 957], [2494, 959, 3011], [4243, 965], [1478], ...]\n",
  "label": 0
 },
 {
  "idx": 1494,
  "doc": "python datapanda: getting values from rows into list",
  "code": "   a  b  c\n0  2  3  2\n1  4  2  6\n\n[2L, 3L, 2L]\n[4L, 2L, 6L]\n",
  "label": 0
 },
 {
  "idx": 1495,
  "doc": "Pandas: transforming the DataFrameGroupBy object to desired format",
  "code": "df = df.groupby(['code', 'colour']).apply(lambda x:x.set_index('id').to_dict('dict')['amount'])\n",
  "label": 0
 },
 {
  "idx": 1496,
  "doc": "Pandas: transforming the DataFrameGroupBy object to desired format",
  "code": "In [105]: df\nOut[105]: \n   code/colour                               id:amount\n0    one/black                     {1: 0.392264412544}\n1    one/white  {2: 2.13950686015, 7: -0.393002947047}\n2  three/black                      {6: -2.0766612539}\n3  three/white                     {4: -1.18058561325}\n4    two/black                     {5: -1.51959565941}\n5    two/white  {8: -1.7659863039, 3: -0.595666853895}\n",
  "label": 0
 },
 {
  "idx": 1497,
  "doc": "Pandas: transforming the DataFrameGroupBy object to desired format",
  "code": "df.index = ['/'.join(i) for i in df.index]\n",
  "label": 0
 },
 {
  "idx": 1498,
  "doc": "Pandas: transforming the DataFrameGroupBy object to desired format",
  "code": "df = df.reset_index()\n",
  "label": 0
 },
 {
  "idx": 1499,
  "doc": "Slicing based on dates Pandas Dataframe",
  "code": "for idx in idx_values:\n    df.iloc[idx-3: idx+4]\n",
  "label": 0
 },
 {
  "idx": 1500,
  "doc": "How to format inputted data and output it",
  "code": "authors = []\nnum_authors = int(raw_input(\"How Many Authors? \"))\nfor i in range(num_authors):\n    authors.append(raw_input(\"Enter Author's Name ({}): \".format(i+1)))\n",
  "label": 0
 },
 {
  "idx": 1501,
  "doc": "Python: use regular expression to remove the white space from all lines",
  "code": "re.sub(r\"(?m)^\\s+\", \"\", \"a\\n b\\n c\")\n",
  "label": 1
 },
 {
  "idx": 1502,
  "doc": "Python, using BeautifulSoup parsing values from a table",
  "code": "html = \"\"\"\n<table id=\"detailBody\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"tab2\" style=\"display: block;\">\n<tbody>\n<tr>\n    <td>\n    <ul>\n    <li><span>15:00:19</span><span class=\"red\">11.750</span><span class=\"red\">5392</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:55</span><span class=\"red\">11.750</span><span class=\"red\">17</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:52</span><span class=\"red\">11.750</span><span class=\"red\">479</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:49</span><span class=\"\">11.740</span><span class=\"green\">6</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:46</span><span class=\"\">11.740</span><span class=\"green\">333</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:43</span><span class=\"\">11.740</span><span class=\"green\">21</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:40</span><span class=\"\">11.740</span><span class=\"green\">15</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:37</span><span class=\"\">11.740</span><span class=\"green\">35</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:34</span><span class=\"red\">11.750</span><span class=\"red\">11</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:31</span><span class=\"\">11.740</span><span class=\"green\">3</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:28</span><span class=\"\">11.740</span><span class=\"green\">24</span><span class=\"fr green\">?</span></li>\n    <li><span>14:56:22</span><span class=\"red\">11.750</span><span class=\"red\">291</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:19</span><span class=\"\">11.740</span><span class=\"red\">198</span><span class=\"fr red\">?</span></li>\n    <li><span>14:56:16</span><span class=\"green\">11.730</span><span class=\"green\">15</span><span class=\"fr green\">?</span></li>\n    </ul>\n    </td>\n</tr>\n</tbody></table>\"\"\"\n\nsoup = BeautifulSoup(html)\n\ncol_3 = []\ncol_4 = []\n\nfor li in soup.find_all('table')[0].find_all(\"li\"):\n    cols = li.find_all(\"span\")\n    col_3.append(cols[2].text)\n    col_4.append(cols[3].text)\n\nprint col_3 \nprint col_4\n",
  "label": 1
 },
 {
  "idx": 1503,
  "doc": "get characters from string in python",
  "code": "import re\np = re.compile('^TestVar\\s+(\\d{8})\\s+(\\S+)')\nm = p.match('TestVar 00000000  WWWWWW 222.222 222.222 222.222')\nif m:\n    print 'Match found: ', m.group(2) + '_' + m.group(1)\nelse:\n    print 'No match'\n",
  "label": 1
 },
 {
  "idx": 1504,
  "doc": "Python: Removing random whitespace from a string of numbers",
  "code": "20101002 100224 1 1044 45508 1001 1002 1003 1004 1005 1006\n",
  "label": 0
 },
 {
  "idx": 1505,
  "doc": "Disable pagination in Django tastypie?",
  "code": "API_LIMIT_PER_PAGE = 0\n",
  "label": 0
 },
 {
  "idx": 1506,
  "doc": "Attaching a PDF to an email in Appengine (Python)",
  "code": "attachments = [('yourpdf.pdf', pdf_contents)]\n",
  "label": 0
 },
 {
  "idx": 1507,
  "doc": "having category headings for list dictionaries in python/django",
  "code": "{% for key, values in result.items() %}\n    <span>{{key}}</span>\n    <ul>\n    {% for item in values %}\n        <li>{{item}}</li>\n    {% endfor %}\n    </ul>\n{% endfor %}\n",
  "label": 0
 },
 {
  "idx": 1508,
  "doc": "Filling gaps for cumulative sum with Pandas",
  "code": "In [31]: dfg.pivot_table([\"incoming\", \"level\"], \"month\", \"goods\")\nOut[31]:\n      incoming         level\ngoods        a   b   c     a    b   c\nmonth\n1            0  30 NaN     0   30 NaN\n2           30 NaN  10    30  NaN  10\n3          NaN  70 NaN   NaN  100 NaN\n5          NaN  40  50   NaN  140  60\n6           20 NaN NaN    50  NaN NaN\n",
  "label": 0
 },
 {
  "idx": 1509,
  "doc": "How to implement man-like help page in python(python shell already has it)",
  "code": "    Python27\\Lib\\pydoc.py\n",
  "label": 0
 },
 {
  "idx": 1510,
  "doc": "How to place a matplotlib plot into an html container using mpld3 and flask",
  "code": "  <div class=\"btn-group\" data-toggle=\"buttons\">\n  <label class=\"btn btn-primary\">\n      <input type=\"radio\" name=\"options\" id=\"home\"> Option 1\n  </label>\n  <label class=\"btn btn-primary\">\n      <input type=\"radio\" name=\"options\" id=\"option2\"> Option 2\n  </label>\n  <label class=\"btn btn-primary\">\n      <input type=\"radio\" name=\"options\" id=\"option3\"> Option 3\n  </label>\n",
  "label": 0
 },
 {
  "idx": 1511,
  "doc": "Regex: Match brackets both greedy and non greedy",
  "code": ">>> text = \"\"\"show the (name) of the (person)\n...\n... calc the sqrt of (+ (* (2 4) 3))\"\"\"\n>>> import pyparsing\n>>> for match in pyparsing.nestedExpr('(',')').searchString(text):\n...   print match[0]\n...\n['name']\n['person']\n['+', ['*', ['2', '4'], '3']]\n",
  "label": 1
 },
 {
  "idx": 1512,
  "doc": "boost python overload operator ()",
  "code": ">>> import example\n>>> queuer = example.Queuer()\n>>> queuer(example.Agent(), example.Message())\nQueuer::operator() with Agent.\n>>> queuer(example.Queue(), example.Message())\nQueuer::operator() with Queue.\n>>> queuer(example.Spam(), example.Message())\nQueuer::operator() with Spam.\n",
  "label": 0
 },
 {
  "idx": 1513,
  "doc": "Finding groups of increasing numbers in a list",
  "code": "def sequences(x):\n    it = iter(x)\n    prev, temp = next(it), []\n    while prev is not None:\n        start = next(it, None)\n        if prev + 1 == start:\n            temp.append(prev)\n        elif temp:\n            yield tuple(temp + [prev])\n            temp = []\n        prev = start\n",
  "label": 1
 },
 {
  "idx": 1514,
  "doc": "How do I zip the contents of a folder using python (version 2.5)?",
  "code": "C:\\zipdir> python -mzipdir c:\\tmp\\test test.zip\n",
  "label": 0
 },
 {
  "idx": 1515,
  "doc": "How to plot histogram of multiple lists?",
  "code": "plt.bar(range(0, len(sum_list)), sum_list)\n",
  "label": 0
 },
 {
  "idx": 1516,
  "doc": "Update dictionary in xml from csv file in python",
  "code": "d.text = ','.join('%s=%s' % (k, xml_dict[k]) for k in sorted(xml_dict.keys()))\n",
  "label": 0
 },
 {
  "idx": 1517,
  "doc": "Python-Getting contents between current and next occurrence of pattern in a string",
  "code": ">>> re.split('', 'abcabc')\n['abcabc']\n",
  "label": 0
 },
 {
  "idx": 1518,
  "doc": "Python - workaround with sets",
  "code": "n = 27\nprint \"{0:010b}\".format(n) # prints \"0000011010\"\n",
  "label": 1
 },
 {
  "idx": 1519,
  "doc": "Python - workaround with sets",
  "code": "n = 27\nprint \"{0:b}\".format(n).zfill(10) # prints \"0000011010\"\n",
  "label": 1
 },
 {
  "idx": 1520,
  "doc": "Effective regex for multiple strings with characters and numbers",
  "code": "\\b         # word boundary\n(?=[0-9U]) # only here to quickly discard word-boundaries not followed\n           # by a digit or the letter U without to test the two branches\n           # of the following alternation. You can remove it if you want.\n\n(?:\n    [0-9]+\\s*U\\.?S\\.?D # USD after\n  |                    # OR\n    U\\.?S\\.?D\\s*[0-9]+ # USD before\n)\n\\b\n",
  "label": 0
 },
 {
  "idx": 1521,
  "doc": "Calculate weighted average using a pandas/dataframe",
  "code": "In [11]: g = df.groupby('Date')\n\nIn [12]: df.value / g.value.transform(\"sum\") * df.wt\nOut[12]:\n0    0.125000\n1    0.250000\n2    0.416667\n3    0.277778\n4    0.444444\ndtype: float64\n",
  "label": 0
 },
 {
  "idx": 1522,
  "doc": "inequality comparison of numpy array with nan to a scalar",
  "code": ">>> x < -1000\narray([False, False, False,  True, False, False], dtype=bool)\n",
  "label": 0
 },
 {
  "idx": 1523,
  "doc": "How to see if section of python code completes within a given time",
  "code": "from threading import Timer\nimport thread\n\ndef run_with_timeout( timeout, func, *args, **kwargs ):\n    \"\"\" Function to execute a func for the maximal time of timeout.\n    [IN]timeout        Max execution time for the func\n    [IN]func           Reference of the function/method to be executed\n    [IN]args & kwargs  Will be passed to the func call\n    \"\"\"\n    try:\n        # Raises a KeyboardInterrupt if timer triggers\n        timeout_timer = Timer( timeout, thread.interrupt_main )\n        timeout_timer.start()\n        return func( *args, **kwargs )\n    except KeyboardInterrupt:\n        print \"run_with_timeout timed out, when running '%s'\" %  func.__name__\n        #Normally I raise here my own exception\n    finally:\n        timeout_timer.cancel()\n",
  "label": 1
 },
 {
  "idx": 1524,
  "doc": "List Highest Correlation Pairs from a Large Correlation Matrix in Pandas?",
  "code": "import pandas as pd\nimport numpy as np\n\nshape = (50, 4460)\n\ndata = np.random.normal(size=shape)\n\ndata[:, 1000] += data[:, 2000]\n\ndf = pd.DataFrame(data)\n\nc = df.corr().abs()\n\ns = c.unstack()\nso = s.order(kind=\"quicksort\")\n\nprint so[-4470:-4460]\n",
  "label": 1
 },
 {
  "idx": 1525,
  "doc": "Python Decimals format",
  "code": "tests=[(1.00,'1'),\n       (1.2,'1.2'),\n       (1.23,'1.23'),\n       (1.234,'1.23'),\n       (1.2345,'1.23')]\n\nfor num,answer in tests:\n    result='{0:.3g}'.format(num)\n    if result != answer:\n        print('Error: {0} --> {1} != {2}'.format(num,result,answer))\n        exit()\n    else:\n        print('{0} --> {1}'.format(num,result))\n",
  "label": 1
 },
 {
  "idx": 1526,
  "doc": "Python Decimals format",
  "code": "'{0:.3g}'.format(num)\n",
  "label": 1
 },
 {
  "idx": 1527,
  "doc": "Tipfy & Jinja: Creating a logout URL for every page",
  "code": "class FileUploadFormHandler(BaseHandler):\n    def get(self):\n        ...\n        self.render_jinja('contact_jinja', form=form, ...\n",
  "label": 0
 },
 {
  "idx": 1528,
  "doc": "Jinja2 to put a whole element in <option>",
  "code": "<select name=\"my_name\">\n    {% for key, value in mydict.items() %}\n        <option value=\"{{key}}\" \n        {% if (key == target) %} selected=\"selected\" { %endif %}\n        >\n        {{value}}\n        </option>\n    {% endfor %}\n</select>\n",
  "label": 0
 },
 {
  "idx": 1529,
  "doc": "different foreground colors for each line in wxPython wxTextCtrl",
  "code": "rtc = wx.richtext.RichTextCtrl(self, style=wx.VSCROLL|wx.HSCROLL|wx.NO_BORDER)\nrtc.BeginTextColour((255, 0, 0))\nrtc.WriteText(\"this color is red\")\nrtc.EndTextColour()\nrtc.Newline()\n",
  "label": 1
 },
 {
  "idx": 1530,
  "doc": "How to remove lines in a Matplotlib plot",
  "code": "from matplotlib import pyplot\nimport numpy, weakref\na = numpy.arange(int(1e3))\nfig = pyplot.Figure()\nax  = fig.add_subplot(1, 1, 1)\nlines = ax.plot(a)\n\nl = lines.pop(0)\nwl = weakref.ref(l)  # create a weak reference to see if references still exist\n#                      to this object\nprint wl  # not dead\nl.remove()\nprint wl  # not dead\ndel l\nprint wl  # dead  (remove either of the steps above and this is still live)\n",
  "label": 1
 },
 {
  "idx": 1531,
  "doc": "Return All Matching Lines in a Logfile",
  "code": "regexp = re.compile(r'\\[(\\d+)\\] SERVICE NOTIFICATION: (.+)')\n",
  "label": 0
 },
 {
  "idx": 1532,
  "doc": "Python Quickest way to round every float in nested list of tuples",
  "code": "def re_round(li, _prec=5):\n     try:\n         return round(li, _prec)\n     except TypeError:\n         return type(li)(re_round(x, _prec) for x in li)\n",
  "label": 1
 },
 {
  "idx": 1533,
  "doc": "How to convert a string that already looks like a list into a list?",
  "code": ">>> import ast\n>>> ast.literal_eval(\"['11', '20', '0']\")\n['11', '20', '0']\n",
  "label": 1
 },
 {
  "idx": 1534,
  "doc": "How to link PyQt4 script button to activate another script?",
  "code": "# dd.py\nimport sys\ndef main(arg):\n    # do something here\n    print arg\n\nif __name__ == \"__main__\":\n    arg = sys.argv[1]\n    main(arg)\n",
  "label": 0
 },
 {
  "idx": 1535,
  "doc": "Python, remove specific columns from file",
  "code": "import csv\nimport re\nfrom itertools import islice\n\nrow_split = re.compile('\\s*\\*\\s*')\n\nwith open(someinputfile, 'rb') as infile, open(outputfile, 'wb') as outfile:\n    writer = csv.writer(outfile, delimiter='\\t')\n\n    next(islice(infile, 3, 3), None) # skip the first 3 lines in the input file\n\n    for line in infile:\n        row = row_split.split(line)[1:-1]\n        if not row: continue\n        writer.writerow(row[8::7])\n",
  "label": 1
 },
 {
  "idx": 1536,
  "doc": "In python convert day of year to month and fortnight",
  "code": "In [11]: d\nOut[11]: datetime.datetime(2004, 3, 28, 0, 0)\n\nIn [12]: d.replace(day=1 if d.day < 15 else 15)\nOut[12]: datetime.datetime(2004, 3, 15, 0, 0)\n\nIn [13]: t = pd.Timestamp(d)\n\nIn [14]: t.replace(day=1 if t.day < 15 else 15)\nOut[14]: Timestamp('2004-03-15 00:00:00')\n",
  "label": 1
 },
 {
  "idx": 1537,
  "doc": "Retrieve position of elements with setting some criteria in numpy",
  "code": "import numpy as np\nimport scipy.ndimage.filters as filters\n\ndef using_filters(data):\n    return np.where(np.logical_and.reduce(\n        [data == f(data, footprint=np.ones((3,3)), mode='constant', cval=np.inf)\n         for f in (filters.maximum_filter, filters.minimum_filter)]))  \n\nusing_filters(data)\n# (array([2, 3]), array([5, 9]))\n",
  "label": 1
 },
 {
  "idx": 1538,
  "doc": "Python list comparison to create trees",
  "code": "# parse data\ndata = \"\"\"Group  Item-1  Item-2\n0       7       13\n0      10        4\n1       2        8\n1       3        1\n1       4        3\n1       6       28\n1       8        6\"\"\"\ndata = [[int(x) for x in line.split()] for line in data.splitlines()[1:]]\n\n# get mapping {group_number: [list of pairs]}\ngroups = defaultdict(list)\nfor g, x, y in data:\n    groups[g].append((x, y))\n\n# for each group, add pairs to union find structure and get groups\nfor group, links in groups.items():\n    union = UnionFind()\n    for x, y in links:\n        union.union(x, y)\n    print group, union.get_groups().values()\n",
  "label": 0
 },
 {
  "idx": 1539,
  "doc": "GMail API - Get last message of a thread",
  "code": "fields = messages(id,internalDate)\n\nGET https://www.googleapis.com/gmail/v1/users/me/threads/14e92e929dcc2df2?fields=messages(id%2CinternalDate)&access_token={YOUR_API_KEY}\n",
  "label": 1
 },
 {
  "idx": 1540,
  "doc": "how to Perform search operation in Django?",
  "code": "$(\"#resume\").bind(\"click\",function() {\n    $.post(\"/resume/\",\n    {\n        name: \"Resume\" //Any example parameter that is to be passed to the view function.\n    },\n    function(data,textStatus)\n    {\n    //Callback function on success\n    });\n});\n",
  "label": 0
 },
 {
  "idx": 1541,
  "doc": "vectorize numpy unique for subarrays",
  "code": "np.sort(data.reshape(N,-1))\n\narray([[1, 2, 2, 3, 3, 5, 5, 5, 6, 6],\n       [1, 1, 1, 2, 2, 2, 3, 3, 5, 7],\n       [0, 0, 2, 3, 4, 4, 4, 5, 5, 9],\n       [2, 2, 3, 3, 4, 4, 5, 7, 8, 9],\n       [0, 2, 2, 2, 2, 5, 5, 5, 7, 9]])\n",
  "label": 0
 },
 {
  "idx": 1542,
  "doc": "Load JPEG from URL to skimage without temporary file",
  "code": "from imread import imread_from_blob\nimg_data = imread_from_blob(data, 'jpg')\n\n>>> img_data\narray([[[ 23, 123, 149],\n[ 22, 120, 147],\n[ 22, 118, 143],\n...,\n",
  "label": 1
 },
 {
  "idx": 1543,
  "doc": "Python. How to efficiently remove custom object from array",
  "code": "self.skills = filter(lambda skill: skill.id != skill_to_remove.id, self.skills)\n",
  "label": 0
 },
 {
  "idx": 1544,
  "doc": "Sorting data from a csv alphabetically, highest to lowest and average",
  "code": "import csv\nimport collections\n...\nwith open(path) as f:\n    entries = collections.Counter()\n    total_scores = collections.Counter()\n    for name,score in csv.reader(f):\n        total_scores[name] += int(score)\n        entries[name] += 1\n",
  "label": 0
 },
 {
  "idx": 1545,
  "doc": "Python Using (%s) in a string that slo contains a (%)?",
  "code": ">>> name = 'John'\n>>> string = 'hello %s! You owe 10%%.' % (name)\n>>> string\n'hello John! You owe 10%.'\n",
  "label": 1
 },
 {
  "idx": 1546,
  "doc": "Python Using (%s) in a string that slo contains a (%)?",
  "code": ">>> name = 'John'\n>>> string = 'hello {}! You owe 10%'.format(name)\n>>> string\n'Hello John! You owe 10%'\n# Another way, with naming for more readibility\n>>> string = 'hello {name}! You owe 10%.'.format(name=name)\n>>> str\n'hello John! You owe 10%.'\n",
  "label": 1
 },
 {
  "idx": 1547,
  "doc": "Printing a two dimensional list",
  "code": "def print_board(game_state):\n    \"\"\"Prints the game board given the current game state\"\"\"\n\n    print(\"1 2 3 4 5 6 7\")\n    for row in range(BOARD_ROWS):\n        for col in range(BOARD_COLUMNS):\n            if game_state.board[row][col] == connect_four.NONE:\n                print('.', end=' ')\n            elif game_state.board[row][col] == connect_four.RED:\n                print('R', end=' ')\n            elif game_state.board[row][col] == connect_four.YELLOW:\n               print('Y', end=' ')\n\n        print()\n",
  "label": 1
 },
 {
  "idx": 1548,
  "doc": "python 3: Adding .csv column sums in to dictionaries with header keys",
  "code": "def sumColumns1(columnfile):\n    import csv\n    with open(columnfile) as csvfile:\n        r = csv.reader(csvfile)\n        names = next(r)\n        Int = lambda x: 0 if x=='' else int(x)\n        sums  = reduce(lambda x,y: [ Int(a)+Int(b) for a,b in zip(x,y) ], r)\n        return dict(zip(names,sums))\n",
  "label": 1
 },
 {
  "idx": 1549,
  "doc": "variable length of %s with the % operator in python",
  "code": ">>> print \"<%.*s>\" % (len(text)-2,text)\n<abcd>\n",
  "label": 0
 },
 {
  "idx": 1550,
  "doc": "variable length of %s with the % operator in python",
  "code": ">>> print \"<%*s>\" % (len(text)-2,text)\n<abcdef>\n",
  "label": 0
 },
 {
  "idx": 1551,
  "doc": "Combine variable and for each loop python",
  "code": "for x,y in zipMap(get_handler, the_list):\n    ...\n",
  "label": 0
 },
 {
  "idx": 1552,
  "doc": "Combine variable and for each loop python",
  "code": "def withHandler(iterable):\n    for x in iterable:\n        yield x,get_handler(x)\n",
  "label": 0
 },
 {
  "idx": 1553,
  "doc": "Using lxml to extract data where all elements are not known in advance",
  "code": "ADDRESS\nSTREET\nSTREET1\nCITY\nZIP\nPHONE\nCOUNTRY\n",
  "label": 0
 },
 {
  "idx": 1554,
  "doc": "Using lxml to extract data where all elements are not known in advance",
  "code": "<ADDRESS>\n         <STREET>One Main Street</STREET>\n         <STREET1>One Second Street</STREET1>\n        <CITY>Gotham City</CITY>\n         <ZIP>99999 0123</ZIP>\n         <PHONE>555-123-5467</PHONE>         \n         <COUNTRY>USA</COUNTRY>    \n</ADDRESS>\n",
  "label": 0
 },
 {
  "idx": 1555,
  "doc": "Using lxml to extract data where all elements are not known in advance",
  "code": ">>> for tags in root.iter():\n...     print tags.text\n... \n\nOne Main Street\nOne Second Street\nGotham City\n99999 0123\n555-123-5467\nUSA\n",
  "label": 0
 },
 {
  "idx": 1556,
  "doc": "Match rows between two files and mark the matched strings",
  "code": "import re\nwith open('fileA.txt') as A:\n    A_content=[x.strip() for x in A]\nwith open('fileB.txt') as B:\n    B_content=[x.strip() for x in B]\noutput=[]\nfor line_A in A_content:\n    for line_B in B_content:\n        #do whatever formatting you need on the text, \n        # I am just surrounding it with *'s here\n\n        replace = \"**\" + line_B + \"**\"\n\n        #use re.sub, \n        # details here: https://docs.python.org/2/library/re.html#re.sub\n\n        line_A = re.sub(line_B, replace , line_A)\n    #I am adding everything to the output array but you can check if it is \n    # different from the initial content. I leave that for you to do\n    output.append(line_A)\n",
  "label": 1
 },
 {
  "idx": 1557,
  "doc": "python pandas filter dataframe by another series, multiple columns",
  "code": "# Make sure your series has a name\n# Make sure the index is pure dates, not date 00:00:00\nmost_liquid_contracts.name = 'most'\nmost_liquid_conttracts.index = most_liquid_contracts.index.date\n\ndata = df\ndata['day'] = data.index.date\ncombined = data.join(most_liquid_contracts, on='day', how='left')\n",
  "label": 0
 },
 {
  "idx": 1558,
  "doc": "Turn a List of Str into a List of Int (Python)",
  "code": ">>> List1 = ['1 2 3 4 5', '6 7 8 9 10', '11 12 13 14 15']\n>>> [ int(x) for x in ' '.join(List1).split()]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n",
  "label": 1
 },
 {
  "idx": 1559,
  "doc": "Socket code from python to Objective C",
  "code": "- (BOOL)connect\n{\n    struct sockaddr_in addr;\n    sockfd = socket( AF_INET, SOCK_STREAM, 0 );\n    addr.sin_family = AF_INET;\n    addr.sin_addr.s_addr = inet_addr([TV_IP UTF8String]);\n    addr.sin_port = htons(TV_PORT);\n    return connect(sockfd, (struct sockaddr*)&addr, sizeof(addr))==0;\n}\n\n- (long)send:(NSData*)data\n{\n    long sent = send(sockfd, [data bytes], [data length], 0);\n\n    VADebugLog(@\"sent data:(%ld bytes) = [%@]\",sent,[data description]);\n\n    return sent;\n}\n\n-(void)close\n{\n    close(sockfd);\n}\n",
  "label": 0
 },
 {
  "idx": 1560,
  "doc": "How to separate a single list into multiple list in python",
  "code": ">>> orange\n['I_want_ten_orange_cookies', 'I_want_four_orange_juices']\n\n>>> lemon\n['I_want_ten_lemon_cookies', 'I_want_four_lemon_juices']\n",
  "label": 0
 },
 {
  "idx": 1561,
  "doc": "How to separate a single list into multiple list in python",
  "code": ">>> s='I_appeared_there'\n\n>>> if 'pear' in s:\n    print \"yes\"\n\nyes\n\n>>> if 'pear' in s.split('_'):\n    print \"yes\"\n\n>>>\n",
  "label": 0
 },
 {
  "idx": 1562,
  "doc": "how to properly loop through two files comparing strings in both files against each other",
  "code": "import csv\nimport json\n\nscores = {}  # empty dictionary to store scores for each word\n\nwith open('sentimentfile.txt') as f:\n    reader = csv.reader(f, delimiter='\\t')\n    for row in reader:\n        scores[row[0].strip()] = int(row[1].strip()) \n\n\nwith open('tweetsfile.txt') as f:\n    for line in f:\n        tweet = json.loads(line)\n        text = tweet.get('text','').encode('utf-8')\n        if text:\n            total_sentiment = sum(scores.get(word,0) for word in text.split())\n            print(\"{}: {}\".format(text,score))\n",
  "label": 1
 },
 {
  "idx": 1563,
  "doc": "Iterate through a list of numpy arrays",
  "code": "def do_something(np_array):\n    # work on the array here\n\nfor i in list_of_array:\n    do_something(i)\n",
  "label": 0
 },
 {
  "idx": 1564,
  "doc": "Query endpoint user by email",
  "code": "from google.appengine.ext import ndb\nfrom endpoints_proto_datastore.ndb import EndpointsModel\n\nclass User(EndpointsModel):\n    email = ndb.StringProperty()\n    ...\n",
  "label": 0
 },
 {
  "idx": 1565,
  "doc": "Query endpoint user by email",
  "code": "OPTION 2: Roll your own query\n    @User.method(request_fields=('email',),\n                 path='get_by_mail/{email}',\n                 http_method='GET', name='user.get_by_email')\n    def get_by_email(self, user):\n        query = User.query(User.email == user.email)\n        # We fetch 2 to make sure we have\n        matched_users = query.fetch(2)\n        if len(matched_users == 0):\n            raise endpoints.NotFoundException('User not found.')\n        elif len(matched_users == 2):\n            raise endpoints.BadRequestException('User not unique.')\n        else:\n            return matched_users[0]\n",
  "label": 1
 },
 {
  "idx": 1566,
  "doc": "sqlalchemy - elegant way to deal with several optional filters?",
  "code": "NAMES = 'foo bar baz bat'.split()\n\ndef get_query_results(*filters):\n    res = models.Item.query\n    for name, filt in zip(NAMES, filters):\n        if filt is not None:\n            d = {name: filt}\n            res = res.filter(**d)\n    return res.all()\n",
  "label": 1
 },
 {
  "idx": 1567,
  "doc": "Transform comma separated string into a list but ignore comma in quotes",
  "code": "from cStringIO import StringIO\nfrom csv import reader\n\nfile_like_object = StringIO(\"1,,2,'3,4'\")\ncsv_reader = reader(file_like_object, quotechar=\"'\")\nfor row in csv_reader:\n    print row\n",
  "label": 1
 },
 {
  "idx": 1568,
  "doc": "Get length of subset pandas DataFrame",
  "code": "In [8]: df = pd.DataFrame([['one', 2, 3],\n   ...:  ['one', 3, 4],\n   ...:  ['two', 4, 6]], columns=['A', 'B', 'C'])\n\nIn [10]: df.groupby('A')['B'].transform(lambda x: len(x))\nOut[10]:\n0    2\n1    2\n2    1\nName: B, dtype: int64\n",
  "label": 1
 },
 {
  "idx": 1569,
  "doc": "Stop a command line command in script",
  "code": "proc.pid # returns the id of process\n",
  "label": 0
 },
 {
  "idx": 1570,
  "doc": "Stop a command line command in script",
  "code": "out, err = proc.communicate()\n",
  "label": 0
 },
 {
  "idx": 1571,
  "doc": "Sort a list based on a given distribution",
  "code": "\n#Test\n\nl=[([0.23, 0.27, 0.4, 0.1],[3, 2, 2, 1]),\n   ([0.25, 0.25, 0.4, 0.1],[3, 2, 2, 1]),\n   ([0.2,  0.2,  0.4, 0.2],[3, 2, 2, 1])]\n\ndef f1(perc,opt):\n    return take(opt,argsort(argsort(perc)[::-1]))\n\ndef f2(perc,opt):\n    return zip(*sorted(zip(sorted(range(len(perc)),\n             key=perc.__getitem__)[::-1],opt)))[1]       \n\nfor i in l:\n    perc, opt = i\n    print f1(perc,opt), f2(perc,opt)\n\n# output:\n# [2 2 3 1] (2, 2, 3, 1)\n# [2 2 3 1] (2, 2, 3, 1)\n# [1 2 3 2] (1, 2, 3, 2)\n",
  "label": 0
 },
 {
  "idx": 1572,
  "doc": "RegEx in Python matching multiple substrings using one group",
  "code": "t = tuple(lst)\n",
  "label": 0
 },
 {
  "idx": 1573,
  "doc": "parse list of tuple in python and eliminate doubles",
  "code": "    def comparePackages(package_dictionary):\n     #loop in keys and values of package_dictionary\n        for package_name, list_versions in zip(package_dictionary.keys(), package_dictionary.values()) :\n            #loop on each sublist\n            for position in xrange(len(list_versions)) :\n                a = str(list_versions[position])\n                b = str(list_versions[position-1])\n                #the only way it worked was by using a and b\n                vc = apt_pkg.version_compare(a,b)\n                if vc > 0:\n                    #a>b\n                    max_version = a\n                elif vc == 0:\n                    #a==b\n                    max_version = a         \n                elif vc < 0:\n                    #a<b\n                    max_version = b\n\n            del list_versions[:]\n            if(max_version is '') :\n                max_version = 'Not Specified'\n\n            package_dictionary[package_name] = max_version\n",
  "label": 1
 },
 {
  "idx": 1574,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "...\n(u'session', u'docInfo', u'field', 0, '#text') = Jake Roberts\n(u'session', u'docInfo', u'field', 1, u'@name') = Section\n(u'session', u'docInfo', u'field', 1, u'@isOpen') = True\n(u'session', u'docInfo', u'field', 1, u'@isMandotory') = False\n(u'session', u'docInfo', u'field', 1, '#text') = 5\n...\n",
  "label": 0
 },
 {
  "idx": 1575,
  "doc": "Finding the heaviest path in a binary tree efficiently - python",
  "code": "def heavy_path(node):\n  if not node\n    return (0,[])\n  [lweight,llist] = heavy_path(node.left)\n  [rweight,rlist] = heavy_path(node.right)\n  if lweight>rweight:\n    return (node.val+lweight,[node.val]+llist)\n  else:\n    return (node.val+rweight,[node.val]+rlist)\n",
  "label": 1
 },
 {
  "idx": 1576,
  "doc": "Finding the heaviest path in a binary tree efficiently - python",
  "code": "def weight(node):\n  if node == None:\n      return 0\n  node.pathweight=node.val+max(weight(node.left),weight(node.right))\n  return node.pathweight\n\ndef heavy_edge(node):\n  if not node.left:\n    lweight=0\n  else:\n    lweight=node.left.pathweight\n  if not node.right:\n    rweight=0\n  else:\n    rweight=node.right.pathweight\n  if lweight>rweight:\n    return [node.val,heavy_edge(node.left)]\n  else:\n    return [node.val,heavy_edge(node.right)]\n\nweight(t) #Precalculate the pathweight of all the nodes in O(n) time\nheavy_edge(T) #Use the precalculated pathweights to efficient find list the heaviest path in O(lg n) time\n",
  "label": 1
 },
 {
  "idx": 1577,
  "doc": "How to input a line word by word in Python?",
  "code": "with open('filename', 'r') as f:\n    for num in itertools.imap(int, readWords(f)):\n        # Store the numbers in a set, and use the set to check if the number already exists\n",
  "label": 0
 },
 {
  "idx": 1578,
  "doc": "How can I use python pandas to parse CSV into the format I want?",
  "code": "import pandas as pd\ndf = pd.read_table('data', sep='\\s+')\n\ncommon = ['weather', 'location', 'time', 'date', 'Condition']\ngrouped = df.groupby(common)\ndf['idx'] = grouped.cumcount()\ndf2 = df.set_index(common+['idx'])\ndf2 = df2.unstack('idx')\ndf2 = df2.swaplevel(0, 1, axis=1)\ndf2 = df2.sortlevel(axis=1)\ndf2.columns = df2.columns.droplevel(0)\ndf2 = df2.reset_index()\nprint(df2)\n",
  "label": 1
 },
 {
  "idx": 1579,
  "doc": "Import a exported dict into python",
  "code": ">>> json_data = '{\"bear\": 2, \"apple\": 1}'\n>>> d = json.loads(json_data)\n>>> d['bear']\n2\n>>>\n",
  "label": 0
 },
 {
  "idx": 1580,
  "doc": "Is there an easy way to parse an HTML document and remove everything except a particular table?",
  "code": "#!/usr/bin/env python\nimport urllib2\nfrom lxml import html\n\npage = urllib2.urlopen('http://stackoverflow.com/q/11939631')\ndoc = html.parse(page).getroot()\nfor tr in doc.cssselect('#question table > tr'):\n    for td in tr.iterchildren('td'):\n        print(td.text_content()) # process td\n",
  "label": 1
 },
 {
  "idx": 1581,
  "doc": "How to send image generated by PIL to browser?",
  "code": "from tempfile import NamedTemporaryFile\nfrom shutil import copyfileobj\nfrom os import remove\n\ntempFileObj = NamedTemporaryFile(mode='w+b',suffix='jpg')\npilImage = open('/tmp/myfile.jpg','rb')\ncopyfileobj(pilImage,tempFileObj)\npilImage.close()\nremove('/tmp/myfile.jpg')\ntempFileObj.seek(0,0)\n",
  "label": 0
 },
 {
  "idx": 1582,
  "doc": "python union of 2 nested lists with index",
  "code": "aud = dict((tuple(a[:3]), i) for i, a in enumerate(A))\n",
  "label": 0
 },
 {
  "idx": 1583,
  "doc": "python union of 2 nested lists with index",
  "code": "result = [(b, aud[tuple(b[:3])]) for b in B if tuple(b[:3]) in aud]\n",
  "label": 0
 },
 {
  "idx": 1584,
  "doc": "How to create a random multidimensional array from existing variables",
  "code": "import random\n\ndef add(grid, char, count):\n    while count:\n        row = random.randrange(len(grid))\n        column = random.randrange(len(grid[0]))\n        if world[row][column] == 'g':\n            world[row][column] = char\n            count -= 1\n",
  "label": 1
 },
 {
  "idx": 1585,
  "doc": "Loop URL to scrape using beautiful soup python",
  "code": "for i in xrange(2500,7000):\n    try:\n        page = urllib2.urlopen(\"http://bvet.bytix.com/plus/trainer/default.aspx?id={}\".format(i))\n    except:\n        continue\n    else:\n        soup = BeautifulSoup(page.read())\n        for eachuniversity in soup.findAll('fieldset',{'id':'ctl00_step2'}):\n            print re.sub(r'\\s+',' ',','.join(eachuniversity.findAll(text=True)).encode('utf-8'))\n            print '\\n'\n            number = number + 1\n",
  "label": 1
 },
 {
  "idx": 1586,
  "doc": "How to sort an itertools grouper array in python",
  "code": "import operator as op\nsorted(lst, key=op.itemgetter(1))\n",
  "label": 1
 },
 {
  "idx": 1587,
  "doc": "How to sort an itertools grouper array in python",
  "code": "[('a', 1L), ('b', 2L), ('c', 3L)]\n",
  "label": 0
 },
 {
  "idx": 1588,
  "doc": "Python prettytable Sort by Multiple Columns",
  "code": "import operator\nfrom prettytable import PrettyTable\n\n\ntable = PrettyTable([\"Name\", \"Grade\"])\ntable.add_row([\"Joe\", 90])\ntable.add_row([\"Sally\", 100])\ntable.add_row([\"Bill\", 90])\ntable.add_row([\"Alice\", 90])\nprint table.get_string(sort_key=operator.itemgetter(1, 0), sortby=\"Grade\")\n",
  "label": 1
 },
 {
  "idx": 1589,
  "doc": "Finding median in Spark Streaming",
  "code": "from pyspark.streaming import *\nssc = StreamingContext(sc, 30)\ndataRdd = [sc.parallelize(d, 1) for d in [[1,2,3],[4,5],[6,7,8,9,9]]]\nqs = ssc.queueStream(dataRdd)\n\ndef list_median((med,mylist),newval):\n    mylist = [newval] if not mylist else mylist.append(newval)\n    mylist = sorted(mylist)\n    return (mylist[int(len(mylist)/2)], mylist)\n\nmedians = qs.reduce(list_median).map(lambda (med,list): med)\ndef printRec(rdd):\n    import sys\n    rdd.foreach(lambda rec: sys.stderr.write(repr(rec)))\n\nmedians.foreachRDD(printRec)\nssc.start(); ssc.awaitTermination()\n",
  "label": 1
 },
 {
  "idx": 1590,
  "doc": "Finding median in Spark Streaming",
  "code": "median()\n",
  "label": 0
 },
 {
  "idx": 1591,
  "doc": "How to count how many data points fall in a bin",
  "code": "bins = [[i*bin_width, (i+1)*bin_width, 0] for i in range(num_bins)]\nfor data_point in data_points:\n    bin_number = data_point // bin_width\n    bins[bin_number][2] += 1\n",
  "label": 1
 },
 {
  "idx": 1592,
  "doc": "Python line read size in bytes",
  "code": "open(myfile, 'rb')\n",
  "label": 0
 },
 {
  "idx": 1593,
  "doc": "Python - removing items from lists",
  "code": "L4 = [ n for n in L1 if (n not in L2) and (n not in L3) ]  # parens for clarity\n\ntmpset = set( L2 + L3 )\nL4 = [ n for n in L1 if n not in tmpset ]\n",
  "label": 1
 },
 {
  "idx": 1594,
  "doc": "Python - removing items from lists",
  "code": "$ python -m timeit \\\n  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2)' \\\n  'unwanted = frozenset(item for lst in (L2, L3) for item in lst); L4 = [ n for n in L1 if n not in unwanted ]'\n10000 loops, best of 3: 46.4 usec per loop\n",
  "label": 1
 },
 {
  "idx": 1595,
  "doc": "What is a Pythonic way to count dictionary values in list of dictionaries",
  "code": ">>> class DictCounter(object):\n    def __init__(self, list_of_ds):\n        keys = set(itertools.chain(*(i.keys() for i in list_of_ds)))\n        for k in keys:\n            self.__dict__[k] = collections.Counter([d.get(k) for d in list_of_ds])\n\n>>> a = [{'test': 5, 'count': 4}, {'test': 3, 'other': 5}, {'test':3}, {'test':5}]\n>>> d = DictCounter(a)\n>>> d.test\nCounter({3: 2, 5: 2})\n>>> d.count\nCounter({None: 3, 4: 1})\n>>> d.other\nCounter({None: 3, 5: 1})\n",
  "label": 1
 },
 {
  "idx": 1596,
  "doc": "What is a Pythonic way to count dictionary values in list of dictionaries",
  "code": ">>> from collections import Counter\n>>> c = Counter([thing['count'] for thing in things])\n>>> c[1]               # Number of elements with count==1\n100\n>>> c[2]               # Number of elements with count==2\n100\n>>> c.most_common()    # Most common elements\n[(1, 100), (2, 100)]\n>>> sum(c.values())    # Number of elements\n200\n>>> list(c)            # List of unique counts\n[1, 2]\n>>> dict(c)            # Converted to a dict \n{1: 100, 2: 100}\n",
  "label": 1
 },
 {
  "idx": 1597,
  "doc": "python list manipulation nesting vertically, making it look like a matrix",
  "code": "zip(data[0], data[1], data[2])\n",
  "label": 0
 },
 {
  "idx": 1598,
  "doc": "Partial symbolic derivative in Python",
  "code": "koef = [logt_a, a_0, T_a*a_0, a_1, T_a*a_1, a_2, T_a*a_2]\nM = expand(A)\nK = zeros(len(koef), len(koef))\ndef odvod_mat(par):\n    for j in range(len(par)):\n        for i in range(len(par)):\n            type(par[i])._diff_wrt = True\n            P = diff(M, par[i])/2\n            B = P.coeff(par[j])\n            K[i,j] = B\n\n            #Removal of T_a\n            K[i,j] = K[i,j].subs(T_a, 0)\n    return K  \nodvod_mat(koef)\n",
  "label": 1
 },
 {
  "idx": 1599,
  "doc": "wait() on a group of Popen objects",
  "code": "import random, time\nfrom subprocess import Popen\n\n\ndef work_diligently():\n    cmd = [\"/bin/sleep\", str(random.randrange(2,4))]\n    proc = Popen(cmd)\n    print '\\t{}\\t{}'.format(proc.pid, cmd) # pylint: disable=E1101\n    return proc\n\n\ndef spawn(num):\n    return [ work_diligently() for _ in xrange(num) ]\n\n\nNUM_PROCS = 3\nprocs = spawn(NUM_PROCS)\nwhile True:\n    print time.ctime(), 'scan'\n    procs = [ \n        proc for proc in procs\n        if proc.poll() is None\n    ]\n    num_exited = NUM_PROCS - len(procs)\n    if num_exited:\n        print 'Uhoh! Restarting {} procs'.format(num_exited)\n        procs.extend( spawn(num_exited) )\n    time.sleep(1)\n",
  "label": 1
 },
 {
  "idx": 1600,
  "doc": "Find occurrence using multiple attributes in ElementTree/Python",
  "code": "x = ElmentTree(file='testdata.xml')\nallcases = x12.findall(\".//testcase\")\ncases = [c for c in allcases if c.get('classname') == 'TestOne' and c.get('name') == 'VHDL_BUILD_Passthrough']\n",
  "label": 1
 },
 {
  "idx": 1601,
  "doc": "Need to read from a file and add the elements and get avg in python 3.4",
  "code": "75647485 14.4  10  20\n63338495 17.2  11  20\n00453621 11.2   3  20\n90812341 15.2   7  20\n",
  "label": 0
 },
 {
  "idx": 1602,
  "doc": "append csv files on column basis",
  "code": "$ join -t\\; -j 1 file1 file2 | sed 's/;;/;/g'\nDATE;BS-ICI,NSA,BAL,AT;BS-ICI,NSA,BAL,BE;BS-BYL,NSA,BAL,AT;BS-NAN,NSA,BAL,BE;\n2014M02;0.9;1.5;1.5;6.7;\n2014M01;-5.4;-4.4;-8.8;-4.4;\n2013M11;-7.9;-9.2;-2.5;-9.6;\n2013M10;-8.6;-14.0;-8.9;-11.4;\n",
  "label": 1
 },
 {
  "idx": 1603,
  "doc": "python pandas Slicing datetime dates by number of rows",
  "code": ">>> df[two_bdays_before:two_bdays_later]]\n                   A         B         C         D\n2015-01-01  0.741045 -0.051576  0.228247 -0.429165\n2015-01-02 -0.312247 -0.391012 -0.256515 -0.849694\n2015-01-03 -0.581522 -1.472528  0.431249  0.673033\n2015-01-04 -1.408855  0.564948  1.019376  2.986657\n2015-01-05 -0.566606 -0.316533  1.201412 -1.390179\n2015-01-06 -0.052672  0.293277 -0.566395 -1.591686\n2015-01-07 -1.669806  1.699540  0.082697 -1.229178\n",
  "label": 0
 },
 {
  "idx": 1604,
  "doc": "Summarize a list of dictionaries based on common key values",
  "code": "dictlist = [{'day': 0, 'start': '8:00am', 'end': '5:00pm'},\n            {'day': 1, 'start': '10:00am', 'end': '7:00pm'},\n            {'day': 2, 'start': '8:00am', 'end': '5:00pm'},\n            {'day': 3, 'start': '10:00am', 'end': '7:00pm'},\n            {'day': 4, 'start': '8:00am', 'end': '5:00pm'},\n            {'day': 5, 'start': '11:00am', 'end': '1:00pm'}]\n\nfrom collections import defaultdict\n\ndd = defaultdict(list)\n\nfor d in dictlist:\n    dd[(d['start'],d['end'])].append(d['day'])\n",
  "label": 1
 },
 {
  "idx": 1605,
  "doc": "Summarize a list of dictionaries based on common key values",
  "code": ">>> my_list = [(v, k[0], k[1]) for k,v in dd.iteritems()]\n>>> my_list\n[([5], '11:00am', '1:00pm'), ([1, 3], '10:00am', '7:00pm'), ([0, 2, 4], '8:00am', '5:00pm')]\n>>> # If you need the output sorted:  \n>>> sorted_my_list = sorted(my_list, key = lambda k : len(k[0]), reverse=True)\n>>> sorted_my_list\n[([0, 2, 4], '8:00am', '5:00pm'), ([1, 3], '10:00am', '7:00pm'), ([5], '11:00am', '1:00pm')]\n",
  "label": 0
 },
 {
  "idx": 1606,
  "doc": "(Python) Breaking an output text file into tokens",
  "code": "with open(\"test.txt\") as f, open('test_output.txt',\"w\") as out:\n    wr = csv.writer(out, delimiter=\",\")\n    for line in f:\n        wr.writerow(filter(None, line.rstrip().translate(None, \"|\").split(\",\")))\n",
  "label": 1
 },
 {
  "idx": 1607,
  "doc": "Search and sort through dictionary in Python",
  "code": "[('pardon', 6), ('secondly', 2), ('saves', 1), ('knelt', 1)]\n",
  "label": 0
 },
 {
  "idx": 1608,
  "doc": "Django: how to change label using formset extra?",
  "code": "# File: forms.py\nfrom django import forms\nfrom django.forms.formsets import BaseFormSet\n\n\n# What you've called 'GetMachine'\nclass MachineForm(forms.Form):\n    no_of_lines = forms.IntegerField(max_value=4)\n\n\n# What you've called 'GetLine'\nclass LineForm(forms.Form):\n    beamline_name = forms.CharField(max_length=15, label='Name of Beamline')\n\n\n# Create a custom formset and override __init__\nclass BaseLineFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super(BaseLineFormSet, self).__init__(*args, **kwargs)\n        no_of_forms = len(self)\n        for i in range(0, no_of_forms):\n            self[i].fields['beamline_name'].label += \"-%d\" % (i + 1)\n",
  "label": 0
 },
 {
  "idx": 1609,
  "doc": "How to avoid '\\n' and '\\t' escaping sequence when string is assigned to a variable",
  "code": ">>> s = r'C:\\Users\\Client\\tests\\doc_test_hard.docx'\n>>> s\n'C:\\\\Users\\\\Client\\\\tests\\\\doc_test_hard.docx'\n",
  "label": 1
 },
 {
  "idx": 1610,
  "doc": "running through a loop and find a condition that match",
  "code": "prev = None\nit = iter(data)\nfor point in it:\n    if point == 'red':\n       print '#',\n    else:\n       print '.',\n       if prev == 'red': # encounted ['red', 'blank']\n          break\n    prev = point\n\nfor point in it:\n    print '.',\nprint\n",
  "label": 1
 },
 {
  "idx": 1611,
  "doc": "Python: Read whitespace separated strings from file similar to readline",
  "code": "with open('somefilename') as f:\n    for token in read_by_tokens(f):\n        print(token)\n",
  "label": 0
 },
 {
  "idx": 1612,
  "doc": "Compare 2 excel files using Python",
  "code": "from itertools import izip_longest\nimport xlrd\n\nrb1 = xlrd.open_workbook('file1.xlsx')\nrb2 = xlrd.open_workbook('file2.xlsx')\n\nsheet1 = rb1.sheet_by_index(0)\nsheet2 = rb2.sheet_by_index(0)\n\nfor rownum in range(max(sheet1.nrows, sheet2.nrows)):\n    if rownum < sheet1.nrows:\n        row_rb1 = sheet1.row_values(rownum)\n        row_rb2 = sheet2.row_values(rownum)\n\n        for colnum, (c1, c2) in enumerate(izip_longest(row_rb1, row_rb2)):\n            if c1 != c2:\n                print \"Row {} Col {} - {} != {}\".format(rownum+1, colnum+1, c1, c2)\n    else:\n        print \"Row {} missing\".format(rownum+1)\n",
  "label": 1
 },
 {
  "idx": 1613,
  "doc": "Compare 2 excel files using Python",
  "code": "Row 3 Col 2 - 0.235435 != 0.23546\n",
  "label": 0
 },
 {
  "idx": 1614,
  "doc": "Python regular expression to search for words in a sentence",
  "code": "In [51]: def find_all_words(words, sentence):\n....:     all_words = re.findall(r'\\w+', sentence)\n....:     words_found = []\n....:     for word in words:\n....:         if word in all_words:\n....:             words_found.append(word)\n....:     return words_found\n\nIn [52]: print find_all_words(['total', 'staff'], 'The total number of staff in 30?')\n['total', 'staff'] \n\nIn [53]: print find_all_words(['total', 'staff'], 'My staff is totally overworked.')\n['staff']\n",
  "label": 1
 },
 {
  "idx": 1615,
  "doc": "Flask : How to update and render a variable periodically?",
  "code": "# -*- coding: utf-8 -*-\n\n# OS Imports\nimport json\n\n# Local Imports\nfrom app import sockets\nfrom app.functions import get_cpu_load, get_disk_usage, get_vmem\n\n@sockets.route('/_socket_system')\ndef socket_system(ws):\n    \"\"\"\n    Returns the system informations, JSON Format\n    CPU, RAM, and Disk Usage\n    \"\"\"\n    while True:\n        message = ws.receive()\n        if message == \"update\":\n            cpu = round(get_cpu_load())\n            ram = round(get_vmem())\n            disk = round(get_disk_usage())\n            ws.send(json.dumps(dict(received=message, cpu=cpu, ram=ram, disk=disk)))\n        else:\n            ws.send(json.dumps(dict(received=message)))\n",
  "label": 0
 },
 {
  "idx": 1616,
  "doc": "Name of Current App in Google App Engine (Python)",
  "code": "import os\nappname = os.environ['APPLICATION_ID']\n",
  "label": 0
 },
 {
  "idx": 1617,
  "doc": "creating namedtuple instances with kwargs",
  "code": ">>> tup4 = My_tuple(**dict(zip(vars, vals)))\n>>> tup4\nMy_tuple(var1='val1', var2='val2')\n",
  "label": 1
 },
 {
  "idx": 1618,
  "doc": "Write to file descriptor 3 of a Python subprocess.Popen object",
  "code": "import subprocess\nimport shlex\nimport os\n\nfd=os.open('passphrase.txt',os.O_RDONLY)\ncmd='gpg --passphrase-fd {fd} -c'.format(fd=fd)\nwith open('filename.txt','r') as stdin_fh:\n    with open('filename.gpg','w') as stdout_fh:        \n        proc=subprocess.Popen(shlex.split(cmd),\n                              stdin=stdin_fh,\n                              stdout=stdout_fh)        \n        proc.communicate()\nos.close(fd)\n",
  "label": 1
 },
 {
  "idx": 1619,
  "doc": "Pythonic way of looping over variable that is either an element or a list",
  "code": "def is_iterable(x):\n    return type(x) in [list, tuple] # or just isinstance(x, list)\n",
  "label": 0
 },
 {
  "idx": 1620,
  "doc": "Loop through multiple different sized python dictionaries",
  "code": "from itertools import groupby\nfrom operator import itemgetter\n\nfor untreat, group in groupby(sorted(init_treats), itemgetter(0)):\n    # group is now a sorted iterator of keys with the same first value\n    if init_untreat[untreat] + sum(map(init_treats.get, group)) == 0:\n        # sum of init_treat_n_m + init_untreat_n is 0\n",
  "label": 0
 },
 {
  "idx": 1621,
  "doc": "related to List (want to insert into database)",
  "code": ">>> list1 = ['name', 'age', 'sex']\n>>> list2 = ['test', 10, 'female']\n>>> f = lambda l: ','.join([\"'%s'\" % str(s) for s in l])\n>>> print 'INSERT INTO (%s) VALUES (%s)' % (f(list1), f(list2))\nINSERT INTO ('name','age','sex') VALUES ('test','10','female')\n",
  "label": 1
 },
 {
  "idx": 1622,
  "doc": "Escape string to be valid python expression",
  "code": ">>> repr(example)\n'\\'Foo \\\\\\'\" \\\\\\\\ Bar\\''\n>>> print(repr(example))\n'Foo \\'\" \\\\ Bar'\n",
  "label": 0
 },
 {
  "idx": 1623,
  "doc": "Escape string to be valid python expression",
  "code": ">>> print(repr('\\''))\n\"'\"\n>>> print(repr('\\\"'))\n'\"'\n>>> print(repr('\\'\"'))\n'\\'\"'\n",
  "label": 0
 },
 {
  "idx": 1624,
  "doc": "Most efficient way to index words in a document?",
  "code": "SELECT `sentence_id`, `word_id` FROM `sentences_words`\nWHERE `word_id` IN ([here goes list of words' ids]);\n",
  "label": 0
 },
 {
  "idx": 1625,
  "doc": "How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached",
  "code": "while True:\n    x = x + 1\n    y = x ** 2\n    total = total + y\n    if total >= n:\n        break\nprint(total)\n",
  "label": 1
 },
 {
  "idx": 1626,
  "doc": "How to use argparse during runtime to conditionally get further input?",
  "code": "def create():\n    author_parse = argparse.ArgumentParser()\n    author_parse.add_argument('name', type=str, nargs=2)\n    name = raw_input(\"Provide your first and last name: \")\n    auth_args = auth_parse.parse_args(name.split())\n",
  "label": 1
 },
 {
  "idx": 1627,
  "doc": "pyplot: loglog() with base e",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data.\nx = np.linspace(0, 2, 1000)\ny = x**np.e\n\nplt.loglog(x,y, basex=np.e, basey=np.e)\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 1628,
  "doc": "Django Model Design - Many-To-Many Fields",
  "code": "models.py\nfrom django.db import models\n\nclass CheckList(models.Model):\n    name = models.CharField(max_length=255)\n    checklist_type = models.ForeignKey('CheckListType')\n    options = models.ManyToManyField('CheckListOption', blank=True)\n\n    def __unicode__(self):\n        return self.name\n\nclass CheckListType(models.Model):\n    name = models.CharField(max_length=255)\n    options = models.ManyToManyField('CheckListOption')\n\n    def __unicode__(self):\n        return self.name\n\nclass CheckListOption(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __unicode__(self):\n        return self.name\n",
  "label": 0
 },
 {
  "idx": 1629,
  "doc": "Django Model Design - Many-To-Many Fields",
  "code": "forms.py\nfrom django import forms\n\nfrom .models import CheckList, CheckListOption\n\nclass CheckListForm(forms.ModelForm):\n    class Meta:\n        model = CheckList\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super(CheckListForm, self).__init__(*args, **kwargs)\n        if self.instance.pk:\n            self.fields['options'].queryset = CheckListOption.objects.filter(\n                checklisttype=self.instance.checklist_type_id\n            )\n        else:\n            self.fields['options'].queryset = CheckListOption.objects.none()\n",
  "label": 0
 },
 {
  "idx": 1630,
  "doc": "Data structure for UDP Server parsing JSON objects in python",
  "code": " import socket\n\n def udp_server(udp_ip, udp_port, ...):\n   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n   sock.bind((upd_ip, upd_port))\n   while True:\n     data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes\n     ...process data...\n",
  "label": 0
 },
 {
  "idx": 1631,
  "doc": "Getting strings in between two keywords from a file in python",
  "code": ">>> s = \"EVENT(X_HELLO) ... EVENT(X_HOW_ARE_YOU_DOING_TODAY)... EVENT(this one shouldn't appear because it doesn't start with X)\"\n>>> re.findall(r\"EVENT\\(X(.*?)\\)\", s)\n['_HELLO', '_HOW_ARE_YOU_DOING_TODAY']\n",
  "label": 1
 },
 {
  "idx": 1632,
  "doc": "How to give object away to python garbage collection?",
  "code": "people = {}\npeople['john'] = Person('john')\n\ndef removePerson(personName):\n    del people[personName]\n\nremovePerson('john')\n",
  "label": 0
 },
 {
  "idx": 1633,
  "doc": "YAML list -> Python generator?",
  "code": "{'something_else': 'blah', 'foo': ['bar', 'baz', 'bah']}\n{'bar': 'yet_another_thing'}\n",
  "label": 0
 },
 {
  "idx": 1634,
  "doc": "Splitting a dataframe based on column values",
  "code": "d = {i: df.loc[df.group_no == i, ['EndDate', 'val']] \n     for i in range(1, df.group_no.iat[-1])}\n\n>>> d\n{1:       EndDate       val\n 0  2007-10-31  0.000000\n 1  2007-11-30 -0.033845\n 2  2007-12-31 -0.033630\n 3  2008-01-31 -0.009449, \n 2:       EndDate       val\n 4  2008-02-29  0.000000\n 5  2008-03-31 -0.057450\n 6  2008-04-30 -0.038694, \n 3:       EndDate       val\n 7  2008-05-31  0.000000\n 8  2008-06-30 -0.036245\n 9  2008-07-31 -0.005286}\n",
  "label": 0
 },
 {
  "idx": 1635,
  "doc": "Splitting a dataframe based on column values",
  "code": "df['group_no'] = (df.val == 0).cumsum()\n>>> df.head(6)\n      EndDate       val  group_no\n0  2007-10-31  0.000000         1\n1  2007-11-30 -0.033845         1\n2  2007-12-31 -0.033630         1\n3  2008-01-31 -0.009449         1\n4  2008-02-29  0.000000         2\n5  2008-03-31 -0.057450         2\n",
  "label": 0
 },
 {
  "idx": 1636,
  "doc": "Splitting a dataframe based on column values",
  "code": "d = {n: df2.ix[rows] \n     for n, rows in enumerate(df2.groupby('group_no').groups)}\n",
  "label": 0
 },
 {
  "idx": 1637,
  "doc": "Python: multidimensional array masking",
  "code": ">>> import numpy as np\n>>> A = np.ones((5,5), dtype=int)\n>>> B = [1, 3, 7, 23]\n>>> A.put(B, [0]*len(B))\n>>> A\narray([[1, 0, 1, 0, 1],\n       [1, 1, 0, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 0, 1]])\n",
  "label": 1
 },
 {
  "idx": 1638,
  "doc": "Making a python iterator go backwards?",
  "code": "class bidirectional_iterator(object):\n    def __init__(self, collection):\n        self.collection = collection\n        self.index = 0\n\n    def next(self):\n        try:\n            result = self.collection[self.index]\n            self.index += 1\n        except IndexError:\n            raise StopIteration\n        return result\n\n    def prev(self):\n        self.index -= 1\n        if self.index < 0:\n            raise StopIteration\n        return self.collection[self.index]\n\n    def __iter__(self):\n        return self\n",
  "label": 1
 },
 {
  "idx": 1639,
  "doc": "Making a python iterator go backwards?",
  "code": "def str(self, item):\n    print item\n\n    prev, current = None, self.__iter.next()\n    while isinstance(current, int):\n        print current\n        prev, current = current, self.__iter.next()\n",
  "label": 0
 },
 {
  "idx": 1640,
  "doc": "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list",
  "code": ">>> plist = [c.assistants for c in Course.query.join(\n... University).filter(University.name == 'MIT')]\n>>> [p.name for p in set(itertools.chain(*plist))]\n",
  "label": 0
 },
 {
  "idx": 1641,
  "doc": "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list",
  "code": "rel = Course._descriptor.find_relationship('assistants')\nassert rel\ntable = rel.table\n",
  "label": 0
 },
 {
  "idx": 1642,
  "doc": "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list",
  "code": "class Course(Entity):\n    ...\n    assistants = ManyToMany('Professor', inverse='courses_assisted',\n                            local_colname='course_id', remote_colname='prof_id',\n                            ondelete='cascade')\n",
  "label": 0
 },
 {
  "idx": 1643,
  "doc": "container where values expire in python",
  "code": "import datetime\nimport collections\nimport threading\n\nclass ExpireCounter:\n    \"\"\"Tracks how many events were added in the preceding time period\n    \"\"\"\n\n    def __init__(self, timeout=1):\n        self.lock=threading.Lock()        \n        self.timeout = timeout\n        self.events = collections.deque()\n\n    def add(self,item):\n        \"\"\"Add event time\n        \"\"\"\n        with self.lock:\n            self.events.append(item)\n            threading.Timer(self.timeout,self.expire).start()\n\n    def __len__(self):\n        \"\"\"Return number of active events\n        \"\"\"\n        with self.lock:\n            return len(self.events)\n\n    def expire(self):\n        \"\"\"Remove any expired events\n        \"\"\"\n        with self.lock:\n            self.events.popleft()\n\n    def __str__(self):\n        with self.lock:\n            return str(self.events)\n",
  "label": 1
 },
 {
  "idx": 1644,
  "doc": "Scipy rotate and zoom an image without changing its dimensions",
  "code": "from scipy.ndimage import rotate, zoom\nfrom scipy.misc import ascent\nfrom matplotlib import pyplot as plt\n\nimg = ascent()\n\nrot = rotate(img, 30, reshape=False)\n\nfig, ax = plt.subplots(1, 2)\nax[0].imshow(img, cmap='gray')\nax[1].imshow(rot, cmap='gray')\n",
  "label": 0
 },
 {
  "idx": 1645,
  "doc": "python how to create list of interchangeable values?",
  "code": "input = raw_input()\ntry:\n    key = float(input)\nexcept ValueError:\n    key = input\n\ntry:\n    value = data[key]\nexcept KeyError:\n    print \"Invalid input. Valid keys are: \" + ', '.join(data.keys())\nelse:\n    #input was valid, so value == data[key]\n",
  "label": 0
 },
 {
  "idx": 1646,
  "doc": "How can i extract metdata from django models",
  "code": "{\n  'username': {'max_length': 30},\n  'first_name': {'max_length': 30},\n  'last_name': {'max_length': 30},\n  'is_active': {'max_length': None},\n  'email': {'max_length': 75},\n  'is_superuser': {'max_length': None},\n  'is_staff': {'max_length': None},\n  'last_login': {'max_length': None},\n  'password': {'max_length': 128},\n  u'id': {'max_length': None},\n  'date_joined': {'max_length': None}\n}\n",
  "label": 0
 },
 {
  "idx": 1647,
  "doc": "Auto validate a function parameter using a method",
  "code": "def _is_valid_token(f):\n    @wraps(f)\n    def decorated(token, *args, **kwargs):\n        if token != TOKEN:\n            abort(400)\n\n        return f(token, *args, **kwargs):\n\n    return decorated\n\n@app.route(...)\n@_is_valid_token\ndef create_new_game(token, ...):\n    ...\n",
  "label": 1
 },
 {
  "idx": 1648,
  "doc": "Auto validate a function parameter using a method",
  "code": "@app.url_value_preprocessor\ndef _is_valid_token(endpoint, values):\n    if 'token' not in values:\n        return\n\n    if values['token'] != TOKEN:\n        abort(400)\n",
  "label": 1
 },
 {
  "idx": 1649,
  "doc": "how do I concatenate 3 lists using a list comprehension?",
  "code": "allList = list(itertools.chain(list1, list2, list3))\n",
  "label": 1
 },
 {
  "idx": 1650,
  "doc": "Find difference between two multi dimensional lists",
  "code": "a = [[\"greg\", 1.2, 400, 234], [\"top\", 9.0, 5.1, 2300], [\"file\", 5.7, 2.2, 900], [\"stop\", 1.6, 6.7, 200]]\n\nb = [[\"hall\", 5.2, 460, 234], [\"line\", 5.3, 5.91, 100], [\"file\", 2.7, 3.3, 6.4], [\"stop\", 6.6, 5.7, 230]]\n\nd1 = {sub[0]: sub for sub in a}\nd2 = {sub[0]: sub for sub in b}\n\nprint([d2[k] for k in d2.keys() - d1])\nprint([d1[k] for k in d1.keys() - d2])\n",
  "label": 1
 },
 {
  "idx": 1651,
  "doc": "how to extend ambiguous dna sequence",
  "code": "# len(seq) = 2:\nList delay: 0.02 ms\nMap delay: 0.01 ms\n\n# len(seq) = 3:\nList delay: 0.04 ms\nMap delay: 0.02 ms\n\n# len(seq) = 4\nList delay: 0.08 ms\nMap delay: 0.06 ms\n\n# len(seq) = 5\nList delay: 0.43 ms\nMap delay: 0.17 ms\n\n# len(seq) = 10\nList delay: 126.68 ms\nMap delay: 77.15 ms\n\n# len(seq) = 12\nList delay: 1887.53 ms\nMap delay: 1320.49 ms\n",
  "label": 0
 },
 {
  "idx": 1652,
  "doc": "how to extend ambiguous dna sequence",
  "code": "from Bio import Seq\nfrom itertools import product\n\ndef extend_ambiguous_dna(seq):\n   \"\"\"return list of all possible sequences given an ambiguous DNA input\"\"\"\n   d = Seq.IUPAC.IUPACData.ambiguous_dna_values\n   return [ list(map(\"\".join, product(*map(d.get, seq)))) ]\n",
  "label": 1
 },
 {
  "idx": 1653,
  "doc": "Python - read BeautifulSoup snippet by row? (or other ways of scraping the data I want)",
  "code": "addressSplit = addressComponents[3].split(\"\\n\")\nprint addressSplit[0] # Zip code\nprint addressSplit[1].strip() # Phone number\n",
  "label": 0
 },
 {
  "idx": 1654,
  "doc": "PyImport_ImportModule, possible to load module from memory?",
  "code": "hello from python\nversion: 2.0\n",
  "label": 0
 },
 {
  "idx": 1655,
  "doc": "PyPI API - How to get stable package version",
  "code": "import requests\nimport json\ntry:\n    from packaging.version import parse\nexcept ImportError:\n    from pip._vendor.packaging.version import parse\n\n\nURL_PATTERN = 'https://pypi.python.org/pypi/{package}/json'\n\n\ndef get_version(package, url_pattern=URL_PATTERN):\n    \"\"\"Return version of package on pypi.python.org using json.\"\"\"\n    req = requests.get(url_pattern.format(package=package))\n    version = parse('0')\n    if req.status_code == requests.codes.ok:\n        j = json.loads(req.text.encode(req.encoding))\n        if 'releases' in j:\n            releases = j['releases']\n            for release in releases:\n                ver = parse(release)\n                if not ver.is_prerelease:\n                    version = max(version, ver)\n    return version\n\n\nif __name__ == '__main__':\n    print \"Django==%s\" % get_version('Django')\n",
  "label": 1
 },
 {
  "idx": 1656,
  "doc": "Extracting text from HTML file using Python (Music Artist / Title)",
  "code": "(swr3)macbook:swr3 joeyoung$ python swr3.py\nArtist: Vaya Con Dios   Title: Nah neh nah\nArtist: Genesis Title: No son of mine\nArtist: Genesis Title: No son of mine\nArtist: Double You  Title: Please don't go\nArtist: Stereo MC's Title: Step it up\nArtist: Cranberries Title: Zombie\nArtist: La Bouche   Title: Sweet dreams\nArtist: Die Prinzen Title: Du mu\u00dft ein Schwein sein\nArtist: Bad Religion    Title: Punk rock song\nArtist: Bellini Title: Samba de Janeiro\nArtist: Dion, Celine; Bee Gees  Title: Immortality\nArtist: Jones, Tom; Mousse T.   Title: Sex bomb\nArtist: Yanai, Kate Title: Bacardi feeling (Summer dreamin')\nArtist: Heroes Del Silencio Title: Entre dos tierras\n",
  "label": 0
 },
 {
  "idx": 1657,
  "doc": "transpose/rotate a block of a matrix in python",
  "code": "import numpy as np\na = np.arange(36).reshape(6, 6)\nprint(a)\n# [[ 0  1  2  3  4  5]\n#  [ 6  7  8  9 10 11]\n#  [12 13 14 15 16 17]\n#  [18 19 20 21 22 23]\n#  [24 25 26 27 28 29]\n#  [30 31 32 33 34 35]]\nblock3 = a[3:6, 0:3]\n\n# To rotate counterclockwise\nblock3[:] = np.rot90(block3.copy())\nprint(a)\n# [[ 0  1  2  3  4  5]\n#  [ 6  7  8  9 10 11]\n#  [12 13 14 15 16 17]\n#  [20 26 32 21 22 23]\n#  [19 25 31 27 28 29]\n#  [18 24 30 33 34 35]]\n\n# To rotate clockwise\na = np.arange(36).reshape(6, 6)\nblock3 = a[3:6, 0:3]\nblock3[:] = np.rot90(block3.copy(),-1)\nprint(a)\n# [[ 0  1  2  3  4  5]\n#  [ 6  7  8  9 10 11]\n#  [12 13 14 15 16 17]\n#  [30 24 18 21 22 23]\n#  [31 25 19 27 28 29]\n#  [32 26 20 33 34 35]]\n",
  "label": 1
 },
 {
  "idx": 1658,
  "doc": "How to check which part of app is consuming CPU?",
  "code": "import sys\nimport trace\n\nclass MyTrace(trace.Trace):\n    def __init__(self, *args, **kwargs):\n        trace.Trace.__init__(self, *args, **kwargs)\n        self.enabled = False\n\n    def localtrace_trace_and_count(self, *args, **kwargs):\n        if not self.enabled:\n            return None \n        return trace.Trace.localtrace_trace_and_count(self, *args, **kwargs)\n\ntracer = MyTrace(ignoredirs=[sys.prefix, sys.exec_prefix],)\n\ndef main():\n    a = 1\n    tracer.enabled = True\n    a = 2\n    tracer.enabled = False\n    a = 3\n\n# run the new command using the given tracer\ntracer.run('main()')\n",
  "label": 1
 },
 {
  "idx": 1659,
  "doc": "How do I display dates when plotting in matplotlib.pyplot?",
  "code": "x = x.astype(DT.datetime)\n",
  "label": 0
 },
 {
  "idx": 1660,
  "doc": "Sorting dictionary keys by values in a list?",
  "code": ">>> l = [1, 2, 37, 32, 4]\n>>> d = dict = {\n...     32: 'Megumi', \n...     1: 'Ai',\n...     2: 'Risa',\n...     3: 'Eri', \n...     4: 'Sayumi', \n...     37: 'Mai'\n... }\n",
  "label": 0
 },
 {
  "idx": 1661,
  "doc": "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?",
  "code": "threshold = .1 # arbitrary: 10%\nto_consider = np.logical_and(results[:,6] < threshold, results[:,11] < threshold)\ntable = results[to_consider][:, [0,1,2,3,4,5,7,8,9,10]]\n",
  "label": 0
 },
 {
  "idx": 1662,
  "doc": "Multiclass linear SVM in python that return probability",
  "code": "from sklearn.svm import LinearSVC\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.datasets import make_multilabel_classification\n\nX, Y = make_multilabel_classification(n_classes=2, n_labels=1,\n                                      allow_unlabeled=True,\n                                      return_indicator=True,\n                                      random_state=1)\nclf0 = CalibratedClassifierCV(LinearSVC(), cv=10)\nclf = OneVsRestClassifier(clf0)\nclf.fit(X, Y)\nproba = clf.predict_proba(X)\n",
  "label": 1
 },
 {
  "idx": 1663,
  "doc": "How to xor in python using hex",
  "code": ">>> text=b'Hello World'\n>>> hexi=b'\\12\\34\\45\\EF\\CD\\AB'\n>>> xors=[ord(t)^ord(x) for t,x in zip(text,hexi)]\n>>> xors\n[66, 121, 73, 48, 42, 102, 11, 44, 54, 48, 37]\n",
  "label": 1
 },
 {
  "idx": 1664,
  "doc": "How to use an array to keep track of different numbers?",
  "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport random   \ndef box():\n    startbox = 0\n    allcards = 0\n    cards = [1,2,3,4,5,6,7,8,9,10]\n    curcards = []\n    while True:\n        randomn = random.randrange(0,10)\n        allcards = allcards+1\n        if str(cards[randomn]) not in curcards:\n            cards[randomn]\n            startbox = startbox + 1\n            curcards.append(str(cards[randomn]))\n        if len(curcards) == 10:\n            break\n    return 'Boxes to buy: ' + str(startbox) + ' Cards Found: ' + '; '.join(curcards) + ' Total amount of cards: ' + str(allcards)\n\n#print box()\nbox()\n",
  "label": 1
 },
 {
  "idx": 1665,
  "doc": "How to map word combinations in python",
  "code": ">>> '{0} {1}'.format('hello', 'world')\n'hello world'\n>>> inputs = ['hello', 'world']  # or 'hello world'.split()\n>>> '{0} {1}'.format(*inputs)\n'hello world'\n",
  "label": 1
 },
 {
  "idx": 1666,
  "doc": "How to figure out if a word in spelled in alphabetical order in Python",
  "code": ">>> \"a\" > \"b\"\nFalse\n\n>>> \"b\" > \"a\"\nTrue\n",
  "label": 0
 },
 {
  "idx": 1667,
  "doc": "How to figure out if a word in spelled in alphabetical order in Python",
  "code": ">>> \"C\" > \"b\"\nFalse\n",
  "label": 0
 },
 {
  "idx": 1668,
  "doc": "How do I change the built-in button labels on a gtk.Assistant?",
  "code": "def get_buttons_hbox(assistant):\n    # temporarily add a widget to the action area and get its parent\n    label = gtk.Label('')\n    assistant.add_action_widget(label)\n    hbox = label.get_parent()\n    hbox.remove(label)\n    return hbox\n",
  "label": 0
 },
 {
  "idx": 1669,
  "doc": "How to count occurrences of specific element for arrays in a list?",
  "code": "In [5]: [Counter(x)[2] for x in a]\nOut[5]: [3, 0]\n",
  "label": 1
 },
 {
  "idx": 1670,
  "doc": "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts",
  "code": "import difflib\n\ndef similar(seq1, seq2):\n    return difflib.SequenceMatcher(a=seq1.lower(), b=seq2.lower()).ratio() > 0.9\n\ndef unique(mylist, keys):\n    temp = mylist[:]\n    for d in mylist:\n        temp.pop(0)\n        [d2.pop(i) for i in keys if d.has_key(i)\n         for d2 in temp if d2.has_key(i) and similar(d[i], d2[i])] \n    return mylist\n",
  "label": 1
 },
 {
  "idx": 1671,
  "doc": "How to determine if a decimal fraction can be represented exactly as Python float?",
  "code": "from fractions import Fraction\n\ndef can_be_represented(num, den):\n    f = Fraction(num, den)\n    return Fraction.from_float(float(f)) == f\n",
  "label": 1
 },
 {
  "idx": 1672,
  "doc": "How to determine if a decimal fraction can be represented exactly as Python float?",
  "code": "def can_be_represented(num, den):\n    f = Fraction(num, den)\n    return f.denominator & (f.denominator - 1) == 0\n",
  "label": 1
 },
 {
  "idx": 1673,
  "doc": "Remove single quotes from python list item",
  "code": "[int(value) for value in your_list]\n",
  "label": 1
 },
 {
  "idx": 1674,
  "doc": "How to add in a dictionary the values that have similar keys?",
  "code": "out = {}\nfor key, value in original.iteritems():\n    out[key[0].upper()] = out.get(key[0].upper(), 0) + value\n",
  "label": 1
 },
 {
  "idx": 1675,
  "doc": "Separating file extensions using python os.path module",
  "code": ">>> def my_splitext(path):\n...     \"\"\"splitext for paths with directories that may contain dots.\"\"\"\n...     li = []\n...     path_without_extensions = os.path.join(os.path.dirname(path), os.path.basename(path).split(os.extsep)[0])\n...     extensions = os.path.basename(path).split(os.extsep)[1:]\n...     li.append(path_without_extensions)\n...     # li.append(extensions) if you want extensions in another list inside the list that is returned.\n...     li.extend(extensions)\n...     return li\n... \n>>> my_splitext('/path.with/dots./filename.ext1.ext2')\n['/path.with/dots./filename', 'ext1', 'ext2']\n",
  "label": 1
 },
 {
  "idx": 1676,
  "doc": "Running infinite loops using threads in python",
  "code": "from threading import Thread\n\nclass myClassA(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.daemon = True\n        self.start()\n    def run(self):\n        while True:\n            print 'A'\n\nclass myClassB(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.daemon = True\n        self.start()\n    def run(self):\n        while True:\n            print 'B'\n\n\nmyClassA()\nmyClassB()\nwhile True:\n    pass\n",
  "label": 1
 },
 {
  "idx": 1677,
  "doc": "Running infinite loops using threads in python",
  "code": "\nfrom threading import Thread\n\ndef runA():\n    while True:\n        print 'A\\n'\n\ndef runB():\n    while True:\n        print 'B\\n'\n\nif __name__ == \"__main__\":\n    t1 = Thread(target = runA)\n    t2 = Thread(target = runB)\n    t1.setDaemon(True)\n    t2.setDaemon(True)\n    t1.start()\n    t2.start()\n    while True:\n        pass\n",
  "label": 1
 },
 {
  "idx": 1678,
  "doc": "Recursive List containing Lists",
  "code": ">>> from random import choice\n>>>\n>>> def Number_recursive(N,M=None):\n...     M = M or N\n...     if N < 0:\n...         raise ValueError('N must be positive')\n...     if N == 0:\n...         return []\n...     return [[choice((0, 1)) for _ in range(M)]] + Number_recursive(N-1,M)\n...\n>>> Number_recursive(4)\n[[0, 0, 1, 0], [0, 1, 1, 1], [1, 1, 0, 0], [1, 0, 1, 0]]\n",
  "label": 1
 },
 {
  "idx": 1679,
  "doc": "Finding time intervals per day from a list of timestamps in Python",
  "code": "\nentries = sorted(result.items())\nintervals = [(end - start) for _, (start, end) in entries]\nprint(max(intervals[-5:]) > max(intervals[-5-14:-5]))\n# -> False\n",
  "label": 0
 },
 {
  "idx": 1680,
  "doc": "Find empty or NaN entry in Pandas Dataframe",
  "code": "In [152]: import numpy as np\nIn [153]: import pandas as pd\nIn [154]: np.where(pd.isnull(df))\nOut[154]: (array([2, 5, 6, 6, 7, 7]), array([7, 7, 6, 7, 6, 7]))\n\nIn [155]: df.iloc[2,7]\nOut[155]: nan\n\nIn [160]: [df.iloc[i,j] for i,j in zip(*np.where(pd.isnull(df)))]\nOut[160]: [nan, nan, nan, nan, nan, nan]\n",
  "label": 1
 },
 {
  "idx": 1681,
  "doc": "get function names from a list python",
  "code": "for attr in whitelist:\n    print \"{0}: {1}\".format(attr, getattr(alarm, attr, \"<Not defined>\"))\n",
  "label": 1
 },
 {
  "idx": 1682,
  "doc": "Sorting a list with a dictionary at items",
  "code": "return sorted(fights, key=(lambda fight:fight[\"Date\"]))\n",
  "label": 1
 },
 {
  "idx": 1683,
  "doc": "Waf: How to output a generated file?",
  "code": "conf.env['VERSION'] = '0.7.0'\n",
  "label": 0
 },
 {
  "idx": 1684,
  "doc": "Add numpy array as column to Pandas data frame",
  "code": "import numpy as np\nimport pandas as pd\nimport scipy.sparse as sparse\n\ndf = pd.DataFrame(np.arange(1,10).reshape(3,3))\narr = sparse.coo_matrix(([1,1,1], ([0,1,2], [1,2,0])), shape=(3,3))\ndf['newcol'] = arr.toarray().tolist()\nprint(df)\n",
  "label": 1
 },
 {
  "idx": 1685,
  "doc": "In IPython how do I create aliases for %magics?",
  "code": "def ed_xed(self,arg):\n    ip = self.api\n    return ip.magic.im_class.magic_edit(ip.IP,\" -x %s \"%arg)\n\nip.expose_magic('xed',ed_xed)\n",
  "label": 1
 },
 {
  "idx": 1686,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "cdef public api int cy_call_func_int_fast(object self, char* method, bint *error):\n    if (hasattr(self, method)):\n        error[0] = 0\n        return getattr(self, method)();\n    else:\n        error[0] = 1\n",
  "label": 0
 },
 {
  "idx": 1687,
  "doc": "Can I override a C++ virtual function within Python with Cython?",
  "code": "#include \"ITestClass.h\"\n\nnamespace elps {\n\nITestClass::ITestClass(PyObject *obj): m_obj(obj) {\n    // Provided by \"elps_api.h\"\n    if (import_elps()) {\n    } else {\n        Py_XINCREF(this->m_obj);\n    }\n}\n\nITestClass::~ITestClass() {\n    Py_XDECREF(this->m_obj);\n}\n\nint ITestClass::override_me()\n{\n    if (this->m_obj) {\n        int error;\n        // Call a virtual overload, if it exists\n        int result = cy_call_func(this->m_obj, (char*)\"override_me\", &error);\n        if (error)\n            // Call parent method\n            result = TestClass::override_me();\n        return result;\n    }\n    // Throw error ?\n    return 0;\n}\n\n} /* namespace elps */\n",
  "label": 0
 },
 {
  "idx": 1688,
  "doc": "Analyze and edit links in html code with BeautifulSoup",
  "code": "<can_be_link>\n<ul>\n <li class=\"FOLLOW\">\n  <can_be_link>\n </li>\n</ul>\n",
  "label": 0
 },
 {
  "idx": 1689,
  "doc": "Python3 Make a list that increments for a certain amount, decrements for a certain amount",
  "code": "reverse = [(3, 7), (12,17)]\nfor start, end in reverse:\n    lst[start:end] = reversed(lst[start:end])\n",
  "label": 1
 },
 {
  "idx": 1690,
  "doc": "Python3 Make a list that increments for a certain amount, decrements for a certain amount",
  "code": "for start in range(5, len(lst), 10):\n    lst[start:start+5] = reversed(lst[start:start+5])\n",
  "label": 1
 },
 {
  "idx": 1691,
  "doc": "Python3 Make a list that increments for a certain amount, decrements for a certain amount",
  "code": "lst = list(range(20))\nfor start in range(5, len(lst), 10):\n    lst[start:start+5] = lst[start+4:start-1:-1]\n",
  "label": 1
 },
 {
  "idx": 1692,
  "doc": "Computing 16-bit checksum of ICMPv6 header",
  "code": "SOURCE_IP = \"fe80000000000000020086fffe0580da\"\nDEST_IP = \"fe80000000000000026097fffe0769ea\"\npseudo_header = build_pseudo_header(SOURCE_IP, DEST_IP, 32)\n",
  "label": 0
 },
 {
  "idx": 1693,
  "doc": "Persist and fetch data in with block",
  "code": "class TestRepository:\n   # All your normal methods go here\n\n   async def __aenter__(self):\n      # You can call coroutines here\n      await self.some_init()\n\n   async def __aexit__(self, exc_type, exc, tb):\n      # You can call coroutines here\n      await self.do_persistence()\n      await self.fetch_data()\n\n\nasync def do_work():\n    test_repo = TestRepository()\n\n    async with test_repo:\n        res = await test_repo.get_by_lim_off(\n                page_size=int(length),\n                offset=start,\n                customer_name=customer_name,\n                customer_phone=customer_phone,\n                return_type=return_type\n            )\n\n asyncio.get_event_loop().run_until_complete(do_work())\n",
  "label": 1
 },
 {
  "idx": 1694,
  "doc": "python - how to convert a nested list to a list of all individual sub-lists",
  "code": "l = [['A', ['A', 'B', ['A', 'B', 'C'], ['A', 'B', 'D']], ['A', 'D', ['A', 'D', 'A']], ['A', 'C', ['A', 'C', 'B'], ['A', 'C', 'A']], ['A', 'A', ['A', 'A', 'D']]]]\n\ndef un_nest(l):\n    r = []\n    k = []\n    for item in l:\n        if type(item) is list:\n            r.extend(un_nest(item))\n        else:\n            k.append(item)\n    if k:\n        r.insert(0, k)\n    return r\n\nprint(un_nest(l))\n",
  "label": 1
 },
 {
  "idx": 1695,
  "doc": "Extracting text from webpage, processing with Perl/Python, then rebuilding the page with links added",
  "code": "page = page.read()\nfile = open('url.html', 'w')\nfile.writelines(page)\nfile.close()\n",
  "label": 0
 },
 {
  "idx": 1696,
  "doc": "Django URL matching any 140 characters",
  "code": ">>> re.search(regex, \"home/ abc\")\n# Doesn't match, returns None\n",
  "label": 0
 },
 {
  "idx": 1697,
  "doc": "Django URL matching any 140 characters",
  "code": ">>> regex = r'^home/(?P<text>(.){10})$'\n>>> re.search(regex, \"home/1@#$%^& &*\").group(1)\n'1@#$%^& &*'\n>>> re.search(regex, \"home/1@bcd^& &*\").group(1)\n'1@bcd^& &*'\n",
  "label": 1
 },
 {
  "idx": 1698,
  "doc": "Django URL matching any 140 characters",
  "code": "url(r'^home/(?P<text>[\\w\\s]{140})$',....),\n",
  "label": 1
 },
 {
  "idx": 1699,
  "doc": "Select last chars of string until whitespace in Python",
  "code": ">>> st = 'Hello my name is John'\n>>> st.rsplit(' ', 1)\n['Hello my name is', 'John']\n>>> \n>>> st.rsplit(' ', 1)[1]\n'John'\n",
  "label": 1
 },
 {
  "idx": 1700,
  "doc": "Python: Opening a file within a print() function",
  "code": "with open('file.txt', 'r') as f:\n    for line in f:\n        print(line, end='')\n",
  "label": 1
 },
 {
  "idx": 1701,
  "doc": "Resizing a 3D image (and resampling)",
  "code": "\"\"\"\nzoom : float or sequence, optional\n    The zoom factor along the axes. If a float, `zoom` is the same for each\n    axis. If a sequence, `zoom` should contain one value for each axis.\n\"\"\"\n",
  "label": 0
 },
 {
  "idx": 1702,
  "doc": "Resizing a 3D image (and resampling)",
  "code": " dsfactor = [w/float(f) for w,f in zip(whole.shape, flash.shape)]\n downed = nd.interpolation.zoom(flash, zoom=dsfactor)\n",
  "label": 1
 },
 {
  "idx": 1703,
  "doc": "Ignoring unrecognized options when parsing argv?",
  "code": "> main.py -v --plugin=Foo -- --extra=bar -c\n",
  "label": 0
 },
 {
  "idx": 1704,
  "doc": "How to calculate cohen's d in Python?",
  "code": "from statistics import mean, stdev\nfrom math import sqrt\n\n# test conditions\nc0 = [2, 4, 7, 3, 7, 35, 8, 9]\nc1 = [i * 2 for i in c0]\n\ncohens_d = (mean(c0) - mean(c1)) / (sqrt((stdev(c0) ** 2 + stdev(c1) ** 2) / 2))\n\nprint(cohens_d)\n",
  "label": 1
 },
 {
  "idx": 1705,
  "doc": "How to match integers in NLTK CFG?",
  "code": "(S (NP I) (VP (V shot) (NP (NUM 3) (N elephants))))\n",
  "label": 0
 },
 {
  "idx": 1706,
  "doc": "Python replace year mentions like '85 with 1985",
  "code": ">>> re.sub(r\"'(\\d{2})\\b\", r\"19\\1\", \"Today '45, '3456\")\n\"Today 1945, '3456\"\n",
  "label": 1
 },
 {
  "idx": 1707,
  "doc": "Read each word and rest of line in Python?",
  "code": "text = ''.join(word_list)\n",
  "label": 0
 },
 {
  "idx": 1708,
  "doc": "python restart the program after running a method",
  "code": "while True:\n    #this is the menu\n    menu=input(\"What would you like to do?\\ntype 1 for method1 or 2 for method2: \")\n    if(menu==\"1\"):\n        method1()\n    if(menu==\"2\"):\n        method2()\n",
  "label": 1
 },
 {
  "idx": 1709,
  "doc": "Python reverse integer using recursion",
  "code": "from math import log10\ndef rev(num):\n    if num < 10:\n        return num\n    else:\n        ones = num % 10\n        rest = num // 10\n        #print ones, rest, int(log10(rest) + 1), ones * 10 ** int(log10(rest) + 1)\n        return ones * 10 ** int(log10(rest) + 1) + rev(rest)\nprint rev(9000), rev(1234), rev(1234567890123456789)\n",
  "label": 1
 },
 {
  "idx": 1710,
  "doc": "Pygame draw anti-aliased thick line",
  "code": "center_L1 = (X0 + X1) / 2.\n",
  "label": 0
 },
 {
  "idx": 1711,
  "doc": "Pandas: Change dataframe values based on dictionary and remove rows with no match",
  "code": "import pandas as pd\nHashTable = {\"chr1\" : 1, \"chr2\" : 2, \"chr3\" : 3, \"chr4\" : 4, \"chr5\" : 5, \"chr6\" : 6, \"chr7\" : 7, \"chr8\" : 8, \"chr9\" : 9, \"chr10\" : 10, \"chr11\" : 11, \"chr12\" : 12, \"chr13\" : 13, \"chr14\" : 14, \"chr15\" : 15, \"chr16\" : 16, \"chr17\" : 17, \"chr18\" : 18, \"chr19\" : 19, \"chrX\" : 20, \"chrY\" : 21, \"chrM\" : 22, 'chrMT': 23}\n# A dummy DataFrame with all the valid chromosomes and one unknown chromosome\ndf = pd.DataFrame({\"Chrom\": HashTable.keys() + [\"unknown_chr\"]})\n# Filter for valid rows\ndf = df[df[\"Chrom\"].isin(HashTable.keys())]\n# Replace the values according to dict\ndf[\"Chrom\"].replace(HashTable, inplace=True)\nprint df\n",
  "label": 1
 },
 {
  "idx": 1712,
  "doc": "tuple of datetime objects in Python",
  "code": "import datetime\n\ndef iso_year_start(iso_year):\n    \"The gregorian calendar date of the first day of the given ISO year\"\n    fourth_jan = datetime.date(iso_year, 1, 4)\n    delta = datetime.timedelta(fourth_jan.isoweekday()-1)\n    return fourth_jan - delta \n\ndef iso_to_gregorian(iso_year, iso_week, iso_day):\n    \"Gregorian calendar date for the given ISO year, week and day\"\n    year_start = iso_year_start(iso_year)\n    return year_start + datetime.timedelta(days=iso_day-1, weeks=iso_week-1)\n\n\ndef week_start_end(date):\n    year = date.isocalendar()[0]\n    week = date.isocalendar()[1]\n    d1 = iso_to_gregorian(year, week, 0)\n    d2 = iso_to_gregorian(year, week, 6)\n    d3 = datetime.datetime(d1.year, d1.month, d1.day, 0,0,0,0)\n    d4 = datetime.datetime(d2.year, d2.month, d2.day, 23,59,59,999999)\n    return (d3,d4)\n",
  "label": 1
 },
 {
  "idx": 1713,
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "def form_valid(self, form): \n    user_form = UserCreationForm(self.request.POST) \n    if user_form.is_valid(): \n        user = user_form.save() \n        teacher = form.save(commit=False) \n        teacher.user_id = user.id \n        teacher.save() \n        return HttpResponseRedirect(self.get_success_url())\n",
  "label": 0
 },
 {
  "idx": 1714,
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "def get_context_data(self, **kwargs): \n    context = super(TeacherUpdate, self).get_context_data(**kwargs) \n    context['user_form'] = self.second_form_class(self.request.POST or None, instance=self.object.user) \n    return context \n\ndef form_valid(self, form): \n    user_form = UserChangeForm(self.request.POST, instance=self.object.user) \n    if user_form.is_valid(): \n        user_form.save() \n        return super(TeacherUpdate, self).form_valid(form)\n",
  "label": 0
 },
 {
  "idx": 1715,
  "doc": "Remove a level from a pandas MultiIndex",
  "code": "In [226]: def f(i):\n            return [(i,100,1000),(i,100,1001),(i,100,1002),(i+1,101,1001)]\n\nIn [227]: l = []\n\nIn [228]: for i in range(1000000):\n             l.extend(f(i))\n\nIn [229]: index_3levels=pd.MultiIndex.from_tuples(l,names=[\"l1\",\"l2\",\"l3\"])\n\nIn [230]: len(index_3levels)\nOut[230]: 4000000\n",
  "label": 0
 },
 {
  "idx": 1716,
  "doc": "Remove a level from a pandas MultiIndex",
  "code": "In [255]: %timeit MultiIndex.from_arrays([ np.repeat(l1,len(l2)), np.repeat(l2,len(l1)) ])\n10 loops, best of 3: 183 ms per loop\n",
  "label": 0
 },
 {
  "idx": 1717,
  "doc": "Remove a level from a pandas MultiIndex",
  "code": "In [249]: l2 = index_3levels.droplevel(level='l3').droplevel(level='l1').unique()\n\nIn [250]: %timeit index_3levels.droplevel(level='l3').droplevel(level='l1').unique()\n10 loops, best of 3: 35.3 ms per loop\n\nIn [251]: l1 = index_3levels.droplevel(level='l3').droplevel(level='l2').unique()\n\nIn [252]: %timeit index_3levels.droplevel(level='l3').droplevel(level='l2').unique()\n10 loops, best of 3: 52.2 ms per loop\n\nIn [253]: len(l1)\nOut[253]: 1000001\n\nIn [254]: len(l2)\nOut[254]: 2\n",
  "label": 0
 },
 {
  "idx": 1718,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> pd.datetools.MONTHS\n['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n>>> target.columns = ['is'+x.capitalize() for x in pd.datetools.MONTHS]\n",
  "label": 0
 },
 {
  "idx": 1719,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> target = (target + dm).fillna(0)\n>>> target\n            1   2   3   4   5   6   7   8   9   10  11  12\n2011-01-01   1   0   0   0   0   0   0   0   0   0   0   0\n2011-03-22   0   0   1   0   0   0   0   0   0   0   0   0\n2011-06-10   0   0   0   0   0   1   0   0   0   0   0   0\n2011-08-29   0   0   0   0   0   0   0   1   0   0   0   0\n2011-11-17   0   0   0   0   0   0   0   0   0   0   1   0\n",
  "label": 0
 },
 {
  "idx": 1720,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> pd.concat([df, target], axis=1)\n                temp  isJan  isFeb  isMar  isApr  isMay  isJun  isJul  isAug  \\\n2011-01-01  0.566277      1      0      0      0      0      0      0      0   \n2011-03-22  0.965421      0      0      1      0      0      0      0      0   \n2011-06-10  0.854030      0      0      0      0      0      1      0      0   \n2011-08-29  0.780752      0      0      0      0      0      0      0      1   \n2011-11-17  0.148783      0      0      0      0      0      0      0      0   \n\n            isSep  isOct  isNov  isDec  \n2011-01-01      0      0      0      0  \n2011-03-22      0      0      0      0  \n2011-06-10      0      0      0      0  \n2011-08-29      0      0      0      0  \n2011-11-17      0      0      1      0  \n",
  "label": 0
 },
 {
  "idx": 1721,
  "doc": "Pandas: Get value of mutliple sorting/grouping query",
  "code": "df.groupby('B').head(1)\ndf.groupby('B').last()\n",
  "label": 0
 },
 {
  "idx": 1722,
  "doc": "Drawing window border in Python xlib",
  "code": "def set_active_border(self, window):\n    border_color = self.colormap.alloc_named_color(\\\n        \"#ff00ff\").pixel\n    window.configure(border_width = 2)\n    window.change_attributes(None,border_pixel=border_color,\n         border_width = 2)\n    self.dpy.sync()\n",
  "label": 0
 },
 {
  "idx": 1723,
  "doc": "Pandas dataframe : Multiple Time/Date columns to single Date index",
  "code": "import pandas as pd\nimport numpy as np\nfrom pandas import melt\n\ndf = pd.DataFrame(np.random.randint(10, 1000, size=(2,12)), index=['PrinterBlue', 'PrinterBetter'], columns=pd.date_range('1-1', periods=12, freq='M'))\n\ndft = df.T\ndft[\"date\"] = dft.index\nresult = melt(dft, id_vars=[\"date\"])\nresult.columns = [\"date\", \"brand\", \"sales\"]\nprint (result)\n",
  "label": 1
 },
 {
  "idx": 1724,
  "doc": "Random rounding to integer in Python",
  "code": "def prob_round(x, prec = 0):\n    fixup = np.sign(x) * 10**prec\n    x *= fixup\n    is_up = random.random() < x-int(x)\n    round_func = math.ceil if is_up else math.floor\n    return round_func(x) / fixup\n\nx = 8.33333333\n[ prob_round(x, prec = 2) for i in range(10) ]\n=> [8.3399999999999999,\n 8.3300000000000001,\n 8.3399999999999999,\n 8.3300000000000001,\n 8.3300000000000001,\n 8.3300000000000001,\n 8.3300000000000001,\n 8.3300000000000001,\n 8.3399999999999999,\n 8.3399999999999999]\n",
  "label": 1
 },
 {
  "idx": 1725,
  "doc": "Comparing items in large list - finding items differing in 1 letter by length - Python",
  "code": "IGHV1-2:CARDSDYDWYFDLW-CAREGYNWNDEGRFDYW\nIGHV1-2-IGHJ2:CARDSDYDWYFDLW\nIGHV1-2-IGHJ4:CARDIAVPGHGDYW-CARRIGYSSGSEDYW-CAREGYNWNDEGRFDYW\nIGHV1-8-IGHJ3:CARGQTYYDILTGPSDAFDIW\nIGHV3-11-IGHJ:CATSGGSP\nIGHV3-11-IGHJ4:CARDGDGYNDYW\nIGHV3-23-IGHJ3:CAKWGPDAFDIW-CAKSGGWYLSDAFDIW-CAKSSGWYLSDAFDIW\n  'CAKSGGWYLSDAFDIW' and 'CAKSSGWYLSDAFDIW' differ by < 2 characters\nIGHV3-23-IGHJ4:CAKDWELYYFDYW-CAKDRGYTGYGVYFDYW-CAKDRGYTGFGVYFDYW\n  'CAKDRGYTGYGVYFDYW' and 'CAKDRGYTGFGVYFDYW' differ by < 2 characters\nIGHV3-23-IGHJ6:CAKEGCSSGCPYYYYGMDVW\nIGHV3-9-IGHJ3:CANVPIYSSSYDAFDIW\nIGHV4-39:CARSTGDWFDPW\nIGHV4-39-IGHJ4:CARTGFGELGFDYW-CARHDILTGYSYYFDYW-CARHLGYNNSWYPFDYW-CARYLGYNSNWYPFDYW\nIGHV4-39-IGHJ5:CARSTGDWFDPW\nIGHV6-1-IGHJ4:CASGGAVPGYYFDYW\n",
  "label": 0
 },
 {
  "idx": 1726,
  "doc": "Comparing items in large list - finding items differing in 1 letter by length - Python",
  "code": "IGHV3-23-IGHJ4-CAKDRGYTGYGVYFDYW\nIGHV4-39-IGHJ4-CARHDILTGYSYYFDYW\nIGHV3-23-IGHJ3-CAKSGGWYLSDAFDIW\nIGHV4-39-IGHJ4-CARTGFGELGFDYW\nIGHV1-2-IGHJ2-CARDSDYDWYFDLW\nIGHV1-8-IGHJ3-CARGQTYYDILTGPSDAFDIW\nIGHV4-39-IGHJ5-CARSTGDWFDPW\nIGHV3-9-IGHJ3-CANVPIYSSSYDAFDIW\nIGHV3-23-IGHJ4-CAKDWELYYFDYW\nIGHV3-23-IGHJ4-CAKDRGYTGFGVYFDYW\nIGHV4-39-IGHJ4-CARHLGYNNSWYPFDYW\nIGHV1-2-IGHJ4-CAREGYNWNDEGRFDYW\nIGHV3-23-IGHJ3-CAKSSGWYLSDAFDIW\nIGHV4-39-IGHJ4-CARYLGYNSNWYPFDYW\nIGHV3-23-IGHJ6-CAKEGCSSGCPYYYYGMDVW\nIGHV3-23-IGHJ3-CAKWGPDAFDIW\nIGHV3-11-IGHJ-CATSGGSP\nIGHV3-11-IGHJ4-CARDGDGYNDYW\nIGHV1-2-IGHJ4-CARRIGYSSGSEDYW\nIGHV1-2-IGHJ4-CARDIAVPGHGDYW\nIGHV6-1-IGHJ4-CASGGAVPGYYFDYW\nIGHV1-2-CAREGYNWNDEGRFDYW\nIGHV4-39-CARSTGDWFDPW\nIGHV1-2-CARDSDYDWYFDLW\n",
  "label": 0
 },
 {
  "idx": 1727,
  "doc": "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?",
  "code": "class memoize_by_bar(key_memoized):\n    def key(self, args, kwargs):\n        return self.normalize_args(args, kwargs)['bar']\n\n@memoize_by_bar\ndef foo(bar, baz, spam):\n    print 'calling foo: bar=%r baz=%r spam=%r' % (bar, baz, spam)\n    return bar\n\nprint foo('x', 'ignore1', 'ignore2')\nprint foo('x', 'ignore3', 'ignore4')\n",
  "label": 0
 },
 {
  "idx": 1728,
  "doc": "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?",
  "code": "import inspect\n\nclass key_memoized(object):\n    def __init__(self, func):\n       self.func = func\n       self.cache = {}\n\n    def __call__(self, *args, **kwargs):\n        key = self.key(args, kwargs)\n        if key not in self.cache:\n            self.cache[key] = self.func(*args, **kwargs)\n        return self.cache[key]\n\n    def normalize_args(self, args, kwargs):\n        spec = inspect.getargs(self.func.__code__).args\n        return dict(kwargs.items() + zip(spec, args))\n\n    def key(self, args, kwargs):\n        a = self.normalize_args(args, kwargs)\n        return tuple(sorted(a.items()))\n",
  "label": 1
 },
 {
  "idx": 1729,
  "doc": "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?",
  "code": "@key_memoized\ndef foo(bar, baz, spam):\n    print 'calling foo: bar=%r baz=%r spam=%r' % (bar, baz, spam)\n    return bar + baz + spam\n\nprint foo(1, 2, 3)\nprint foo(1, 2, spam=3)         #memoized\nprint foo(spam=3, baz=2, bar=1) #memoized\n",
  "label": 0
 },
 {
  "idx": 1730,
  "doc": "Solve equation with a set of points",
  "code": "[ 2.32751132, 1.27686053, 0.65986596]\n",
  "label": 0
 },
 {
  "idx": 1731,
  "doc": "Python Pandas: Eliminate a row from a dataframe if a value in a any preceding row in a groupby meets a certain criteria",
  "code": "df['expected_week'] = df.groupby(['Country', 'Product']).Week.transform(lambda s: range(s.min(), s.min() + s.size))\ndf[df.Week == df.expected_week]\n",
  "label": 1
 },
 {
  "idx": 1732,
  "doc": "Python Pandas: Eliminate a row from a dataframe if a value in a any preceding row in a groupby meets a certain criteria",
  "code": "df.groupby(['Country', 'Product']).apply(lambda sdf: sdf[(sdf.Week.diff(1).fillna(1) != 1).astype('int').cumsum() == 0]).reset_index(drop=True)\n",
  "label": 1
 },
 {
  "idx": 1733,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "(b, 0\u2096)\n",
  "label": 0
 },
 {
  "idx": 1734,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "X[i].data\n",
  "label": 0
 },
 {
  "idx": 1735,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "logsumexp(a) = max(a) + log(\u2211 exp[a - max(a)])\n",
  "label": 0
 },
 {
  "idx": 1736,
  "doc": "Log-sum-exp trick on a sparse matrix in scipy",
  "code": "def logsumexp_row_nonzeros(X):\n    result = np.empty(X.shape[0])\n    for i in range(X.shape[0]):\n        result[i] = logsumexp(X.data[X.indptr[i]:X.indptr[i+1]])\n    return result\n",
  "label": 1
 },
 {
  "idx": 1737,
  "doc": "trying to create a dictionary but do not know how to deal with \\n",
  "code": "{'6.00': ('10', '1'),\n '6.01': ('5', '4'),\n '6.02': ('5', '6'),\n '6.03': ('2', '9'),\n '6.04': ('1', '2'),\n '6.05': ('1', '18'),\n '6.06': ('5', '19'),\n '6.07': ('2', '10'),\n '6.08': ('1', '10'),\n '6.09': ('3', '7'),\n '6.10': ('8', '18'),\n '6.11': ('6', '8'),\n '6.12': ('6', '3'),\n '6.13': ('9', '16'),\n '6.14': ('10', '8'),\n '6.15': ('10', '6'),\n '6.16': ('6', '9'),\n '6.17': ('9', '3'),\n '6.18': ('10', '4'),\n '6.19': ('8', '19')}\n",
  "label": 0
 },
 {
  "idx": 1738,
  "doc": "trying to create a dictionary but do not know how to deal with \\n",
  "code": "subject_dic = {}\ninputFile = open(filename)\n\n# Turn \"line1\\nline2\\n\" into ['line1', 'line2']\ninputData = inputFile.read().splitlines()\n\n#for line in inputFile:\nfor line in inputData:\n    #split_line = string.split(line, ',')\n    #subject_dic[split_line[0]] = tuple(split_line[1:3])\n    mykey, myval1, myval2 = line.split(',') # Strings always have .split()\n    subject_dic[mykey] = (myval1, myval2) # Explicit tuple assignment\n\nprint subject_dic\n",
  "label": 1
 },
 {
  "idx": 1739,
  "doc": "Split field to array when accessed",
  "code": "def get_word_list(self, name):\n    if name in ['keywords', 'spamwords', 'translations']:\n        return getattr(self, name).split(',')\n\n# or even\ndef __getattr__(self, name):\n    if name[-5:] == '_list' and name[:-5] in ['keywords', 'spamwords', 'translations']:\n        return getattr(self, name[:-5]).split(',')\n    else\n        raise AttributeError\n\ncat = Categories.get(pk=1)\ncat.get_word_list('keywords')  # ['word 1', 'word 2', ...]\ncat.keywords_list              # ['word 1', 'word 2', ...] with 2nd approach\ncat.keywords                   # 'word 1, word 2' -- remains CSV\n",
  "label": 1
 },
 {
  "idx": 1740,
  "doc": "Broken XML file parsing and using XPATH",
  "code": ">>> def fix_xml(string):\n    \"\"\"\n    Tries to insert missing closing XML tags\n    \"\"\"\n    error = True\n    while error:\n        try:\n            # Put one tag per line\n            string = string.replace('>', '>\\n').replace('\\n\\n', '\\n')\n            root = etree.fromstring(string)\n            error = False\n        except etree.XMLSyntaxError as exc:\n            text = str(exc)\n            pattern = \"Opening and ending tag mismatch: (\\w+) line (\\d+) and (\\w+), line (\\d+), column (\\d+)\"\n            m = re.match(pattern, text)\n            if m:\n                # Retrieve where error took place\n                missing, l1, closing, l2, c2 = m.groups()\n                l1, l2, c2 = int(l1), int(l2), int(c2)\n                lines = string.split('\\n')\n                print 'Adding closing tag <{0}> at line {1}'.format(missing, l2)\n                missing_line = lines[l2 - 1]\n                # Modified line goes back to where it was\n                lines[l2 - 1] = missing_line.replace('</{0}>'.format(closing), '</{0}></{1}>'.format(missing, closing))\n                string = '\\n'.join(lines)\n            else:\n                raise\n    print string\n",
  "label": 1
 },
 {
  "idx": 1741,
  "doc": "New Python Gmail API - Only Retrieve Messages from Yesterday",
  "code": "from datetime import date, timedelta\n\ntoday = date.today()\nyesterday = today - timedelta(1)\n\n# do your setup...\n\nuser_id = 'user email address'\n\n# Dates have to formatted in YYYY/MM/DD format for gmail\nquery = \"before: {0} after: {1}\".format(today.strftime('%Y/%m/%d'),\n                                        yesterday.strftime('%Y/%m/%d'))\n\nresponse = service.users().messages().list(userId=user_id,\n                                           q=query).execute()\n# Process the response for messages...\n",
  "label": 1
 },
 {
  "idx": 1742,
  "doc": "Matplotlib artists to stay the same size when zoomed in?",
  "code": "from matplotlib import pyplot as plt\nfrom matplotlib.patches import Polygon\nimport numpy as np\n\nx = np.linspace(0,5,100)\ny = np.sin(x)\n\nplt.plot(x,y)\nax = plt.gca()\n\ndta_pts = [[.5,-.75],[1.5,-.6],[1,-.4]]\n\n# coordinates converters:\n#ax_to_display = ax.transAxes.transform\ndisplay_to_ax = ax.transAxes.inverted().transform\ndata_to_display = ax.transData.transform\n#display_to_data = ax.transData.inverted().transform\n\nax_pts = display_to_ax(data_to_display(dta_pts))\n\n# this triangle will move with the plot\nax.add_patch(Polygon(dta_pts, True)) \n# this triangle will stay put relative to the axes bounds\nax.add_patch(Polygon(ax_pts, True, transform=ax.transAxes))\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 1743,
  "doc": "Compare two lists in python and print the output",
  "code": "for item in ({child.get('value') for child in xml_data} &\n             {item[4] for item in main_list}):\n    print(item)\n",
  "label": 1
 },
 {
  "idx": 1744,
  "doc": "Compare two lists in python and print the output",
  "code": "children = {child.get('value') for child in xml_data}\nfor item in main_list:\n    if item[4] in children:\n        print(item[4])\n",
  "label": 1
 },
 {
  "idx": 1745,
  "doc": "retrieve the Package.Module.Class name from a (Python) class/type",
  "code": ">>> from collections import defaultdict\n>>> import inspect\n>>> inspect.getmodule(defaultdict)\n<module 'collections' from '/usr/lib/python2.6/collections.pyc'>\n",
  "label": 1
 },
 {
  "idx": 1746,
  "doc": "Pycharm: set environment variable for run manage.py Task",
  "code": "#!/bin/sh\n#\n# This should normally be placed in the ${SITE_ROOT}/.env\n#\n# DEPLOYMENT DO NOT MODIFY THESE..\nSECRET_KEY='XXXSECRETKEY'\n",
  "label": 0
 },
 {
  "idx": 1747,
  "doc": "Python: Suppress exponential format (i.e. 9e-10) in float to string conversion?",
  "code": "\"%.16f\" % f if f >= 1e-16 else \"0.0\"\n",
  "label": 1
 },
 {
  "idx": 1748,
  "doc": "Opening and closing files in a loop",
  "code": "from itertools import groupby\nfrom operator import itemgetter\n\nitems = [\n    ('name1', 10), ('name1', 30),\n    ('name2', 5), ('name2', 7), ('name2', 3),\n    ('name3', 10)\n]\n\nfor name, rows in groupby(items, itemgetter(0)):\n    with open(name + \".txt\", \"w\") as outf:\n        outf.write(\"\\n\".join(str(row[1]) for row in rows))\n",
  "label": 1
 },
 {
  "idx": 1749,
  "doc": "Specific font_face based on syntax in Sublime Text 2",
  "code": "{\n    \"font_face\": \"Source Code Pro\",\n    \"color_scheme\": \"Packages/Theme - Flatland/Flatland Monokai.tmTheme\"\n}\n",
  "label": 0
 },
 {
  "idx": 1750,
  "doc": "vectorized implementation for pseudo pivot table in python",
  "code": "import pandas as pd\n\ndf = pd.DataFrame(\n    {'Component': ['Air conditioner', 'Air conditioner', 'airbag', 'engine with 150 H/P', 'airbag',\n                   '1-year concierge assistance', 'ABS breaks', 'ABS breaks', 'airbag', \n                   'air conditioner', 'engine with 250 H/P'], \n     'Vehicle': ['Ford', 'Ford', 'Ford', 'Ford', 'Toyota', 'Toyota', 'Toyota',\n                 'Chrysler', 'Chrysler', 'Chrysler', 'Chrysler']})\n\nresult = pd.crosstab(index=[df['Vehicle']], columns=[df['Component']]).clip(upper=1)\nprint(result)\n",
  "label": 1
 },
 {
  "idx": 1751,
  "doc": "Joinable PriorityQueue in python's asyncio",
  "code": "from asyncio import PriorityQueue, JoinableQueue\nimport asyncio\nimport random\n\nclass JoinablePriorityQueue(JoinableQueue, PriorityQueue):\n    pass\n\n\n@asyncio.coroutine\ndef consume(q):\n    while True:\n        a = yield from q.get()\n        print(\"got a {}\".format(a))\n        if a[1] is None:\n            q.task_done()\n            return\n        asyncio.sleep(1)\n        q.task_done()\n\n@asyncio.coroutine\ndef produce(q):\n    for i in range(10):\n        yield from q.put((random.randint(0,10), i))\n    yield from q.put((100, None)) # Will be last\n    asyncio.async(consume(q))\n    print(\"waiting...\")\n    yield from q.join()\n    print(\"waited\")\n\nloop = asyncio.get_event_loop()\nq = JoinablePriorityQueue()\nloop.run_until_complete(produce(q))\n",
  "label": 1
 },
 {
  "idx": 1752,
  "doc": "Search multiple strings in multiple files",
  "code": "grep -rlf <(cut -d = -f 2- messages.txt) dir\n",
  "label": 1
 },
 {
  "idx": 1753,
  "doc": "How to find defined sequence in the list?",
  "code": ">>> def find_sequences(sequences, events):\n...     i = 0\n...     events_len = len(events)\n...     sequences_len = len(sequences)\n...     while i < sequences_len:\n...             if sequences[i:i+events_len] == events: \n...                 yield True\n...             i = i + 1\n... \n>>> list(find_sequences(lst, events))\n>>> sum(find_sequences(['AB', 'A', 'BA', 'A', 'BA'], ['A', 'BA']))\n2\n",
  "label": 1
 },
 {
  "idx": 1754,
  "doc": "Sort NumPy float array column by column",
  "code": "A[np.lexsort((A[:, 0], A[:, 1]))]\n",
  "label": 1
 },
 {
  "idx": 1755,
  "doc": "How to write small DSL parser with operator module in python",
  "code": "r4= Rule( \"re.match( r'[2-5][0-2]', str(A) )\" )\nr5= Rule( \"myfoo(A) > 100\" )\nr6= Rule( \"A in myfoo(B)\" )\n",
  "label": 0
 },
 {
  "idx": 1756,
  "doc": "How to remove a column from a structured numpy array *without copying it*?",
  "code": "In [297]: a\nOut[297]: \narray([(10.0, 13.5, 1248, -2), (20.0, 0.0, 0, 0), (30.0, 0.0, 0, 0),\n       (40.0, 0.0, 0, 0), (50.0, 0.0, 0, 999)], \n      dtype=[('x', '<f8'), ('y', '<f8'), ('i', '<i8'), ('j', '<i8')])\n\nIn [298]: b = remove_fields(a, ['i', 'j'])\n\nIn [299]: b\nOut[299]: \narray([(10.0, 13.5), (20.0, 0.0), (30.0, 0.0), (40.0, 0.0), (50.0, 0.0)], \n      dtype={'names':['x','y'], 'formats':['<f8','<f8'], 'offsets':[0,8], 'itemsize':32})\n",
  "label": 0
 },
 {
  "idx": 1757,
  "doc": "How to load_files and process a .txt file with scikit-learn?",
  "code": "print [[' '.join(x) for x in sample[:-1]]\n                        for sample in my_load_files(text_folder, 'File_*')]\n",
  "label": 0
 },
 {
  "idx": 1758,
  "doc": "How to retain &quot; and &apos; while parsing xml using bs4 python",
  "code": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<tag1>\n<tag2 attr1=\"a1\">&quot; example text &quot;</tag2>\n<tag3>\n<tag4 attr2=\"a2\">&quot; example text &quot;</tag4>\n<tag5>\n<tag6 attr3=\"a3\">&apos; example text &apos;</tag6>\n</tag5>\n</tag3>\n</tag1>\n",
  "label": 0
 },
 {
  "idx": 1759,
  "doc": "How to retain &quot; and &apos; while parsing xml using bs4 python",
  "code": "from bs4 import BeautifulSoup\nfrom bs4.dammit import EntitySubstitution\n\ndef custom_formatter(string):\n    \"\"\"add &quot; and &apos; to entity substitution\"\"\"\n    return EntitySubstitution.substitute_html(string).replace('\"','&quot;').replace(\"'\",'&apos;')\n\ninput_file = '''<tag1>\n  <tag2 attr1=\"a1\">&quot; example text &quot;</tag2>\n  <tag3>\n    <tag4 attr2=\"a2\">&quot; example text &quot;</tag4>\n    <tag5>\n      <tag6 attr3=\"a3\">&apos; example text &apos;</tag6>\n    </tag5>\n  </tag3>\n</tag1>\n'''\n\nsoup = BeautifulSoup(input_file, \"xml\")\n\nprint soup.encode(formatter=custom_formatter)\n",
  "label": 1
 },
 {
  "idx": 1760,
  "doc": "Make scatter plot from set of points in tuples",
  "code": "plt.scatter(*zip(*a))\n",
  "label": 1
 },
 {
  "idx": 1761,
  "doc": "How to center labels in histogram plot",
  "code": "his = np.histogram(a,bins=range(5))\nfig, ax = plt.subplots()\noffset = .4\nplt.bar(his[1][1:],his[0])\nax.set_xticks(his[1][1:] + offset)\nax.set_xticklabels( ('1', '2', '3', '4') )\n",
  "label": 1
 },
 {
  "idx": 1762,
  "doc": "how to iterate over all files in path?",
  "code": "import glob\npath = \"c:\\\\Python27\\\\test\"\n\nfor fpath in glob.glob(os.path.join(path, '*.txt')):\n    with open(fpath) as fin:\n        print fpath, 'opened'\n",
  "label": 1
 },
 {
  "idx": 1763,
  "doc": "Python: Effective reading from a file using csv module",
  "code": "import csv\n\nwith open(\"file.csv\") as f:\n  reader = csv.reader(f)\n\n  titles = next(reader)\n  while titles[-1] == '':\n    titles.pop()\n  num_titles = len(titles)      \n  totals = { title: 0 for title in titles }\n\n  for row in reader:\n    for i in range(num_titles):\n      totals[titles[i]] += int(row[i])\n\nprint(totals)\n",
  "label": 1
 },
 {
  "idx": 1764,
  "doc": "packaging with numpy and test suite",
  "code": "nosetests package_name -v\n",
  "label": 0
 },
 {
  "idx": 1765,
  "doc": "Calculate point based on distance and direction",
  "code": "import geopy\nimport geopy.distance\nimport scipy.optimize\n\n\ndef north(startpoint, distance_km):\n    \"\"\"Return target function whose argument is a positive latitude\n    change (in degrees) relative to `startpoint`, and that has a root\n    for a latitude offset that corresponds to a point that is \n    `distance_km` kilometers away from the start point.\n    \"\"\"\n    def target(latitude_positive_offset):\n        return geopy.distance.distance(\n            startpoint, geopy.Point(\n                latitude=startpoint.latitude + latitude_positive_offset,\n                longitude=startpoint.longitude)\n            ).km - distance_km\n    return target\n\n\nstart = geopy.Point(48.853, 2.349)\nprint \"Start: %s\" % start\n\n# Find the root of the target function, vary the positve latitude offset between\n# 0 and 2 degrees (which is for sure enough for finding a 1 km distance, but must\n# be adjusted for larger distances).\nlatitude_positive_offset = scipy.optimize.bisect(north(start, 1),  0, 2)\n\n\n# Build Point object for identified point in space.\nend = geopy.Point(\n    latitude=start.latitude + latitude_positive_offset,\n    longitude=start.longitude\n    )\n\nprint \"1 km north: %s\" % end\n\n# Make the control.\nprint \"Control distance between both points: %.4f km.\" % (\n     geopy.distance.distance(start, end).km)\n",
  "label": 1
 },
 {
  "idx": 1766,
  "doc": "How to get a vector from a list in list in python?",
  "code": "class Comprehension(object):\n    def __init__(self, iterable):\n        self._iterable = iterable\n\n    def __iter__(self):\n        return iter(self._iterable)\n\n    def __getattr__(self, name):\n        return Comprehension(getattr(elt, name) for elt in self._iterable)\n\n    def __getitem__(self, item):\n        return Comprehension(elt[item] for elt in self._iterable)\n\n    def __call__(self, *args, **kwargs):\n        return Comprehension(elt(*args, **kwargs) for elt in self._iterable)\n",
  "label": 1
 },
 {
  "idx": 1767,
  "doc": "How to get a vector from a list in list in python?",
  "code": "f = [x[2][1] for x in e]\n",
  "label": 0
 },
 {
  "idx": 1768,
  "doc": "Modifying a subset of rows in a pandas dataframe",
  "code": "df.ix[df.A==0, 'B'] = np.nan\n",
  "label": 1
 },
 {
  "idx": 1769,
  "doc": "Parsing members of a variable length python string",
  "code": "import collections\n\nwith open(\"cpu_text\", \"r\") as f:\n    lines = f.readlines()\n\nlines = [line.strip() for line in lines]\n\ngroup_id = 0\ngroup_member_id = 0\noutput_dict = collections.OrderedDict()\n\nfor line in lines:\n    if line.find(\"SYS\") > -1:\n        group_id += 1\n    elif line.find(\"Tot\") > -1:\n        group_member_id = 0\n    else:\n        group_member_id += 1\n        key = \"{0}-{1}\".format(group_id, group_member_id)\n        memory = line.split()[7]\n        output_dict[key] = memory\n\nprint(output_dict)\n",
  "label": 1
 },
 {
  "idx": 1770,
  "doc": "Python C API - How to construct object from PyObject",
  "code": "/// @brief boost::python::object that refers to a type.\nstruct type_object: \n  public boost::python::object\n{\n  /// @brief If the object is a type, then refer to it.  Otherwise,\n  ///        refer to the instance's type.\n  explicit\n  type_object(boost::python::object object):\n    boost::python::object(object)\n  {\n    if (!PyType_Check(object.ptr()))\n    {\n      throw std::invalid_argument(\"type_object requires a Python type\");\n    }\n  }\n};\n\n...\n\n// Only accepts a Python type.\nvoid add_component(type_object type) { ... }\n",
  "label": 0
 },
 {
  "idx": 1771,
  "doc": "Extracting data from file with differing amounts of columns",
  "code": "awk  '{print $(NF-1)}' /tmp/genes.txt\nA2M\nACADM\n",
  "label": 1
 },
 {
  "idx": 1772,
  "doc": "How to find first byte of a serial stream with python?",
  "code": "ser.read(ser.inWaiting())\n",
  "label": 0
 },
 {
  "idx": 1773,
  "doc": "How to get console output printed using kivy",
  "code": "<shellcommand>:\norientation: \"vertical\"\nfirst:one\nsecond:two\nthird:three\ncanvas:\n    Rectangle:\n        source: \"snaps.png\" #location of any picture\n        pos: self.pos\n        size: self.size\n\n\n\nBoxLayout:\n    orientation: \"horizontal\"\n    Button:\n        id:one\n        text: \"UNAME\"\n        background_color: 0,0,0,1\n        font_size:32\n        size_hint:1,None\n        on_press: root.uname()\n\n\n    Button:\n        id:two      \n        text: \"DATE\"\n        background_color: 1,1.5,0,1\n        font_size:32\n        size_hint:1,None\n        on_press: root.date()\n\n\n    Button:\n        id: three\n        text: \"LOGGED IN\"\n        background_color: 1,0,0,1\n        font_size:32\n        size_hint: 1,None\n        on_press: root.last()\n",
  "label": 0
 },
 {
  "idx": 1774,
  "doc": "Collect values of pandas dataframe column A if column B is NaN (Python)",
  "code": "In [10]: df\nOut[10]:\n     a  b  c\n0  NaN  9  7\n1  1.0  7  6\n2  5.0  9  1\n3  7.0  4  0\n4  NaN  2  3\n5  2.0  4  6\n6  6.0  3  6\n7  0.0  2  7\n8  9.0  1  4\n9  2.0  9  3\n\nIn [11]: df.ix[pd.isnull(df['a']), 'b']\nOut[11]:\n0    9\n4    2\nName: b, dtype: int32\n",
  "label": 1
 },
 {
  "idx": 1775,
  "doc": "Iterate over a \u2018window\u2019 of adjacent elements in Python",
  "code": "from itertools import chain, repeat, islice\n\ndef window(seq, size=2, fill=0, fill_left=True, fill_right=False):\n    \"\"\" Returns a sliding window (of width n) over data from the iterable:\n      s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...\n    \"\"\"\n    ssize = size - 1\n    it = chain(\n      repeat(fill, ssize * fill_left),\n      iter(seq),\n      repeat(fill, ssize * fill_right))\n    result = tuple(islice(it, size))\n    if len(result) == size:  # `<=` if okay to return seq if len(seq) < size\n        yield result\n    for elem in it:\n        result = result[1:] + (elem,)\n        yield result\n",
  "label": 1
 },
 {
  "idx": 1776,
  "doc": "Calculate a point along a line segment one unit from a end of the seg",
  "code": ">>> a = Vector(4,5,0)\n>>> b = Vector(5,6,0)\n>>> b - a\n[1, 1, 0]\n",
  "label": 0
 },
 {
  "idx": 1777,
  "doc": "Calculate a point along a line segment one unit from a end of the seg",
  "code": ">>> a = Vector(4,5,0)\n>>> direction = Vector(10, 1, 0).unitVector()\n>>> a + direction\n[4.995037190209989, 5.099503719020999, 0.0]\n",
  "label": 0
 },
 {
  "idx": 1778,
  "doc": "setup relationship one-to-one in Flask + SQLAlchemy",
  "code": "region_name = my_person.region.name  # navigate a 'relationship' and get its 'name' attribute\n",
  "label": 0
 },
 {
  "idx": 1779,
  "doc": "setup relationship one-to-one in Flask + SQLAlchemy",
  "code": "class Person(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100))\n    # @note: renamed the column, so that can use the name 'region' for\n    # relationship\n    region_id = db.Column(db.Integer, db.ForeignKey('region.id'))\n\n    # define relationship\n    region = db.relationship('Region', backref='people')\n\n\nclass Region(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50))\n",
  "label": 1
 },
 {
  "idx": 1780,
  "doc": "Extracting Data From Python Classes",
  "code": "pluto = Planet(4495978707000, 0, 0, 4670, 1.305e+22)\n",
  "label": 0
 },
 {
  "idx": 1781,
  "doc": "How to consistently ignore one byte from a string",
  "code": "In [62]: test = b'hello\\x00world'\nIn [63]: test\nOut[63]: 'hello\\x00world'\nIn [64]: test_without_nulls = bytes(filter(lambda x: x != b'\\x00', test))\nIn [65]: test_without_nulls\nOut[65]: 'helloworld'\n",
  "label": 1
 },
 {
  "idx": 1782,
  "doc": "Python BeautifulSoup get text from HTML",
  "code": "In [1]: from bs4 import BeautifulSoup\n\nIn [2]: html = \"\"\"\\\n   ...: <p>aaa</p>bbb\n   ...: <p>ccc</p>ddd\"\"\"\n\nIn [3]: soup = BeautifulSoup(html)\n\nIn [4]: [p.next_sibling for p in soup.findAll('p')]\nOut[4]: [u'bbb\\n', u'ddd']\n",
  "label": 1
 },
 {
  "idx": 1783,
  "doc": "Plone - Override Zope Schema fields",
  "code": "<browser:page\n    name=\"global-documentviewer-settings\"\n    for=\"Products.CMFPlone.interfaces.IPloneSiteRoot\"\n    class=\".somewhere.CustomGlobalSettingsFormView\"\n    layer=\".interfaces.ICustomLayer\"\n    permission=\"cmf.ManagePortal\" />\n",
  "label": 0
 },
 {
  "idx": 1784,
  "doc": "Plone - Override Zope Schema fields",
  "code": "from collective.documentviewer.interfaces import ILayer as IDocumentViewerLayer\nclass ICustomLayer(IDocumentViewerLayer):\n    \"\"\"\n    custom layer class\n    \"\"\"\n",
  "label": 0
 },
 {
  "idx": 1785,
  "doc": "Plone - Override Zope Schema fields",
  "code": "from z3c.form import field\nfrom plone.app.z3cform.layout import wrap_form\nfrom collective.documentviewer.views import GlobalSettingsForm\nclass CustomGlobalSettingsForm(GlobalSettingsForm):\n    fields = field.Fields(IEnhancedDocumentViewerSchema)\nCustomGlobalSettingsFormView = wrap_form(CustomGlobalSettingsForm)\n",
  "label": 0
 },
 {
  "idx": 1786,
  "doc": "Interleaving two numpy index arrays, one item from each array",
  "code": "c = np.hstack((a_t, b_t))[:, np.argsort(np.hstack((a, b)))]\narray([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 13, 14, 15, 17, 19, 21, 23],\n       [ 0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  1,  0,  1,  1,  1]])\n",
  "label": 0
 },
 {
  "idx": 1787,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": "from collections import Counter\n\nd = {\n    'KEY1': {\n        'key2_1': 5,\n        'key2_2': 1,\n        'key2_3': 3\n    },\n    'KEY2': {\n        'key2_1': 2,\n        'key2_2': 3,\n        'key2_3': 4\n    }\n}\n\nc = Counter()\nfor k, v in d.iteritems():\n    c.update({(k, k1): v1 for k1, v1 in v.iteritems()})\n\nprint c.most_common(3)\n",
  "label": 1
 },
 {
  "idx": 1788,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": ">>> c = Counter(x)\n>>> c\nCounter({('foo', 'bar'): 2, ('foo', 'foo'): 1, ('bar', 'foo'): 1})\n",
  "label": 0
 },
 {
  "idx": 1789,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": ">>> d = {1: 'foo'}\n>>> 1 in d\nTrue\n>>> 2 in d\nFalse\n",
  "label": 0
 },
 {
  "idx": 1790,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": "if id not in D:\n    D[id] = {}\n",
  "label": 0
 },
 {
  "idx": 1791,
  "doc": "How to make a time object TZ aware without changing the value?",
  "code": "now_ts = datetime.now(pytz.timezone('Europe/Istanbul'))\nnow_naive = make_naive(now_ts, pytz.timezone('Europe/Istanbul'))\nnow_naive > campaingObject.publish_end\n",
  "label": 1
 },
 {
  "idx": 1792,
  "doc": "finding the max of a column in an array",
  "code": "import numpy as np\n\naa= np.random.random([4,3]) \nprint aa\nprint\nprint np.max(aa,axis=0)\nprint\nprint np.max(aa,axis=1)\n",
  "label": 1
 },
 {
  "idx": 1793,
  "doc": "Print two report in Odoo8",
  "code": "openerp.MODULENAME=function(instance)\n{\n\n    var QWEB=instance.web.qweb,_t=instance.web._t;\n    instance.web.DataSet.include({\n        call_button:function(method, args){\n            var id = args[0];\n            if(String(method)=='print_reports'){\n                //get_reports should be created in modele_name class\n                new instance.web.Model('modele_name',this.get_context()).ca    ll('get_reports',[id],{context:this.get_context()}).done(function(reports){\n                    for(var b=0; b<reports.length; b+=2)\n                          download('data:application/pdf;base64,'+reports[b],reports[b+1]+'.pdf','application/pdf');\n                    });\n            }\n            return this._super(method, args);\n        }\n    });\n};\n",
  "label": 0
 },
 {
  "idx": 1794,
  "doc": "Print two report in Odoo8",
  "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<openerp>\n    <data>\n        <template id=\"assets_backend_MODULENAME\" name=\"MODULENAME assets\" inherit_id=\"web.assets_backend\">\n            <xpath expr=\".\" position=\"inside\">\n                ...\n                <!-- The new line-->\n                <script type=\"text/javascript\" src=\"/MODULENAME/static/src/js/download.js\"></script>\n                ...\n            </xpath>\n        </template>\n    </data>\n</openerp> \n",
  "label": 0
 },
 {
  "idx": 1795,
  "doc": "Remove duplicated string(s) in strings in a list",
  "code": ">>> def remove_duplication(my_list):\n...     my_newlist = []\n...     for x in my_list:\n...         x = map(str.strip,x.split(';'))\n...         my_newlist.append(\";\".join(sorted(set(x),key=lambda y:x.index(y))))\n...     return my_newlist\n... \n>>> remove_duplication(a_list)\n['15~105;~ PO185-400CT;NGG;DOC', '15~105;-1;NGG;DOC', '15~105;NGG;-10;DOC', '15~55;J205~J208;POI;DOC', '15-105;ZH0305~;WER /;TZZGJJ;DOC', '15-105;ZH0311;TZZGJJ;DOC', '15-115;PL026~ PL028;Dry;PTT']\n",
  "label": 1
 },
 {
  "idx": 1796,
  "doc": "Join unique values into new data frame (python, pandas)",
  "code": "In [88]: %timeit pd.DataFrame({'col1':np.repeat(aa,bb.size),'col2':np.tile(bb,aa.size)})\n10 loops, best of 3: 25.4 ms per loop\n\nIn [89]: %timeit pd.DataFrame(list(product(aa,bb)), columns=['col1', 'col2'])\n1 loop, best of 3: 1.28 s per loop\n\nIn [90]: aa.size\nOut[90]: 1000\n\nIn [91]: bb.size\nOut[91]: 1000\n",
  "label": 1
 },
 {
  "idx": 1797,
  "doc": "How can you bundle all your python code into a single zip file?",
  "code": "[zart@feena ziplib-demo]$ bin/pip install --install-option --install-lib=$PWD/unpacked waitress\nDownloading/unpacking waitress\n  Downloading waitress-0.8.5.tar.gz (112kB): 112kB downloaded\n  Running setup.py egg_info for package waitress\n\nRequirement already satisfied (use --upgrade to upgrade): setuptools in ./lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg (from waitress)\nInstalling collected packages: waitress\n  Running setup.py install for waitress\n\n    Installing waitress-serve script to /home/zart/ziplib-demo/bin\nSuccessfully installed waitress\nCleaning up...\n",
  "label": 0
 },
 {
  "idx": 1798,
  "doc": "How can you bundle all your python code into a single zip file?",
  "code": "[zart@feena ~]$ mkdir ziplib-demo\n[zart@feena ~]$ cd ziplib-demo\n[zart@feena ziplib-demo]$ virtualenv .\nNew python executable in ./bin/python\nInstalling setuptools.............done.\nInstalling pip...............done.\n",
  "label": 0
 },
 {
  "idx": 1799,
  "doc": "How can you bundle all your python code into a single zip file?",
  "code": "[zart@feena ziplib-demo]$ PYTHONPATH=library.zip python\nPython 2.7.1 (r271:86832, Apr 12 2011, 16:15:16)\n[GCC 4.6.0 20110331 (Red Hat 4.6.0-2)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import waitress\n>>> waitress\n<module 'waitress' from '/home/zart/ziplib-demo/library.zip/waitress/__init__.pyc'>\n>>>\n>>> from wsgiref.simple_server import demo_app\n>>> waitress.serve(demo_app)\nserving on http://0.0.0.0:8080\n^C>>>\n",
  "label": 0
 },
 {
  "idx": 1800,
  "doc": "Filtering for multiple strings on f.read",
  "code": "with open('file_name') as f:\n    fi = f.read()\n    if any(i in fi for i in word_set)\n",
  "label": 1
 },
 {
  "idx": 1801,
  "doc": "How to find the local minima of a smooth multidimensional array in NumPy efficiently?",
  "code": "arr=np.array([[[0,0,0,-1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[-1,0,0,0]],\n              [[0,0,0,0],[0,-1,0,0],[0,0,0,0],[0,0,0,-1],[0,0,0,0]]])\nlocal_minima_locations = detect_local_minima(arr)\nprint(arr)\n# [[[ 0  0  0 -1]\n#   [ 0  0  0  0]\n#   [ 0  0  0  0]\n#   [ 0  0  0  0]\n#   [-1  0  0  0]]\n\n#  [[ 0  0  0  0]\n#   [ 0 -1  0  0]\n#   [ 0  0  0  0]\n#   [ 0  0  0 -1]\n#   [ 0  0  0  0]]]\n",
  "label": 0
 },
 {
  "idx": 1802,
  "doc": "Switch between assignments to different variables in python? With ternary operator?",
  "code": "test = True\na = 23\nb = 42\na,b = (1,b) if test else (a,1)\nprint (a,b)\n",
  "label": 1
 },
 {
  "idx": 1803,
  "doc": "Append to arrays in loop",
  "code": "import random\nList1 = ['AAAA','BBBBB','CCCCC','DDDD','EEEE']\n\nbase_name = \"Group\"\nmy_dic = dict()\nfor x in range(len(List1)):\n    my_dic[base_name + str(x +1)] = []\n\nfor x in range (len(List1)):\n    losowanie1 = random.sample(List1,1)\n    my_dic[base_name + str(x +1)].append(losowanie1[0])\n    List1.remove(losowanie1[0])\nprint(my_dic)\n",
  "label": 1
 },
 {
  "idx": 1804,
  "doc": "Numpy: Efficient Way To Extract Subarray",
  "code": "import numpy as np\n\n# some data\nA = np.random.random((250000, 30))\n\n# some random indices\nx = np.random.randint(0, 250000, 150000)\ny = np.random.randint(0, 30, 10)\n\ndef method1(A, x, y):\n    return A[x[:, np.newaxis], y]\n\ndef method2(A, x, y):\n    return A[np.ix_(x,y)]\n\ndef method3(A, x, y):\n    return A[x][:,y]\n\ndef method4(A, x, y):\n    return A[:,y][x]\n",
  "label": 1
 },
 {
  "idx": 1805,
  "doc": "how to convert UTF-8 code to symbol characters in python",
  "code": ">>> str(b'\\xe2\\x86\\x90')\n\"b'\\\\xe2\\\\x86\\\\x90'\"\n",
  "label": 0
 },
 {
  "idx": 1806,
  "doc": "single line if statement - Python",
  "code": "def val():\n    if condition:\n        return val_if_true\n    else:\n        return val_if_false\n",
  "label": 1
 },
 {
  "idx": 1807,
  "doc": "single line if statement - Python",
  "code": "box[a][b] = box[a][b] or chr(current_char)\n",
  "label": 1
 },
 {
  "idx": 1808,
  "doc": "Python socket send EOF",
  "code": "Client\nPython 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from socket import *\n>>> s=socket()\n>>> s.connect(('localhost',5000))\n>>> f=s.makefile()\n>>> f.write('\\x04abcd')\n>>> f.flush()\n",
  "label": 0
 },
 {
  "idx": 1809,
  "doc": "Python socket send EOF",
  "code": "Server\nPython 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from socket import *\n>>> s=socket()\n>>> s.bind(('localhost',5000))\n>>> s.listen(1)\n>>> c,a=s.accept()\n>>> f=c.makefile()\n>>> length=ord(f.read(1))\n>>> f.read(length)\n'abcd'\n",
  "label": 0
 },
 {
  "idx": 1810,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "class DragTable(QtGui.QTableView):\n    def __init__(self, parent = None):\n        super(DragTable, self).__init__(parent)\n        self.setDragEnabled(True)\n        self.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)\n",
  "label": 0
 },
 {
  "idx": 1811,
  "doc": "numpy array slicing to avoid for loop",
  "code": "A = numpy.random.randint(100,size=(5,10))\nB = np.column_stack(([4,2,1,3,4],np.zeros(5)))\n",
  "label": 0
 },
 {
  "idx": 1812,
  "doc": "Scrapy - Follow RSS links",
  "code": "from scrapy.spider import BaseSpider\nfrom scrapy.http import Request\nfrom scrapy.selector import XmlXPathSelector\n\nclass MySpider(BaseSpider):\n    name = 'myspider'\n\n    def parse(self, response):\n        xxs = XmlXPathSelector(response)\n        links = xxs.select(\"//link/text()\").extract()\n        return [Request(x, callback=self.parse_link) for x in links]\n",
  "label": 1
 },
 {
  "idx": 1813,
  "doc": "call __str__ inside a class? python 3.X",
  "code": "print(self.__str__())\n",
  "label": 1
 },
 {
  "idx": 1814,
  "doc": "Pandas, to_csv () to a specific format",
  "code": "In [21]: s = StringIO()\n\nIn [22]: df.to_csv(s, quoting=2)  # or output to file instead\n\nIn [23]: s.getvalue()\nOut[23]: '\"\",\"pgtime\",\"pgstat\",\"age\",\"eet\",\"g2\",\"grade\",\"gleason\",\"ploidy\"\\n1,6.1,0,64,2,10.26,2,4.0,\"diploid\"\\n2,9.4,0,62,1,\"\",3,8.0,\"aneuploid\"\\n3,5.2,1,59,2,9.99,3,7.0,\"diploid\"\\n4,3.2,1,62,2,3.57,2,4.0,\"diploid\"\\n5,1.9,1,64,2,22.56,4,8.0,\"tetraploid\"\\n6,4.8,0,69,1,6.14,3,7.0,\"diploid\"\\n7,5.8,0,75,2,13.69,2,\"\",\"tetraploid\"\\n8,7.3,0,71,2,\"\",3,7.0,\"aneuploid\"\\n9,3.7,1,73,2,11.77,3,6.0,\"diploid\"\\n'\n",
  "label": 0
 },
 {
  "idx": 1815,
  "doc": "Pandas, to_csv () to a specific format",
  "code": "In [11]: df = pd.read_clipboard(sep=',', index_col=0)\n\nIn [12]: df\nOut[12]:\n   pgtime  pgstat  age  eet     g2  grade  gleason      ploidy\n1     6.1       0   64    2  10.26      2        4     diploid\n2     9.4       0   62    1    NaN      3        8   aneuploid\n3     5.2       1   59    2   9.99      3        7     diploid\n4     3.2       1   62    2   3.57      2        4     diploid\n5     1.9       1   64    2  22.56      4        8  tetraploid\n6     4.8       0   69    1   6.14      3        7     diploid\n7     5.8       0   75    2  13.69      2      NaN  tetraploid\n8     7.3       0   71    2    NaN      3        7   aneuploid\n9     3.7       1   73    2  11.77      3        6     diploid\n",
  "label": 0
 },
 {
  "idx": 1816,
  "doc": "How to print progress from this code as the subprocess is running?",
  "code": "sshpass -[args] rsync [source] [dest]\n",
  "label": 0
 },
 {
  "idx": 1817,
  "doc": "How to print progress from this code as the subprocess is running?",
  "code": "sshpass -[args] rsync [source] [dest] | sort\n",
  "label": 0
 },
 {
  "idx": 1818,
  "doc": "Best way to work out if a path is in an include or exclude list in python",
  "code": "folder = '/folder1/folder2/folder3/folder4/folder5'.split('/')\nfor i in reversed(range(len(folder) + 1)):\n    check = '/'.join(folder[:i])\n    if lookup.get(check):\n        print('{}: {}'.format(check,lookup.get(check)))\n        break\n\n#/folder1/folder2/folder3/folder4: include\n",
  "label": 0
 },
 {
  "idx": 1819,
  "doc": "Using selenium at hosted app?",
  "code": ">>> from selenium import webdriver\n>>> driver = webdriver.PhantomJS()\n>>> driver.get(\"http://www.hltv.org/match/2296366-gplay-gamers2-acer-predator-masters-powered-by-intel\")\n>>> driver.title\nu'HLTV.org - Hot Match: GPlay vs Gamers2'\n",
  "label": 1
 },
 {
  "idx": 1820,
  "doc": "display only one logging line",
  "code": "import logging\n# create console handler\nch = logging.StreamHandler()\n# create formatter\nformatter = logging.Formatter('\\x1b[80D\\x1b[1A\\x1b[K%(message)s')\n# add formatter to console handler\nch.setFormatter(formatter)\n# add console handler to logger\nlogger.addHandler(ch)\n",
  "label": 1
 },
 {
  "idx": 1821,
  "doc": "Python - dataframe conditional index value selection",
  "code": "In [334]: df\nOut[334]:\n               close_price  short_lower_band  long_lower_band\nEquity(8554)        180.53        184.235603       183.964306\nEquity(2174)        166.83        157.450404       157.160282\nEquity(23921)       124.67        127.243468       126.072039\nEquity(26807)       117.91        108.761587       107.190081\nEquity(42950)       108.07         97.491851        96.868036\nEquity(4151)         97.38         98.954371        98.335786\n\nIn [335]:\n\nIn [335]: df[(df.close_price < df.short_lower_band) & \\\n   .....:    (df.close_price < df.long_lower_band)].index.values\nOut[335]: array(['Equity(8554)', 'Equity(23921)', 'Equity(4151)'], dtype=object)\n",
  "label": 1
 },
 {
  "idx": 1822,
  "doc": "alternate for multiple constructors",
  "code": "class MyClass:\n    def __init__(self, options=None):\n        if options is None:\n            options = create_default_parser()\n        self.options = options\n\n    def create_default_parser(self):\n        parser = argparse.ArgumentParser(description='something')\n        parser.add_argument('-v', '--victor', dest='vic', default=\"winning\")\n        options = parser.parse_args()\n        return options\n",
  "label": 1
 },
 {
  "idx": 1823,
  "doc": "Python minidom - Parse XML file and write to CSV",
  "code": "# Test Parser\n\nfrom xml.dom.minidom import parse\nimport csv \n\n\ndef writeToCSV(myLibrary):\n    csvfile = open('output.csv', 'w')\n    fieldnames = ['title', 'author']\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n    writer.writeheader()\n\n    books = myLibrary.getElementsByTagName(\"book\")\n    for book in books:\n        titleValue = book.getElementsByTagName(\"title\")[0].childNodes[0].data\n        for author in book.getElementsByTagName(\"author\"):\n            authorValue = author.childNodes[0].data\n            writer.writerow({'title': titleValue, 'author': authorValue})\n\ndoc = parse('library.xml')\nmyLibrary = doc.getElementsByTagName(\"library\")[0]\n\n# Get book elements in library\nbooks = myLibrary.getElementsByTagName(\"book\")\n\n# Print each book's title\nwriteToCSV(myLibrary)\n",
  "label": 1
 },
 {
  "idx": 1824,
  "doc": "How to scrape table with different xpath on the same level with Scrapy?",
  "code": "<div class=\"asdf\">\n  <div class=\"button-left\" style=\"margin-bottom: 4px\">04.09.2013</div>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">1</table>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">2</table>\n  <div class=\"button-left\" style=\"margin-bottom: 4px\">05.10.2013</div>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">3</table>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">4</table>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">5</table>\n  <table width=\"100%\" class=\"record generic schedule margin-4\">6</table>\n</div>\n",
  "label": 0
 },
 {
  "idx": 1825,
  "doc": "Python - filling a list of tuples with zeros in places of missing indexes",
  "code": "data = [(0.0, 287999.70000000007),\n(1.0, 161123.23000000001),\n(2.0, 93724.140000000014),\n(3.0, 60347.309999999983),\n(4.0, 55687.239999999998),\n(5.0, 29501.349999999999),\n(6.0, 14993.920000000002),\n(7.0, 14941.970000000001),\n(8.0, 13066.229999999998),\n(9.0, 10101.040000000001),\n(10.0, 4151.6900000000005),\n(11.0, 2998.8899999999999),\n(12.0, 1548.9300000000001),\n(15.0, 1595.54),\n(16.0, 1435.98),\n(17.0, 1383.01)]\n\nresult = []\nlast = 0.0\nfor d in data:\n    while last < d[0]:\n        result.append((last, 0))\n        last += 1\n    result.append(d)\n    last = d[0]+1\n",
  "label": 1
 },
 {
  "idx": 1826,
  "doc": "How to make a Python function sleep some time while the rest of the game continues?",
  "code": "elif event.type == SHRINKSNAKE:\n  if len(wormCoords) > 2:\n    del wormCoords[-1]\n",
  "label": 0
 },
 {
  "idx": 1827,
  "doc": "How to make a Python function sleep some time while the rest of the game continues?",
  "code": "pygame.time.set_timer(SHRINKSNAKE, 4*1000)\n",
  "label": 0
 },
 {
  "idx": 1828,
  "doc": "Positional Comparisons in Python",
  "code": ">>> from operator import itemgetter\n>>> \n>>> after_short_program = {\n...     'Evgeni Plushenko':1,\n...     'Evan Lysacek':2,\n...     'Daisuke Takahashi':3,\n...     'Stephane Lambiel':4,\n...     'Nobunari Oda':5,\n... }\n>>> \n>>> after_free_skate = {\n...     'Evan Lysacek':1,\n...     'Daisuke Takahashi':2,\n...     'Evgeni Plushenko':3,\n...     'Stephane Lambiel':4,   # These are tied\n...     'Nobunari Oda':4,       # at 4th place\n... }\n>>> \n>>> for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):\n...     diff = after_short_program[k]-v\n...     print \"%s (%+d)\"%(k,diff)\n...     \n... \nEvan Lysacek (+1)\nDaisuke Takahashi (+1)\nEvgeni Plushenko (-2)\nNobunari Oda (+1)\nStephane Lambiel (+0)\n>>> \n",
  "label": 1
 },
 {
  "idx": 1829,
  "doc": "Positional Comparisons in Python",
  "code": "for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):\n    try:\n        diff = after_short_program[k]-v\n        print \"%s (%+d)\"%(k,diff)\n    except KeyError:\n        print \"%s (new)\"%k\n",
  "label": 0
 },
 {
  "idx": 1830,
  "doc": "How to import classes defined in __init__.py",
  "code": "from lib.settings import Values\nfrom lib import Helper\n",
  "label": 0
 },
 {
  "idx": 1831,
  "doc": "Remembering Scroll value of a QTreeWidget in PyQt",
  "code": "# this is assuming the item is both present, \n# and referencing it by its string value\nnewItem = treeWidget.findItems(text)[0]\ntreeWidget.scrollToItem(newItem)\n",
  "label": 0
 },
 {
  "idx": 1832,
  "doc": "Remembering Scroll value of a QTreeWidget in PyQt",
  "code": "item = treeWidget.currentItem() # one way\nitem = treeWidget.itemAt(centerOfTree) # another way\n\n# either save the text value or whatever the custom \n# identifying value is of your item\ntext = item.text()\n",
  "label": 0
 },
 {
  "idx": 1833,
  "doc": "Export Pandas data frame with text column containg utf-8 text and URLs to Excel",
  "code": "import pandas as pd\n\ndf = pd.DataFrame({'Data': ['http://python.org']})\n\n# Create a Pandas Excel writer using XlsxWriter as the engine.\nwriter = pd.ExcelWriter('pandas_simple.xlsx', engine='xlsxwriter')\n\n# Don't convert url-like strings to urls.\nwriter.book.strings_to_urls = False\n\n# Convert the dataframe to an XlsxWriter Excel object.\ndf.to_excel(writer, sheet_name='Sheet1')\n\n# Close the Pandas Excel writer and output the Excel file.\nwriter.save()\n",
  "label": 1
 },
 {
  "idx": 1834,
  "doc": "Export Pandas data frame with text column containg utf-8 text and URLs to Excel",
  "code": "writer = pd.ExcelWriter('pandas_simple.xlsx', \n                        engine='xlsxwriter', \n                        options={'strings_to_urls': False})\n",
  "label": 0
 },
 {
  "idx": 1835,
  "doc": "Manipulating rows of csv file in python",
  "code": "import csv\nimport math\n\nf = open('citydata.csv')\n\ncsv_f = csv.reader(f)\ncontent = [row for row in csv_f]\n\nfor row in content[1:]:\n    x1 = float(row[2])\n    y1 = float(row[3])\n    for rowOther in content[1:]:\n        x2 = float(rowOther[2])\n        y2 = float(rowOther[3])\n\n        answer = (x1-(math.pow(x2,2))) - (y1-(math.pow(y2,2)))\n\n        print(answer)\n",
  "label": 1
 },
 {
  "idx": 1836,
  "doc": "Accept newline character in python",
  "code": "text = ''\nwhile True: # change this condition.\n    text += input('''Enter the paragraph :''')+'\\n' #UPDATED. Appended a \\n character.\n",
  "label": 1
 },
 {
  "idx": 1837,
  "doc": "Pandas dataframe - transform column values into individual columns",
  "code": "       Val     \nBC       b    c\nXY UV          \nx  u   222  111\n   v   444  333\ny  u    22   11\n   v    44   33\n",
  "label": 0
 },
 {
  "idx": 1838,
  "doc": "Extract links for certain section only from blogspot using BeautifulSoup",
  "code": "http://ellywonderland.blogspot.com/2011/03/my-vintage-pre-wedding.html\nhttp://ellywonderland.blogspot.com/2011/02/pre-wedding-vintage.html\nhttp://ellywonderland.blogspot.com/2010/12/tissue-paper-flower-crepe-paper.html\nhttp://ellywonderland.blogspot.com/2010/12/menguap-menurut-islam.html\nhttp://ellywonderland.blogspot.com/2010/12/weddings-idea.html\nhttp://ellywonderland.blogspot.com/2010/12/kawin.html\nhttp://ellywonderland.blogspot.com/2010/11/vitamin-c-collagen.html\nhttp://ellywonderland.blogspot.com/2010/11/port-dickson.html\nhttp://ellywonderland.blogspot.com/2010/11/ellys-world.html\n",
  "label": 0
 },
 {
  "idx": 1839,
  "doc": "Efficiently Removing Very-Near-Duplicates From Python List",
  "code": "import numpy as np\n",
  "label": 0
 },
 {
  "idx": 1840,
  "doc": "Efficiently Removing Very-Near-Duplicates From Python List",
  "code": "a = np.float128(np.random.random((8000,)))\n",
  "label": 0
 },
 {
  "idx": 1841,
  "doc": "How to find the average of previous sales at each time in python",
  "code": "import pandas as pd\nimport datetime\n\ndateparse = lambda x: pd.datetime.strptime(x, '%m/%d/%Y')\ndf = pd.read_csv('Sample.csv',index_col='date', parse_dates=[0], date_parser=dateparse)\n\nexpd_gb = df.reset_index().groupby(['wholesaler', 'product'])['sales'].apply(pd.Series.expanding)\nidx = df.reset_index().groupby(['wholesaler', 'product', 'date'])['sales'].count().index\n\ncnct = pd.concat([expd_gb.iloc[n].mean().shift(1) for n in range(len(expd_gb))])\ncnct.index = idx\n\ncnct.to_csv('TotalAvg.csv')\n",
  "label": 1
 },
 {
  "idx": 1842,
  "doc": "Chunking bytes (not strings) in Python 2 and 3",
  "code": "def chunked(size, source):\n    for i in range(0, len(source), size):\n        yield source[i:i+size]\n",
  "label": 1
 },
 {
  "idx": 1843,
  "doc": "Chunking bytes (not strings) in Python 2 and 3",
  "code": ">>> import funcy\n>>> data = b'abcdefghijklmnopqrstuvwxyz'\n>>> list(funcy.chunks(6, data))\n[b'abcdef', b'ghijkl', b'mnopqr', b'stuvwx', b'yz']   # Python 3\n['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz']        # Python 2.7\n",
  "label": 1
 },
 {
  "idx": 1844,
  "doc": "Chunking bytes (not strings) in Python 2 and 3",
  "code": ">>> list(chunked(6, data))\n[b'abcdef', b'ghijkl', b'mnopqr', b'stuvwx', b'yz']   # Python 3\n['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz']        # Python 2.7\n",
  "label": 0
 },
 {
  "idx": 1845,
  "doc": "Convert dataFrame to list",
  "code": "print df.values.tolist()\n[[2L], [0L], [1L], [0L], [1L], [0L]]\n\nprint df.iloc[:, 0].values.tolist()\n[2L, 0L, 1L, 0L, 1L, 0L]\n\nprint df.loc[:, 'a'].tolist()\n[2, 0, 1, 0, 1, 0]\n\nprint df['a'].tolist()\n[2, 0, 1, 0, 1, 0]\n",
  "label": 1
 },
 {
  "idx": 1846,
  "doc": "Solving 5 Linear Equations in Python",
  "code": "import numpy\nimport scipy.linalg\n\nm = numpy.matrix([\n    [1, 1, 1, 1, 1],\n    [16, 8, 4, 2, 1],\n    [81, 27, 9, 3, 1],\n    [256, 64, 16, 4, 1],\n    [625, 125, 25, 5, 1]\n])\n\nres = numpy.matrix([[1],[2],[3],[4],[8]])\n\nprint scipy.linalg.solve(m, res)\n",
  "label": 1
 },
 {
  "idx": 1847,
  "doc": "iterate the range in for loop to satisfy the condition",
  "code": "[0]\n0\n[0, -2]\n-1\n[0, -2, -6]\n-4\n[0, -2, -6, -12]\n-9\n[0, -2, -6, -12, -2]\n-7\n[0, -2, -6, -12, -2, -6]\n-4\n[0, -2, -6, -12, -2, -6, -12]\n-9\n[0, -2, -6, -12, -2, -6, -12, -20]\n-16\n",
  "label": 0
 },
 {
  "idx": 1848,
  "doc": "Getting the row index for a 2D numPy array when multiple column values are known",
  "code": "In []: import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\n...\n",
  "label": 0
 },
 {
  "idx": 1849,
  "doc": "Python - lexical analysis and tokenization",
  "code": "import re\n\ntoken_pattern = r\"\"\"\n(?P<identifier>[a-zA-Z_][a-zA-Z0-9_]*)\n|(?P<integer>[0-9]+)\n|(?P<dot>\\.)\n|(?P<open_variable>[$][{])\n|(?P<open_curly>[{])\n|(?P<close_curly>[}])\n|(?P<newline>\\n)\n|(?P<whitespace>\\s+)\n|(?P<equals>[=])\n|(?P<slash>[/])\n\"\"\"\n\ntoken_re = re.compile(token_pattern, re.VERBOSE)\n\nclass TokenizerException(Exception): pass\n\ndef tokenize(text):\n    pos = 0\n    while True:\n        m = token_re.match(text, pos)\n        if not m: break\n        pos = m.end()\n        tokname = m.lastgroup\n        tokvalue = m.group(tokname)\n        yield tokname, tokvalue\n    if pos != len(text):\n        raise TokenizerException('tokenizer stopped at pos %r of %r' % (\n            pos, len(text)))\n",
  "label": 1
 },
 {
  "idx": 1850,
  "doc": "Changing the columns in DataFrame with respect to values in other columns",
  "code": "# Access each index\nfor trans in unique_trans:\n\n    # Get the higher number in \"Num\" for each so we know which to set to NaN\n    max_num = max(df.ix[trans].index.values)\n\n    # Copy your start column as a temp variable\n    start = df.ix[trans][\"Start\"].copy()\n\n    # Apply the transform to the start column (Equal to end + 10)        \n    df.loc[trans, \"Start\"] = np.array(df.ix[trans][\"End\"]) + 10\n\n    # Apply the transform to the end column\n    df.loc[trans, \"End\"] = np.array(start.shift(-1) - 10)\n\n    # By passing a tuple as a row index, we get the element that is both in trans and the max number, \n    #which is the one you want to set to NaN\n    df.loc[(trans, max_num), \"End\"] = np.nan\n\nprint(df)\n",
  "label": 0
 },
 {
  "idx": 1851,
  "doc": "Pair combinations of elements in dictionary without repetition",
  "code": ">>> from pprint import pprint\n>>> pprint(list(pairwise(pleio)))\n[{'enf2': ['48', 'free'], 'enf3': ['34', 'set']},\n {'enf1': ['54', 'set'], 'enf3': ['34', 'set']},\n {'enf3': ['34', 'set'], 'enf4': ['12', 'free']},\n {'enf1': ['54', 'set'], 'enf2': ['48', 'free']},\n {'enf2': ['48', 'free'], 'enf4': ['12', 'free']},\n {'enf1': ['54', 'set'], 'enf4': ['12', 'free']}]\n",
  "label": 0
 },
 {
  "idx": 1852,
  "doc": "Pair combinations of elements in dictionary without repetition",
  "code": ">>> for paired in (dict(p) for v in pleio.itervalues() for p in combinations(v.iteritems(), 2)):\n...     print paired\n... \n{'enf3': ['34', 'set'], 'enf2': ['48', 'free']}\n{'enf3': ['34', 'set'], 'enf1': ['54', 'set']}\n{'enf3': ['34', 'set'], 'enf4': ['12', 'free']}\n{'enf2': ['48', 'free'], 'enf1': ['54', 'set']}\n{'enf2': ['48', 'free'], 'enf4': ['12', 'free']}\n{'enf1': ['54', 'set'], 'enf4': ['12', 'free']}\n",
  "label": 0
 },
 {
  "idx": 1853,
  "doc": "Calling C++ class functions from Ruby/Python",
  "code": "class Bar\n{\nprivate:\n    int value;\n\npublic:\n    Bar() : value(42){ }\n\n    //Functions to expose to Python:\n    int getValue() const { return value; }\n    void setValue(int newValue) { value = newValue; }\n};\n\nclass Foo\n{\nprivate:\n    //Integer Vector:\n    std::vector<int> fooVector;\n    Bar bar;\n\npublic:\n    //Functions to expose to Python:\n    void pushBack(const int& newInt) { fooVector.push_back(newInt); }\n    int getInt(const int& element) { return fooVector.at(element); }\n    Bar& getBar() { return bar; }\n};\n\ndouble compute() { return 18.3; }\n",
  "label": 0
 },
 {
  "idx": 1854,
  "doc": "Calling C++ class functions from Ruby/Python",
  "code": "#include <boost/python.hpp>\nBOOST_PYTHON_MODULE(MyLibrary) {\n    using namespace boost::python;\n\n    class_<Foo>(\"Foo\", init<>())\n        .def(\"pushBack\", &Foo::pushBack, (arg(\"newInt\")))\n        .def(\"getInt\", &Foo::getInt, (arg(\"element\")))\n        .def(\"getBar\", &Foo::getBar, return_value_policy<reference_existing_object>())\n    ;\n\n    class_<Bar>(\"Bar\", init<>())\n        .def(\"getValue\", &Bar::getValue)\n        .def(\"setValue\", &Bar::setValue, (arg(\"newValue\")))\n    ;\n\n    def(\"compute\", compute);\n}\n",
  "label": 0
 },
 {
  "idx": 1855,
  "doc": "regex to find a specific pattern in python",
  "code": "['November 5 - December 10', 'September 23 - December 16']\n",
  "label": 0
 },
 {
  "idx": 1856,
  "doc": "regex to find a specific pattern in python",
  "code": "months = \"|\".join(calendar.month_name)[1:]\nmatches = re.findall(\"{0}\\s\\d+\\s\\-\\s{0}\\s\\d+\".format(months), text)\n",
  "label": 1
 },
 {
  "idx": 1857,
  "doc": "Python: Decode base64 multiple strings in a file",
  "code": ">>> base64.b64encode('sdadasdasdasdasdtest')\n'c2RhZGFzZGFzZGFzZGFzZHRlc3Q='\n",
  "label": 0
 },
 {
  "idx": 1858,
  "doc": "Python: Decode base64 multiple strings in a file",
  "code": "import base64\n\nwith open(\"my_file.txt\") as f, open(\"original_b64.txt\", 'w') as g:\n    encoded = f.read()\n    decoded = base64.b64decode(encoded)\n    g.write(decoded)\n",
  "label": 1
 },
 {
  "idx": 1859,
  "doc": "Python Django: join view on the admin interface",
  "code": "class UniversityContact(models.Model):\n    # as above, plus:\n    def abbrev(self):\n        return self.university.abbrev\n    abbrev.admin_order_field = 'university__abbrev'\n",
  "label": 1
 },
 {
  "idx": 1860,
  "doc": "Python Django: join view on the admin interface",
  "code": "    abbrev.short_description = 'abbreviation'\n",
  "label": 0
 },
 {
  "idx": 1861,
  "doc": "Python Django: join view on the admin interface",
  "code": "    list_filter = ('university__region',)\n",
  "label": 0
 },
 {
  "idx": 1862,
  "doc": "passing arrays with ctypes",
  "code": "Output:\n0\n1\n2\n3\n4\n",
  "label": 0
 },
 {
  "idx": 1863,
  "doc": "Match multiple lines in a file using regular expression python",
  "code": "import re\n\nregex = re.match(r'''(\n    ^\\s*clns\\s+routing$ |\n    ^\\s*bfd\\s+graceful-restart$ |\n    ^\\s*ip\\s+default-network$ |\n    ^\\s*ip\\s+default-gateway$ |\n    ^\\s*ip\\s+subnet-zero$ |\n    ^\\s*ip\\s+cef\\s*$\n)+''', re.MULTILINE | re.VERBOSE)\n",
  "label": 1
 },
 {
  "idx": 1864,
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": ">>> df[\"close\"].diff()\ntime\n2013-09-16 09:30:00          NaN\n2013-09-16 09:31:00    21.243419\n2013-09-16 15:59:00   -38.717105\n2013-09-16 16:00:00    19.286181\n2013-09-17 09:30:00    -7.831039\n2013-09-17 09:31:00    30.319961\nName: close, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 1865,
  "doc": "Most efficient way to loop through multiple csv files and calculate NYSE tick",
  "code": ">>> df[\"close\"].diff().apply(np.sign)\ntime\n2013-09-16 09:30:00   NaN\n2013-09-16 09:31:00     1\n2013-09-16 15:59:00    -1\n2013-09-16 16:00:00     1\n2013-09-17 09:30:00    -1\n2013-09-17 09:31:00     1\nName: close, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 1866,
  "doc": "Opposite of set.intersection in python?",
  "code": "a. symmetric_difference(b)\n",
  "label": 1
 },
 {
  "idx": 1867,
  "doc": "Plotting Histogram: How can I do it from scratch using data stored in a database?",
  "code": "set terminal postscript eps color lw 2 \"Helvetica\" 20\nset output \"output.eps\"\nset xlabel \"XLABEL\"\nset ylabel \"YLABEL\"\nset title \"TITLE\"\nset style data histogram\nset style histogram cluster gap 1\nset style fill solid border -1\nset boxwidth 0.9\nset key autotitle columnheader\nset xtics rotate by -45\nplot \"input\" using 1:2 with linespoints ls 1\n",
  "label": 0
 },
 {
  "idx": 1868,
  "doc": "Plotting Histogram: How can I do it from scratch using data stored in a database?",
  "code": "select total, count(total) from faults GROUP BY total;\n",
  "label": 0
 },
 {
  "idx": 1869,
  "doc": "Remove duplicate, remove certain letters from line if found",
  "code": "A 786 10026/AS4637 19151 10796/AS13706\n",
  "label": 0
 },
 {
  "idx": 1870,
  "doc": "Optimizing time series generation",
  "code": "In [278]: %%time\n     ...: LIMIT = len(df)\n     ...: for i in range(LIMIT):\n     ...:     df['shift'] = df['shift'].shift(-1)\n     ...:     df['result'].update(df['shift'][((df['shift'] < df['min']) | \\\n     ...:                                      (df['shift'] > df['max'])) & \\\n     ...:                                     (df['result'].isnull())])\nWall time: 62 ms\n\n\nIn [281]: %timeit generate_values(df['min'].values, df['max'].values, df['val'].values)\n10000 loops, best of 3: 20.6 \u00b5s per loop\n",
  "label": 0
 },
 {
  "idx": 1871,
  "doc": "Optimizing time series generation",
  "code": "@numba.jit(nopython=True)\ndef generate_values(mins, maxs, vals):\n    N = len(vals)\n    ans = np.empty(N)\n\n    for i in range(N):\n        for j in range(i, N):\n            if vals[j] < mins[i] or vals[j] > maxs[i]:\n                ans[i] = vals[j]\n                break\n        else:\n            ans[i] = np.nan\n    return ans\n",
  "label": 1
 },
 {
  "idx": 1872,
  "doc": "How do I get the number of posts on each day with annotation in Django?",
  "code": "last_day_dict = day_counts[-1]\ndate = last_day_dict['posted_day']\ncount = last_day_dict['dailycount']\n",
  "label": 0
 },
 {
  "idx": 1873,
  "doc": "Conditional import in a module",
  "code": "import matplotlib\n\ndef setEnv(env):\n    matplotlib.use(env)\n",
  "label": 0
 },
 {
  "idx": 1874,
  "doc": "Execute coroutine from `call_soon` callback function",
  "code": "@asyncio.coroutine\ndef hello_world(loop):\n    print('Hello')\n    yield from asyncio.sleep(5, loop=loop)\n    print('World')\n    loop.stop()\n",
  "label": 0
 },
 {
  "idx": 1875,
  "doc": "How to plot real-time graph, with both axis dependent on time?",
  "code": "import numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\n\n# First set up the figure, the axis, and the plot element we want to animate\nfig = plt.figure()\nax = plt.axes(xlim=(0, 2), ylim=(-2, 2))\nline, = ax.plot([], [], ' o', lw=2)\ng = 9.81\nh = 2\ntc = 200\nxs = [1] # the vertical position is fixed on x-axis\nys = [h, h]\n\n\n# animation function.  This is called sequentially\ndef animate(y):\n    ys[-1] = y\n    line.set_data(xs, ys)\n    return line,\n\ndef get_y():\n  for step in range(tc):\n    t = step / 100.0\n    y = -0.5*g*t**2 + h  # the equation of diver's displacement on y axis\n    yield y\n\n# call the animator.  blit=True means only re-draw the parts that have changed.\nanim = animation.FuncAnimation(fig, animate, frames=get_y, interval=100)\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 1876,
  "doc": "How to separate upper and lower case letters in a string",
  "code": "def split_upper_lower(input):\n    upper = ''.join([x for x in input if x.isupper()])\n    lower = ''.join([x for x in input if x.islower()])\n\n    return upper, lower\n",
  "label": 1
 },
 {
  "idx": 1877,
  "doc": "Python .csv writer",
  "code": "url =[urlparse(u).netloc for u in ifile]\n",
  "label": 0
 },
 {
  "idx": 1878,
  "doc": "Compare values from two different dictionaries in Python?",
  "code": "(k for k in set(sourceDict).intersection(targetDict) if sourceDict[key] != targetDict[key])\n",
  "label": 1
 },
 {
  "idx": 1879,
  "doc": "How to get the 'cardinal' day of the year in Pandas?",
  "code": "            Close   O   C\nDate                     \n1950-01-03  16.66   3   1\n1950-01-04  16.85   4   2\n1950-01-05  16.93   5   3\n1950-01-06  16.98   6   4\n1950-01-09  17.08   9   5\n1950-01-10  17.03  10   6\n1950-01-11  17.09  11   7\n1950-01-12  16.76  12   8\n1950-01-13  16.67  13   9\n1950-01-16  16.71  16  10\n1951-01-01  20.00   1   1\n",
  "label": 0
 },
 {
  "idx": 1880,
  "doc": "How to get the 'cardinal' day of the year in Pandas?",
  "code": "df = pd.DataFrame({\n    'Close': [16.66, 16.85, 16.93, 16.98, 17.08, 17.03, 17.09, 16.76, 16.67, 16.71, 20],\n    'Date': ['1950-01-03', '1950-01-04', '1950-01-05', '1950-01-06', '1950-01-09', \n             '1950-01-10', '1950-01-11', '1950-01-12', '1950-01-13', '1950-01-16',\n             '1951-01-01'], })\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\n\ndf['O'] = df.index.day\ndf['C'] = df.groupby(df.index.year).cumcount(1)+1\n",
  "label": 1
 },
 {
  "idx": 1881,
  "doc": "remove dictionary from list in pandas colum",
  "code": "from ast import literal_eval \n\ndf['misc'] = [literal_eval(r) for r in df.misc] \n",
  "label": 0
 },
 {
  "idx": 1882,
  "doc": "How to string format OptionParser() help message?",
  "code": "parser = OptionParser()\nparser.add_option('--s',\n                  dest='s'\n                  type='string'\n                  help='''\nWith triple quotes I can directly put in anything including line spaces.\n\\n will appear as a string rather than a newline.''')\n",
  "label": 1
 },
 {
  "idx": 1883,
  "doc": "Python Create Combinations from Multiple Data Frames",
  "code": "def expand_grid(data_dict):\n  rows = itertools.product(*data_dict.values())\n  return pd.DataFrame.from_records(rows, columns=data_dict.keys())\n\nexpand_grid({'val_1': [0.00789, 0.01448, 0.03157], 'val_2' : [0.5, 1.0]})\n\nIn [107]: expand_grid({'val_1': [0.00789, 0.01448, 0.03157], 'val_2' : [0.5, 1.0]})\nOut[107]:\n     val_1  val_2\n0  0.00789    0.5\n1  0.00789    1.0\n2  0.01448    0.5\n3  0.01448    1.0\n4  0.03157    0.5\n5  0.03157    1.0\n",
  "label": 1
 },
 {
  "idx": 1884,
  "doc": "deleting element from python dictionary",
  "code": "eachitem = {'SALARY':eachitem['SALARY']}\n",
  "label": 1
 },
 {
  "idx": 1885,
  "doc": "Borda Count using python?",
  "code": "import itertools\nimport collections\n\ndef borda(ballot):\n    n = len([c for c in ballot if c.isalpha()]) - 1\n    score = itertools.count(n, step = -1)\n    result = {}\n    for group in [item.split('=') for item in ballot.split('>')]:\n        s = sum(next(score) for item in group)/float(len(group))\n        for pref in group:\n            result[pref] = s\n    return result\n\ndef tally(ballots):\n    result = collections.defaultdict(int)\n    for ballot in ballots:\n        for pref,score in borda(ballot).iteritems():\n            result[pref]+=score\n    result = dict(result)\n    return result\n\nballots = ['A>B>C>D>E',\n           'A>B>C=D=E',\n           'A>B=C>D>E', \n           ]\n\nprint(tally(ballots))\n",
  "label": 1
 },
 {
  "idx": 1886,
  "doc": "Syntax - saving a dictionary as a csv file",
  "code": "   writer.writerow(sorted(my_data.keys()))\n   writer.writerows(zip(*(my_data[k] for k in sorted(my_data.keys()))))\n",
  "label": 0
 },
 {
  "idx": 1887,
  "doc": "remove the unicode from the output of JSON using scrapy",
  "code": "def parse(self, response):\n    # make a selector and search the fields inside it\n    sel = response.xpath('//div[@id=\"siteTable\"]')\n\n    item = ExItem()\n    item[\"title\"] = sel.xpath('.//p[contains(@class,\"title\")]/a/text()').extract()\n    item[\"rank\"] = sel.xpath('.//span[contains(@class,\"rank\")]/text()').extract()\n    item[\"votes_dislike\"] = sel.xpath('.//div[contains(@class,\"score dislikes\")]/text()').extract()\n    item[\"votes_unvoted\"] = sel.xpath('.//div[contains(@class,\"score unvoted\")]/text()').extract()\n    item[\"votes_likes\"] = sel.xpath('.//div[contains(@class,\"score likes\")]/text()').extract()\n    item[\"video_reference\"] = sel.xpath('.//a[contains(@class,\"thumbnail may-blank\")]/@href').extract()\n    item[\"image\"] = sel.xpath('.//a[contains(@class,\"thumbnail may-blank\")]/img/@src').extract()\n    return item\n",
  "label": 1
 },
 {
  "idx": 1888,
  "doc": "Finding specific links with Beautiful Soup",
  "code": "b = soup.find(\"b\", text=lambda text and \"data I DO care about:\" in text)\nli = b.find_parent(\"li\")\nlinks = [a[\"href\"] for a in li.find_all(\"a\", href=True)]\nprint(links)\n",
  "label": 1
 },
 {
  "idx": 1889,
  "doc": "PyTables read random subset",
  "code": "# make sure that we have indexable columns\ndf.to_hdf('test.h5','df',mode='w',format='table',data_columns=True)\n\n# select where the index (an integer index) matches r and A > 0\nIn [14]: r\nOut[14]: array([33, 51, 33, 95, 69, 21, 43, 58, 58, 58])\n\nIn [13]: pd.read_hdf('test.h5','df',where='index=r & A>0')\nOut[13]: \n           A         B\n21  1.456244  0.173443\n43  0.174464 -0.444029\n\n[2 rows x 2 columns]\n",
  "label": 0
 },
 {
  "idx": 1890,
  "doc": "Exposing python daemon as a service",
  "code": "import gevent\nimport gevent.monkey\ngevent.monkey.patch_all()\nimport zmq.green as zmq\nimport json\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.ROUTER)\nsocket.bind(\"ipc:///tmp/myapp.ipc\")\n\ndef do_something(parsed):\n    return sum(parsed.get(\"values\"))\n\ndef handle(msg):\n    data = msg[1]\n    parsed = json.loads(data)\n    total = do_something(parsed)\n    msg[1] = json.dumps({\"response\": total})\n    socket.send_multipart(msg)\n\ndef handle_zmq():\n    while True:\n        msg = socket.recv_multipart()\n        gevent.spawn(handle, msg)\n\nif __name__ == \"__main__\":\n    handle_zmq()\n",
  "label": 0
 },
 {
  "idx": 1891,
  "doc": "Default window colour Tkinter and hex colour codes",
  "code": "import Tkinter\n\nroot = Tkinter.Tk()\ndefaultbg = root.cget('bg')\nTkinter.Button(root,text=\"Press me!\", bg=defaultbg).pack()\nroot.mainloop()\n",
  "label": 1
 },
 {
  "idx": 1892,
  "doc": "Default window colour Tkinter and hex colour codes",
  "code": "import Tkinter\n\nmycolor = '#%02x%02x%02x' % (64, 204, 208)  # set your favourite rgb color\nmycolor2 = '#40E0D0'  # or use hex if you prefer \nroot = Tkinter.Tk()\nroot.configure(bg=mycolor)\nTkinter.Button(root, text=\"Press me!\", bg=mycolor, fg='black',\n               activebackground='black', activeforeground=mycolor2).pack()\nroot.mainloop()\n",
  "label": 1
 },
 {
  "idx": 1893,
  "doc": "Pivotting via Python and Pandas",
  "code": "print pd.concat([df['ID'], df['Word'].str.get_dummies()], axis=1)\n   ID  and  it  long  road  take  the  walk\n0   1    0   0     0     0     1    0     0\n1   2    0   0     0     0     0    1     0\n2   3    0   0     1     0     0    0     0\n3   4    0   0     1     0     0    0     0\n4   5    0   0     0     1     0    0     0\n5   6    1   0     0     0     0    0     0\n6   7    0   0     0     0     0    0     1\n7   8    0   1     0     0     0    0     0\n8   9    0   0     0     0     0    0     1\n9  10    0   1     0     0     0    0     0\n",
  "label": 1
 },
 {
  "idx": 1894,
  "doc": "python periodic looping idiom?",
  "code": "import time\n\nminute = 60\nnext_time = time.time()\nwhile True:\n    doSomeWork()\n    next_time += minute\n    sleep_time = next_time - time.time()\n    if sleep_time > 0:\n        time.sleep(sleep_time)\n",
  "label": 1
 },
 {
  "idx": 1895,
  "doc": "Replace xml tag contents using python",
  "code": "# (note the last ``1`` at the end to limit the substitution only to the first occurrence)\noutput = re.sub(r\"(?s)<Location>.*?</Location>\", r\"%s\" % locUpdate, xml, 1)\n",
  "label": 0
 },
 {
  "idx": 1896,
  "doc": "Replace xml tag contents using python",
  "code": "#!/usr/bin/python\n\nimport re\n\nxml = '''\\\n<Emp>\n<Name>Raja</Name>\n<Location>\n     <city>ABC</city>\n     <geocode>123</geocode>\n     <state>XYZ</state>\n</Location>\n</Emp>'''\n\nlocUpdate = '''\\\n    <Location isupdated=1>\n         <city>MyCity</city>\n         <geocode>10.12</geocode>\n         <state>MyState</state>\n    </Location>'''\n\noutput = re.sub(r\"(?s)<Location>.*?</Location>\", r\"%s\" % locUpdate, xml)\n\nprint output\n",
  "label": 1
 },
 {
  "idx": 1897,
  "doc": "Django dynamic model fields",
  "code": ">>> Something.objects.filter(data__a=1)\n>>> Something.objects.filter(data__nested__c=3)\n>>> Something.objects.filter(data__has_key='a')\n",
  "label": 0
 },
 {
  "idx": 1898,
  "doc": "Regex for location matching - Python",
  "code": ">>> list(map(str.strip, x.split('or')))\n['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']\n",
  "label": 1
 },
 {
  "idx": 1899,
  "doc": "detecting POS tag pattern along with specified words",
  "code": "def would_be(tagged):\n    return any(['would', 'be', 'JJ'] == [tagged[i][0], tagged[i+1][0], tagged[i+2][1]] for i in xrange(len(tagged) - 2))\n",
  "label": 0
 },
 {
  "idx": 1900,
  "doc": "detecting POS tag pattern along with specified words",
  "code": "Is 'This feature would be nice to have' of type 'would be' + adj? True\nIs 'This feature would be nice to have' of type 'am able to' + verb? False\nIs 'I am able to delete the group functionality' of type 'would be' + adj? False\nIs 'I am able to delete the group functionality' of type 'am able to' + verb? True\n",
  "label": 0
 },
 {
  "idx": 1901,
  "doc": "Initiating TCP Client after running reactor.run()",
  "code": "from twisted.internet import reactor\nroot_window.protocol(\"WM_DELETE_WINDOW\", reactor.stop)\nreactor.run()\n",
  "label": 0
 },
 {
  "idx": 1902,
  "doc": "Initiating TCP Client after running reactor.run()",
  "code": "from twisted.internet.protocol import Protocol, Factory\nfrom twisted.internet import reactor\n\nclass Echo(Protocol):\n    def dataReceived(self, data):\n        print 'recieved:', data\n    def connectionLost(self, reason):\n        print 'connection closed', reason\n\nf = Factory()\nf.protocol = Echo\nreactor.listenTCP(8080, f)\nreactor.run()\n",
  "label": 0
 },
 {
  "idx": 1903,
  "doc": "Initiating TCP Client after running reactor.run()",
  "code": "from Tkinter import Tk\nfrom twisted.internet import tksupport\nroot_window = Tk()\ntksupport.install(root_window)\n",
  "label": 0
 },
 {
  "idx": 1904,
  "doc": "Compare string in format HH:MM to time now in python",
  "code": ">>>dnow=datetime.datetime.now()  #11:42 am here ;)\n>>>dnow.time() < d.time()\nTrue\n",
  "label": 0
 },
 {
  "idx": 1905,
  "doc": "Find nested sub-classes in a class in the order they're defined",
  "code": "['D', 'C']\n",
  "label": 0
 },
 {
  "idx": 1906,
  "doc": "Find nested sub-classes in a class in the order they're defined",
  "code": "print(list(filter(lambda x: isinstance(x, type), (getattr(B, x) for x in B.members))))\n",
  "label": 0
 },
 {
  "idx": 1907,
  "doc": "Find nested sub-classes in a class in the order they're defined",
  "code": "class OrderedClass(type):\n\n     @classmethod\n     def __prepare__(metacls, name, bases, **kwds):\n        return collections.OrderedDict()\n\n     def __new__(cls, name, bases, namespace, **kwds):\n        result = type.__new__(cls, name, bases, dict(namespace))\n        result.members = tuple(namespace)\n        return result\n\nclass A(metaclass=OrderedClass):\n    def one(self): pass\n    def two(self): pass\n    def three(self): pass\n    def four(self): pass \n\n\n>>> A.members\n('__module__', 'one', 'two', 'three', 'four')\n",
  "label": 1
 },
 {
  "idx": 1908,
  "doc": "counting zigzag sequences",
  "code": "U_k(n, f) = sum D_k(n-1, s) for s = f+1 ... k\n          = sum U_k(n-1, s) for s = 1 ... k-f\nU_k(1, f) = 1\n",
  "label": 0
 },
 {
  "idx": 1909,
  "doc": "serving i18n js using babel, django, & jinja2",
  "code": "'{{gettext(\"message\")}}'\n",
  "label": 0
 },
 {
  "idx": 1910,
  "doc": "Efficient ways to duplicate array/list in Python",
  "code": "In [19]: dis.dis(func1)\n  2           0 LOAD_GLOBAL              0 (range)\n              3 LOAD_CONST               1 (100000)\n              6 CALL_FUNCTION            1\n              9 STORE_FAST               0 (a)\n\n  3          12 LOAD_FAST                0 (a)\n             15 SLICE+0             \n             16 STORE_FAST               1 (b)\n             19 LOAD_CONST               0 (None)\n             22 RETURN_VALUE        \n\nIn [20]: dis.dis(func2)\n  2           0 LOAD_GLOBAL              0 (range)\n              3 LOAD_CONST               1 (100000)\n              6 CALL_FUNCTION            1\n              9 STORE_FAST               0 (a)\n\n  3          12 LOAD_FAST                0 (a)    #same up to here\n             15 LOAD_CONST               2 (0)    #loads 0\n             18 LOAD_GLOBAL              1 (len) # loads the builtin len(),\n                                                 # so it might take some lookup time\n             21 LOAD_FAST                0 (a)\n             24 CALL_FUNCTION            1         \n             27 SLICE+3             \n             28 STORE_FAST               1 (b)\n             31 LOAD_CONST               0 (None)\n             34 RETURN_VALUE        \n",
  "label": 0
 },
 {
  "idx": 1911,
  "doc": "Smart filter with python",
  "code": "sorted_generator = sorted(filtered, key=regexp.match(line).group(1))\n",
  "label": 0
 },
 {
  "idx": 1912,
  "doc": "Using MongoEngine Document class methods for custom validation and pre-save hooks",
  "code": "class MyDocument(mongoengine.Document):\n\n    def save(self, *args, **kwargs):\n        for hook in self._pre_save_hooks:\n            # the callable can raise an exception if\n            # it determines that it is inappropriate\n            # to save this instance; or it can modify\n            # the instance before it is saved\n            hook(self):\n\n        super(MyDocument, self).save(*args, **kwargs)\n",
  "label": 0
 },
 {
  "idx": 1913,
  "doc": "Django, m2m with same model",
  "code": "prod = Product.objects.get(uuid=product)\n#order.products.add(prod)\nq = product_quantity\norder = order # order record must be created before\n\nOrderProduct.objects.create(order=order, product=prod, quantity=q)\n",
  "label": 0
 },
 {
  "idx": 1914,
  "doc": "Django, m2m with same model",
  "code": "class Order(BaseModel):\n    company = models.ForeignKey(Company)\n    products = models.ManyToManyField(Product, through='OrderProduct')\n",
  "label": 0
 },
 {
  "idx": 1915,
  "doc": "Use argparse to call different functions",
  "code": "parser = ArgumentParser()\nparser.add_argument(\"function\", \n                    nargs=\"?\",\n                    choices=['function1', 'function2', 'function2'],\n                    default='function1',\n                    )\nargs, sub_args = parser.parse_known_args()\n\nif args.function == \"function1\":\n    parser = ArgumentParser()\n    parser.add_argument('-a','--a')\n    parser.add_argument('-b','--b')\n    parser.add_argument('-c','--c')\n    args = parser.parse_args(sub_args)\n    function1(args.a, args.b, args.c)\nelif args.function == \"function2\":\n    ...\nelif args.function == \"function3\":\n    ...\n",
  "label": 1
 },
 {
  "idx": 1916,
  "doc": "How can I get certain text from a website with Python?",
  "code": "import urllib2\nfrom lxml import html\n\ntree = html.parse(urllib2.urlopen('http://www.opensiteexplorer.org/links?site=www.google.com'))\n\nspans = tree.xpath('//span[@class=\"metrics-authority\"]')\ndata = [item.text.strip() for item in spans]\nprint \"Domain Authority: {0}, Page Authority: {1}\".format(*data)\n\ndiv = tree.xpath('//div[@id=\"metrics-page-link-metrics\"]//div[@class=\"has-tooltip\"]')[1]\nprint \"Root Domains: {0}\".format(div.text.strip())\n",
  "label": 1
 },
 {
  "idx": 1917,
  "doc": "Store input based on computer and change stored input on command",
  "code": "import os\n#hard code the path to the external file\nexternal_file = 'names.txt'\nusername = 'testuser'# Our hardcoded name\n\n#if file doesn' exists, create a new file\nif not os.path.exists(external_file):\n    #Ask the user's name\n    name = raw_input(\"What's your name?\")\n    with open(external_file, \"a\") as f: # using \"a\" will append to the file\n        f.write(name)# Write the name to names.txt\n        f.write(\"\\n\")\n        f.close()\nelse:\n    #if file exists, use it to load name, else ask user\n    with open(external_file, \"r+\") as f:# r+ open a file for reading & writing\n        lines = f.read().split('\\n') # split the names \n        print lines\n        if username in lines: #Check if the file has any username as 'testuser'\n            print \"Hi {}\".format(username)\n        else: # If there is no username as 'testuser' then ask for a name\n            name = raw_input(\"What's your name?\")\n            f.seek(0,2) # Resolves an issue in Windows\n            f.write(name)# Write the name to names.txt\n            f.write(\"\\n\")\n            f.close()\n",
  "label": 1
 },
 {
  "idx": 1918,
  "doc": "Converting separate functions into class-based",
  "code": "user.get_profile().location. \n",
  "label": 0
 },
 {
  "idx": 1919,
  "doc": "Converting separate functions into class-based",
  "code": "from django.contrib.auth.decorators import login_required\n",
  "label": 0
 },
 {
  "idx": 1920,
  "doc": "Converting separate functions into class-based",
  "code": "@login_required \n",
  "label": 0
 },
 {
  "idx": 1921,
  "doc": "Send HEX values to SPI on a Raspberry PI B+",
  "code": "hdr = b'\\x00' * 4\nblocksize = 51\nleds = (\n    #LED off\n    hdr + b'\\x80\\x00' * blocksize,\n    #LED on\n    hdr + b'\\xff\\xff' * blocksize,\n)\n\nfname = '/dev/stdout'\nwith open(fname, 'wb') as f:\n    f.write(leds[0])\n",
  "label": 1
 },
 {
  "idx": 1922,
  "doc": "Parsing structured text file in python",
  "code": "from pprint import pprint\nfrom parcon import (Forward, SignificantLiteral, Word, alphanum_chars, Exact,\n                    ZeroOrMore, CharNotIn, concat, OneOrMore)\n\nblock = Forward()\nhyphen = SignificantLiteral('\"')\nword = Word(alphanum_chars + '/_.)')\nvalue = word | Exact(hyphen + ZeroOrMore(CharNotIn('\"')) + hyphen)[concat]\npair = word + '=' + value\nflag = word\nattribute = pair | flag | block\nhead = word\nbody = ZeroOrMore(attribute)\nblock << '{' + head + body  + '}'\nblocks = OneOrMore(block)\n\nwith open('<your file name>.txt') as infile:\n    pprint(blocks.parse_string(infile.read()))\n",
  "label": 1
 },
 {
  "idx": 1923,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "pd.concat(get_sumdf(area_tab) for area_tab in areas_tabs)\n",
  "label": 0
 },
 {
  "idx": 1924,
  "doc": "Create a summary Pandas DataFrame using concat/append via a for loop",
  "code": "lastq,fcast_yr,projections,yrahead,aname,actdf,merged2,mergederrs,montdist,ols_test,mergedfcst=do_projections(actdf)\n",
  "label": 0
 },
 {
  "idx": 1925,
  "doc": "Need to parse a tool log file in python and then save the results in excel or csv",
  "code": "import re\nimport csv\n\nfiltered_messages = ['UpdatePlaybackStatusInfo', 'Assert']\nfieldnames = ['ticks', 'foo', 'type', 'bar', 'message']\n\nwith open('log.txt') as log:\n    with open('output.csv', 'w') as csv_file:\n        writer = csv.DictWriter(csv_file, delimiter=',', fieldnames=fieldnames)\n        writer.writerow(dict((fn,fn) for fn in fieldnames))\n        for line in log:\n            match = re.search(r'^Ticks = (?P<ticks>\\d+)\\s+<(?P<foo>\\d+)> <(?P<type>\\w+)> <(?P<bar>\\d+)>\\s+(?P<message>.+)$', line)\n            if match is not None and match.group('type') in filtered_messages:\n                writer.writerow(match.groupdict())\n",
  "label": 1
 },
 {
  "idx": 1926,
  "doc": "How could I delete certain columns then write wanted columns into csv python",
  "code": "def remove_cols():\n    remove_list = []\n\n    with open('remove_list.csv') as f:\n        for line in f:\n            remove_list.append(line.strip())\n\n    colIndexesToKeep = []\n\n    with open('orig.csv') as origFile:\n        with open('filtered.csv', 'w') as filteredFile:\n            for line in origFile:\n                if not colIndexesToKeep:\n                    for ix, name in enumerate(line.split(',')):\n                        if name.strip() not in remove_list:\n                            colIndexesToKeep.append(ix)\n\n                filteredLine = [val.strip() for ix, val in \n                  enumerate(line.split(',')) if ix in colIndexesToKeep]\n                filteredFile.write(','.join(filteredLine))     \n                filteredFile.write('\\n')           \n",
  "label": 1
 },
 {
  "idx": 1927,
  "doc": "Lazy class property decorator",
  "code": "class class_reify(object):\n    def __init__(self, wrapped):\n        self.wrapped = wrapped\n        try:\n            self.__doc__ = wrapped.__doc__\n        except: # pragma: no cover\n            pass\n\n    # original sets the attributes on the instance\n    # def __get__(self, inst, objtype=None):\n    #    if inst is None:\n    #        return self\n    #    val = self.wrapped(inst)\n    #    setattr(inst, self.wrapped.__name__, val)\n    #    return val\n\n    # ignore the instance, and just set them on the class\n    # if called on a class, inst is None and objtype is the class\n    # if called on an instance, inst is the instance, and objtype \n    # the class\n    def __get__(self, inst, objtype=None):\n        # ask the value from the wrapped object, giving it\n        # our class\n        val = self.wrapped(objtype)\n\n        # and set the attribute directly to the class, thereby\n        # avoiding the descriptor to be called multiple times\n        setattr(objtype, self.wrapped.__name__, val)\n\n        # and return the calculated value\n        return val\n\nclass Test(object):\n    @class_reify\n    def foo(cls):\n        print \"foo called for class\", cls\n        return 42\n\nprint Test.foo\nprint Test.foo\n",
  "label": 1
 },
 {
  "idx": 1928,
  "doc": "Finding superstrings in a set of strings in python",
  "code": "\nstrings = [\n    '24', '277', '277 24', '139 24', '139 277 24', '139 277', '139', '136 24',\n    '136 277 24', '136 277', '136', '136 139 24', '136 139 277 24', '136 139 277',\n    '136 139', '246']\n\ndef find_supersets(strings):\n    superstrings = set()\n    set_to_string = dict(zip([frozenset(s.split()) for s in strings], strings))\n    for s in set_to_string.keys():\n        for sup in superstrings.copy():\n            if s <= sup:\n                # print('{s!r} <= {sup!r}'.format(s = s, sup = sup))\n                break\n            elif sup < s:\n                # print('{sup!r} <= {s!r}'.format(s = s, sup = sup))\n                superstrings.remove(sup)\n        else:\n            superstrings.add(s)\n    return [set_to_string[sup] for sup in superstrings]\n\nprint(find_supersets(strings))\n",
  "label": 1
 },
 {
  "idx": 1929,
  "doc": "Finding superstrings in a set of strings in python",
  "code": "In [22]: frozenset(['136']) <= frozenset(['136', '139', '24'])\nOut[22]: True\n\nIn [23]: frozenset(['136']) <= frozenset(['24', '277'])\nOut[23]: False\n",
  "label": 0
 },
 {
  "idx": 1930,
  "doc": "Finding superstrings in a set of strings in python",
  "code": "In [20]: strings = [frozenset(s.split()) for s in strings]    \nIn [21]: strings\nOut[21]: \n[frozenset(['24']),\n frozenset(['277']),\n ...\n frozenset(['136', '139']),\n frozenset(['246'])]\n",
  "label": 0
 },
 {
  "idx": 1931,
  "doc": "Relating/adding data to a django object list",
  "code": "class Team(models.Model): \n    team_name = models.CharField(max_length=200)\n\n\ndef get_teams(request):\n    teams = Team.objects.all()\n    for team in teams:\n        team.team_win_percent = calculate_team_win(team)\n        team.team_lose_percent = calculate_team_loss(team)\n    ....\n",
  "label": 0
 },
 {
  "idx": 1932,
  "doc": "Two corresponding y-axis",
  "code": "x    = np.arange(20.)\nflux = x * 2 + 1\nmag  = flux_to_mag(flux)\n\nMagTransform = MagScale.InvertedMagTransform(0)\n\n\nfig = plt.figure()\nax_flux = fig.add_subplot(111)\n\nax_flux.plot(x, flux,'-')\nax_flux.set_ylim([1,40])\nax_flux.set_ylabel('flux')\n\nax_mag  = ax_flux.twinx()\nax_mag.set_ylim(MagTransform.transform_non_affine(ax_flux.get_ylim())) #There may be an easier to do this.\nax_mag.set_yscale('mag')\n\nax_mag.plot(x,mag,'+')\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 1933,
  "doc": "regular expression matching everything except a given regular expression",
  "code": "^(?!mpeg).*\n",
  "label": 1
 },
 {
  "idx": 1934,
  "doc": "How to make a field computed only if some condition is fulfilled in Odoo 8?",
  "code": "<field name=\"manual\" invisible=\"1\" />\n<field name=\"value\" attrs=\"{'invisible': [('manual','=',True)]}\" />\n<field name=\"value_manual\" attrs=\"{'invisible': [('manual','=',False)]}\" />\n",
  "label": 0
 },
 {
  "idx": 1935,
  "doc": "A list as a key for PySpark's reduceByKey",
  "code": ">>> a_tuple = (1, 2, 3)\n>>> a_tuple.__hash__ is None\nFalse\n>>> hash(a_tuple)\n2528502973977326415\n",
  "label": 0
 },
 {
  "idx": 1936,
  "doc": "Insert data from one sorted array into another sorted array",
  "code": "a = np.array( [(1,0,0,0,0),\n               (2,0,0,0,0),\n               (5,0,0,0,0),\n               (3,0,0,0,0),\n               (4,0,0,0,0),\n               (6,0,0,0,0),\n               (7,0,0,0,0),\n               (8,0,0,0,0),\n               ])\n\nb = np.array([(3, 1),\n              (5, 18),\n              (7, 2)])\n\nperm = np.argsort(a[:,0])\na[:,1][perm[a[:,0][perm].searchsorted(b[:,0])]] = b[:,1]\nprint(a)\n",
  "label": 1
 },
 {
  "idx": 1937,
  "doc": "Get a value from a dictionary without linking to the memory location",
  "code": ">>> D = {\"A\":[1,2,3]}\n>>> C = D[\"A\"][:]\n>>> C.append(4)\n>>> D[\"A\"]\n[1, 2, 3]\n",
  "label": 1
 },
 {
  "idx": 1938,
  "doc": "Numpy union arrays in order",
  "code": "d = numpy.empty((len(a), 3), dtype=a.dtype)\nd[:, 0], d[:, 1], d[:, 2] = a, b, c\nd = d.ravel()\n",
  "label": 1
 },
 {
  "idx": 1939,
  "doc": "Numpy union arrays in order",
  "code": "d = numpy.vstack((a, b, c)).T.flatten()\n",
  "label": 1
 },
 {
  "idx": 1940,
  "doc": "Webpy: how to set http status code to 300",
  "code": "class MultipleChoices(web.HTTPError):\n    def __init__(self, choices):\n        status = '300 Multiple Choices'\n        headers = {'Content-Type': 'text/html'}\n        data = '<h1>Multiple Choices</h1>\\n<ul>\\n'\n        data += ''.join('<li><a href=\"{0}\">{0}</a></li>\\n'.format(c)\n                        for c in choices)\n        data += '</ul>'\n        web.HTTPError.__init__(self, status, headers, data)\n",
  "label": 0
 },
 {
  "idx": 1941,
  "doc": "Using np.searchsorted to find the most recent timestamp",
  "code": ">>> np.searchsorted(a, b) - 1\narray([0, 1, 3])\n",
  "label": 0
 },
 {
  "idx": 1942,
  "doc": "Neat way of popping key, value PAIR from dictionary?",
  "code": "d=MyDict()\n\nd['a']=1\nd['b']=5\nd['c']=8\n\nprint d\n{'a': 1, 'c': 8, 'b': 5}\n\nprint d.pop(min(d, key=d.get))\n('a', 1)\n\nprint d\n{'c': 8, 'b': 5}\n",
  "label": 0
 },
 {
  "idx": 1943,
  "doc": "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?",
  "code": "import numpy as np\nfrom scipy import interpolate\n\ndata = np.genfromtxt('data.txt')\n\nx = data[:,0]  #first column\ny = data[:,1]  #second column\n\nf = interpolate.interp1d(x, y)\n\nxnew = np.arange(1, 5.1, 0.1) # this could be over the entire range, depending on what your data is\nynew = f(xnew)   # use interpolation function returned by `interp1d`\n\nfig = plt.figure()\nax1 = fig.add_subplot(111)\n\nax1.set_title(\"Plot B vs H\")    \nax1.set_xlabel('B')\nax1.set_ylabel('H')\n\nax1.plot(x,y, c='r', label='the data')\nax1.plot(xnew, ynew, 'o', label='the interpolation')\n\nleg = ax1.legend()\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 1944,
  "doc": "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?",
  "code": "f = interpolate.UnivariateSpline(x, y)\n",
  "label": 0
 },
 {
  "idx": 1945,
  "doc": "Django Multiple Caches - How to choose which cache the session goes in?",
  "code": "from django.contrib.sessions.backends.cache import SessionStore as CachedSessionStore\nfrom django.core.cache import get_cache\nfrom django.conf import settings\n\nclass SessionStore(CachedSessionStore):\n    \"\"\"\n    A cache-based session store.\n    \"\"\"\n    def __init__(self, session_key=None):\n        self._cache = get_cache(settings.SESSION_CACHE_ALIAS)\n        super(SessionStore, self).__init__(session_key)\n",
  "label": 1
 },
 {
  "idx": 1946,
  "doc": "Using groupby to operate only on rows that have the same value for one of the columns pandas python",
  "code": "import pandas as pd\n\norg = ['doclist[0]', 'doclist[0]', 'doclist[1]', 'doclist[4]', 'doclist[4]']\nnp = [0, 1, 1, 1, 0]\npr = [0, 0, 0, 0, 1]\ndf = pd.DataFrame({'Organization':org, 'NP':np, 'Pr':pr})\n\n# Make a \"lookup\" dataframe of the sums for each category\n# (Both the \"NP\" and \"Pr\" colums of \"sums\" will contain the result)\nsums = df.groupby('Organization').agg(lambda x: x['NP'].sum() + x['Pr'].sum())\n\n# Lookup the result based on the contents of the \"Organization\" row\ndf['Sum'] = df.apply(lambda row: sums.ix[row['Organization']]['NP'], axis=1)\n",
  "label": 1
 },
 {
  "idx": 1947,
  "doc": "Using groupby to operate only on rows that have the same value for one of the columns pandas python",
  "code": "import pandas as pd\n\norg = ['doclist[0]', 'doclist[0]', 'doclist[1]', 'doclist[4]', 'doclist[4]']\nnp = [0, 1, 1, 1, 0]\npr = [0, 0, 0, 0, 1]\ndf = pd.DataFrame({'Organization':org, 'NP':np, 'Pr':pr})\n\n# Make a \"lookup\" dataframe of the sums for each category\nlookup = df.groupby('Organization').agg(lambda x: x['NP'].sum() + x['Pr'].sum())\n\n# Lookup the result based on the contents of the \"Organization\" row\n# The \"lookup\" dataframe will have the relevant sum in _both_ \"NP\" and \"Pr\"\ndef func(row):\n    org = row['Organization']\n    group_sum = lookup.ix[org]['NP']\n    return group_sum\ndf['Sum'] = df.apply(func, axis=1)\n",
  "label": 1
 },
 {
  "idx": 1948,
  "doc": "Python: obtain multidimensional matrix as results from a function",
  "code": "import numpy as np\ndef bla(a, b):\n    f = a + b\n    return f\n\nA, B = np.meshgrid([0.2,0.4], [2,4], sparse=True)\nbla(A, B)\n",
  "label": 1
 },
 {
  "idx": 1949,
  "doc": "make python wait for stored procedure to finish executing",
  "code": "update RunningStatus set status = 0;\n",
  "label": 0
 },
 {
  "idx": 1950,
  "doc": "Running blocks of code inside vim",
  "code": "function! s:GetVisualSelection()\n  let [lnum1, col1] = getpos(\"'<\")[1:2]\n  let [lnum2, col2] = getpos(\"'>\")[1:2]\n  let lines = getline(lnum1, lnum2)\n  let lines[-1] = lines[-1][:col2 - (&selection == 'inclusive' ? 1 : 2)]\n  let lines[0] = lines[0][col1 - 1:]\n  return join(lines, \"\\n\")\nendfunction\n",
  "label": 0
 },
 {
  "idx": 1951,
  "doc": "Python loop through string in nested for loops",
  "code": "actions = {\n    'normal' : {\n        ' ' : lambda x: ('eating', ' '),\n        '\"' : lambda x: ('quoted', '\"'),\n        None: lambda x: ('normal', x)\n    },\n    'eating' : {\n        ' ' : lambda x: ('eating', ''),\n        '\"' : lambda x: ('quoted', '\"'),\n        None: lambda x: ('normal', x)\n    },\n    'quoted' : {\n        '\"' : lambda x: ('normal', '\"'),\n        '\\\\': lambda x: ('escaped', '\\\\'),\n        None: lambda x: ('quoted', x)\n    },\n    'escaped' : {\n        None: lambda x: ('quoted', x)\n    }\n}\n\ndef reduce(s):\n    result = ''\n    state = 'eating'\n    for ch in s:\n        state, ch = actions[state].get(ch, actions[state][None])(ch)\n        result += ch\n    return result\n\ns = '''that's my     string, \"   keep these spaces     \"    but reduce these '''\nprint reduce(s)\n",
  "label": 1
 },
 {
  "idx": 1952,
  "doc": "Save app data in Weather App",
  "code": "source.include_exts = py,png,jpg,kv,atlas,json \n",
  "label": 0
 },
 {
  "idx": 1953,
  "doc": "How to read complex numbers from file with numpy?",
  "code": ">>> import re\n>>> import numpy as np\n\n>>> pair = re.compile(r'\\(([^,\\)]+),([^,\\)]+)\\)')\n>>> def parse_pair(s):\n...    return complex(*map(float, pair.match(s).groups()))\n\n>>> s = '''1 (1.2,0.16) (2.8,1.1)\n2 (2.85,6.9) (5.8,2.2)'''\n>>> from cStringIO import StringIO\n>>> f = StringIO(s)\n\n>>> np.loadtxt(f, delimiter=' ', dtype=np.complex,\n...            converters={1: parse_pair, 2: parse_pair})\narray([[ 1.00+0.j  ,  1.20+0.16j,  2.80+1.1j ],\n       [ 2.00+0.j  ,  2.85+6.9j ,  5.80+2.2j ]])\n",
  "label": 1
 },
 {
  "idx": 1954,
  "doc": "How to add two Sparse Vectors in Spark using Python",
  "code": "from collections import defaultdict\n\ndef add(v1, v2):\n    assert isinstance(v1, SparseVector) and isinstance(v2, SparseVector)\n    assert v1.size == v2.size\n    values = defaultdict(float) # Dictionary with default value 0.0\n    # Add values from v1\n    for i in range(v1.indices.size):\n        values[v1.indices[i]] += v1.values[i]\n    # Add values from v2\n    for i in range(v2.indices.size):\n        values[v2.indices[i]] += v2.values[i]\n    return Vectors.sparse(v1.size, dict(values))\n",
  "label": 1
 },
 {
  "idx": 1955,
  "doc": "How to add two Sparse Vectors in Spark using Python",
  "code": "from pyspark.mllib.linalg import Vectors, SparseVector, DenseVector\nimport numpy as np\n\ndef add(v1, v2):\n    \"\"\"Add two sparse vectors\n    >>> v1 = Vectors.sparse(3, {0: 1.0, 2: 1.0})\n    >>> v2 = Vectors.sparse(3, {1: 1.0})\n    >>> add(v1, v2)\n    SparseVector(3, {0: 1.0, 1: 1.0, 2: 1.0})\n    \"\"\"\n    assert isinstance(v1, SparseVector) and isinstance(v2, SparseVector)\n    assert v1.size == v2.size \n    # Compute union of indices\n    indices = set(v1.indices).union(set(v2.indices))\n    # Not particularly efficient but we are limited by SPARK-10973\n    # Create index: value dicts\n    v1d = dict(zip(v1.indices, v1.values))\n    v2d = dict(zip(v2.indices, v2.values))\n    zero = np.float64(0)\n    # Create dictionary index: (v1[index] + v2[index])\n    values =  {i: v1d.get(i, zero) + v2d.get(i, zero)\n       for i in indices\n       if v1d.get(i, zero) + v2d.get(i, zero) != zero}\n\n    return Vectors.sparse(v1.size, values)\n",
  "label": 1
 },
 {
  "idx": 1956,
  "doc": "How to isolate group nodes in maya with python",
  "code": "def is_group(node):\n    children = node.getChildren()\n    for child in children:\n        if type(child) is not pymel.core.nodetypes.Transform:\n            return False\n    return True\n",
  "label": 0
 },
 {
  "idx": 1957,
  "doc": "How to isolate group nodes in maya with python",
  "code": "selection = pymel.core.ls(selection=True, transforms=True)\n",
  "label": 0
 },
 {
  "idx": 1958,
  "doc": "Use map over a list of 50 generated colours to count, using filter, and reduce, or len, the frequency of occurence",
  "code": "zip(colours, map(lambda x: len(filter(lambda y: y==x, c)), colours))\n",
  "label": 0
 },
 {
  "idx": 1959,
  "doc": "Use map over a list of 50 generated colours to count, using filter, and reduce, or len, the frequency of occurence",
  "code": "map(lambda color: reduce(lambda x,y: x+y, map(lambda y: 1,filter(lambda x: x==color, c))), colours)\n",
  "label": 0
 },
 {
  "idx": 1960,
  "doc": "find an empty value gap in a list and allocate a group of strings",
  "code": "list0 = [\"text\",\"text\",\"\",\"\",\"text\",\"\",\"text\",\"text\",\"\",\"text\"]\n\n# Find the \"gap\" - the first consectutive empty strings\n# gap_pos remains 0 if no gap is found\ngap_pos = 0\ngap_size = 2\nfor i in range(len(list0)-gap_size):\n    if all(x == '' for x in  list0[i:i+gap_size]):\n        gap_pos = i+1\n        break # remove this if you want the last gap\n\n# Find the non-empty strings that are detected after the gap\nafter_gap = filter(lambda x : x != '', list0[gap_pos+1:])\n\n# allocate this group starting at a specific index (e.g. index 5)\nspecific_index = 5\nfor i in range(len(after_gap)):\n    allocate_at = i + specific_index\n    # Make sure not to go out-of-bounds\n    if allocate_at < len(list0):\n        list0[allocate_at] = after_gap[i]\n",
  "label": 1
 },
 {
  "idx": 1961,
  "doc": "Regular expression to find a word after multiple spaces",
  "code": ">>> string = 'I love my           world of dreams'\n>>> print re.search (r'(?<=my)\\s+([^ -.]*)', string).group(1)\nworld\n",
  "label": 1
 },
 {
  "idx": 1962,
  "doc": "Writing NetCDF time variable from start of year",
  "code": "sampleDateTime = yearStart + datetime.timedelta(0, index * 60 * 60 * 6)\n",
  "label": 0
 },
 {
  "idx": 1963,
  "doc": "Writing NetCDF time variable from start of year",
  "code": "index = yearSeconds / (60*60*6) # / 60 sec/min * 60 min/hour * 6 hours\n",
  "label": 0
 },
 {
  "idx": 1964,
  "doc": "Execute parsed xml data as command in python",
  "code": "....\nelse:\n    exec(ui_application.tag)\n",
  "label": 1
 },
 {
  "idx": 1965,
  "doc": "Execute parsed xml data as command in python",
  "code": "....\nelse:\n    result = eval(ui_application.tag)\n",
  "label": 1
 },
 {
  "idx": 1966,
  "doc": "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?",
  "code": "Palette('#F1E1BD', '#EEBA85', name='palette2')\n",
  "label": 0
 },
 {
  "idx": 1967,
  "doc": "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?",
  "code": "class Palette(list):\n    def __init__(self, name=None, description=None, colors=None, *args):\n        super(Palette, self).__init__(args)   \n        self.name = name\n        self.description = description\n        self.extend(colors)\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        self._name = name\n\n    @name.deleter\n    def name(self):\n        self.name = None\n\n    @property\n    def description(self):\n        return self._description\n\n    @description.setter\n    def description(self, description):\n        self._description = description\n\n    @description.deleter\n    def description(self):\n        self.description = None\n",
  "label": 0
 },
 {
  "idx": 1968,
  "doc": "Can I group / aggregate elements in a list (or dict) comprehension?",
  "code": ">>> from collections import defaultdict\n>>> lis = [                            \n    (1, \"red\"),\n    (1, \"red,green\"),\n    (1, \"green,blue\"),\n    (2, \"green\"),\n    (2, \"yellow,blue\"),\n]\n>>> dic = defaultdict(set)       #sets only contain unique items\nfor k, v in lis:\n    dic[k].update(v.split(','))\n\n>>> dic\ndefaultdict(<type 'set'>,\n{1: set(['blue', 'green', 'red']),\n 2: set(['blue', 'green', 'yellow'])})\n",
  "label": 0
 },
 {
  "idx": 1969,
  "doc": "Removing certain letters from a string",
  "code": ">>> testList = list(test)\n>>> for i in testList[:]:\n        if i in 'pqrstPQRST':\n            testList.remove(i)\n\n\n>>> \"\".join(testList)\n'oday i i ueday'\n",
  "label": 1
 },
 {
  "idx": 1970,
  "doc": "Removing certain letters from a string",
  "code": ">>> test = 'Today it is Tuesday'\n>>> removeText = 'pqrst'\n>>> test.translate(dict.fromkeys(ord(elem) for elem in removeText+removeText.upper()))\n'oday i i ueday'\n",
  "label": 1
 },
 {
  "idx": 1971,
  "doc": "numpy multidimensional indexing and diagonal symmetries",
  "code": "ux, uy = np.triu_indices(10)\np[:, ux, uy] = 0\nq[:, ux, uy] = 0\np[:, :, :, :, :, ux, uy] = 0\nq[:, :, :, :, :, ux, uy] = 0\n\nprint ((p - q) ** 2).sum()  # euclidean distance is 0, so p and q are equal\n\nprint ((p ** 2).sum(), (q ** 2).sum())  # prove that not all entries are 0 ;) - This has a negative result due to an overflow\n",
  "label": 0
 },
 {
  "idx": 1972,
  "doc": "Subsetting 2D array based on condition in numpy python",
  "code": "np.where(arr_b > 0.0, arr_a, np.nan)\n",
  "label": 1
 },
 {
  "idx": 1973,
  "doc": "Output touch position from custom kivy widget to labels",
  "code": "<HueLayout>:\n    colorloopwidget: colorloopwidget\n    xlabel: xlabel\n    ylabel: ylabel\n\n    BoxLayout:\n        size: 1000, 500\n        orientation: 'horizontal'\n\n        ColorLoopWidget:\n            xlabel: xlabel\n            ylabel: ylabel\n            id: colorloopwidget\n            size: 500, 500\n\n        BoxLayout:\n            orientation: 'vertical'\n            Button:\n                text: 'Clear'\n                on_release: root.clear_canvas()\n            Label:\n                id: xlabel\n                text: 'x: '\n                size_hint_y: 0.2\n            Label:\n                id: ylabel\n                text: 'y: '\n                size_hint_y: 0.2\n",
  "label": 0
 },
 {
  "idx": 1974,
  "doc": "convert xlsx files to xls inside folders and subfolders in Excel VBA or Python",
  "code": "import win32com.client as win32\nimport glob\nimport os\n\nexcel = win32.gencache.EnsureDispatch('Excel.Application')\n\nfor excel_filename in glob.glob(r'c:\\excel_files_folder\\*.xlsx'):\n    print excel_filename\n    wb = excel.Workbooks.Open(excel_filename)\n    wb.SaveAs(os.path.splitext(excel_filename)[0] + '.xls', FileFormat=56, ConflictResolution=2) \n\nexcel.Application.Quit()\n",
  "label": 1
 },
 {
  "idx": 1975,
  "doc": "convert xlsx files to xls inside folders and subfolders in Excel VBA or Python",
  "code": "import win32com.client as win32\nimport os\n\nexcel = win32.gencache.EnsureDispatch('Excel.Application')\n\nfor dirpath, dirnames, filenames in os.walk(r'c:\\excel_files_folder'):\n    for filename in filenames:\n        name, ext = os.path.splitext(filename)\n        if ext == '.xlsx':\n            wb = excel.Workbooks.Open(os.path.join(dirpath, filename))\n            wb.DoNotPromptForConvert = True\n            wb.CheckCompatibility = False\n            excel.DisplayAlerts = False\n            wb.SaveAs(os.path.join(dirpath, name + '.xls'), FileFormat=56, ConflictResolution=2) \n\nexcel.Application.Quit()\n",
  "label": 1
 },
 {
  "idx": 1976,
  "doc": "Python multiprocessing and shared numpy array",
  "code": "pool = multiprocessing.Pool()\nresults = pool.starmap(get_sub_matrix_C, ((i, other_args) for i in range(10)))\n\nfor i, res in enumerate(results):\n    C[i*10:(i+1)*10,:10] = res\n",
  "label": 1
 },
 {
  "idx": 1977,
  "doc": "Regular expressions matching across multiple line in Sublime Text",
  "code": "import re\np = re.compile(ur'{([^}]+)}')\ntest_str = u\"{'AuthorSite': None,\\n 'FirstText': None,\\n 'Image': None,\\n 'SrcDate': None,\\n 'Title': None,\\n 'Url': None}\"\n\nre.findall(p, test_str)\n",
  "label": 1
 },
 {
  "idx": 1978,
  "doc": "Partitioning a set of values in Python",
  "code": "values = [7, 3, 2, 7, 1, 9, 8]\n\nrange_by_min, range_by_max = {}, {}\n\nfor v in values:\n    range_by_min[v] = range_by_max[v] = [v, v]\n\nfor v in values:\n    if v - 1 in range_by_max and v in range_by_min:\n        p, q = range_by_max[v - 1], range_by_min[v]\n        del range_by_min[q[0]]\n        del range_by_max[p[1]]\n        p[1] = q[1]\n        range_by_max[p[1]] = p\n\nprint(range_by_min, range_by_max)\n\nresult = {k: v[1] - v[0] + 1 for k, v in range_by_min.iteritems()}\nprint(result)\n",
  "label": 1
 },
 {
  "idx": 1979,
  "doc": "Partitioning a set of values in Python",
  "code": "ranges = {v: [v, v] for v in values}\n\nfor v in values:\n    if v - 1 in ranges and v in ranges:\n        p, q = ranges[v - 1], ranges[v]\n        if p[1] == v - 1 and q[0] == v:\n            if q[0] != q[1]:\n                del ranges[q[0]]\n            if p[0] != p[1]:\n                del ranges[p[1]]\n            p[1] = q[1]\n            ranges[p[1]] = p\n\nresult = {k: v[1] - v[0] + 1 for k, v in ranges.iteritems() if k == v[0]}\n",
  "label": 1
 },
 {
  "idx": 1980,
  "doc": "Partitioning a set of values in Python",
  "code": "({1: [1, 3], 7: [7, 9]}, {3: [1, 3], 9: [7, 9]})\n{1: 3, 7: 3}\n",
  "label": 0
 },
 {
  "idx": 1981,
  "doc": "Insert values in lists following a pattern",
  "code": "n = len(list_a)\nnewList = []\nfor i in range(0,n, 6):\n    newList.append(list_a[i:i+6] ) \n\n    newTuple1 = (newList[-1][1], newList[i][0])\n    newList.append(newTuple1)\n    try:\n        newTuple2 = (newTuple1[0] + 1, list_a[i+6][0])\n        newList.append(newTuple2)\n    except IndexError:\n        print \"There was no next tuple\"\n\nprint newList\n",
  "label": 1
 },
 {
  "idx": 1982,
  "doc": "Reading netCDF and creating \"virtual / pseudo\" csv files",
  "code": "world\nhello\n",
  "label": 0
 },
 {
  "idx": 1983,
  "doc": "exit from ipython",
  "code": ">>> exit\n",
  "label": 0
 },
 {
  "idx": 1984,
  "doc": "String of list or strings to a tuple",
  "code": ">>> def convert_to_tuple(elem):\n        if isinstance(elem, list):\n            return tuple(elem)\n        elif isinstance(elem, basestring):\n            return (elem,)\n        else:\n            # Do Something\n            pass\n\n\n>>> convert_to_tuple('abc')\n('abc',)\n>>> convert_to_tuple(['abc', 'def'])\n('abc', 'def')\n",
  "label": 1
 },
 {
  "idx": 1985,
  "doc": "Remove focus from Entry widget",
  "code": "from tkinter import *\n\nclass FocusFrame(Frame):\n    def __init__(self, *args, **kwargs):\n        Frame.__init__(self, *args, **kwargs)\n        self.bind(\"<1>\", lambda event: self.focus_set())\n\ntop = Tk()\n\nEntry(top, width=\"20\").pack()\nFocusFrame(top, width=200, height=200, bg='blue').pack()\nFocusFrame(top, width=200, height=200, bg='green').pack()\nFocusFrame(top, width=200, height=200, bg='yellow').pack()    \n\ntop.mainloop()\n",
  "label": 1
 },
 {
  "idx": 1986,
  "doc": "Remove focus from Entry widget",
  "code": "Option 1\nfrom tkinter import *\n\ntop = Tk()\n\nEntry(top, width=\"20\").pack()\nb = Frame(top, width=200, height=200, bg='blue')\ng = Frame(top, width=200, height=200, bg='green')\ny = Frame(top, width=200, height=200, bg='yellow')\n\nb.pack()\ng.pack()\ny.pack()\n\nb.bind(\"<1>\", lambda event: b.focus_set())\ng.bind(\"<1>\", lambda event: g.focus_set())\ny.bind(\"<1>\", lambda event: y.focus_set())\n\ntop.mainloop()\n",
  "label": 1
 },
 {
  "idx": 1987,
  "doc": "What is the most pythonic way to pop a random element from a list?",
  "code": "while lst:\n  x = lst.pop()\n  # do something with the element      \n",
  "label": 1
 },
 {
  "idx": 1988,
  "doc": "Iterating over related objects in Django: loop over query set or use one-liner select_related (or prefetch_related)",
  "code": "{% block content %}\n  {% for newsletter in newsletter_list %}\n    <h2>{{ newsletter.label }}</h2>\n    <p>Volume {{ newsletter.volume }}, Number {{ newsletter.number }}</p>\n    <p>{{ newsletter.article }}</p>\n    <ul>\n    {% for a in newsletter.article_set.all %}\n      <li>{{ a.title }}</li>\n    {% endfor %}\n    </ul>\n  {% endfor %}\n{% endblock %}\n",
  "label": 0
 },
 {
  "idx": 1989,
  "doc": "Returning user to referrer in flask in smartest pythonic way",
  "code": "...\nreturn redirect(request.form.get('next', '/'))\n",
  "label": 0
 },
 {
  "idx": 1990,
  "doc": "Printing inherited class in Python",
  "code": "    def __str__(self):\n        return 'Name :' + self.name + ', Occupation:' + self.occupation + ', Affiliation:' + self.affiliation + ', Species:' + self.species\n",
  "label": 0
 },
 {
  "idx": 1991,
  "doc": "Python : match string inside double quotes and bracket",
  "code": "#coding: utf8\nimport re\ns = \"\"\"\u201c\u4f5c\u70ba\u201d(act) \uff0c\u7528\u65bc\u7f6a\u884c\u6216\u6c11\u4e8b\u904e\u5931\u6642\uff0c\u5305\u62ec\u4e00\u9023\u4e32\u4f5c\u70ba\u3001\u4efb\u4f55\u9055\u6cd5\u7684\u4e0d\u4f5c\u70ba\u548c\u4e00\u9023\u4e32\u9055\u6cd5\u7684\u4e0d\u4f5c\u70ba\uff1b\n    \u201c\u884c\u653f\u4e0a\u8a34\u59d4\u54e1\u6703\u201d(Administrative Appeals Board) \u6307\u6839\u64da\u300a\u884c\u653f\u4e0a\u8a34\u59d4\u54e1\u6703\u689d\u4f8b\u300b(\u7b2c442\u7ae0)\u8a2d\u7acb\u7684\u884c\u653f\u4e0a\u8a34\u59d4\u54e1\u6703\uff1b(\u75311994\u5e74\u7b2c6\u865f\u7b2c32\u689d\u589e\u88dc)\n    \u201c\u6210\u4eba\u201d\u3001\u201c\u6210\u5e74\u4eba\u201d(adult)* \u6307\u5e74\u6eff18\u6b72\u7684\u4eba\uff1b  (\u75311990\u5e74\u7b2c32\u865f\u7b2c6\u689d\u4fee\u8a02)\n    \u201c\u98db\u6a5f\u201d\u3001\u201c\u822a\u7a7a\u5668\u201d(aircraft) \u6307\u4efb\u4f55\u53ef\u6191\u7a7a\u6c23\u7684\u53cd\u4f5c\u7528\u800c\u5728\u5927\u6c23\u4e2d\u7372\u5f97\u652f\u627f\u529b\u7684\u6a5f\u5668\uff1b\n    \u201c\u5916\u7c4d\u4eba\u58eb\u201d(alien) \u6307\u4e26\u975e\u4e2d\u570b\u516c\u6c11\u7684\u4eba\uff1b  (\u75311998\u5e74\u7b2c26\u865f\u7b2c4\u689d\u589e\u88dc)\n    \u201c\u4fee\u8a02\u201d(amend) \u5305\u62ec\u5ee2\u9664\u3001\u589e\u88dc\u6216\u66f4\u6539\uff0c\u4ea6\u6307\u540c\u6642\u9032\u884c\uff0c\u6216\u4ee5\u540c\u4e00\u689d\u4f8b\u6216\u6587\u66f8\u9032\u884c\u4e0a\u8ff0\u5168\u90e8\u6216\u5176\u4e2d\u4efb\u4f55\u4e8b\u9805\uff1b  (\u75311993\u5e74\u7b2c89\u865f\u7b2c3\u689d\u4fee\u8a02)\n    \u201c\u53ef\u902e\u6355\u7684\u7f6a\u884c\u201d(arrestable offence) \u6307\u7531\u6cd5\u5f8b\u898f\u9650\u56fa\u5b9a\u5211\u7f70\u7684\u7f6a\u884c\uff0c\u6216\u6839\u64da\u3001\u6191\u85c9\u6cd5\u4f8b\u5c0d\u72af\u8005\u53ef\u8655\u8d85\u904e12\u500b\u6708\u76e3\u7981\u7684\u7f6a\u884c\uff0c\u4ea6\u6307\u72af\u4efb\u4f55\u9019\u985e\u7f6a\u884c\u7684\u4f01\u5716\uff1b  (\u75311971\u5e74\u7b2c30\u865f\u7b2c2\u689d\u589e\u88dc)\n    \u201c\u300a\u57fa\u672c\u6cd5\u300b\u201d(Basic Law) \u6307\u300a\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u570b\u9999\u6e2f\u7279\u5225\u884c\u653f\u5340\u57fa\u672c\u6cd5\u300b\uff1b  (\u75311998\u5e74\u7b2c26\u865f\u7b2c4\u689d\u589e\u88dc)\n    \u201c\u884c\u653f\u9577\u5b98\u201d(Chief Executive) \u6307\u2500\"\"\"\nfor zh1, zh2, en in re.findall(r\"\u201c([^\u201d]*)\u201d(?:\u3001\u201c([^\u201d]*)\u201d)?\\((.*?)\\)\",s):\n    print(ascii((zh1, zh2, en)))\n",
  "label": 1
 },
 {
  "idx": 1992,
  "doc": "Retrieving the actual 3D coordinates of a point on a triangle that has been flattened to 2 dimensions",
  "code": "def GetInterpolatedZ(triangle, u, v):\n    z0 = 1.0 / triangle[0].z\n    z1 = 1.0 / triangle[1].z\n    z2 = 1.0 / triangle[2].z\n    z = z0 + u * (z1-z0) + v * (z2-z0)\n    return 1.0/z\n",
  "label": 0
 },
 {
  "idx": 1993,
  "doc": "How do I print a sorted Dictionary in Python 3.4.3",
  "code": ">>> for k,v in sorted(class1.items(), key=lambda p:p[1]):\n...     print(k,v)\n...\nIan 3\nHolly 6\nHelen 8\nEthan 9\n\n>>> for k,v in sorted(class1.items(), key=lambda p:p[1], reverse=True):\n...     print(k,v)\n...\nEthan 9\nHelen 8\nHolly 6\nIan 3\n",
  "label": 1
 },
 {
  "idx": 1994,
  "doc": "How to perform re substitutions on <p> tags within a specific class?",
  "code": "from bs4 import BeautifulSoup\n\nwith open('file.html', 'r') as f:\n    html_file_as_string = f.read()\nsoup = BeautifulSoup(html_file_as_string, \"lxml\")\nfor div in soup.find_all('div', {'class': 'my_class'}):\n    for p in div.findAll('p'):\n        new = BeautifulSoup(u'\\n'.join(u'<p>{}</p>'.format(line.strip()) for line in p.text.splitlines() if line), 'html.parser')\n        p.replace_with(new)\nwith open('file', 'w') as f:\n    f.write(soup.renderContents())\n",
  "label": 1
 },
 {
  "idx": 1995,
  "doc": "Python: Iterating through a set so we don't compare the same objects multiple times?",
  "code": "from itertools import combinations\n\nfor i, j in combinations(self.objects, 2):\n    if pygame.sprite.collide_rect(i, j):\n        grid.collisions.append(Collision(i, j))\n",
  "label": 1
 },
 {
  "idx": 1996,
  "doc": "Insert tree kind of data taken from a database into a python dictionary",
  "code": "rows = [(1,1,'A',0),\n        (2,2,'AA',1),\n        (3,2,'AB',1),\n        (4,3,'AAA',2),\n        (5,3,'AAB',2),\n        (6,3,'ABA',3),\n        (7,3,'ABB',3)]       \n",
  "label": 0
 },
 {
  "idx": 1997,
  "doc": "Insert tree kind of data taken from a database into a python dictionary",
  "code": "conx = sqlite3.connect( 'nameofdatabase.db' )\ncurs = conx.cursor()\ncurs.execute( 'SELECT COMPONENT_ID, LEVEL, COMPONENT_NAME, PARENT ' +\n              'FROM DOMAIN_HIERARCHY' )\nrows = curs.fetchall()\ncmap = {}\nhrcy = None\nfor row in rows:\n    entry = (row[2], {})\n    cmap[row[0]] = entry\n    if row[1] == 1:\n        hrcy = {entry[0]: entry[1]}\n\n# raise if hrcy is None\n\nfor row in rows:\n    item = cmap[row[0]]\n    parent = cmap.get(row[3], None)\n    if parent is not None:\n        parent[1][row[2]] = item[1]\n\nprint hrcy\n",
  "label": 1
 },
 {
  "idx": 1998,
  "doc": "Detrend Flux Time Series with Non-Linear Trend",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nnum = 1000\nx = np.linspace(0, 10, num)\ny = np.exp(x)\n\n# Add some non-stationary noise that's hard to see without de-trending\nnoise = 100 * np.exp(0.2 * x) * np.random.normal(0, 1, num)\ny += noise\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'ro')\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 1999,
  "doc": "How to reference/iterate multiple lists in Python",
  "code": "for ccy in ccys:\n    ccy[13] += 10\n\n>>> audcad\n['audcad', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]\n>>> audchf\n['audchf', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]\n>>> audjpy\n['audjpy', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]\n",
  "label": 0
 },
 {
  "idx": 2000,
  "doc": "Selecting rows with similar index names in Pandas",
  "code": "In [6]: df.index = MultiIndex.from_product([['a','b'],[1,2]])\n\nIn [7]: df\nOut[7]: \n     a  b\na 1  4  1\n  2  2  3\nb 1  4  5\n  2  6  7\n\n[4 rows x 2 columns]\n\nIn [8]: df.loc['a']\nOut[8]: \n   a  b\n1  4  1\n2  2  3\n\n[2 rows x 2 columns]\n\nIn [9]: df.loc[['a']]\nOut[9]: \n     a  b\na 1  4  1\n  2  2  3\n\n[2 rows x 2 columns]\n",
  "label": 1
 },
 {
  "idx": 2001,
  "doc": "how to access nargs of optparse-add_action?",
  "code": "NUM_CATEGORIES = 4\n\n# ...\n\nparser.add_option('-c', '--categories', dest='categories', nargs=NUM_CATEGORIES)\n\n# later\n\nif not options.categories:\n    options.categories = [raw_input('Enter input: ') for _ in range(NUM_CATEGORIES)]\n",
  "label": 0
 },
 {
  "idx": 2002,
  "doc": "How to update entire column with values in list using Sqlite3",
  "code": ">>> import sqlite3\n>>> conn=sqlite3.connect(':memory:')\n>>> conn.execute('CREATE TABLE test (myCol)')\n<sqlite3.Cursor object at 0x10542f1f0>\n>>> conn.commit()\n>>> myList = ('foo', 'bar', 'spam')\n>>> conn.executemany('INSERT into test values (?)', ((val,) for val in myList))\n<sqlite3.Cursor object at 0x10542f180>\n>>> list(conn.execute('select * from test'))\n[(u'foo',), (u'bar',), (u'spam',)]\n",
  "label": 1
 },
 {
  "idx": 2003,
  "doc": "How to update entire column with values in list using Sqlite3",
  "code": "my_data = ({id=1, value='foo'}, {id=2, value='bar'})\ncursor.executemany('UPDATE test SET myCol=:value WHERE rowId=:id', my_data)\n",
  "label": 1
 },
 {
  "idx": 2004,
  "doc": "Parse list to other list",
  "code": "l = ['GIS_FPC_PP,PERIMETER,MAT,LIGHTS,PARK,SPACES,LAT,LNG\\n',\n     '8266.99157657,453.7255798,Paved,1,American Legion,20,40.0188044212,-75.0547647126\\n',\n     '20054.5870679,928.20201772,Paved,1,Barnes Foundation Museum, ,39.9610355788,-75.1725011285\\n']\n\nnewList = []\nfor i in range(0, len(l)):\n    item = l[i]\n    tempList = []\n    if i != 0:\n        itemSplit = item.split(',')\n        tempList.append(itemSplit[-2].strip())\n        tempList.append(itemSplit[-1].strip())\n        newList.append(tuple(tempList))\nprint newList\n",
  "label": 1
 },
 {
  "idx": 2005,
  "doc": "Line breaks with lists",
  "code": "while True:\n    myInput = input()\n    if myInput == \"nothing\":\n        print('There are {} items in the basket: '.format(len(basket)))\n        for ind, item in enumerate(basket,1):\n            print(\"Item{}: {} \".format(ind,item))\n        break\n    else:\n        basket.append(myInput)\n        print('Okay, what else?')\n",
  "label": 1
 },
 {
  "idx": 2006,
  "doc": "Using Twitter Bootstrap radio buttons with Flask",
  "code": "<div id=\"radios1\" class=\"btn-group view-opt-btn-group\" data-toggle=\"buttons-radio\">\n{% for button in buttons %}\n    {% if button in active_btns %}\n        <button type=\"button\" class=\"btn active\" name=\"choice1\" value=\"{{ button }}\">{{ button }}</button>\n    {% else %}\n        <button type=\"button\" class=\"btn\" name=\"choice1\" value=\"{{ button }}\">{{ button }}</button>\n    {% endif %}\n{% endfor %}\n</div>\n",
  "label": 0
 },
 {
  "idx": 2007,
  "doc": "QTableView item selection based on a QStandardItem data attribute",
  "code": "def __init__(self):\n    super(myDialog, self).__init__()\n    self.t = QtGui.QTreeView()\n    self.m = QtGui.QStandardItemModel()\n    self.t.setModel(self.m)\n    layout = QtGui.QVBoxLayout()\n    layout.addWidget(self.t)\n    self.setLayout(layout)\n    self.l = [\n        ['one', False], ['two', True], \n        ['three', False], ['four', True], \n        ['five', False]]\n    self.populate()\n\ndef populate(self):\n    self.m.clear()\n    root = self.m.invisibleRootItem()\n    for item in self.l:\n        e = QtGui.QStandardItem()\n        e.setText(item[0])\n        root.appendRow(e)\n",
  "label": 0
 },
 {
  "idx": 2008,
  "doc": "Numerical value of a name",
  "code": "def main():\n    \"\"\"To print a names numeric value\"\"\"\n    name = input(\"Enter your full name here: \")\n    return sum( ord(c) - 96 for c in name.replace(' ', '').lower())\n",
  "label": 1
 },
 {
  "idx": 2009,
  "doc": "Uploading files using Django Admin",
  "code": "from django.contrib import admin\nfrom my_app import models\n\nadmin.site.register(models.Router)\n",
  "label": 0
 },
 {
  "idx": 2010,
  "doc": "Uploading files using Django Admin",
  "code": "<a href=\"{{ my_model_instance.specifications.url }}\">Download PDF</a>\n",
  "label": 0
 },
 {
  "idx": 2011,
  "doc": "python for loop using lambda syntax",
  "code": "for a, b, c, d in map(lambda y: x[y*4:y*4+4], range(len(x)//4)):\n\n    ...  more code ...\n",
  "label": 1
 },
 {
  "idx": 2012,
  "doc": "Iterate through XML child of a child tags in Python",
  "code": "tree = ET.parse('command_details.xml')\nroot = tree.getroot()\n\nfor child in root:\n\n    if child.attrib['major'] == str(hex(int(major_bits[::-1], 2))) and child.attrib['minor'] == str(hex(int(minor_bits[::-1], 2))):\n        command_name = str(child.attrib['name'])    \n        for grandchild in child.getchildren():\n            print str(grandchild.attrib['bytes'])\n            print str(grandchild.attrib['descrip'])\n",
  "label": 1
 },
 {
  "idx": 2013,
  "doc": "How can I store data to a data dictionary in Python when headings are in mixed up order",
  "code": "school = None\nheaders = None\ndata = {}\nfor line in text.splitlines():\n    if line.startswith(\"school id\"):\n        school = line.split('=')[1].strip()\n        headers = None\n        continue\n    if school is not None and headers is None:\n        headers = line.split('|')\n        continue\n\n    if school is not None and headers is not None and line:\n        if not school in data:\n            data[school] = []\n        datum = dict(zip(headers, line.split('|')))\n        data[school].append(datum)    \n",
  "label": 1
 },
 {
  "idx": 2014,
  "doc": "Using Python Iterparse For Large XML Files",
  "code": "def fast_iter(context, func, *args, **kwargs):\n    \"\"\"\n    http://lxml.de/parsing.html#modifying-the-tree\n    Based on Liza Daly's fast_iter\n    http://www.ibm.com/developerworks/xml/library/x-hiperfparse/\n    See also http://effbot.org/zone/element-iterparse.htm\n    \"\"\"\n    for event, elem in context:\n        func(elem, *args, **kwargs)\n        # It's safe to call clear() here because no descendants will be\n        # accessed\n        elem.clear()\n        # Also eliminate now-empty references from the root node to elem\n        for ancestor in elem.xpath('ancestor-or-self::*'):\n            while ancestor.getprevious() is not None:\n                del ancestor.getparent()[0]\n    del context\n\n\ndef process_element(elem):\n    print elem.xpath( 'description/text( )' )\n\ncontext = etree.iterparse( MYFILE, tag='item' )\nfast_iter(context,process_element)\n",
  "label": 1
 },
 {
  "idx": 2015,
  "doc": "How to apply a function on every row on a dataframe?",
  "code": "def EOQ(D,p,ck,ch):\n    p,D = Partmaster\n    Q = math.sqrt((2*D*ck)/(ch*p))\n    return Q\nch=0.2\nck=5\ndf['Q'] = df.apply(lambda row: EOQ(row['D'], row['p'], ck, ch), axis=1)\ndf\n",
  "label": 1
 },
 {
  "idx": 2016,
  "doc": "Detecting geographic clusters",
  "code": "rect(-74.989,39.7667, -73.0419,41.5209, col=c(\"red\"))\nrect(-123.005,36.8144, -121.392,38.3672, col=c(\"green\"))\nrect(-78.2422,38.2474, -76.3,39.9282, col=c(\"blue\"))\n",
  "label": 0
 },
 {
  "idx": 2017,
  "doc": "Detecting geographic clusters",
  "code": "map('state', plot = TRUE, fill = FALSE, col = palette())\n",
  "label": 0
 },
 {
  "idx": 2018,
  "doc": "making binned boxplot in matplotlib with numpy and scipy in Python",
  "code": "bar(bin_edges[:-1], hist_data)\n",
  "label": 0
 },
 {
  "idx": 2019,
  "doc": "making binned boxplot in matplotlib with numpy and scipy in Python",
  "code": "a = [0, 1]\nweights = [10, 2]\n",
  "label": 0
 },
 {
  "idx": 2020,
  "doc": "Is there a better way to convert from decimal to binary in python?",
  "code": "def str2bits(astr):\n    for char in astr:    \n        n=ord(char)\n        for bit in '{0:0=#10b}'.format(n)[2:]:\n            yield int(bit)\n",
  "label": 0
 },
 {
  "idx": 2021,
  "doc": "Is there a better way to convert from decimal to binary in python?",
  "code": "for b in str2bits('Hi Zvarberg'):\n    print b,\n# 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 1 1 1\n\n# To show bits2str is the inverse of str2bits:\nprint ''.join([c for c in bits2str(str2bits('Hi Zvarberg'))])\n# Hi Zvarberg\n",
  "label": 0
 },
 {
  "idx": 2022,
  "doc": "XOR neural network backprop",
  "code": "dCE/dL3 = -((Y/L3) - (1-Y)/(1-L3))\n        = -((Y(1-L3) - (1-Y)L3) / (L3(1-L3)))\n        = -(((Y-Y*L3) - (L3-Y*L3)) / (L3(1-L3)))\n        = -((Y-Y3*L3 + Y3*L3 - L3) / (L3(1-L3)))\n        = -((Y-L3) / (L3(1-L3)))\n        = ((L3-Y) / (L3(1-L3)))\n",
  "label": 0
 },
 {
  "idx": 2023,
  "doc": "XOR neural network backprop",
  "code": "Z3 = theta2(0) + theta2(1) * L2(1) + theta2(2) * L2(2) + theta2(3) * L2(3)\n",
  "label": 0
 },
 {
  "idx": 2024,
  "doc": "XOR neural network backprop",
  "code": "dCE/dZ3 = (dCE/dL3) * (dL3/dZ3)\n        = ((L3-Y)/(L3(1-L3)) * (L3(1-L3)) # Hey, look at that. The denominator gets cancelled out and\n        = (L3-Y) # This is why in my comments I was saying what you are computing is the _negative_ derivative.\n",
  "label": 0
 },
 {
  "idx": 2025,
  "doc": "XOR neural network backprop",
  "code": "L3      = sigmoid(Z3)\ndL3/dZ3 = L3(1-L3)\n",
  "label": 0
 },
 {
  "idx": 2026,
  "doc": "XOR neural network backprop",
  "code": "dZ3/dL2(1) = theta2(1)\ndZ3/dL2(2) = theta2(2)\ndZ3/dL2(3) = theta2(3)\n",
  "label": 0
 },
 {
  "idx": 2027,
  "doc": "XOR neural network backprop",
  "code": "dCE/dZ2(0) = dCE/dZ3 * dZ3/dL2(1) * dL2(1)/dZ2(0)\n           = (L3-Y)  * theta2(1)  * L2(1) * (1-L2(1))\n\ndCE/dZ2(1) = dCE/dZ3 * dZ3/dL2(2) * dL2(2)/dZ2(1)\n           = (L3-Y)  * theta2(2)  * L2(2) * (1-L2(2))\n\ndCE/dZ2(2) = dCE/dZ3 * dZ3/dL2(3) * dL2(3)/dZ2(2)\n           = (L3-Y)  * theta2(3)  * L2(3) * (1-L2(3))\n",
  "label": 0
 },
 {
  "idx": 2028,
  "doc": "Joining fields values",
  "code": "class MetaA(type):\n    def __init__(cls, name, bases, clsdict):\n        super(MetaA, cls).__init__(name, bases, clsdict)\n        for base in bases:\n            if hasattr(base, 'array'):\n                cls.array = base.array + cls.array\n                break\n\nclass A(object):\n    __metaclass__ = MetaA\n    array = [1]\n\n    def __init__(self):\n        pass\n\nclass B(A):\n    array = [2, 3]\n\n    def __init__(self):\n        super(B, self).__init__()\n\nclass C(B):\n    array = [4]\n\n    def __init__(self):\n        super(C, self).__init__()\n",
  "label": 1
 },
 {
  "idx": 2029,
  "doc": "minimize memory consumption when dealing with python list assignment",
  "code": ">>> a = [None, 0, None, None, 0, None, None, None, 0, None, None, None, None, None, 0]\n>>> b = [7, 1, 4, 8, 2, 1, 1, 1, 1, 6, 1]\n>>> b_iter = iter(b)\n>>> [next(b_iter) if i is None else i for i in a]\n[7, 0, 1, 4, 0, 8, 2, 1, 0, 1, 1, 1, 6, 1, 0]\n",
  "label": 1
 },
 {
  "idx": 2030,
  "doc": "minimize memory consumption when dealing with python list assignment",
  "code": "b_iter = iter(b)\na = [next(b_iter) if i is None else i for i in a]\n",
  "label": 1
 },
 {
  "idx": 2031,
  "doc": "Setting path in Python",
  "code": "os.system('C:/Program Files/PostgreSQL/9.2/bin/foo')\n",
  "label": 0
 },
 {
  "idx": 2032,
  "doc": "Python: Extracting Sentences From Line - Regex Needed Based on Criteria",
  "code": "patt = r'(?:Dr\\.|Mr\\.|.)*?[.!?]\\s?\\n?'\n",
  "label": 1
 },
 {
  "idx": 2033,
  "doc": "Python: Extracting Sentences From Line - Regex Needed Based on Criteria",
  "code": "{Hello there|Hello|Howdy} Dr. Munchauson you {gentleman|fine fellow}! What {will|shall|should} we {eat|have} for lunch? Peas by the {thousand|hundred|1000} said Dr. Munchauson; {that|is} what he said.\n\nBut there are no {misters|doctors} here good sir! Help us if there is an emergency.\n\nI am the {very last|last} sentence for this {instance|example}.\n",
  "label": 0
 },
 {
  "idx": 2034,
  "doc": "\"Canonical\" offset from UTC using pytz?",
  "code": "...\nMexico/BajaNorte --> -0800\nAfrica/Kigali --> +0200\nBrazil/West --> -0400\nAmerica/Grand_Turk --> -0400\nMexico/BajaSur --> -0700\nCanada/Central --> -0600\nAfrica/Lagos --> +0100\nGMT-0 --> +0000\nEurope/Sofia --> +0200\nSingapore --> +0800\nAfrica/Tripoli --> +0200\nAmerica/Anchorage --> -0900\nPacific/Nauru --> +1200\n",
  "label": 0
 },
 {
  "idx": 2035,
  "doc": "Extract html cell data XPath",
  "code": "OPEN, 80002, ACCY, 2001, 10, Intro Financial Accounting, 3.00, Ray, K, MON, 113, MW, 12:45PM - 02:00PM, 08/25/14 - 12/06/14\n[Finished in 0.5s]\n",
  "label": 0
 },
 {
  "idx": 2036,
  "doc": "dictionary of dictionaries(nested dicts)",
  "code": "pavdict[pav].append(subdict)\n",
  "label": 0
 },
 {
  "idx": 2037,
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "i = randint(0, len(reduced_list) - 1) #get any valid index. -1 is needed because randint upperbound is inclusive\nlast5.append(reduced_list[i]) #the number is as what it pointed by the index: reduced_list[i], append that number to the last 5 list\n",
  "label": 0
 },
 {
  "idx": 2038,
  "doc": "Generate random numbers without using the last n values in Python",
  "code": "result = []\nfor i in range(0, 5000):\n    result.append(get_next_number())\nprint(result)\n",
  "label": 0
 },
 {
  "idx": 2039,
  "doc": "Pandas: add dataframes to dataframe - match on index and column value",
  "code": "series = df.set_index(['id'], append=True).stack()\n#             id        \n# 2015-05-01  1   value1    13\n#             2   value1    14\n# 2015-05-02  1   value1    15\n#             2   value1    16\n# 2015-05-01  1   value2     4\n# 2015-05-02  1   value2     5\n# 2015-05-01  2   value2     7\n# 2015-05-02  2   value2     8\n# dtype: float64\n",
  "label": 0
 },
 {
  "idx": 2040,
  "doc": "Pandas: add dataframes to dataframe - match on index and column value",
  "code": "import datetime as DT\nimport numpy as np\nimport pandas as pd\n\ndf1 = pd.DataFrame({'id':[1,2,1,2], 'value1':[13,14,15,16]}, index=pd.DatetimeIndex(['2015-5-1', '2015-5-1', '2015-5-2', '2015-5-2']))\ndf2 = pd.DataFrame({'id':[1,1], 'value2':[4,5]}, index=pd.DatetimeIndex(['2015-5-1', '2015-5-2']))\ndf3 = pd.DataFrame({'id':[2,2], 'value2':[7,8]}, index=pd.DatetimeIndex(['2015-5-1', '2015-5-2']))\n",
  "label": 0
 },
 {
  "idx": 2041,
  "doc": "How do you clone a class in Python?",
  "code": "def c():\n    class Clone(object):\n        pass\n\n    return Clone\n\nc1 = c()\nc2 = c()\nprint id(c1)\nprint id(c2)\n",
  "label": 1
 },
 {
  "idx": 2042,
  "doc": "Writing variables with .write() Python 3",
  "code": "print(\"Log Created:\", grab_date, file=f)\nprint(\"Log deleted and recreated.\", file=f)\n",
  "label": 1
 },
 {
  "idx": 2043,
  "doc": "Writing variables with .write() Python 3",
  "code": ">>> import logging\n>>> logging.basicConfig(datefmt=\"%A %d, %B %Y %I:%M:%S %p %Z\", format='Log Created: %(asctime)-15s %(message)s')\n>>> logging.warn('Foo bar baz!')\nLog Created: Monday 28, July 2014 08:13:44 PM BST Foo bar baz!\n",
  "label": 1
 },
 {
  "idx": 2044,
  "doc": "Update a Pyspark DF Column based on an Array in another column",
  "code": ">>> string = [(\", max(\" + c + \") as \" + c) for c in masterDF.columns]\n>>> string = \"\".join(string)\n>>> string\n', max(id) as id, max(value) as value, max(name) as name, max(value2) as value2'\n",
  "label": 0
 },
 {
  "idx": 2045,
  "doc": "Changing constraint naming conventions in Flask-SQLAlchemy",
  "code": "db = SQLAlchemy(metadata=MetaData(naming_convention={\n    'pk': 'pk_%(table_name)s',\n    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n    'ix': 'ix_%(table_name)s_%(column_0_name)s',\n    'uq': 'uq_%(table_name)s_%(column_0_name)s',\n    'ck': 'ck_%(table_name)s_%(constraint_name)s',\n}))\n",
  "label": 1
 },
 {
  "idx": 2046,
  "doc": "Selecting the value in a row closest to zero in a pandas DataFrame",
  "code": "df['a'].where(df['a'].abs() < df['b'].abs(), df['b'])\n",
  "label": 1
 },
 {
  "idx": 2047,
  "doc": "Sympy library solve to an unknown variable",
  "code": ">>> nsolve(C_b - 10.4866, C0, 1) # for numerical solution\n0.00970963412692139\n",
  "label": 0
 },
 {
  "idx": 2048,
  "doc": "PANDAS: merging calculated data in groupby dataframe into main dataframe",
  "code": "  customer_id       date  invoice_amt no_days_since_last_purchase  days_since\n8        101A 2011-10-01       275.76                         NaN        4291\n4        101A 2011-12-09       124.76                          69          69\n1        101A 2012-02-01       234.45                          54          54\n0        101A 2012-03-21       654.76                          49          49\n9        102A 2011-09-21       532.21                         NaN        4281\n6        102A 2011-11-18       652.65                          58          58\n2        102A 2012-01-23        99.45                          66          66\n7        104B 2011-10-12       765.21                         NaN        4302\n5        104B 2011-11-27       346.87                          46          46\n3        104B 2011-12-18       767.63                          21          21\n",
  "label": 0
 },
 {
  "idx": 2049,
  "doc": "Creating a correlation plot with matplotlib",
  "code": "plt.yticks([0.5,1.5,2.5], [\"first\", \"second\", \"third\"])\nplt.xticks([0.5,1.5,2.5], [\"first\", \"second\", \"third\"], rotation='vertical')\n",
  "label": 0
 },
 {
  "idx": 2050,
  "doc": "Creating a correlation plot with matplotlib",
  "code": "plt.tight_layout()\n",
  "label": 0
 },
 {
  "idx": 2051,
  "doc": "Loading multiple images from a text file",
  "code": "listOfFilenames = ['filename1.txt','filename2.txt','filename3.txt']\nfor filename in listOfFilenames: \n    with open(filename,'rb') as f:\n    ...\n",
  "label": 1
 },
 {
  "idx": 2052,
  "doc": "Loading multiple images from a text file",
  "code": "import os\nimport cv\nwith open('textFileOfImages.txt','rb') as f:\n     img = ['%s/%s'%(os.path.dirname(os.path.abspath(__file__)),line.strip()) for line in f]\n",
  "label": 1
 },
 {
  "idx": 2053,
  "doc": "Universally create Derived class from Base in python",
  "code": "class FileProxyGetter(ProxyGetter):\n    ...\n    def MakeProxy(self, *args, **kwargs):\n        return Proxy.fromstring(*args, **kwargs)\n    def Get(self):\n        ...\n           proxies.append(self.MakeProxy(l[:-1]))\n        ...\n    ...\nclass FileSecureProxyGetter(FileProxyGetter):\n    def MakeProxy(self, *args, **kwargs):\n        return SecureProxy.fromstring(*args, **kwargs)\n",
  "label": 1
 },
 {
  "idx": 2054,
  "doc": "Write average weather data from a year given by user to a text file",
  "code": "def data_to_python(data_file_name):\n    with open(data_file_name,'r') as f:\n        data = []\n        first = True\n        for line in f:\n            if first:\n                first = False\n                datanames = line.split('\\t')\n            else:\n                temp = {}\n                for i,item in enumerate(line.split('\\t')):\n                     temp[datanames[i]] = item\n                data.append(temp)\n    return data\n\ndef searchByYear(data,year):\n    temp = []\n    for entry in data:\n        if entry['Dato'].endswith(str(year)):\n            temp.append(entry)\n    return temp\n",
  "label": 1
 },
 {
  "idx": 2055,
  "doc": "Write average weather data from a year given by user to a text file",
  "code": ">>> data = dataToPython('test.txt')\n>>> searchByYear(data,1957)\n    [{'FFM': '6.2', 'DD18': '170', 'DD06': '150', 'Stnr': '50540', 'DD12': '170', 'FXM':'8.8', 'Dato': '07.01.1957', 'POM': '1010.6', 'UUM\\n': '94\\n', 'TAM': '6.3'}, {'FFM': '7.2', 'DD18': '200', 'DD06': '160', 'Stnr': '50540', 'DD12': '160', 'FXM': '9.8', 'Dato': '08.01.1957', 'POM': '1001.8', 'UUM\\n': '99\\n', 'TAM': '8.0'}, {'FFM': '8.1', 'DD18': '160', 'DD06': '290', 'Stnr': '50540', 'DD12': '200', 'FXM': '13.3', 'Dato': '09.01.1957', 'POM': '990.2', 'UUM\\n': '91', 'TAM': '5.7'}]\n>>> searchByYear(data,1956)\n[]\n",
  "label": 0
 },
 {
  "idx": 2056,
  "doc": "python - increase array size and initialize new elements to zero",
  "code": "In [29]: A\nOut[29]: \narray([[1, 2],\n       [2, 3]])\n\nIn [30]: new_shape = (3,4)\n\nIn [31]: shape_diff = np.array(new_shape) - np.array(A.shape)\n\nIn [32]: np.lib.pad(A, ((0,shape_diff[0]),(0,shape_diff[1])), \n                              'constant', constant_values=(0))\nOut[32]: \narray([[1, 2, 0, 0],\n       [2, 3, 0, 0],\n       [0, 0, 0, 0]])\n",
  "label": 1
 },
 {
  "idx": 2057,
  "doc": "Creating a new corpus with NLTK",
  "code": ">>> import nltk.data\n>>> text = \"\"\"\n... Punkt knows that the periods in Mr. Smith and Johann S. Bach\n... do not mark sentence boundaries.  And sometimes sentences\n... can start with non-capitalized words.  i is a good variable\n... name.\n... \"\"\"\n>>> tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\n>>> tokenizer.tokenize(text.strip())\n",
  "label": 0
 },
 {
  "idx": 2058,
  "doc": "Using variable as keyword passed to **kwargs in Python",
  "code": "request = update_by_email(email, **{field: field_value})\n",
  "label": 1
 },
 {
  "idx": 2059,
  "doc": "SqlAlchemy Dynamic Where",
  "code": ">>> from sqlalchemy import MetaData, Table, Integer, Column, create_engine\n>>> engine = create_engine('sqlite://')\n>>> metadata = MetaData(bind=engine)\n>>> table = Table(\"Bookings\", metadata,\n...     Column('id', Integer(), primary_key=True,),\n...     Column('value', Integer(),),\n... )\n>>> field = 'value'\n>>> table.c.get(field)\nColumn('value', Integer(), table=<Bookings>)\n>>> table.c[field]\nColumn('value', Integer(), table=<Bookings>)\n",
  "label": 1
 },
 {
  "idx": 2060,
  "doc": "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array",
  "code": "idx = np.argsort(y.ravel())\nprint(idx)\n# [ 0  1  5  2  6 10  3  7 11 15  4  8 12 16  9 13 17 14 18 19]\n",
  "label": 0
 },
 {
  "idx": 2061,
  "doc": "Reading text file and returning most popular name for that year",
  "code": "for year,r in results:\n  if int(year) in valid:\n   print('In {0} the name {1} occured the most ({2} times)'.format(year, r[0][0], r[0][1]))\n",
  "label": 0
 },
 {
  "idx": 2062,
  "doc": "inserting a new entry into adjacency list",
  "code": "from collections import defaultdict\n\ndict1 = defaultdict(list)\ndict1['x1'] = ['y1','y2']\ndict1['x2'] = ['y2','y3','y4']\ndict2 = defaultdict(list)\ndict2['y1'] = ['x1']\ndict2['y2'] = ['x1','x2']\ndict2['y3'] = ['x2']\n",
  "label": 0
 },
 {
  "idx": 2063,
  "doc": "How to force sympy to extract specific subexpressions?",
  "code": "V_Ci, tau, V_Cf = symbols('V_Ci, tau, V_Cf')\n\ntarget = V_Ci*exp(-t/tau) + Heaviside(t)*V_Cf*(1 - exp(-t/tau))\n\nsolve([(eqVc.rhs - target).subs(t, ti) for ti in [0, 1, 2]],\n      [V_Ci, tau, V_Cf], dict=True)\n",
  "label": 1
 },
 {
  "idx": 2064,
  "doc": "Python transition matrix",
  "code": "import numpy as np\nfrom collections import Counter\na = [2, 1, 3, 1, 2, 3, 1, 2, 2, 2]\nb = np.zeros((3,3))\nfor (x,y), c in Counter(zip(a, a[1:])).iteritems():\n    b[x-1,y-1] = c\nprint b\narray([[ 0.,  2.,  1.],\n       [ 1.,  2.,  1.],\n       [ 2.,  0.,  0.]])\n",
  "label": 1
 },
 {
  "idx": 2065,
  "doc": "Binary search of a number within a list in Python",
  "code": "Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>> ================================ RESTART ================================\n>>> \ntestlist =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nfinding number  4\nfound 4\ntestlist =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nfinding number  9\nfound 9\ntestlist =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nfinding number  21\nNot found 21\n",
  "label": 0
 },
 {
  "idx": 2066,
  "doc": "Selecting a subset of functions from a list of functions in python",
  "code": "def applyfs(funcs, args):\n    \"\"\"\n    Applies several functions to single set of arguments. This function takes\n    a list of functions, applies each to given arguments, and returns the list\n    of obtained results. For example:\n\n        >>> from operator import add, sub, mul\n        >>> list(applyfs([add, sub, mul], (10, 2)))\n        [12, 8, 20]\n\n    :param funcs: List of functions.\n    :param args:  List or tuple of arguments to apply to each function.\n    :return:      List of results, returned by each of `funcs`.\n    \"\"\"\n    return map(lambda f: f(*args), funcs)\n",
  "label": 1
 },
 {
  "idx": 2067,
  "doc": "Consolidate duplicate rows of an array",
  "code": ">>> b = a[np.argsort(a[:, 0])]\n>>> grps, idx = np.unique(b[:, 0], return_index=True)\n>>> counts = np.add.reduceat(b[:, 1:], idx)\n>>> np.column_stack((grps, counts))\narray([[117,   1,   1,   0,   0,   1],\n       [120,   0,   1,   1,   0,   0],\n       [163,   1,   0,   0,   0,   0],\n       [189,   0,   0,   0,   1,   0]])\n",
  "label": 1
 },
 {
  "idx": 2068,
  "doc": "Consolidate duplicate rows of an array",
  "code": ">>> df = pd.DataFrame(a)\n>>> df.groupby(0, sort=False, as_index=False).sum().values\narray([[117,   1,   1,   0,   0,   1],\n       [163,   1,   0,   0,   0,   0],\n       [120,   0,   1,   1,   0,   0],\n       [189,   0,   0,   0,   1,   0]])\n",
  "label": 1
 },
 {
  "idx": 2069,
  "doc": "Get system metrics using PowerShell",
  "code": "$def = @\"\n//I removed every other enum-value to shorten the sample\npublic enum SystemMetric\n   {\n     SM_REMOTESESSION           = 0x1000, // 0x1000\n   }\n\n[DllImport(\"user32.dll\")]\npublic static extern int GetSystemMetrics(SystemMetric smIndex);\n\"@\n\nAdd-Type -Namespace NativeMethods -Name User32Dll -MemberDefinition $def\n\n[NativeMethods.User32Dll]::GetSystemMetrics([NativeMethods.User32Dll+SystemMetric]::SM_REMOTESESSION)\n",
  "label": 1
 },
 {
  "idx": 2070,
  "doc": "Remove rows from data: overlapping time intervals?",
  "code": "library(intervals)\n\nf <- function(dd) with(dd, {\n    r <- reduce(Intervals(cbind(start, end)))\n    data.frame(username = username[1],\n         machine = machine[1],\n         start = structure(r[, 1], class = class(start)),\n         end = structure(r[, 2], class = class(end)))\n})\n\ndo.call(\"rbind\", by(d, d[1:2], f))\n",
  "label": 1
 },
 {
  "idx": 2071,
  "doc": "How to filter through pandas pivot table.",
  "code": "df = pd.DataFrame({'i1': [1, 1, 1, 1], 'i2': [2, 2, 3, 3], 'i3': [4, 5, 4, 5], 'v1': [10] * 4, 'v2': [20] * 4}).set_index(['i1', 'i2', 'i3'])\n>>> df\n          v1  v2\ni1 i2 i3        \n1  2  4   10  20\n      5   10  20\n   3  4   10  20\n      5   10  20\n",
  "label": 0
 },
 {
  "idx": 2072,
  "doc": "Beautiful Soup [Python] and the extracting of text in a table",
  "code": "trimmed_text = text.strip()\n",
  "label": 0
 },
 {
  "idx": 2073,
  "doc": "Redirect stdout to logger in Python",
  "code": "import logging\n\nclass LoggerWriter:\n    def __init__(self, logger, level):\n        self.logger = logger\n        self.level = level\n\n    def write(self, message):\n        if message != '\\n':\n            self.logger.log(self.level, message)\n\ndef main():\n    logging.basicConfig(level=logging.DEBUG)\n    logger = logging.getLogger(\"demo\")\n    info_fp = LoggerWriter(logger, logging.INFO)\n    debug_fp = LoggerWriter(logger, logging.DEBUG)\n    print >> info_fp, \"An INFO message\"\n    print >> debug_fp, \"A DEBUG message\"\n\nif __name__ == \"__main__\":\n    main()\n",
  "label": 1
 },
 {
  "idx": 2074,
  "doc": "Calculate number of jumps in Dijkstra's algorithm?",
  "code": "def dijkway2(dijkpredmat, i, j):\n    wayarr = []\n    while (i != j) & (j >= 0):\n        wayarr.append(j)\n        j = dijkpredmat.item(i,j)\n    return wayarr\n\ndef jumpvec2(pmat,node):\n    jumps = np.zeros(len(pmat))\n    jumps[node] = -999\n    todo = set()\n    for i in range(len(pmat)):\n        if i != node:\n            todo.add(i)\n\n    indexs = np.arange(len(pmat), 0, -1)\n    while todo:\n        r = todo.pop()\n        dway = dijkway2(pmat, node, r)\n        jumps[dway] = indexs[-len(dway):]\n        todo -= set(dway)\n    return jumps\n",
  "label": 1
 },
 {
  "idx": 2075,
  "doc": "Exponential Decay on Python Pandas DataFrame",
  "code": "%timeit a = pd.expanding_apply(dataset, rollingsum)\n10 loops, best of 3: 25.5 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2076,
  "doc": "Beautiful Soup - Class contains 'a' and not contains 'b'",
  "code": ">>> both_tags = soup.find_all(\"tr\", class_=\"viewLicense\")\n>>> for tag in both_tags:\n...     if 'viewLicenseDetails' not in tag.attrs['class']:\n...             print tag\n",
  "label": 1
 },
 {
  "idx": 2077,
  "doc": "Scipy: Centroid of convex hull",
  "code": "import numpy as np\nfrom scipy.spatial import ConvexHull\n\npoints = np.random.rand(30, 2)   # 30 random points in 2-D\nhull = ConvexHull(points)\n\n#Get centoid\ncx = np.mean(hull.points[hull.vertices,0])\ncy = np.mean(hull.points[hull.vertices,1])\n",
  "label": 0
 },
 {
  "idx": 2078,
  "doc": "Save matches on array",
  "code": "s = 'module hi(a, b, c)'\nregex = re.compile(r'\\s(\\w+)\\(([^\\)]+)\\)')\ntry:\n    module_name, parameters = regex.search(s).groups()\nexcept AttributeError as e:\n    print 'No match for: {}'.format(s)\n    raise\nparameters = parameters.split(',')\nprint module_name, parameters\nd = {'module_name':module_name,\n     'module_params':parameters[:-1],\n     'module_last_param':parameters[-1]}\nprint d\n# {'module_last_param': ' c', 'module_name': 'hi', 'module_params': ['a', ' b']}\n",
  "label": 1
 },
 {
  "idx": 2079,
  "doc": "Fill scipy / numpy matrix based on indices and values",
  "code": "    ix = numpy.empty_like(voxel_communities)\n    ix[voxel_communities.argsort()] = numpy.arange(n_voxels)\n",
  "label": 0
 },
 {
  "idx": 2080,
  "doc": "How can I check if a string has the same characters? Python",
  "code": "sorted(str1) == sorted(str2)\n",
  "label": 1
 },
 {
  "idx": 2081,
  "doc": "openCV Thresholding negative values",
  "code": "[ 1  2  3]\n[-1 -2 -3]\n",
  "label": 0
 },
 {
  "idx": 2082,
  "doc": "openCV Thresholding negative values",
  "code": "[0  2  3]\n[0 -2 -3]\n",
  "label": 0
 },
 {
  "idx": 2083,
  "doc": "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields",
  "code": "df['race'] = df.groupby('Athlete').cumcount()+1\n#      Athlete Distance Race  Rank    Time  race\n# 0    M.Smith     400m    A     1   48.57     1\n# 1    A.Moyet     400m    A     2   49.00     1\n# 2  C.Marconi     800m    B     5  104.12     1\n# 3    M.Smith     800m    B     3  102.66     2\n",
  "label": 0
 },
 {
  "idx": 2084,
  "doc": "Order a list of dictionaries in python",
  "code": ">>> res.sort(key=lambda x: x[\"datetime\"])\n>>> res\n[{'cpucore_sum': '3.195312', 'cpucore_00': '0.0', 'servername': 'f02wn01', 'cpunumber': '40.0', 'datetime': '1438887240'}, {'cpucore_sum': '5.59375', 'cpucore_00': '1.0', 'servername': 'f02wn01', 'cpunumber': '40.0', 'datetime': '1438887245'}, {'cpucore_sum': '9.375', 'cpucore_00': '1.597656', 'servername': 'f02wn01', 'cpunumber': '40.0', 'datetime': '1438887250'}, {'cpucore_sum': '5.0', 'cpucore_00': '0.399414', 'servername': 'f02wn01', 'cpunumber': '40.0', 'datetime': '1438887255'}]\n",
  "label": 1
 },
 {
  "idx": 2085,
  "doc": "iterating over list of string and combining string values Python",
  "code": ">>> chained = itertools.chain.from_iterable(sixbit)\n>>> [''.join(bits) for bits in itertools.izip(*[chained]*8)]\n['00001100', '00010101', '00100001']\n",
  "label": 1
 },
 {
  "idx": 2086,
  "doc": "How to perform a 'one-liner' assignment on all elements of a list of lists in python",
  "code": "In [1]: lol = [[1, 3], [3, 4]]\n\n\nIn [2]: from operator import setitem\n\nIn [3]: map(lambda x: setitem(x, 1, -2), lol)\nOut[3]: [None, None]\n\nIn [4]: lol\nOut[4]: [[1, -2], [3, -2]]\n",
  "label": 1
 },
 {
  "idx": 2087,
  "doc": "sklearn decomposition top terms",
  "code": ">>> from sklearn.datasets import fetch_20newsgroups\n>>> from sklearn.feature_extraction.text import TfidfVectorizer\n>>> from sklearn.cluster import KMeans\n>>> from sklearn.decomposition import TruncatedSVD\n>>> data = fetch_20newsgroups()\n>>> vectorizer = TfidfVectorizer(min_df=3, max_df=.95, stop_words='english')\n>>> lsa = TruncatedSVD(n_components=10)\n>>> km = KMeans(n_clusters=3)\n>>> X = vectorizer.fit_transform(data.data)\n>>> X_lsa = lsa.fit_transform(X)\n>>> km.fit(X_lsa)\n",
  "label": 0
 },
 {
  "idx": 2088,
  "doc": "Python Find n words before and after a certain words",
  "code": "import re\nimport numpy\n\n# open the file? \ntest_string = \" a lot of text read from file ... Department of Something is called (DoS) and then more texts and more text...\"\nregex_acronym = r'\\b[A-Z][a-zA-Z\\.]*[A-Z]\\b\\.?'\n\nra = re.compile(regex_acronym)\nfor m in ra.finditer(test_string):\n    print m.start(), m.group(), m.span()\n    n = len(m.group()) * 2\n    regex_pre_post = r\"((?:[a-zA-Z'-]+[^a-zA-Z'-]+){0,%d})(\" % n\n    regex_pre_post += regex_acronym \n    regex_pre_post += \")((?:[^a-zA-Z'-]+[a-zA-Z'-]+){0,%d})\" % n\n    found= re.findall(regex_pre_post, test_string)\n    print found\n\n    found = found[0] # For a single match, just do this.\n    pre = found[0]\n    acro = found[1]\n    post = found[2]\n    print pre, acro, post\n",
  "label": 1
 },
 {
  "idx": 2089,
  "doc": "Saving an Element in an Array Permanently",
  "code": "savefile = open(\"backup.json\")\nli = json.loads(savefile.read())\n",
  "label": 0
 },
 {
  "idx": 2090,
  "doc": "How to return every 5 items from a list in python?",
  "code": "a = the_list\na += [0] * (-len(a) % 5)\nresult = [a[i:i + 5] for i in range(0, len(a), 5)]\n",
  "label": 1
 },
 {
  "idx": 2091,
  "doc": "Run multiple subprocesses in foreach loop? One at the time?",
  "code": "import threading\n\ndef worker():\n    for share in shares.split(', '):\n        ...\n        rsyncRun = subprocess.Popen(...)\n        out, err = rsyncRun.communicate()\n\nt = threading.Thread(target = worker)\nt.daemon = True\nt.start()\nt.join()\n",
  "label": 1
 },
 {
  "idx": 2092,
  "doc": "Run multiple subprocesses in foreach loop? One at the time?",
  "code": "self.rsyncRun.communicate()\n",
  "label": 1
 },
 {
  "idx": 2093,
  "doc": "Write nested lists column wise to CSV",
  "code": "\"['CD', 'CC', 'CD']\",\"['DT', 'CC', 'CD']\",\"['EX', 'CC', 'CD']\",\"['JJ', 'CC', 'CD']\"\n1,0,0,0\n1,0,0,0\n1,1,0,1\n1,0,0,0\n1,1,0,1\n1,0,0,0\n1,1,0,1\n1,1,0,1\n1,1,0,0\n1,1,0,1\n1,1,0,1\n1,1,0,1\n",
  "label": 0
 },
 {
  "idx": 2094,
  "doc": "Is there an efficient way to fill date gaps in python?",
  "code": "result = df.set_index('date_closed').reindex(hourly_date_rng).fillna(0).reset_index()\n\n# maybe convert date_closed column to string first\nresult['date_closed'] = pd.DatetimeIndex(result['date_closed']).to_native_types()\n# to json function\njson_result = result.to_json(orient='records')\n\n# print out the data with pretty print\nfrom pprint import pprint\npprint(json.loads(json_result))\n\n\n[{'amount': 0.0, 'date_closed': '2012-08-04 12:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 13:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 14:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 15:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 16:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 17:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 18:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 19:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 20:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 21:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 22:00:00'},\n {'amount': 0.0, 'date_closed': '2012-08-04 23:00:00'}]\n",
  "label": 0
 },
 {
  "idx": 2095,
  "doc": "Localized random points using numpy and pandas",
  "code": "individuals = (np.arange(0,200).reshape(-1,1)*np.ones(10).reshape(1,-1)).flatten()\nindividuals = pd.Series(individuals)\n\nallCoords = pd.DataFrame(coords, columns = ['x','y'])\n\nplt.scatter(allCoords['x'], allCoords['y'], c = individuals, \n      s = 40, cmap = 'hot')\n",
  "label": 0
 },
 {
  "idx": 2096,
  "doc": "Set a DTD using minidom in python",
  "code": "<?xml version=\"1.0\" ?><!DOCTYPE foo  SYSTEM \\'http://www.path.to.my.dtd.com/my.dtd\\'><foo/>\n",
  "label": 0
 },
 {
  "idx": 2097,
  "doc": "parse blocks of text from text file using Python",
  "code": "def read_file(fname):\n    \"Returns contents of file with name `fname`.\"\n    with open(fname) as fp:\n         return fp.read()\n\ndef write_file(fname, txt):\n    \"Writes `txt` to a file named `fname`.\"\n    with open(fname, 'w') as fp:\n         fp.write(txt)\n",
  "label": 0
 },
 {
  "idx": 2098,
  "doc": "define different function for different versions of python",
  "code": "def __str__(self):\n    return unicode(self).encode('UTF-8')\ncls.__str__ = __str__\n",
  "label": 0
 },
 {
  "idx": 2099,
  "doc": "Python - Replacing value of a row in a CSV file",
  "code": "import csv\n\nwith open('path/to/filename') as inf:\n    reader = csv.reader(inf.readlines())\n\nwith open('path/to/filename', 'w') as outf:\n    writer = csv.writer(outf)\n    for line in reader:\n        if line[1] == '0':\n            writer.writerow([line[0], '1')\n            break\n        else:\n            writer.writerow(line)\n    writer.writerows(reader)\n",
  "label": 1
 },
 {
  "idx": 2100,
  "doc": "Running program/function in background in Python",
  "code": "$ cat script.py\nimport subprocess\np = subprocess.Popen(\"sleep 3; echo 'Done!';\", shell=True)\np.wait()\n",
  "label": 1
 },
 {
  "idx": 2101,
  "doc": "Running program/function in background in Python",
  "code": "$ cat script.py\nimport subprocess\nsubprocess.Popen(\"sleep 3; echo 'Done!';\", shell=True)\n",
  "label": 1
 },
 {
  "idx": 2102,
  "doc": "Sort Python list by dict key,value",
  "code": "sorted(myList, key=val_dict.get)\n",
  "label": 0
 },
 {
  "idx": 2103,
  "doc": "Sort Python list by dict key,value",
  "code": "val_dict = dict(zip(RANKS, zip(VALUES, range(len(VALUES)))))\n",
  "label": 0
 },
 {
  "idx": 2104,
  "doc": "Sort Python list by dict key,value",
  "code": "{k: v for v, k in enumerate(RANKS)}\n",
  "label": 0
 },
 {
  "idx": 2105,
  "doc": "Sort Python list by dict key,value",
  "code": ">>> sorted(['2', '2', '3', 'A'], key=lambda x: RANKS.index(x))\n['A', '2', '2', '3']\n>>> sorted(['10',\"K\",\"J\",\"Q\"], key=lambda x: RANKS.index(x))\n['10', 'J', 'Q', 'K']\n",
  "label": 1
 },
 {
  "idx": 2106,
  "doc": "How to get the type of change in P4Python",
  "code": "import P4\np4 = P4.P4()\np4.connect()\np4.run_opened()[0]['action']\np4.disconnect()\n",
  "label": 1
 },
 {
  "idx": 2107,
  "doc": "How to get the type of change in P4Python",
  "code": "'haveRev'\n'rev'\n'clientFile'\n'client'\n'user'\n'action'\n'type'\n'depotFile'\n'change'\n",
  "label": 0
 },
 {
  "idx": 2108,
  "doc": "Python: How to call a class in the same file",
  "code": "class One:\n    def get(self):\n        return 1\n\nclass Two:\n    def __init__(self):\n        one = One()\n        val = one.get()\n",
  "label": 1
 },
 {
  "idx": 2109,
  "doc": "Filtering a model in Django based on a condition upon the latest child record",
  "code": "l_succ = stores.objects.filter( \n                       order__success = True \n                  ).annotate(\n                       last_success=Max('order__date')\n                  ).value_list (\n                       'id', 'last_success'\n                  )\n#l_succ = [ (1, '1/1/2011'), (2, '31/12/2010'), ... ] <-l_succ result\n\nl_last = stores.objects.annotate(\n                       last_date=Max('order__date')\n                  ).value_list (\n                       'id', 'last_date'\n                  )\n#l_last = [ (1, '1/1/2011'), (2, '3/1/2011'), ... ]   <-l_last result\n",
  "label": 0
 },
 {
  "idx": 2110,
  "doc": "Filtering a model in Django based on a condition upon the latest child record",
  "code": "store_success_ids =  [ k[0] for k in l_succ if k in l_last ]\n#store_success_ids = [1, 5, ... ]          <-store_success_ids result\n#Cast l_last to dictionary to do lookups if you have a lot of stores.\n\nresult = Store.objects.filter( pk__in = store_success_ids)        \n",
  "label": 0
 },
 {
  "idx": 2111,
  "doc": "Element-wise constraints in scipy.optimize.minimize",
  "code": "{'type':'ineq', 'fun': lambda x: x}\n",
  "label": 0
 },
 {
  "idx": 2112,
  "doc": "Counting elements matching a pattern in a tuple of tuples",
  "code": "%timeit [item for row in m for item in row].count(0) # OP\n1000000 loops, best of 3: 1.15 \u00b5s per loop\n\n%timeit len([item for row in m for item in row if item == 0]) # @thefourtheye\n1000000 loops, best of 3: 913 ns per loop\n\n%timeit sum(row.count(0) for row in m) \n1000000 loops, best of 3: 1 \u00b5s per loop\n\n%timeit count_zeros(m)\n1000000 loops, best of 3: 775 ns per loop\n",
  "label": 0
 },
 {
  "idx": 2113,
  "doc": "Simulating electron motion - differential equation with adaptive step size in python",
  "code": "x'  = vx\ny'  = vy\nz'  = vz\nvx' = Ac*x/r\nvy' = Ac*y/r + q*E/m\nvz' = Ac*z/r \n",
  "label": 0
 },
 {
  "idx": 2114,
  "doc": "In python, return value only when the function is used in an assignment",
  "code": "if f() == 'Return something':\n",
  "label": 0
 },
 {
  "idx": 2115,
  "doc": "Python keyword arguments unpack and return dictionary",
  "code": "def generate_student_dict(first_name=None, last_name=None , birthday=None, gender =None):\n     # It's important to copy locals in first line of code (see @MuhammadTahir comment).\n     args_passed = locals().copy()\n     # some code\n     return args_passed\n\ngenerate_student_dict()\n",
  "label": 1
 },
 {
  "idx": 2116,
  "doc": "Removing repetitive lists in a list of list",
  "code": ">>> [list(list(y) for y in el) \n        for el in set([tuple(tuple(x) for x in el) for el in my_list])]\n\n[[[26, 28, 80.0], [25, 40, 80.0]],\n [[10, 12, 80.0]],\n [[40, 42, 80.0], [40, 41, 80.0]],\n [[44, 45, 80.0]],\n [[5, 10, 80.0], [6, 9, 80.0], [5, 8, 80.0]],\n [[22, 24, 80.0]],\n [[14, 16, 80.0], [13, 20, 81.0]],\n [[2, 5, 71.1], [1, 3, 70.0]]]\n",
  "label": 1
 },
 {
  "idx": 2117,
  "doc": "Get object attribute in class based view",
  "code": "class ContextMixin:\n    extra_context = {}\n\n    def get_context_data(self, **kwargs):\n        context = super(ContextMixin, self).get_context_data(**kwargs)\n        context.update(self.extra_context)\n        return context \n\nclass FooUpdate(ContextMixin, UpdateView):\n    model = Foo\n    extra_context={'page_title': 'foo-objects name should go here'}\n",
  "label": 1
 },
 {
  "idx": 2118,
  "doc": "two dimensional array for encryption in python",
  "code": ">>> table.transpose()\n>>> table.where('9')\n'3465'\n",
  "label": 0
 },
 {
  "idx": 2119,
  "doc": "two dimensional array for encryption in python",
  "code": "AM h 9 C 56 in 13 ok\n",
  "label": 0
 },
 {
  "idx": 2120,
  "doc": "grouping dictionary with list values",
  "code": "inventory = {\n    'A': ['Toy', 3, 30],\n    'B': ['Toy', 8, 80],\n    'C': ['Cloth', 15, 150],\n    'D': ['Cloth', 9, 90],\n    'E': ['Toy', 11, 110]\n}\n\nitems = sorted(inventory.items(), key=lambda item: item[1][1])\n\nmost_expensive_by_category = {item[0]: (key, item) for key, item in items}\n\nmost_expensive = dict(most_expensive_by_category.values())\n",
  "label": 1
 },
 {
  "idx": 2121,
  "doc": "talking between python tcp server and a c++ client",
  "code": "# server.py\nimport socket\nfrom time import sleep\n\ndef f(s):\n        r,a = s.accept()\n        print r.recv(100)\n\ns = socket.socket()\ns.bind(('localhost',1234))\ns.listen(1)\n\nf(s)\n# wait around a bit for the client to send it's second packet\nsleep(10)\n",
  "label": 0
 },
 {
  "idx": 2122,
  "doc": "talking between python tcp server and a c++ client",
  "code": "# client.py\nimport socket\nfrom time import sleep\n\ns = socket.socket()\ns.connect(('localhost',1234))\n\ns.send('hello 1')\n# wait around for a while so that the socket in server.py goes out of scope\nsleep(5)\ns.send('hello 2')\n",
  "label": 0
 },
 {
  "idx": 2123,
  "doc": "Python3 Rename files in a directory importing the new names from a txt file",
  "code": "import os # os is a library that gives us the ability to make OS changes\n\ndef file_renamer(list_of_files, new_file_name_list):\n    for file_name in list_of_files:\n        for (new_filename, barcode_infile) in new_file_name_list:\n            # as per the mentioned filename pattern -> xxxx.1.xxxx.[barcode]\n            barcode_current = file_name[12:19] # extracting the barcode from current filename\n            if barcode_current == barcode_infile:\n                os.rename(file_name, new_filename)  # renaming step\n                print 'Successfully renamed %s to %s ' % (file_name, new_filename)\n\n\nif __name__ == \"__main__\":\n    path = os.getcwd()  # preassuming that you'll be executing the script while in the files directory\n    file_dir = os.path.abspath(path)\n    newname_file = raw_input('enter file with new names - or the complete path: ')\n    path_newname_file = os.path.join(file_dir, newname_file)\n    new_file_name_list = []\n    with open(path_newname_file) as file:\n        for line in file:\n            x = line.strip().split(',')\n            new_file_name_list.append(x)\n\n    list_of_files = os.listdir(file_dir)\n    file_renamer(list_of_files, new_file_name_list)\n",
  "label": 1
 },
 {
  "idx": 2124,
  "doc": "Python and the modulus operator with very large numbers",
  "code": "def isprime(n):\n    '''check if integer n is a prime'''\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2: \n        return True    \n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True\n",
  "label": 1
 },
 {
  "idx": 2125,
  "doc": "How to override OSX's version of numpy when I import in Python 2.7?",
  "code": "$ ls -l /usr/bin/ | grep python\nlrwxr-xr-x   1 root   wheel        76 Feb 21  2014 pythonw2.5 -> ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/pythonw2.5\nlrwxr-xr-x   1 root   wheel        76 Feb 21  2014 pythonw2.6 -> ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/pythonw2.6\nlrwxr-xr-x   1 root   wheel        76 Feb 21  2014 pythonw2.7 -> ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/pythonw2.7\n",
  "label": 0
 },
 {
  "idx": 2126,
  "doc": "Deleting consonants from a string in Python",
  "code": "re.findall(r'[aeiou]',\"mississippi\")\n",
  "label": 0
 },
 {
  "idx": 2127,
  "doc": "Storing a directed, weighted, complete graph in the GAE datastore",
  "code": "db.Key.from_path('Edge', vertex1.name + ' > ' + vertex2.name)\n",
  "label": 0
 },
 {
  "idx": 2128,
  "doc": "Storing a directed, weighted, complete graph in the GAE datastore",
  "code": "key_name = vertex1.name + ' > ' + vertex2.name\n",
  "label": 0
 },
 {
  "idx": 2129,
  "doc": "Storing a directed, weighted, complete graph in the GAE datastore",
  "code": "edge = Edge.all().filter('better =', vertex1).filter('worse =', vertex2).get()\n",
  "label": 0
 },
 {
  "idx": 2130,
  "doc": "numpy create 3D array from indexed list",
  "code": "In [175]: r = q.reshape(4,2,3,order='F')\n\nIn [176]: r[0]   #all x==1\nOut[176]: \narray([['p_x1y1z1', 'p_x1y1z2', 'p_x1y1z3'],\n       ['p_x1y2z1', 'p_x1y2z2', 'p_x1y2z3']], \n      dtype='|S8')\n\nIn [177]: r[:,0]  # all y==1\nOut[177]: \narray([['p_x1y1z1', 'p_x1y1z2', 'p_x1y1z3'],\n       ['p_x2y1z1', 'p_x2y1z2', 'p_x2y1z3'],\n       ['p_x3y1z1', 'p_x3y1z2', 'p_x3y1z3'],\n       ['p_x4y1z1', 'p_x4y1z2', 'p_x4y1z3']], \n      dtype='|S8')\n\nIn [178]: r[:,:,0]  #all z==1\nOut[178]: \narray([['p_x1y1z1', 'p_x1y2z1'],\n       ['p_x2y1z1', 'p_x2y2z1'],\n       ['p_x3y1z1', 'p_x3y2z1'],\n       ['p_x4y1z1', 'p_x4y2z1']], \n      dtype='|S8')\n",
  "label": 0
 },
 {
  "idx": 2131,
  "doc": "How to align and compare two elements (sequence) in a list using python",
  "code": "# Parse the file which was already split into split_list\nsplit_list = ['>103L', 'Sequence:', 'MNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNSLDAAKSELDKAIGRNTNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRAALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL', 'Disorder:', '----------------------------------XXXXXX-----------------------------------------------------------------------------------------------------------------------------XX']\nheader   = split_list[0] + \" \" + split_list[1]\nseq      = split_list[2]\ndisorder = split_list[4]\n\n# Create the new disorder string\nnew_disorder = [\"Disorder: Posi R\"]\nfor i, x in enumerate(disorder):\n    if x == \"X\":\n        # Appends of the form: \"AminoAcid Position\"\n        new_disorder.append( \"{} {}\".format(i, seq[i]) )\n\nnew_disorder = \" \".join(new_disorder)\n\n# Output the modified file\nopen(\"seq2.txt\", \"w\").write( \"\\n\".join([header, seq, new_disorder]))\n",
  "label": 1
 },
 {
  "idx": 2132,
  "doc": "How do I store multiple copies of the same field in Django?",
  "code": "english = languages.objects.get(iso_lang_code=\"en-GB\")\nresourcesinenglish = english.resource_set.all()\n\nfor r in resourcesinenglish:\n    # do something on r.\n",
  "label": 0
 },
 {
  "idx": 2133,
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "B(t) = P1*(1-t)**2 + 2*P2*(1-t)*t + P3*t**2\n",
  "label": 0
 },
 {
  "idx": 2134,
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "B'(t) = -2*P1*(1-t) + 2*P2*(1-2*t) + 2*P3*t\n      = 2*(P1 - 2*P2 + P3)*t + 2*(-P1 + P2)\n",
  "label": 0
 },
 {
  "idx": 2135,
  "doc": "Interactive shell program wrapper in python",
  "code": "import subprocess\n\nCOMMAND_LINE = 'echo \"Hello World!\" ; cat'\n\nprocess = subprocess.Popen(COMMAND_LINE, shell=True,\n                           stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE)\n\ns = process.stdout.readline().strip()\nprint(s)\ns2 = process.communicate(s)[0]\nprint(s2)\n",
  "label": 1
 },
 {
  "idx": 2136,
  "doc": "Reading input from raw_input() without having the prompt overwritten by other threads in Python",
  "code": "#!/usr/bin/python\n\nimport time,readline,thread\nimport sys,struct,fcntl,termios\n\ndef blank_current_readline():\n    # Next line said to be reasonably portable for various Unixes\n    (rows,cols) = struct.unpack('hh', fcntl.ioctl(sys.stdout, termios.TIOCGWINSZ,'1234'))\n\n    text_len = len(readline.get_line_buffer())+2\n\n    # ANSI escape sequences (All VT100 except ESC[0G)\n    sys.stdout.write('\\x1b[2K')                         # Clear current line\n    sys.stdout.write('\\x1b[1A\\x1b[2K'*(text_len/cols))  # Move cursor up and clear line\n    sys.stdout.write('\\x1b[0G')                         # Move to start of line\n\n\ndef noisy_thread():\n    while True:\n        time.sleep(3)\n        blank_current_readline()\n        print 'Interrupting text!'\n        sys.stdout.write('> ' + readline.get_line_buffer())\n        sys.stdout.flush()          # Needed or text doesn't show until a key is pressed\n\n\nif __name__ == '__main__':\n    thread.start_new_thread(noisy_thread, ())\n    while True:\n        s = raw_input('> ')\n",
  "label": 1
 },
 {
  "idx": 2137,
  "doc": "How to find the list in a list of lists whose sum of elements is the greatest?",
  "code": ">>> x = [[1,2,3], [4,5,6], [7,8,9], [2,2,0]]\n>>> max(x, key=sum)\n[7, 8, 9]\n",
  "label": 1
 },
 {
  "idx": 2138,
  "doc": "Diagonals at different points of a 2D list in Python",
  "code": "L = [[1,2,3],[4,5,6], [7,8,9]]\n# number of rows, number of columns: ie L is m x n\nm, n = len(L), len(L[0])\n\n# Retreive the NE-SW (diag1) and NW-SE (diag2) diagonals\ndiag1 = []\ndiag2 = []\nfor p in range(m+n-1):\n    diag1.append([])\n    diag2.append([])\n    q1 = 0\n    if p >= n:\n        q1 = p - n + 1\n    q2 = m\n    if p < m-1:\n        q2 = p+1\n    for q in range(q1, q2):\n        x, y = p - q, q\n        diag1[-1].append(L[y][x])\n        # To get the other diagonal, read each row \"backwards\"\n        x = n - x - 1\n        diag2[-1].append(L[y][x])\nprint 'diag1:', diag1\nprint 'diag2:', diag2\n",
  "label": 1
 },
 {
  "idx": 2139,
  "doc": "XML <arg> value Replacement in Python",
  "code": "for node in tree.iterfind('.//logging/Adapter[@type=\"abcdef\"]'):\n    for child in node:\n        # check if the key is 'Type A'\n        if child.get('key') == 'Type A':\n            child.set('value', 'false')\n        # ... if 'Type B' ...\n",
  "label": 1
 },
 {
  "idx": 2140,
  "doc": "Pandas Dataframe: split column into multiple columns, right-align inconsistent cell entries",
  "code": "rev.rename(columns={0:'Country',1:'State',2:'City'},inplace=True)\nrev = rev[['City','State','Country']]\nprint rev\n\n     City State Country\n0      NaN   NaN     HUN\n1      NaN   NaN     ESP\n2      NaN   NaN     GBR\n3      NaN   NaN     ESP\n4      NaN   NaN     FRA\n5      NaN    ID     USA\n6      NaN    GA     USA\n7  Hoboken    NJ     USA\n8      NaN    NJ     USA\n9      NaN   NaN     AUS\n",
  "label": 0
 },
 {
  "idx": 2141,
  "doc": "Pandas Dataframe: split column into multiple columns, right-align inconsistent cell entries",
  "code": "foo = lambda x: pd.Series([i for i in reversed(x.split(','))])\nrev = df['City, State, Country'].apply(foo)\nprint rev\n\n      0    1        2\n0   HUN  NaN      NaN\n1   ESP  NaN      NaN\n2   GBR  NaN      NaN\n3   ESP  NaN      NaN\n4   FRA  NaN      NaN\n5   USA   ID      NaN\n6   USA   GA      NaN\n7   USA   NJ  Hoboken\n8   USA   NJ      NaN\n9   AUS  NaN      NaN\n",
  "label": 1
 },
 {
  "idx": 2142,
  "doc": "How to draw stacked histogram in pandas",
  "code": "    plt.hist([subset[\"percentage_remains\"][filter],subset[\"percentage_remains\"][~filter]],\n                                                   stacked=True)\n        plt.show()\n",
  "label": 0
 },
 {
  "idx": 2143,
  "doc": "How can I wait until an element gains or loses a class?",
  "code": "wait = WebDriverWait(driver, 10)\nwait.until(wait_for_class((By.ID, 'select-1'), \"ui-state-error\"))\n",
  "label": 0
 },
 {
  "idx": 2144,
  "doc": "Iterate over Python list, preserving structure of embedded lists",
  "code": ">>> [[processPair(*pair) for pair in pairs] for pairs in l]\n[[(100, 202, 2), (300, 402, 2), (500, 602, 2)], [(100, 202, 2)], [(100, 202, 2)]]\n",
  "label": 0
 },
 {
  "idx": 2145,
  "doc": "HTML data from Beautiful Soup needs formatting",
  "code": "from StringIO import StringIO\n\nimport pandas as pd\n\ndata = \"\"\"\n<table>\n        <tr>\n            <th>Class</th>\n            <th class=\"failed\">Fail</th>\n            <th class=\"failed\">Error</th>\n            <th>Skip</th>\n            <th>Success</th>\n            <th>Total</th>\n        </tr>\n            <tr>\n                <td>Regression_TestCase</td>\n                <td class=\"failed\">1</td>\n                <td class=\"failed\">9</td>\n                <td>0</td>\n                <td>219</td>\n                <td>229</td>\n            </tr>\n        <tr>\n            <td><strong>Total</strong></td>\n            <td class=\"failed\">1</td>\n            <td class=\"failed\">9</td>\n            <td>0</td>\n            <td>219</td>\n            <td>229</td>\n        </tr>\n    </table>\"\"\"\n\ndf = pd.read_html(StringIO(data))\nprint(df)\n",
  "label": 1
 },
 {
  "idx": 2146,
  "doc": "Growing matrices columnwise in NumPy",
  "code": ">>> for index, itm in enumerate(range(5)):    \n        M[:,index] = fnx(10)\n\n>>> M\n  array([[ 1.,  7.,  0.,  8.,  7.],\n         [ 9.,  0.,  6.,  9.,  4.],\n         [ 2.,  3.,  6.,  3.,  4.],\n         [ 3.,  4.,  1.,  0.,  5.],\n         [ 2.,  3.,  5.,  3.,  0.],\n         [ 4.,  6.,  5.,  6.,  2.],\n         [ 0.,  6.,  1.,  6.,  8.],\n         [ 3.,  8.,  0.,  8.,  0.],\n         [ 5.,  2.,  5.,  0.,  1.],\n         [ 0.,  6.,  5.,  9.,  1.]])\n",
  "label": 0
 },
 {
  "idx": 2147,
  "doc": "Power set and Cartesian Product of a set python",
  "code": ">>> test = {1, 2, 3}\n>>> list(powerset(test))\n[(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n>>> list(product(test, test))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n",
  "label": 0
 },
 {
  "idx": 2148,
  "doc": "Sorting a list of list of tuples based on the sum of first field in the tuple in Python",
  "code": "[[(12, 'Item C', 'Jan'), (20, 'Item A', 'Jan'), (30, 'Item B', 'Jan')],\n [(15, 'Item C', 'Feb'), (22, 'Item A', 'Feb'), (34, 'Item B', 'Feb')]]\n",
  "label": 0
 },
 {
  "idx": 2149,
  "doc": "Sending non-string argument in a POST request to a Tornado server",
  "code": "var data = {};\nvar names_to_pack = ['packed1', 'packed2']\n$(form).find('input, select').each(function (i, x) {\n    var name = $(x).attr('name')\n    if(names_to_pack.indexOf(name) != -1) { \n        if(!data.packed) {\n            data.packed = {};  \n        }\n        data['packed'][name] = $(x).val(); \n    } else { \n        data[name] = $(x).val(); \n    }\n});\n$.post('/', data); \n",
  "label": 0
 },
 {
  "idx": 2150,
  "doc": "Sending non-string argument in a POST request to a Tornado server",
  "code": "var data = {'packed_arg':get_form_args(); } \n",
  "label": 0
 },
 {
  "idx": 2151,
  "doc": "Wxpython closing windows",
  "code": "self.secondFrame.Close()\n",
  "label": 0
 },
 {
  "idx": 2152,
  "doc": "Python multiline string - $ for variables",
  "code": ">>> from string import Template\n>>> t = Template(\"This is an $example with $vars\")\n>>> t.substitute({ 'example': \"example\", 'vars': \"variables\"})\n'This is an example with variables'\n",
  "label": 1
 },
 {
  "idx": 2153,
  "doc": "Scikit Learn HMM training with set of observation sequences",
  "code": "model.fit([X1,X2,X3])\n",
  "label": 1
 },
 {
  "idx": 2154,
  "doc": "Using Random Module to Administer DNA Mutations",
  "code": "import random\ndef mutate(string, mutation, threshold):\n    dna = list(string)\n    for index, char in enumerate(dna):\n        if char in mutation:\n            if random.random() < threshold:\n                dna[index] = mutation[char]\n\n    return ''.join(dna)\n",
  "label": 1
 },
 {
  "idx": 2155,
  "doc": "How to parse Apple's IAP receipt mal-formatted JSON?",
  "code": "line = re.compile(r'(\"[^\"]*\")\\s*=\\s*(\"[^\"]*\");')\nresult = line.sub(r'\\1: \\2,', result)\n",
  "label": 0
 },
 {
  "idx": 2156,
  "doc": "How to plot a 3D density map in python with matplotlib",
  "code": "import numpy as np\nfrom scipy import stats\nfrom mayavi import mlab\n\nmu, sigma = 0, 0.1 \nx = 10*np.random.normal(mu, sigma, 5000)\ny = 10*np.random.normal(mu, sigma, 5000)\nz = 10*np.random.normal(mu, sigma, 5000)\n\nxyz = np.vstack([x,y,z])\nkde = stats.gaussian_kde(xyz)\ndensity = kde(xyz)\n\n# Plot scatter with mayavi\nfigure = mlab.figure('DensityPlot')\npts = mlab.points3d(x, y, z, density, scale_mode='none', scale_factor=0.07)\nmlab.axes()\nmlab.show()\n",
  "label": 1
 },
 {
  "idx": 2157,
  "doc": "How to plot a 3D density map in python with matplotlib",
  "code": "# Plot scatter with mayavi\nfigure = mlab.figure('DensityPlot')\nfigure.scene.disable_render = True\n\npts = mlab.points3d(x, y, z, density, scale_mode='none', scale_factor=0.07) \nmask = pts.glyph.mask_points\nmask.maximum_number_of_points = x.size\nmask.on_ratio = 1\npts.glyph.mask_input_points = True\n\nfigure.scene.disable_render = False \nmlab.axes()\nmlab.show()\n",
  "label": 0
 },
 {
  "idx": 2158,
  "doc": "Creating an OrderedDict from a csv file",
  "code": "import csv\nfrom collections import OrderedDict\n\nfile = open('example.csv', mode='r')\n\ncsvReader = csv.reader(file)\n\n# get rid of header row\nheader = next(csvReader)\n# print(header)\n\nodict = OrderedDict()\nfor row in csvReader:\n    odict[row[0]] = row[1:]\n    # print(row)\n\nprint(odict)\n",
  "label": 1
 },
 {
  "idx": 2159,
  "doc": "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks",
  "code": "Date Time Length Cost Bill Category Destination Number Destination City Origin Number OriginCity\n01/01/0001  10:37   3   $0.00   LOCAL AIRTIME, LONG DISTANCE and INTERNATIONAL CHARGES  xxx-xxx-xxxx    City Name   aaa-aaa-aaaa    City Name   Mobile\n01/01/0001  10:37   10  $0.00   LOCAL AIRTIME, LONG DISTANCE and INTERNATIONAL CHARGES  yyy-yyy-yyyy    City Name   zzz-zzz-zzzz    City Name   Mobile\n01/01/0001  10:37   10  $0.00   LOCAL AIRTIME, LONG DISTANCE and INTERNATIONAL CHARGES  123-456-7890    City Name   zzz-zzz-zzzz    City Name   Mobile\n",
  "label": 0
 },
 {
  "idx": 2160,
  "doc": "How to view stdout of script run within automator",
  "code": "echo \"tail -f $$.tmp\" > x.command\nchmod +x x.command\nopen x.command\n",
  "label": 0
 },
 {
  "idx": 2161,
  "doc": "How to view stdout of script run within automator",
  "code": "export PATH=${PATH}:/usr/local/bin:/usr/local/CrossPack-AVR/bin\ncd /Applications/MyApp\n/Applications/MyApp/doIt.py \"$1\" > $$.tmp &\n",
  "label": 0
 },
 {
  "idx": 2162,
  "doc": "Make a pandas series by running a function on all adjacent values",
  "code": "import music21\nimport pandas as pd\nimport numpy as np\n\ns1 = pd.Series(['C4', 'E-4', 'G4', 'A-4'])\ndf = pd.DataFrame({0:s1, 1:s1.shift(1)})\n\ndef myfunc(x):\n    if not any([pd.isnull(x[0]), pd.isnull(x[1])]):\n        return music21.interval.Interval(music21.note.Note(x[0]),music21.note.Note(x[1])).name\n\n\ndf.apply(myfunc, axis = 1)\n",
  "label": 1
 },
 {
  "idx": 2163,
  "doc": "Matplotlib half black and half white circle",
  "code": "import matplotlib.pyplot as plt\nfrom matplotlib.patches import Wedge\n\ndef main():\n    fig, ax = plt.subplots()\n    dual_half_circle((0.5, 0.5), radius=0.3, angle=90, ax=ax)\n    ax.axis('equal')\n    plt.show()\n\ndef dual_half_circle(center, radius, angle=0, ax=None, colors=('w','k'),\n                     **kwargs):\n    \"\"\"\n    Add two half circles to the axes *ax* (or the current axes) with the \n    specified facecolors *colors* rotated at *angle* (in degrees).\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n    theta1, theta2 = angle, angle + 180\n    w1 = Wedge(center, radius, theta1, theta2, fc=colors[0], **kwargs)\n    w2 = Wedge(center, radius, theta2, theta1, fc=colors[1], **kwargs)\n    for wedge in [w1, w2]:\n        ax.add_artist(wedge)\n    return [w1, w2]\n\nmain()\n",
  "label": 1
 },
 {
  "idx": 2164,
  "doc": "What is the best way to compute the trace of a matrix product in numpy?",
  "code": "%timeit np.einsum('ij,ji->', a, b)\n100 loops, best of 3: 1.91 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2165,
  "doc": "Pandas number of business days between a DatetimeIndex and a Timestamp",
  "code": "In [88]: %timeit using_astype(drg, timestamp)\n10000 loops, best of 3: 95.4 \u00b5s per loop\n\nIn [89]: %timeit using_datetimes(drg, timestamp)\n100 loops, best of 3: 10.3 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2166,
  "doc": "Search for a variable in a file and get its value with python",
  "code": "import re\nwith open('data.txt') as inf:\n    salary = 0\n    for line in inf:\n        line = line.split('=')\n        line[0] = line[0].strip()\n        if line[0] == 'employee':\n            employee = re.sub(r'[]\\[\\' ]','', line[1].strip()).split(',')\n        elif line[0] == 'salary':\n            salary = float(line[1])\n        elif line[0] == 'managers':\n            managers = re.sub(r'[]\\[\\' ]','', line[1].strip()).split(',')\n\nprint employee\nprint salary\nprint managers\n",
  "label": 1
 },
 {
  "idx": 2167,
  "doc": "Installing OSQA on windows (local system)",
  "code": "{DJANGOSTACK}\\python\\python.exe manage.py syncdb\n",
  "label": 0
 },
 {
  "idx": 2168,
  "doc": "Is there a way to sandbox test execution with pytest, especially filesystem access?",
  "code": "FROM python:3\n\n# setup pytest user\nRUN adduser --disabled-password --gecos \"\" --uid 7357 pytest\nCOPY ./ /home/pytest\nWORKDIR /home/pytest\n\n# setup the python and pytest environments\nRUN pip install --upgrade pip setuptools pytest\nRUN pip install --upgrade -r requirements.txt\nRUN python setup.py develop\n\n# setup entry point\nUSER pytest\nENTRYPOINT [\"py.test\"]\n",
  "label": 0
 },
 {
  "idx": 2169,
  "doc": "Is there a way to sandbox test execution with pytest, especially filesystem access?",
  "code": "rm -rf .cache/ && find . -name __pycache__  | xargs rm -rf\n",
  "label": 0
 },
 {
  "idx": 2170,
  "doc": "Is there a way to sandbox test execution with pytest, especially filesystem access?",
  "code": "docker run --rm -it -v `pwd`:/home/pytest pytest [USUAL_PYTEST_OPTIONS]\n",
  "label": 0
 },
 {
  "idx": 2171,
  "doc": "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)",
  "code": "a\nb\nc\nd\ne\n...\ny\nz\naa\nab\nac\n...\nay\naz\nba\nbb\n",
  "label": 0
 },
 {
  "idx": 2172,
  "doc": "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)",
  "code": "for s in itertools.islice(iter_all_strings(), 54):\n    print s\n",
  "label": 0
 },
 {
  "idx": 2173,
  "doc": "remove newline and whitespace parse XML with python Xpath",
  "code": "xml.xpath(\"//ns:title[text()='dive into mark']\", namespaces=ns)\n",
  "label": 0
 },
 {
  "idx": 2174,
  "doc": "Python: Keep track of current column in text file",
  "code": "start_col = 5\nfor i,col in enumerate(fields[start_col:], start_col):\n    ....\n",
  "label": 1
 },
 {
  "idx": 2175,
  "doc": "Python unittesting: Test whether two angles are almost equal",
  "code": "from math import sin, cos, acos\nfrom unittest import assertAlmostEqual        \n\ndef assertAlmostEqualAngles(x, y, **kwargs):\n    c2 = (sin(x)-sin(y))**2 + (cos(x)-cos(y))**2\n    angle_diff = acos((2.0 - c2)/2.0) # a = b = 1\n    assertAlmostEqual(angle_diff, 0.0, **kwargs)\n",
  "label": 1
 },
 {
  "idx": 2176,
  "doc": "Python - Plot function over a range PYPLOT",
  "code": "import math\ndef function(x, A, B):\n    return math.exp(A*x) * math.sin(B*x)\n",
  "label": 0
 },
 {
  "idx": 2177,
  "doc": "python - remove empty lines from end and beginning of string",
  "code": ">>> strip_empty_lines('''\\\n... \n... \n... \n... \n...         some indentation here\n... \n... lorem ipsum\n... \n... \n... ''')\n'        some indentation here\\n\\nlorem ipsum'\n>>> strip_empty_lines('''\\\n... \\t  \\t\n...     \\n\n...         some indentation here\n... \n... lorem ipsum\n... \n... ''')\n'        some indentation here\\n\\nlorem ipsum'\n",
  "label": 0
 },
 {
  "idx": 2178,
  "doc": "Numpy mean AND variance from single function?",
  "code": "In [329]: a = np.random.rand(1000)\n\nIn [330]: %%timeit\n   .....: a.mean()\n   .....: a.var()\n   .....: \n10000 loops, best of 3: 80.6 \u00b5s per loop\n\nIn [331]: %%timeit\n   .....: m = a.mean()\n   .....: np.mean((a-m)**2)\n   .....: \n10000 loops, best of 3: 60.9 \u00b5s per loop\n\nIn [332]: m = a.mean()\n\nIn [333]: a.var()\nOut[333]: 0.078365856465916137\n\nIn [334]: np.mean((a-m)**2)\nOut[334]: 0.078365856465916137\n",
  "label": 1
 },
 {
  "idx": 2179,
  "doc": "Load all third party scripts using requests or mechanize in Python",
  "code": "from bs4 import BeautifulSoup\nimport requests\n\nresp = requests.get(\"http://www.yahoo.com\")\n\nsoup = BeautifulSoup(resp.text)\n\n# Pull the linked images (note: will grab base64 encoded images) \nimages = [img['src'] for img in soup.findAll('img') if img.has_key('src')]\n\n# Checking for src ensures that we don't grab the embedded scripts\nscripts = [script['src'] for script in soup.findAll('script') if script.has_key('src')]\n\n# favicon.ico and css\nlinks = [link['href'] for link in soup.findAll('link') if link.has_key('href')]\n",
  "label": 1
 },
 {
  "idx": 2180,
  "doc": "Specifying types and patterns using argparse choices",
  "code": "import os\nimport argparse\n\ndef intOrUnderscore(s):\n    if s != '_':\n        return int(s)\n    cases = (n for n in os.listdir(\".\") if n.startswith(\"file.\"))\n    return max(int(c[c.rindex(\".\")+1:]) for c in cases)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('case', type=intOrUnderscore)\n\nargs = parser.parse_args()\nprint args.case\n",
  "label": 1
 },
 {
  "idx": 2181,
  "doc": "finding nearest points in python",
  "code": "import numpy as np\n\nC = [[1,1], [10,10]]\nX = [[1,2], [1,3], [2,1], [10,11], [10,12], [11,11], [12,11], [9,11]]\n\ndef F(C,X):\n    Carr = np.array(C)\n    Xarr = np.array(X)\n    distances = [np.sum( (Xarr - Carr[i])**2, axis=1) for i in range(len(C))]\n    closests = np.argmin( np.array(distances), axis=0 )\n    return list( np.bincount(closests) )\n\nprint(F(C,X))\n",
  "label": 1
 },
 {
  "idx": 2182,
  "doc": "python matplotlib plot sparse matrix pattern",
  "code": "import numpy as np\nfrom scipy.sparse import coo_matrix\n\nshape = (100000, 100000)\nrows = np.int_(np.round_(shape[0]*np.random.random(1000)))\ncols = np.int_(np.round_(shape[1]*np.random.random(1000)))\nvals = np.ones_like(rows)\n\nm = coo_matrix((vals, (rows, cols)), shape=shape)\nax = plot_coo_matrix(m)\nax.figure.show()\n",
  "label": 0
 },
 {
  "idx": 2183,
  "doc": "python matplotlib plot sparse matrix pattern",
  "code": "import matplotlib.pyplot as plt\nfrom scipy.sparse import coo_matrix\n\ndef plot_coo_matrix(m):\n    if not isinstance(m, coo_matrix):\n        m = coo_matrix(m)\n    fig = plt.figure()\n    ax = fig.add_subplot(111, axisbg='black')\n    ax.plot(m.col, m.row, 's', color='white', ms=1)\n    ax.set_xlim(0, m.shape[1])\n    ax.set_ylim(0, m.shape[0])\n    ax.set_aspect('equal')\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    ax.invert_yaxis()\n    ax.set_aspect('equal')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    return ax\n",
  "label": 1
 },
 {
  "idx": 2184,
  "doc": "Python: separate list of values into x number of sections, and give each value in x a variable",
  "code": ">>> nums = [1, 2, 3, 4, 5, 6, 7, 8]\n>>> colors = ['red', 'green', 'orange', 'blue']\n>>> chunks = 4\n>>> for i,num in enumerate(nums):\n    print(\"%s:%s\"%(num,colors[i*chunks//len(nums)%len(colors)]))\n1:red\n2:red\n3:green\n4:green\n5:orange\n6:orange\n7:blue\n8:blue\n",
  "label": 1
 },
 {
  "idx": 2185,
  "doc": "Python: separate list of values into x number of sections, and give each value in x a variable",
  "code": "colors[i*chunks//len(nums)%len(colors)]\n       ^                              index of num in nums\n        ^      ^                      multiply by chunks then later dividing by len is the\n                                      same as dividing by len/chunks\n               ^                      explicit integer divide is important for indexing\n                          ^           ensures that there is no index error if \n                                      chunks>len(colors) (check example)\n",
  "label": 0
 },
 {
  "idx": 2186,
  "doc": "list comprehension on multiple lists of lists",
  "code": "[\n    [my_operation(x,y) for x,y in zip(xs, ys)]\n    for xs, ys in zip(a, b)\n]\n",
  "label": 1
 },
 {
  "idx": 2187,
  "doc": "Reorder a dictionary to fit a data frame",
  "code": "      name    link\n0   Name 1   link0\n1   Name 1   link1\n2   Name 1   link2\n3   Name 1   link3\n4   Name 1   link4\n5   Name 1   link5\n6   Name 1   link6\n7   Name 1   link7\n8   Name 1   link8\n9   Name 1   link9\n10  Name 2  link10\n11  Name 2  link11\n12  Name 2  link12\n13  Name 2  link13\n14  Name 2  link14\n15  Name 2  link15\n16  Name 2  link16\n17  Name 2  link17\n18  Name 2  link18\n19  Name 2  link19\n",
  "label": 0
 },
 {
  "idx": 2188,
  "doc": "How to find the all text files from the path and combine all the lines in that text files to one text file",
  "code": "with open('output.txt', 'w+b') as f1:\n    all_files_as_one_string = ' '.join(file_contents)\n    f1.write(all_files_as_one_string)\n",
  "label": 0
 },
 {
  "idx": 2189,
  "doc": "Convert Python dict to object?",
  "code": ">>> from collections import namedtuple\n>>> MyStruct = namedtuple('MyStruct', 'a b d')\n>>> s = MyStruct(a=1, b={'c': 2}, d=['hi'])\n>>> s\nMyStruct(a=1, b={'c': 2}, d=['hi'])\n>>> s.a\n1\n>>> s.b\n{'c': 2}\n>>> s.c\n>>> s.d\n['hi']\n",
  "label": 1
 },
 {
  "idx": 2190,
  "doc": "python multiprocessing dynamically created processes and pipes",
  "code": "for proc, conn in allprocs:\n    # do something with the process or pipe.\n",
  "label": 0
 },
 {
  "idx": 2191,
  "doc": "python multiprocessing dynamically created processes and pipes",
  "code": "allprocs = [mkproc(f) for f in (foo, bar, baz)]\n",
  "label": 0
 },
 {
  "idx": 2192,
  "doc": "Python pandas idxmax for multiple indexes in a dataframe",
  "code": "            DeliveryCount  DeliveryNb\nDate                                 \n2007-04-26             23         706\n2007-04-27             10         705\n2007-04-27           1089         708\n2007-04-27             82         450\n2007-04-27             34         283\n2007-04-28            100          45\n2007-04-28             11          89\n",
  "label": 0
 },
 {
  "idx": 2193,
  "doc": "Python pandas idxmax for multiple indexes in a dataframe",
  "code": "def func(df):\n    idx = df.reset_index()['DeliveryCount'].idxmax()\n    return df['DeliveryNb'].iloc[idx]\n",
  "label": 0
 },
 {
  "idx": 2194,
  "doc": "Python: Extracting specific data with html parser",
  "code": "from HTMLParser import HTMLParser\n\n\nclass AllLanguages(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.inLink = False\n        self.dataArray = []\n        self.countLanguages = 0\n        self.lasttag = None\n        self.lastname = None\n        self.lastvalue = None\n\n    def handle_starttag(self, tag, attrs):\n        self.inLink = False\n        if tag == 'a':\n            for name, value in attrs:\n                if name == 'class' and value == 'Vocabulary':\n                    self.countLanguages += 1\n                    self.inLink = True\n                    self.lasttag = tag\n\n    def handle_endtag(self, tag):\n        if tag == \"a\":\n            self.inlink = False\n\n    def handle_data(self, data):\n        if self.lasttag == 'a' and self.inLink and data.strip():\n            print data\n\n\nparser = AllLanguages()\nparser.feed(\"\"\"\n<html>\n<head><title>Test</title></head>\n<body>\n<a href=\"http://wold.livingsources.org/vocabulary/1\" title=\"Swahili\" class=\"Vocabulary\">Swahili</a>\n<a href=\"http://wold.livingsources.org/contributor#schadebergthilo\" title=\"Thilo Schadeberg\" class=\"Contributor\">Thilo Schadeberg</a>\n<a href=\"http://wold.livingsources.org/vocabulary/2\" title=\"English\" class=\"Vocabulary\">English</a>\n<a href=\"http://wold.livingsources.org/vocabulary/2\" title=\"Russian\" class=\"Vocabulary\">Russian</a>\n</body>\n</html>\"\"\")\n",
  "label": 1
 },
 {
  "idx": 2195,
  "doc": "Loops to minimize function of arrays in python",
  "code": ">>> import numpy as np\n>>> X = [5, 7, 9, 5]\n>>> Y = [2, 0, 4, 1]\n>>> Z = [7, 2, 4, 6]\n>>> A = np.array([Y, Z, [1] * len(X)]).transpose()\n>>> a, b, mean = np.linalg.lstsq(A, X)[0]\n>>> print(a, b, mean)\n0.860082304527 -0.736625514403 8.49382716049\n",
  "label": 1
 },
 {
  "idx": 2196,
  "doc": "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?",
  "code": "set_cycles = set(cycles(a))\nb in set_cycles\n",
  "label": 0
 },
 {
  "idx": 2197,
  "doc": "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?",
  "code": "b in cycles(a)\n",
  "label": 0
 },
 {
  "idx": 2198,
  "doc": "Python list to txt",
  "code": "def random_grid(file):\n    grid = []\n    num_rows = raw_input(\"How many raws would you like in your grid? \")\n    num_columns = raw_input(\"How many columns would you like in your grid? \")\n    min_range = raw_input(\"What is the minimum number you would like in your grid? \")\n    max_range = raw_input(\"what is the maximum number you would like in your grid? \")\n    for row in range(int(num_rows)):\n        grid.append([])\n        for column in range(int(num_columns)):\n            grid[row].append(random.randint((int(min_range)),(int(max_range))))    \n    x = \"\"\n    for row in grid:\n        x += (' '.join([str(x) for x in row])) + \"\\n\" \n        print x\n\n    with open(r\"test.txt\", 'w') as text_file:\n        text_file.write(x)\n",
  "label": 1
 },
 {
  "idx": 2199,
  "doc": "Python list to txt",
  "code": "def random_grid(file):\n    grid = []\n    num_rows = raw_input(\"How many raws would you like in your grid? \")\n    num_columns = raw_input(\"How many columns would you like in your grid? \")\n    min_range = raw_input(\"What is the minimum number you would like in your grid? \")\n    max_range = raw_input(\"what is the maximum number you would like in your grid? \")\n    for row in range(int(num_rows)):\n        grid.append([])\n        for column in range(int(num_columns)):\n            grid[row].append(random.randint((int(min_range)),(int(max_range))))         \n    for row in grid:\n        x = (' '.join([str(x) for x in row])) \n        print x\n\n        with open(r\"test.txt\", 'a') as text_file:\n            text_file.write(x)\n            text_file.write(\"\\n\")\n",
  "label": 1
 },
 {
  "idx": 2200,
  "doc": "How can I group objects by their date in Django?",
  "code": "class Article(object):\n    def __init__(self, pub_date):\n        self.pub_date = pub_date\n\n\nif __name__ == '__main__':\n    from datetime import date\n    import itertools\n    import operator\n\n    # You'll use your Article query here instead:\n    # a_list = Article.objects.filter(pub_date__lte = date.today())\n    a_list = [\n        Article(date(2010, 1, 2)),\n        Article(date(2010, 2, 3)),\n        Article(date(2010, 1, 2)),\n        Article(date(2011, 3, 2)),\n    ]\n\n\n    keyfunc = operator.attrgetter('pub_date')\n\n    a_list = sorted(a_list, key = keyfunc)\n    group_list = [{ k.strftime('%Y-%m-%d') : list(g)} \n                  for k, g in itertools.groupby(a_list, keyfunc)]\n\n    print group_list\n",
  "label": 1
 },
 {
  "idx": 2201,
  "doc": "Converting date using to_datetime",
  "code": "In [303]:\ndf['date'] = pd.to_datetime(df['year'].astype(str) + df['month'].astype(str).str.zfill(2), format='%Y%m')\ndf\n\nOut[303]:\n   year  month       pl       date\n0  2010      1  27.4376 2010-01-01\n1  2010      2  29.2314 2010-02-01\n2  2010      3  33.5714 2010-03-01\n3  2010      4  37.2986 2010-04-01\n4  2010      5  36.6971 2010-05-01\n5  2010      6  35.9329 2010-06-01\n",
  "label": 1
 },
 {
  "idx": 2202,
  "doc": "Pygame- Sprite set position with mouseclick",
  "code": "#TODO: respect naming convention\nclass sprite_to_place(pygame.sprite.Sprite):\n    # you can use a single parameter instead of two\n    def __init__(self, pos):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"a_picture.png\")\n        # you can pass the position directly to get_rect to set it's position\n        self.rect = self.image.get_rect(topleft=pos)\n        # I don't know if you actually need this\n        self.start_pos = pos\n",
  "label": 0
 },
 {
  "idx": 2203,
  "doc": "Read a number in a word from a file in python",
  "code": "all_numbers = [int(x) for x in all_numbers]\n# This will return [2, 1]\n",
  "label": 0
 },
 {
  "idx": 2204,
  "doc": "Changing color TabbedPannelHeader in Kivy",
  "code": "from functools import partial\nimport rotinas\nWindow.clearcolor = (1, 1, 1, 1) <-----\nimport sqlite3 as sql\nfrom datetime import *\n",
  "label": 0
 },
 {
  "idx": 2205,
  "doc": "Map function and input function parameters",
  "code": "def wrapping_function(k):\n    return add_x_to_input(some_value_for_x, k)\n\nmap(wrapping_function, myList)\n",
  "label": 1
 },
 {
  "idx": 2206,
  "doc": "pandas multiindex assignment from another dataframe",
  "code": "df.loc['A', :] = df_\n",
  "label": 0
 },
 {
  "idx": 2207,
  "doc": "Execute code when extending a class in Python",
  "code": ">>> Base.subclasses\n{'Extend1': __main__.Extend1, 'Extend2': __main__.Extend2}\n",
  "label": 0
 },
 {
  "idx": 2208,
  "doc": "Execute code when extending a class in Python",
  "code": "class Base(object):\n    __metaclass__ = Meta\n\n    subclasses = {}\n\n    @classmethod\n    def extending(cls, subclass):\n        cls.subclasses[subclass.__name__] = subclass\n\nclass Extend1(Base):\n    pass\n\nclass Extend2(Base):\n    pass\n",
  "label": 0
 },
 {
  "idx": 2209,
  "doc": "Array from interpolated plot in python",
  "code": "upsample_factor = 2\nc = b(np.linspace(0,x,x*upsample), np.linspace(0,y,y*upsample))\n",
  "label": 0
 },
 {
  "idx": 2210,
  "doc": "Import .py files with punctuation before extension",
  "code": "import imp\nmy_module = imp.load_source('my_module', 'strange.name-1.py')\n",
  "label": 1
 },
 {
  "idx": 2211,
  "doc": "Import .py files with punctuation before extension",
  "code": "import importlib\nmy_module = importlib.import_module('4-1')\n",
  "label": 1
 },
 {
  "idx": 2212,
  "doc": "Python: converting a nested list into a simple list with coord positions",
  "code": "output = []\nfor z,l1 in enumerate(l[::-1]):\n    for y, l2 in enumerate(l1):\n        for x, v in enumerate(l2.split(',')):\n            output.append((x, y, z, v))\n",
  "label": 1
 },
 {
  "idx": 2213,
  "doc": "Python: converting a nested list into a simple list with coord positions",
  "code": "l = [['g,g', 'g,g'], ['d,d', 'd,d,d', 'd,d'], ['s,s', 's,s']]\noutput = [ (x, y, z, v) for z, l1 in enumerate(l[::-1]) for y, l2 in enumerate(l1) for x, v in enumerate(l2.split(',')) ]\n",
  "label": 1
 },
 {
  "idx": 2214,
  "doc": "What's the most efficient way to accumulate dataframes in pyspark?",
  "code": "from itertools import chain\nfrom functools import reduce\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.functions import col, lit, max\nfrom pyspark.sql import DataFrame\n\ndf1 = sc.parallelize([\n    (\"U1\", 0, 1), (\"U2\", 1, 1)\n]).toDF([\"Key\", \"FeatureA\", \"FeatureB\"])\n\ndf2 = sc.parallelize([\n  (\"U1\", 0, 0, 1)\n]).toDF([\"Key\", \"FeatureC\", \"FeatureD\", \"FeatureE\"])\n\ndf3 = sc.parallelize([(\"U2\", 1)]).toDF([\"Key\", \"FeatureF\"])\n\ndfs = [df1, df2, df3]\n",
  "label": 0
 },
 {
  "idx": 2215,
  "doc": "Remove double and single square brackets from text file generated from python",
  "code": "s = \"[[ hello] [there]]\"\ns = s.replace(\"[\", \"\")\ns = s.replace(\"]\", \"\")\n",
  "label": 1
 },
 {
  "idx": 2216,
  "doc": "Extracting a feature by feature name in scikit dict vectorizer",
  "code": ">>> v.feature_names_\n['bar', 'baz', 'foo']\n",
  "label": 0
 },
 {
  "idx": 2217,
  "doc": "Extracting a feature by feature name in scikit dict vectorizer",
  "code": ">>> v.inverse_transform(X[i])\n",
  "label": 0
 },
 {
  "idx": 2218,
  "doc": "Extracting a feature by feature name in scikit dict vectorizer",
  "code": ">>> v.inverse_transform(X[i][None, :])\n",
  "label": 0
 },
 {
  "idx": 2219,
  "doc": "Python regular expression: get result without the search string used",
  "code": ">>> import re\n>>> s = \"\"\"[AC 2 StartTime 3.29 s   32912KB -> 27720KB   24.54 ms]\n[AC 3 StartTime 3.35 s   39404KB -> 36252KB   11.05 ms]\n[AC 4 StartTime 3.55 s   44592KB -> 39316KB   1.91 ms]\"\"\"\n>>> re.findall(r\"StartTime (\\d\\.\\d{2})\", s)\n['3.29', '3.35', '3.55']\n",
  "label": 1
 },
 {
  "idx": 2220,
  "doc": "Copy 2D array to a 3D one - Python / NumPy",
  "code": "H = data.reshape(N,Nt,N).swapaxes(1,2)\n",
  "label": 1
 },
 {
  "idx": 2221,
  "doc": "Copy 2D array to a 3D one - Python / NumPy",
  "code": "H = data.reshape(N,Nt,N).transpose(0,2,1)\n",
  "label": 1
 },
 {
  "idx": 2222,
  "doc": "python tkinter calender, placing the numbers",
  "code": "import math\n\n# Initialize the calendar matrix\ncal = []\nfor i in range(5): # 5 weeks\n    cal.append([])\n    for j in range(7): # 7 days per week\n        cal[i].append('')\n\n# Set the calendar for some month\nstart = 3 # Wed\nfor day in range(31):\n    row = math.floor( (day+start) / 7)\n    col = (day+start) - 7*row\n    cal[row][col] = str(day+1)\n\nprint(cal)\n",
  "label": 1
 },
 {
  "idx": 2223,
  "doc": "Python removing duplicates in list and 1==1.0 True",
  "code": "In [16]: from collections import OrderedDict\n\nIn [17]: [value for _, value in OrderedDict.fromkeys((type(x), x) for x in l)]\nOut[17]: ['asd', 'dsa', 1, '1', 1.0]\n",
  "label": 1
 },
 {
  "idx": 2224,
  "doc": "python dictionary values sorting",
  "code": "dict1 = {\"a\":0.6, \"b\":0.3, \"c\":0.9, \"d\":1.2, \"e\":0.2}\ndict2 = {\"a\":1.4, \"b\":7.7, \"c\":9.0, \"d\":2.5, \"e\":2.0}\nk1 = sorted(dict1, key=dict1.get)\nk2 = sorted(dict2, key=dict2.get)\ndiffs = dict((k, k2.index(k) - k1.index(k)) for k in dict1)\n",
  "label": 1
 },
 {
  "idx": 2225,
  "doc": "Sort individual components of a list in python",
  "code": ">>> d2.T\narray([[ 0.17 ,  0.28 ,  0.31 ,  0.32 ,  0.36 ,  0.62 ],\n       [ 0.02 ,  0.045,  0.1  ,  0.12 ,  0.19 ,  0.42 ],\n       [ 0.01 ,  0.03 ,  0.09 ,  0.19 ,  0.26 ,  0.38 ]])\n>>> for row in d2.T:\n...     print(row)\n...     \n[ 0.17  0.28  0.31  0.32  0.36  0.62]\n[ 0.02   0.045  0.1    0.12   0.19   0.42 ]\n[ 0.01  0.03  0.09  0.19  0.26  0.38]\n",
  "label": 0
 },
 {
  "idx": 2226,
  "doc": "Sort individual components of a list in python",
  "code": ">>> d\narray([[ 0.17 ,  0.045,  0.01 ],\n       [ 0.28 ,  0.1  ,  0.19 ],\n       [ 0.31 ,  0.19 ,  0.09 ],\n       [ 0.36 ,  0.42 ,  0.38 ],\n       [ 0.62 ,  0.02 ,  0.03 ],\n       [ 0.32 ,  0.12 ,  0.26 ]])\n>>> d2 = d.copy()\n>>> d2.sort(axis=0)\n>>> d2\narray([[ 0.17 ,  0.02 ,  0.01 ],\n       [ 0.28 ,  0.045,  0.03 ],\n       [ 0.31 ,  0.1  ,  0.09 ],\n       [ 0.32 ,  0.12 ,  0.19 ],\n       [ 0.36 ,  0.19 ,  0.26 ],\n       [ 0.62 ,  0.42 ,  0.38 ]])\n",
  "label": 0
 },
 {
  "idx": 2227,
  "doc": "Getting stats about each row and putting them into a new column. Pandas",
  "code": "df['unique'] = df[['x','y','z']].T.apply(lambda x: x.nunique())\n",
  "label": 1
 },
 {
  "idx": 2228,
  "doc": "Getting stats about each row and putting them into a new column. Pandas",
  "code": "df['count of not x'] = (~df[['y','z']].isin(df['x'])).sum(1)\n",
  "label": 1
 },
 {
  "idx": 2229,
  "doc": "Creating multiple csv files from data within a csv file",
  "code": "$ cat file_L1.csv\nEXAMPLEfoo,60,6\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,6\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n$ cat file_L2.csv\nEXAMPLEfoo,60,0\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,0\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n$ cat file_L11.csv\nEXAMPLEfoo,60,0\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,0\nEXAMPLE3,60,0\nEXAMPLE4,30,6\n",
  "label": 0
 },
 {
  "idx": 2230,
  "doc": "Creating multiple csv files from data within a csv file",
  "code": "awk -F, -vOFS=, -vc=1 '\n    NR == 1 {\n        for (i=1; i<NF; i++) {\n            if ($i != \"\") {\n                g[c]=i;\n                f[c++]=$i\n            }\n        }\n    }\n    NR>2 {\n        for (i=1; i < c; i++) {\n            print $1,$2, $g[i] > \"output_\"f[i]\".csv\"\n        }\n    }' data.csv\n",
  "label": 1
 },
 {
  "idx": 2231,
  "doc": "Insertions algorithm in sequence python",
  "code": "[(11, '999'), (8, '888'), (7, '777'), (15, '666'), (12, '555'), (11, '444'), (0, '333'), (0, '222'), (15, '111')]\n[(0, '333'), (0, '222'), (7, '777'), (8, '888'), (11, '999'), (11, '444'), (12, '555'), (15, '666'), (15, '111')]\ninsert 111 into 15\n123456789123456111789\ninsert 666 into 15\n123456789123456666111789\ninsert 555 into 12\n123456789123555456666111789\ninsert 444 into 11\n123456789124443555456666111789\ninsert 999 into 11\n123456789129994443555456666111789\ninsert 888 into 8\n123456788889129994443555456666111789\ninsert 777 into 7\n123456777788889129994443555456666111789\ninsert 222 into 0\n222123456777788889129994443555456666111789\ninsert 333 into 0\n333222123456777788889129994443555456666111789\n",
  "label": 0
 },
 {
  "idx": 2232,
  "doc": "Insertions algorithm in sequence python",
  "code": "import random\nimport operator\n\n# Easier to use a mutable list than an immutable string for insertion.\nsequence = list('123456789123456789')\ninsertions = '999 888 777 666 555 444 333 222 111'.split()\nlocations = [random.randrange(len(sequence)) for i in xrange(10)]\nmodifications = zip(locations,insertions)\nprint modifications\n# sort them by location.\n# Since Python 2.2, sorts are guaranteed to be stable,\n# so if you insert 999 into 1, then 222 into 1, this will keep them\n# in the right order\nmodifications.sort(key=operator.itemgetter(0))\nprint modifications\n# apply in reverse order\nfor i,seq in reversed(modifications):\n    print 'insert {} into {}'.format(seq,i)\n    # Here's where using a mutable list helps\n    sequence[i:i] = list(seq)\n    print ''.join(sequence)\n",
  "label": 1
 },
 {
  "idx": 2233,
  "doc": "Create a Series from a Pandas DataFrame by choosing an element from different columns on each row",
  "code": "In [21]: pred.apply(lambda row: row.loc[useProb.loc[row.name]], axis=1)\nOut[21]:\nTimestamp\n2010-12-21 00:00:00    0\n2010-12-20 00:00:00    1\n2010-12-17 00:00:00    1\n2010-12-16 00:00:00    1\n2010-12-15 00:00:00    1\n2010-12-14 00:00:00    1\n2010-12-13 00:00:00    0\n2010-12-10 00:00:00    1\n2010-12-09 00:00:00    1\n2010-12-08 00:00:00    0\ndtype: int64\n",
  "label": 1
 },
 {
  "idx": 2234,
  "doc": "Create a Series from a Pandas DataFrame by choosing an element from different columns on each row",
  "code": "In [11]: (pd.get_dummies(useProb) * pred).sum(axis=1)\nOut[11]:\nTimestamp\n2010-12-21 00:00:00    0\n2010-12-20 00:00:00    1\n2010-12-17 00:00:00    1\n2010-12-16 00:00:00    1\n2010-12-15 00:00:00    1\n2010-12-14 00:00:00    1\n2010-12-13 00:00:00    0\n2010-12-10 00:00:00    1\n2010-12-09 00:00:00    1\n2010-12-08 00:00:00    0\ndtype: float64\n",
  "label": 1
 },
 {
  "idx": 2235,
  "doc": "How to replace all words in a series with a few specified words in Pandas,Python?",
  "code": "Df['Description'].str.replace('macbook air 11.*' , 'macbook air 11')\n",
  "label": 1
 },
 {
  "idx": 2236,
  "doc": "How to replace all words in a series with a few specified words in Pandas,Python?",
  "code": "from fuzzywuzzy.fuzz import partial_ratio\nDf['Description'].apply(lambda x: max(topics, key=lambda t: partial_ratio(x, t)))\n",
  "label": 1
 },
 {
  "idx": 2237,
  "doc": "How many times is a particular row present?",
  "code": "In [41]: hashed.drop_duplicates().map(hashed.value_counts())\nOut[41]: \n0    3\n3    1\n4    2\ndtype: int64\n",
  "label": 0
 },
 {
  "idx": 2238,
  "doc": "How many times is a particular row present?",
  "code": "In [37]: df = DataFrame({'A' : [1,1,1,2,3,3], 'B' : [2,2,2,2,3,3]})\n\nIn [38]: df\nOut[38]: \n   A  B\n0  1  2\n1  1  2\n2  1  2\n3  2  2\n4  3  3\n5  3  3\n",
  "label": 0
 },
 {
  "idx": 2239,
  "doc": "Multiple Database Config in Django 1.2",
  "code": "from django.db import connections\n\nclass DBRouter(object):\n    \"\"\"A router to control all database operations on models in\n    the contrib.auth application\"\"\"\n\n    def db_for_read(self, model, **hints):\n        m = model.__module__.split('.')\n        try:\n            d = m[-1]\n            if d in connections:\n                return d\n        except IndexError:\n            pass\n        return None\n\n    def db_for_write(self, model, **hints):\n        m = model.__module__.split('.')\n        try:\n            d = m[-1]\n            if d in connections:\n                return d\n        except IndexError:\n            pass\n        return None\n\n    def allow_syncdb(self, db, model):\n        \"Make sure syncdb doesn't run on anything but default\"\n        if model._meta.app_label == 'myapp':\n            return False\n        elif db == 'default':\n            return True\n        return None\n",
  "label": 0
 },
 {
  "idx": 2240,
  "doc": "How to execute and save result of an OS command to a file",
  "code": "from subprocess import check_call, STDOUT, CalledProcessError, call\n\nwith open(\"stdout.txt\",\"w\") as f, open(\"stderr.txt\",\"w\") as f2:\n    try:\n        check_call(['ls', '-l'], stdout=f, stderr=f2)\n    except CalledProcessError as e:\n        print(e.message)\n",
  "label": 1
 },
 {
  "idx": 2241,
  "doc": "How to execute and save result of an OS command to a file",
  "code": "from subprocess import check_call, STDOUT, CalledProcessError\n\nwith open(\"out.txt\",\"w\") as f:\n    try:\n        check_call(['ls', '-l'], stdout=f, stderr=STDOUT)\n    except CalledProcessError as e:\n        print(e.message)\n",
  "label": 1
 },
 {
  "idx": 2242,
  "doc": "Joining Subsequent List Elements - Python",
  "code": ">>> a = ['AA', 'BB', 'C', 'D']\n>>> a[0] += a.pop(1)\n",
  "label": 1
 },
 {
  "idx": 2243,
  "doc": "Joining Subsequent List Elements - Python",
  "code": "a = ['AA', 'BB', 'C', 'D']\noutList = a[:] # make a copy of list values\noutList[0] += outputList.pop(1)\n",
  "label": 1
 },
 {
  "idx": 2244,
  "doc": "student t confidence interval in python",
  "code": "In [1]: from scipy.stats import t\nIn [2]: t.interval(0.95, 10, loc=1, scale=2)  # 95% confidence interval\nOut[2]: (-3.4562777039298762, 5.4562777039298762)\nIn [3]: t.interval(0.99, 10, loc=1, scale=2)  # 99% confidence interval\nOut[3]: (-5.338545334351676, 7.338545334351676)\n",
  "label": 1
 },
 {
  "idx": 2245,
  "doc": "Best way to make a counter based on time",
  "code": ">>> a = make_ticker()\n>>> a()\n3.3126659393310547\n>>> a()\n5.144495010375977\n>>> a()\n7.766999006271362\n",
  "label": 0
 },
 {
  "idx": 2246,
  "doc": "Speeding up linear interpolation of many pixel locations in NumPy",
  "code": "# rest as before\nfrom scipy import ndimage\ntic = time.time()\nnew_result = np.zeros(im.shape)\ncoords = np.array([yy,xx,np.zeros(im.shape[:2])])\nfor d in range(im.shape[2]):\n    new_result[:,:,d] = ndimage.map_coordinates(im,coords,order=1)\n    coords[2] += 1\ntoc = time.time()\nprint \"interpolation time:\",toc-tic\n",
  "label": 1
 },
 {
  "idx": 2247,
  "doc": "Customizing time of the datetime object in python",
  "code": "from datetime import datetime\nfrom dateutil import relativedelta\n\norig_start = datetime.now()\norig_end = datetime.now() + relativedelta.relativedelta(months=1)\n\nprint(orig_start)\nprint(orig_end)\n\nmod_start = datetime(year=orig_start.year,\n                     month=orig_start.month,\n                     day=orig_start.day,\n                     hour=0, minute=0, second=0)\n\nmod_end = datetime(year=orig_end.year,\n                   month=orig_end.month,\n                   day=orig_end.day,\n                   hour=23, minute=59, second=59)\n\n# or even better as suggested in the comments:\nmod_end = orig_end.replace(hour=23, minute=59, second=59, microsecond=0)\n\nprint(mod_start)\nprint(mod_end)\n",
  "label": 1
 },
 {
  "idx": 2248,
  "doc": "Making an object's attributes iterable",
  "code": ">>> class A:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n... \n>>> a = A(1, 2)\n>>> vars(a)\n{'a': 1, 'b': 2}\n>>> for attribute in vars(a).keys():\n...     print '%s = %s' % (attribute, str(getattr(a, attribute)))\n... \na = 1\nb = 2\n",
  "label": 1
 },
 {
  "idx": 2249,
  "doc": "tokenizing and parsing with python",
  "code": "data = {}\nwith open('file.txt', 'r') as f:\n    header, *descriptions = f.read().split('\\n\\n')\n    for line in header.split('\\n'):\n        key, value = line.split(' : ')\n        data[key.lower()] = value.rstrip()\n    for description in descriptions:\n        key, value = description.split('\\n', 1)\n        data[key[1:]] = value\nprint(data)\n",
  "label": 1
 },
 {
  "idx": 2250,
  "doc": "Truncate the length of a Python dictionary",
  "code": "# can't use .iteritems() as you can't/shouldn't modify something while iterating it\nto_remove = d.keys()[500:] # slice off first 500 keys\nfor key in to_remove:\n    del d[key]\n",
  "label": 1
 },
 {
  "idx": 2251,
  "doc": "Sun Grid Engine, force one job per node",
  "code": "qconf -rattr exechost complex_values exclusive=1 <nodename>\n",
  "label": 0
 },
 {
  "idx": 2252,
  "doc": "Sun Grid Engine, force one job per node",
  "code": "qrsh -l exclusive=1 <myjob>\n",
  "label": 0
 },
 {
  "idx": 2253,
  "doc": "Open txt file, skip first lines and then monitor a given column of data",
  "code": "inputFile = open(path,'r')\nfor n, line in enumerate(inputFile):\n    if n > given_number:\n       variableX = line.split(' ')[5]\ninputFile.close()\n",
  "label": 0
 },
 {
  "idx": 2254,
  "doc": "Summarizing inside a Django template",
  "code": "<td>{% documento.cuentasxdocumento_set.all | sum_monto:\"pos\" %}</td>\n<td>{% documento.cuentasxdocumento_set.all | sum_monto:\"neg\" %}</td>\n",
  "label": 0
 },
 {
  "idx": 2255,
  "doc": "Indexing pandas dataframe to return first data point from each day",
  "code": "import pandas as pd\ndata = '''\\\n2013-01-01 01:00\n2013-01-01 05:00\n2013-01-01 14:00\n2013-01-02 01:00\n2013-01-02 05:00\n2013-01-04 14:00'''\ndates = pd.to_datetime(data.splitlines())\ndf = pd.DataFrame({'date': dates, 'val': range(len(dates))})\n\n>>> df\n                 date  val\n0 2013-01-01 01:00:00    0\n1 2013-01-01 05:00:00    1\n2 2013-01-01 14:00:00    2\n3 2013-01-02 01:00:00    3\n4 2013-01-02 05:00:00    4\n5 2013-01-04 14:00:00    5\n",
  "label": 0
 },
 {
  "idx": 2256,
  "doc": "Average on overlapping windows in Python",
  "code": ">>> range(0, len(data), 2)\n[0, 2, 4, 6, 8]\n",
  "label": 0
 },
 {
  "idx": 2257,
  "doc": "Pyramid authorization for stored items",
  "code": "/foos/{obj}\n/bars/{obj}\n",
  "label": 0
 },
 {
  "idx": 2258,
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "import unittest\nclass VigTestCase(unittest.TestCase):\n    def test_vigenere(self):\n        self.assertEqual(vigenere('L', 'G'), 'R')\n    def test_vigsquare(self):\n        self.assertEqual(vigsquare(printable=False), 'ABCDEFGHIJKLMNOPQRSTUVWXYZBCDEFGHIJKLMNOPQRSTUVWXYZACDEFGHIJKLMNOPQRSTUVWXYZABDEFGHIJKLMNOPQRSTUVWXYZABCEFGHIJKLMNOPQRSTUVWXYZABCDFGHIJKLMNOPQRSTUVWXYZABCDEGHIJKLMNOPQRSTUVWXYZABCDEFHIJKLMNOPQRSTUVWXYZABCDEFGIJKLMNOPQRSTUVWXYZABCDEFGHJKLMNOPQRSTUVWXYZABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJLMNOPQRSTUVWXYZABCDEFGHIJKMNOPQRSTUVWXYZABCDEFGHIJKLNOPQRSTUVWXYZABCDEFGHIJKLMOPQRSTUVWXYZABCDEFGHIJKLMNPQRSTUVWXYZABCDEFGHIJKLMNOQRSTUVWXYZABCDEFGHIJKLMNOPRSTUVWXYZABCDEFGHIJKLMNOPQSTUVWXYZABCDEFGHIJKLMNOPQRTUVWXYZABCDEFGHIJKLMNOPQRSUVWXYZABCDEFGHIJKLMNOPQRSTVWXYZABCDEFGHIJKLMNOPQRSTUWXYZABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVWYZABCDEFGHIJKLMNOPQRSTUVWXZABCDEFGHIJKLMNOPQRSTUVWXY')\n    def test_vig2(self):\n        for i in string.ascii_uppercase:\n            for j in string.ascii_uppercase:\n                self.assertEqual(vig_2(i, j), vigenere(i, j))\n\nunittest.main()\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.038s\n\nOK\n",
  "label": 0
 },
 {
  "idx": 2259,
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "'R'\n",
  "label": 0
 },
 {
  "idx": 2260,
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "def vig_2(row, col):\n    return string.ascii_uppercase[(ord(row) + ord(col)) % 26]\n",
  "label": 0
 },
 {
  "idx": 2261,
  "doc": "For Kasiski Test,How to implement 26x26 table in Python",
  "code": "import string\nimport collections\n\ndef vigsquare(printable=False):\n    '''\n    Returns a string like a vigenere square,\n    printable joins each row with a newline so it's literally square\n    printable=False (defaul) joins without newlines for easier \n    searching by row and column index\n    '''\n    alpha = string.ascii_uppercase\n    rotater = collections.deque(alpha)\n    vigsquare_list = []\n    for i in xrange(26):\n        vigsquare_list.append(''.join(rotater))\n        rotater.rotate(-1)\n    if printable:\n        return '\\n'.join(vigsquare_list) \n    else:\n        return ''.join(vigsquare_list)\n",
  "label": 0
 },
 {
  "idx": 2262,
  "doc": "Storing a string and a set in a dictionary",
  "code": "def unique_words(input_file):\n    file = open(input_file)\n    wordlist = {}\n    dups = []\n    copy = []\n    for index, value in enumerate(file):\n        words = value.split()\n        for word in words:\n            wordlist[word] = index\n            dups.append(word)\n    for word in dups:\n        if dups.count(word) != 1 and word not in copy:\n            del(wordlist[word])\n            copy.append(word)\n    for item in wordlist:\n        print 'The unique word '+item+' occurs on line '+str(wordlist[item])\n",
  "label": 1
 },
 {
  "idx": 2263,
  "doc": "Most efficient way to delete needless newlines in Python",
  "code": "This would keep paragraphs separated. This would keep paragraphs separated.\n\nThis would keep paragraphs separated.\n    This would keep paragraphs separated.\n\nWhen, in the course of human events, it becomes necessary for one people\n",
  "label": 0
 },
 {
  "idx": 2264,
  "doc": "Most efficient way to delete needless newlines in Python",
  "code": "$ /usr/bin/time -f '%E' tclsh gutenberg.tcl > output1.txt\n0:00.18\n$ /usr/bin/time -f '%E' python gutenberg.py > output2.txt\n0:00.30\n",
  "label": 0
 },
 {
  "idx": 2265,
  "doc": "Most efficient way to delete needless newlines in Python",
  "code": "set fp [open \"gutenberg.txt\" r]\nset oldtext [read $fp]\nclose $fp\n\nset newtext [string map \"{\\r} {} {\\n\\n} {\\n\\n} {\\n\\t} {\\n\\t} {\\n} { }\" $oldtext]\n\nputs $newtext\n",
  "label": 0
 },
 {
  "idx": 2266,
  "doc": "Add django model manager code-completion to Komodo",
  "code": "from django.db.models import manager\n",
  "label": 0
 },
 {
  "idx": 2267,
  "doc": "Sum of all numbers inside a string",
  "code": "1.25\n3.455\n3.7\n",
  "label": 0
 },
 {
  "idx": 2268,
  "doc": "An equivalent to string.ascii_letters for unicode strings in python 2.x?",
  "code": "import unicodedata as ud\nall_unicode = ''.join(unichr(i) for i in xrange(65536))\nunicode_letters = ''.join(c for c in all_unicode\n                          if ud.category(c)=='Lu' or ud.category(c)=='Ll')\n",
  "label": 1
 },
 {
  "idx": 2269,
  "doc": "Dictionary As Table In Django Template",
  "code": "field = {\n    'headers': [u'Birthday:', u'Education', u'Job', u'Child Sex'],\n    'rows': [[datetime.date(2012, 4, 6), u'A1', u'job1', u'M']\n            ,[datetime.date(2012, 4, 27), u'A2', u'job2', u'F']]\n}\n",
  "label": 0
 },
 {
  "idx": 2270,
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "from sqlalchemy import Column, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Thing(Base):\n    __tablename__ = 'thing'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(AdvancedNullComparisons(50))\n\nfrom sqlalchemy.dialects import postgresql, mysql\nprint(Thing.data != 'hi').compile(dialect=postgresql.dialect())\nprint(Thing.data != 'hi').compile(dialect=mysql.dialect())\n",
  "label": 0
 },
 {
  "idx": 2271,
  "doc": "Creating a table out of data in python",
  "code": "Column 1                Column 2                Column 3                Column 4            \n\n10                                        10    20                      20      \n",
  "label": 0
 },
 {
  "idx": 2272,
  "doc": "change multiple lines in file python using regex",
  "code": "import csv\n\nwith open('my_data.csv') as data_file,\\\n     open('values.csv') as value_file, \\\n     open('my_new_data.csv', 'wb') as out_file:\n\n    data_reader = csv.reader(data_file, delimiter=' ', skipinitialspace=True)\n    value_reader = csv.reader(value_file, delimiter=',')\n    writer = csv.writer(out_file, delimiter=' ')\n    while True:\n        try:\n            row = next(data_reader)\n            row[1:4] = next(value_reader)\n            writer.writerows([row, next(data_reader), next(data_reader)])\n        except StopIteration:\n            break\n",
  "label": 1
 },
 {
  "idx": 2273,
  "doc": "Pandas, Filling between dates with average change between previous rows",
  "code": ">>> dnew = df.resample(\"1d\").interpolate(\"time\")\n>>> dnew.head(100)\n                 295340      299616\n2014-11-02   304.904110  157.123288\n2014-11-03   314.650753  162.068795\n[...]\n2014-11-28   558.316839  285.706466\n2014-11-29   568.063483  290.651972\n2014-11-30   577.810126  295.597479\n2014-12-01   587.556770  300.542986\n2014-12-02   597.303413  305.488493\n2014-12-03   606.948799  310.299014\n[...]\n2014-12-30   867.374215  440.183068\n2014-12-31   877.019600  444.993589\n2015-01-01   886.664986  449.804109\n2015-01-02   896.310372  454.614630\n[...]\n2015-02-01  1182.828960  594.911891\n2015-02-02  1192.379580  599.588466\n[...]\n",
  "label": 1
 },
 {
  "idx": 2274,
  "doc": "python string to date ISO 8601",
  "code": ">>> import datetime as dt\n>>> ds = '0104160F'\n>>> parsed = dt.datetime.strptime(ds, \"%y%m%d0F\")\n>>> parsed\ndatetime.datetime(2001, 4, 16, 0, 0)    \n>>> reformatted = dt.datetime.strftime(parsed, \"%Y-%m-%d\")\n>>> reformatted\n'20010416'\n",
  "label": 1
 },
 {
  "idx": 2275,
  "doc": "Make a number more probable to result from random",
  "code": "x = numpy.random.uniform(1.5)\n",
  "label": 0
 },
 {
  "idx": 2276,
  "doc": "What does a class need to implement in order to be used as an argument tuple?",
  "code": ">>> class C(object):\n...     def __init__(self, lst):\n...         self.lst = lst\n...     def __getitem__(self, key):\n...         return self.lst[key]\n...\n>>> def f(a, b, c):\n...     print \"Arguments: \", a, b, c\n...\n>>> c = C([1, 2, 3])\n>>> f(*c)\nArguments:  1 2 3\n>>>\n",
  "label": 1
 },
 {
  "idx": 2277,
  "doc": "What does a class need to implement in order to be used as an argument tuple?",
  "code": ">>> class C(object):\n...     def __init__(self, lst):\n...         self.lst = lst\n...     def __iter__(self):\n...         return iter(self.lst)\n...\n>>> def f(a, b, c):\n...     print \"Arguments: \", a, b, c\n...\n>>> c = C([1, 2, 3])\n>>> f(*c)\nArguments:  1 2 3\n>>>\n",
  "label": 1
 },
 {
  "idx": 2278,
  "doc": "Python: sort lists in dictonary of lists, where one list is a key to sorting",
  "code": "from operator import itemgetter\nsrt_key = [i for i, e in sorted(enumerate(d[\"d\"]), key=itemgetter(1))]\n\nnew_d = {}\n\nfor k,v in d.items():\n    new_d[k] = list(itemgetter(*srt_key)(v))\n\nprint(new_d)\n{'c': ['a', '9', 'g', 'b'], 'a': [4, 7, 1, 6], 'b': [9, 8, 9, 9], 'd': [1, 2, 5, 10]}\n",
  "label": 1
 },
 {
  "idx": 2279,
  "doc": "String formatting on SQL insert using dict",
  "code": ">>> import MySQLdb\n>>> MySQLdb.paramstyle\n'format'\n",
  "label": 0
 },
 {
  "idx": 2280,
  "doc": "Creating a pygtk text field that only accepts number",
  "code": "    def numbify(widget):\n        def filter_numbers(entry, *args):\n            text = entry.get_text().strip()\n            entry.set_text(''.join([i for i in text if i in '0123456789']))\n\n        widget.connect('changed', filter_numbers)\n\n    # Use gtk.Builder rather than glade, you'll need to change the format of your .glade file in Glade accordingly\n    builder = gtk.Builder()\n    builder.add_from_file('yourprogram.glade')\n    entry = builder.get_object('yourentry')\n\n    numbify(entry)\n",
  "label": 1
 },
 {
  "idx": 2281,
  "doc": "Creating a pygtk text field that only accepts number",
  "code": "class NumberEntry(gtk.Entry):\n    def __init__(self):\n        gtk.Entry.__init__(self)\n        self.connect('changed', self.on_changed)\n\n    def on_changed(self, *args):\n        text = self.get_text().strip()\n        self.set_text(''.join([i for i in text if i in '0123456789']))\n",
  "label": 1
 },
 {
  "idx": 2282,
  "doc": "Compare two files in python and save line differences in a new file",
  "code": "f1 = open('a', 'r').readlines()\nf2 = open('b', 'r').readlines()\nout = []\nindexa = 0\nindexb = 0\nout = []\nwhile(1):\n    try:\n        if f1[indexa][:-1] ==  f2[indexb][:-1]:\n            indexa +=1\n            indexb +=1\n        elif f1[indexa][:-1] > f2[indexb][:-1]:\n            indexb += 1\n        elif f1[indexa][:-1] < f2[indexb][:-1]:\n            out.append(indexa+1)\n            indexa += 1\n    except IndexError:\n        break\nfor i in out:\n    print i\n",
  "label": 1
 },
 {
  "idx": 2283,
  "doc": "Efficiently detect sign-changes in python",
  "code": "> zero_crossings\narray([ 3,  5,  9, 10, 11, 12, 15])\n",
  "label": 0
 },
 {
  "idx": 2284,
  "doc": "Radical Use of Admin's Interface",
  "code": "{% extends \"admin/base_site.html\" %}\n",
  "label": 1
 },
 {
  "idx": 2285,
  "doc": "Extarct particulr part of json string using python regex",
  "code": ">>> p = '''{\"sweep_enabled\":true,\"product\":\"XYZ\",\"page\":\"XYZ Profile\",\"list\":\" {\\\"id\\\":205782,\\\"name\\\":\\\"Robert Shriwas\\\",\\\"gender\\\":\\\"F\\\",\\\"practicing_since\\\":null,\\\"years\\\":21,\\\"specializations\\\":[\\\"Mentor\\\"]}\",\"form\":{\"q\":\"\",\"city\":\"Delhi\",\"locality\":null},\"cerebro\":true}'''\n>>> q = re.sub(r'(:)\\s*\"\\s*(\\{[^\\}]+\\})\\s*\"',r'\\1\\2', p[1:-1])\n>>> q\n'\"sweep_enabled\":true,\"product\":\"XYZ\",\"page\":\"XYZ Profile\",\"list\":{\"id\":205782,\"name\":\"Robert Shriwas\",\"gender\":\"F\",\"practicing_since\":null,\"years\":21,\"specializations\":[\"Mentor\"]},\"form\":{\"q\":\"\",\"city\":\"Delhi\",\"locality\":null},\"cerebro\":true'\n>>> r = p[0] + q + p[-1]\n>>> r\n'{\"sweep_enabled\":true,\"product\":\"XYZ\",\"page\":\"XYZ Profile\",\"list\":{\"id\":205782,\"name\":\"Robert Shriwas\",\"gender\":\"F\",\"practicing_since\":null,\"years\":21,\"specializations\":[\"Mentor\"]},\"form\":{\"q\":\"\",\"city\":\"Delhi\",\"locality\":null},\"cerebro\":true}'\n>>> json.loads(r)\n{u'product': u'XYZ', u'form': {u'q': u'', u'city': u'Delhi', u'locality': None}, u'sweep_enabled': True, u'list': {u'name': u'Robert Shriwas', u'gender': u'F', u'specializations': [u'Mentor'], u'id': 205782, u'years': 21, u'practicing_since': None}, u'cerebro': True, u'page': u'XYZ Profile'}\n>>> s = json.loads(r)\n>>> s['list']\n{u'name': u'Robert Shriwas', u'gender': u'F', u'specializations': [u'Mentor'], u'id': 205782, u'years': 21, u'practicing_since': None}\n>>> \n",
  "label": 1
 },
 {
  "idx": 2286,
  "doc": "combining python watchdog with multiprocessing or threading",
  "code": "Start of Multiple Camera Processes\ndef startProcess(camera,config,log):\n    ''' Uses multiprocessing module to start 4 different camera monitoring processes'''\n\n    jobs=[]\n\n    #pdb.set_trace()\n\n    #log.info(mp.log_to_stderr(logging.DEBUG))\n    for i in range(len(camera)):\n        log.info('Starting to monitor camera {0}'.format(camera[i]))\n        print 'Starting to monitor camera {0}'.format(camera[i])\n        try:\n            p = mp.Process(target=monitorCam, args=(camera[i],config, log), name=camera[i])\n            p.daemon=True\n            jobs.append(p)\n            p.start()\n        except KeyboardInterrupt:\n            log.info('Ending process: {0} for camera {1}'.format(mp.current_process().pid, camera[i]))\n            p.terminate()\n            log.info('Terminated: {0}, {1}'.format(p,p.is_alive()))\n\n    for i in range(len(jobs)):\n        jobs[i].join()  \n\n    return      \n",
  "label": 0
 },
 {
  "idx": 2287,
  "doc": "How to do a rolling aggregation of data week wise in python?",
  "code": "         Date  Profit  weekofyear  Weekly_Cum\n0  2013-06-21      14          25          14\n1  2013-06-22      19          25          33\n2  2013-06-23      11          25          44\n3  2013-06-24      13          26          13\n4  2013-06-25       6          26          19\n5  2013-06-26      22          26          41\n6  2013-06-27      22          26          63\n7  2013-06-28       3          26          66\n8  2013-06-29       5          26          71\n9  2013-06-30      10          26          81\n10 2013-07-01      17          27          17\n11 2013-07-02      14          27          31\n12 2013-07-03       9          27          40\n13 2013-07-04       7          27          47\n",
  "label": 0
 },
 {
  "idx": 2288,
  "doc": "Using regex to find a string starting with /team/ and ending with /Euro_2012",
  "code": "re.findall(r'/team/.*?/Euro_2012', inputtext)\n",
  "label": 1
 },
 {
  "idx": 2289,
  "doc": "Working with multiple columns from a data file",
  "code": "In [61]: x\nOut[61]: array([100, 110, 120, 130])\n\nIn [62]: y\nOut[62]: \narray([[ 1.1,  2.1,  2. ,  1.1,  1.1],\n       [ 2. ,  2.1,  1. ,  1.2,  2.1],\n       [ 1.2,  1. ,  1.1,  1. ,  1.2],\n       [ 2. ,  1.1,  1.2,  2. ,  1.2]])\n",
  "label": 0
 },
 {
  "idx": 2290,
  "doc": "Obtaining Client IP address from a WSGI app using Eventlet",
  "code": "from eventlet import wsgi\nimport eventlet\n\nfrom pprint import pformat\n\ndef show_env(env, start_response):\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return ['%s\\r\\n' % pformat(env)]\n\nwsgi.server(eventlet.listen(('', 8090)), show_env)\n",
  "label": 0
 },
 {
  "idx": 2291,
  "doc": "splitting one csv into multiple files in python",
  "code": "import os\n\n\ndef split(filehandler, delimiter=',', row_limit=1000,\n          output_name_template='output_%s.csv', output_path='.', keep_headers=True):\n    import csv\n    reader = csv.reader(filehandler, delimiter=delimiter)\n    current_piece = 1\n    current_out_path = os.path.join(\n        output_path,\n        output_name_template % current_piece\n    )\n    current_out_writer = csv.writer(open(current_out_path, 'w'), delimiter=delimiter)\n    current_limit = row_limit\n    if keep_headers:\n        headers = reader.next()\n        current_out_writer.writerow(headers)\n    for i, row in enumerate(reader):\n        if i + 1 > current_limit:\n            current_piece += 1\n            current_limit = row_limit * current_piece\n            current_out_path = os.path.join(\n                output_path,\n                output_name_template % current_piece\n            )\n            current_out_writer = csv.writer(open(current_out_path, 'w'), delimiter=delimiter)\n            if keep_headers:\n                current_out_writer.writerow(headers)\n        current_out_writer.writerow(row)\n",
  "label": 1
 },
 {
  "idx": 2292,
  "doc": "How to print formatted python output for javascript?",
  "code": "...\nprint \"\"\"\n<html><head></head>\n<body>\n<br>\n<pre>\n\"\"\"\nprint nova.servers.get_console_output(VMID)\n\nprint \"\"\"\n</pre>\n</body></html>\n\"\"\"\n",
  "label": 1
 },
 {
  "idx": 2293,
  "doc": "Getting Variable from Applescript and using in Python",
  "code": "import sys\nvar_from_as = sys.argv[1] # for 1rst parameter cause argv[0] is file name\nprint 'this gets returned to AppleScript' # this gets set to outputvar\n",
  "label": 1
 },
 {
  "idx": 2294,
  "doc": "Split string elements of a list with multiple separators/conditions. Any good Python library?",
  "code": "#location_regexes.py\nimport re\nparen_pattern = re.compile(r\"([^(]+, )?([^(]+?),? \\(([^)]+)\\)\")\n\ndef parse_city_state(locations_list):\n    city_list = []\n    state_list = []\n    coordinate_pairs = []\n    for location in locations_list:\n        if '(' in location:\n            r = re.match(paren_pattern, location)\n            city_list.append(r.group(2))\n            state_list.append(r.group(3))\n        elif location[0].isdigit() or location[0] == '-':\n            coordinate_pairs.append(location.split(', '))\n        else:\n            city_list.append(location.split(', ', 1)[0])\n            state_list.append(location.split(', ', 1)[1])\n    return city_list, state_list, coordinate_pairs\n\n#to demonstrate output\nif __name__ == \"__main__\":\n    locations = ['Washington, DC', 'Miami, FL', 'New York, NY',\n                'Kaslo/Nelson area (Canada), BC', 'Plymouth (UK/England)',\n                'Mexico, DF - outskirts-, (Mexico),', '38.206471, -111.165271']\n\n    for parse_group in parse_city_state(locations):\n        print parse_group\n",
  "label": 1
 },
 {
  "idx": 2295,
  "doc": "python csv to dictionary columnwise",
  "code": "{\n    ' numbers': [' 1', ' 2', ' 3', ' 4'], \n    ' colors ': [' blue', ' red', ' green', ' yellow'],\n    'strings': ['string1', 'string2', 'string3', 'string4']\n}\n",
  "label": 0
 },
 {
  "idx": 2296,
  "doc": "How to avoid rebuilding existing wheels when using pip?",
  "code": "    --find-links=/tmp\n",
  "label": 0
 },
 {
  "idx": 2297,
  "doc": "How to avoid rebuilding existing wheels when using pip?",
  "code": "    pip wheel --find-links=/tmp --wheel-dir=/tmp Cython==0.19.2\n",
  "label": 1
 },
 {
  "idx": 2298,
  "doc": "Modifying a cooldown decorator to work for methods instead of functions",
  "code": "class Wrapper:\n    def __init__(self, cdfunc, obj):\n        self.cdfunc = cdfunc\n        self.obj = obj\n    def __call__(self, *args, **kwargs):\n        #do stuff...\n        self.cdfunc._func(self.obj, *args, **kwargs)\n    @property\n    def remaining(self):\n        #...get needed things from self.cdfunc\n",
  "label": 0
 },
 {
  "idx": 2299,
  "doc": "any python min like function which gives a list as result",
  "code": "#unwind's solution\n\ndef f(lst):\n    return [y for y in lst if y[1] == min([x for x in lst if x[1] > 0],\n                                             key = lambda x: x[1])[1]]\n\ndef f2(lst):\n    d=collections.defaultdict(list)\n    for item in lst:\n        d[item[1]].append(item)\n    return d[min(key for key in d.keys() if key!=0)]\n\n%timeit f(lst)\n100000 loops, best of 3: 12.1 us per loop\n%timeit f2(lst)\n100000 loops, best of 3: 5.42 us per loop\n",
  "label": 1
 },
 {
  "idx": 2300,
  "doc": "Returning the value of an index in a python list based on other values",
  "code": ">>> offset = 2\n>>> aString = raw_input(\"digit a letter: \")\n>>> aString\n'a'\n>>> chr(ord(aString)+offset)\n'c'\n",
  "label": 1
 },
 {
  "idx": 2301,
  "doc": "Grouping in Python",
  "code": "import itertools\n\nkey_func = lambda item: item[\"teamID\"]\n\nfor key, group in itertools.groupby(sorted(batting, key=key_func), key_func):\n    print key, sum([item[\"R\"] for item in group])\n",
  "label": 1
 },
 {
  "idx": 2302,
  "doc": "How do you read in a text (.txt) file as a .py file in Python 2.7?",
  "code": "{\"hello\": \"world\"}\n",
  "label": 0
 },
 {
  "idx": 2303,
  "doc": "How can I find the average of each similar entry in a list of tuples?",
  "code": "d = {}\ntuples = [('Jem', 10), ('Sam', 10), ('Sam', 2), ('Jem', 9), ('Jem', 10)]\nfor tuple in tuples:\n    key,val = tuple\n    d.setdefault(key, []).append(val)\n",
  "label": 0
 },
 {
  "idx": 2304,
  "doc": "How to find cluster sizes in 2D numpy array?",
  "code": "area = measurements.sum(z2, lw, index=arange(lw.max() + 1))\nprint area\n[ 0.  2.  1.  2.  6.  1.  1.  1.]\n",
  "label": 0
 },
 {
  "idx": 2305,
  "doc": "Python Matplotlib: plotting feet and inches",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nx = np.linspace(0, 1, 100)\ny = (np.random.random(100) - 0.5).cumsum()\n\nfig, ax = plt.subplots()\nax.plot(x, y)\n\ndef imperial(x, pos):\n    ft, inches = divmod(round(x*12), 12)\n    ft, inches = map(int, [ft, inches])\n    return ('{} ft'.format(ft) if not inches \n            else '{} {} in'.format(ft, inches) if ft\n            else '{} in'.format(inches))\n\nax.yaxis.set_major_formatter(ticker.FuncFormatter(imperial))\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2306,
  "doc": "reading Unicode string as json object in python",
  "code": "import re\n\ndef repair_json(val):\n    return re.sub(r'(\\w+):', r'\"\\1\":', \n                  val.replace('\"', '\\u0022').replace(\"'\", '\"'))\n",
  "label": 1
 },
 {
  "idx": 2307,
  "doc": "two's complement of numbers in python",
  "code": "format(num, '016b')\n",
  "label": 0
 },
 {
  "idx": 2308,
  "doc": "Gtk 3 python entry color",
  "code": "from gi.repository import Gtk, Gdk\n\ndef focus_in(*args):\n    print 'focus_in called'\n\ndef focus_out(*args):\n    print 'focus_out called'\n\nwindow = Gtk.Window()\nwindow.connect('destroy', Gtk.main_quit)\nscreen = Gdk.Screen.get_default()\ncss_provider = Gtk.CssProvider()\ncss_provider.load_from_path('style.css')\npriority = Gtk.STYLE_PROVIDER_PRIORITY_USER\ncontext = Gtk.StyleContext()\ncontext.add_provider_for_screen(screen, css_provider, priority)\nfname = Gtk.Entry(text='First Name')\nlname = Gtk.Entry(text='Last Name')\nbutton = Gtk.Button('Submit')\nfname.connect('focus-in-event', focus_in)\nfname.connect('focus-out-event', focus_out)\nvbox = Gtk.VBox()\nvbox.add(fname)\nvbox.add(lname)\nvbox.add(button)\nwindow.add(vbox)\nwindow.show_all()\nGtk.main()\n",
  "label": 0
 },
 {
  "idx": 2309,
  "doc": "Find the number of ways a sequence can be rearranged",
  "code": ">>> arrangements([0,0,0,1,1,1])\n{(1, 1, 1, 0, 0, 0)}\n>>> arrangements([0,0,0,1,1,1,1])\nset()\n>>> arrangements([1,2,2,14])\n{(2, 14, 1, 2), (2, 1, 14, 2)}\n>>> arrangements([1,1,2,2,14])\n{(2, 14, 1, 1, 2), (2, 2, 1, 14, 1), (14, 2, 1, 1, 2), (2, 2, 14, 1, 1)}\n",
  "label": 0
 },
 {
  "idx": 2310,
  "doc": "How to convert a GEOS MultiLineString to Polygon using Python?",
  "code": "def close_geometry(self, geometry):\n   if geometry.empty or geometry[0].empty:\n       return geometry # empty\n\n   if(geometry[-1][-1] == geometry[0][0]):\n       return geometry  # already closed\n\n   result = None\n   for linestring in geom:\n      if result is None:\n          resultstring = linestring.clone()\n      else:\n          resultstring.extend(linestring.coords)\n\n   geom = Polygon(resultstring)\n\n   return geom\n",
  "label": 1
 },
 {
  "idx": 2311,
  "doc": "How to convert a GEOS MultiLineString to Polygon using Python?",
  "code": ">>> s1 = LineString((0, 0), (1, 1), (1, 2), (0, 1))\n>>> s1.convex_hull\n<Polygon object at ...>\n>>> s1.convex_hull.coords\n(((0.0, 0.0), (0.0, 1.0), (1.0, 2.0), (1.0, 1.0), (0.0, 0.0)),)\n\n>>> m1=MultiLineString(s1)\n>>> m1.convex_hull\n<Polygon object at...>\n>>> m1.convex_hull.coords\n(((0.0, 0.0), (0.0, 1.0), (1.0, 2.0), (1.0, 1.0), (0.0, 0.0)),)\n",
  "label": 1
 },
 {
  "idx": 2312,
  "doc": "Using a loop to make a dictionary",
  "code": "from pprint import pprint\n\nbinary2ascii = {}\nfor i in range(65, 70):\n    bits = format(i, \"08b\")\n    char = chr(i)\n    binary2ascii[bits] = char\n    binary2ascii[char] = bits\n\npprint(binary2ascii)    \n",
  "label": 1
 },
 {
  "idx": 2313,
  "doc": "Looking for a concise way to check for point collision in a list of Rects",
  "code": ">>> rects = [pygame.Rect(0,0,100,100), pygame.Rect(30,30,30,30)]\n>>> next((i for (i, r) in enumerate(rects) if r.collidepoint(10, 10)), -1)\n0\n>>> next((i for (i, r) in enumerate(rects) if r.collidepoint(100, 200)), -1)\n-1\n>>>\n",
  "label": 1
 },
 {
  "idx": 2314,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "y = x.reshape(x.shape[0]/2, 2, x.shape[1], 2)\n",
  "label": 0
 },
 {
  "idx": 2315,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [344]: y.mean(axis=(1,3))\nOut[344]: \narray([[  3.5,   5.5,   7.5],\n       [ 15.5,  17.5,  19.5]])\n",
  "label": 0
 },
 {
  "idx": 2316,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [340]: x\nOut[340]: \narray([[  0.,   1.,   2.,   3.,   4.,   5.],\n       [  6.,   7.,   8.,   9.,  10.,  11.],\n       [ 12.,  13.,  14.,  15.,  16.,  17.],\n       [ 18.,  19.,  20.,  21.,  22.,  23.]])\n\nIn [341]: y = x.reshape(2,2,3,2)\n\nIn [342]: y[0,:,0,:]\nOut[342]: \narray([[ 0.,  1.],\n       [ 6.,  7.]])\n\nIn [343]: y[1,:,2,:]\nOut[343]: \narray([[ 16.,  17.],\n       [ 22.,  23.]])\n",
  "label": 0
 },
 {
  "idx": 2317,
  "doc": "how to format numbers with commas in python",
  "code": "Here are the results:\n1 = 1,000,344\n2 = 1,000,381\n3 = 999,903\n4 = 999,849\n5 = 1,000,494\n6 = 999,029\nTotal rolls equal: 6000000\n",
  "label": 0
 },
 {
  "idx": 2318,
  "doc": "How to extend model on serializer level with django-rest-framework",
  "code": "class ListComponents(generics.ListAPIView):\n    serializer_class = MenuItemComponentSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Override .get_queryset() to filter the items returned by the list.\n        \"\"\"\n        menuitem = self.kwargs['menuitem']\n        return MenuItemComponent.objects.filter(menuItem=menuitem)\n",
  "label": 0
 },
 {
  "idx": 2319,
  "doc": "How to extend model on serializer level with django-rest-framework",
  "code": "class MenuItemComponentSerializer(serializers.Serializer):\n    url = ComponentURLField(source='component')\n    name = Field(source='component.name')\n    isReplaceable = Field()\n",
  "label": 0
 },
 {
  "idx": 2320,
  "doc": "How to extend model on serializer level with django-rest-framework",
  "code": "class ComponentURLField(serializers.Field):\n    def to_native(self, obj):\n        \"\"\"\n        Return a URL, given a component instance, 'obj'.\n        \"\"\"\n\n        # Something like this...\n        request = self.context['request']\n        return reverse('component-detail', kwargs=kwargs, request=request)\n",
  "label": 0
 },
 {
  "idx": 2321,
  "doc": "2D Color coded scatter plot with user defined color range and static colormap",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n# This is needed to iterate over your data files\nimport glob \n\n# Loop over all your data files to get the maximum value for 'vel'. \n# You will have to adjust this for your code\n\"\"\"max_vel = 0\nfor i in glob.glob(<your files>,'r') as fr:\n    # Iterate over all lines\n    if <vel value> > max_vel:\n        max_vel = <vel_value>\"\"\"\n\n# Create Map\ncm = plt.cm.get_cmap('RdYlBu')\nx,y,vel = np.loadtxt('finaldata_temp.txt', skiprows=0, unpack=True)\n\n# Plot the data\nfig=plt.figure()\nfig.patch.set_facecolor('white')\n# Here we switch to an axis object\n# Additionally, you can plot several of your files in the same figure using\n# the subplot option.\nax=fig.add_subplot(111)\ns = ax.scatter(x,y,c=vel,edgecolor=''))\n# Here we assign the color bar to the axis object\ncb = plt.colorbar(mappable=s,ax=ax,cmap=cm)\n# Here we set the range of the color bar based on the maximum observed value\n# NOTE: This line only changes the calculated color and not the display \n# 'range' of the legend next to the plot, for that we need to switch to \n# ColorbarBase (see second code snippet).\ncb.setlim(0,max_vel)\ncb.set_label('Value of \\'vel\\'')\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2322,
  "doc": "Sqlalchemy \"double layer\" query",
  "code": "class Post(Base):\n    __tablename__ = 'post'\n\n    id = Column(Integer, primary_key=True)\n    text = Column(Unicode)\n\nclass Like(Base):\n    __tablename__ = 'like'\n\n    id = Column(Integer, primary_key=True)\n    post_id = Column(Integer, ForeignKey(Post.id), nullable=False)\n\nclass Alert(Base):\n    __tablename__ = 'alert'\n\n    id = Column(Integer, primary_key=True)\n    like_id = Column(Integer, ForeignKey(Like.id))\n",
  "label": 0
 },
 {
  "idx": 2323,
  "doc": "Python - Twisted, Proxy and modifying content",
  "code": "portstr = \"tcp:8080:interface=localhost\" # serve on localhost:8080\n\nif __name__ == '__main__': # $ python proxy_modify_request.py\n    import sys\n    from twisted.internet import endpoints, reactor\n\n    def shutdown(reason, reactor, stopping=[]):\n        \"\"\"Stop the reactor.\"\"\"\n        if stopping: return\n        stopping.append(True)\n        if reason:\n            log.msg(reason.value)\n        reactor.callWhenRunning(reactor.stop)\n\n    log.startLogging(sys.stdout)\n    endpoint = endpoints.serverFromString(reactor, portstr)\n    d = endpoint.listen(ProxyFactory())\n    d.addErrback(shutdown, reactor)\n    reactor.run()\nelse: # $ twistd -ny proxy_modify_request.py\n    from twisted.application import service, strports\n\n    application = service.Application(\"proxy_modify_request\")\n    strports.service(portstr, ProxyFactory()).setServiceParent(application)\n",
  "label": 0
 },
 {
  "idx": 2324,
  "doc": "Reiterating over lists and dictionaries",
  "code": "listoflists = [['A', 'B', 'C', 'D'], ['B', 'A', 'C', 'D'], ['B', 'C', 'D', 'A']]\n\ndef borda(listoflists):\n    outdict = {}\n    for singlelist in listoflists:\n        # Below, we're just turning singlelist around in order to\n        # make use of index numbers from enumerate to add to the scores\n        for index, item in enumerate(singlelist[2::-1]):\n            if item not in outdict:\n                outdict[item] = index + 1\n            else:\n                outdict[item] += index + 1\n\n    highestitem = max(outdict.iteritems(), key=lambda i: i[1])[0]\n    outlist = [outdict[item[0]] for item in sorted(outdict.keys())]\n\n    return (highestitem, outlist)\n",
  "label": 1
 },
 {
  "idx": 2325,
  "doc": "Reiterating over lists and dictionaries",
  "code": "import operator\nfrom collections import defaultdict\nlistoflists = [['A', 'B', 'C', 'D'], ['B', 'A', 'C', 'D'], ['B', 'C', 'D', 'A']]\n\ndef borda(listoflists):\n   outdict = defaultdict(int)\n   for item in listoflists:\n      outdict[item[0]] += 3\n      outdict[item[1]] += 2\n      outdict[item[2]] += 1\n\n   highestitem = max(outdict.iteritems(), key=operator.itemgetter(1))[0]\n   outlist = [outdict[item[0]] for item in sorted(outdict.keys())]\n\n   return (highestitem, outlist)\n",
  "label": 1
 },
 {
  "idx": 2326,
  "doc": "Parsing bits from a 128 byte block of hex in Python",
  "code": "string = \"100000000000000220000000000000003000000000000000\" \\\n         \"000000000000000000000000000000000000000000000000\" \\\n         \"000000000000000000000000000000000000000000000000\" \\\n         \"000000000000000000000000000000000000000000000000\" \\\n         \"000000000000000000000000000000000000000000000000\" \\\n         \"0000000000000000\"\n\nranges = ['0', '2-1', '3', '127-4']\n\nfor offset in ranges:\n    offset_list = offset.split('-')\n    if len(offset_list) == 1:\n        start = int(offset_list[0])\n        end = int(offset_list[0])\n    else:\n        start = int(offset_list[1])\n        end = int(offset_list[0])\n    the_bytes = string[start*2:(end+1)*2]\n    print('%d-%d: %s' % (start, end, the_bytes))\n",
  "label": 1
 },
 {
  "idx": 2327,
  "doc": "Using fancy indexing to get one value from each column of a numpy matrix",
  "code": ">>> a = np.arange(25).reshape((5,5))\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24]])\n>>> rows = b = np.array([0,4,2,3,3])\n>>> cols = np.arange(len(b))\n>>> [a[b[i], i] for i in range(5)]\n[0, 21, 12, 18, 19]\n>>> a[rows, cols]\narray([ 0, 21, 12, 18, 19])\n",
  "label": 0
 },
 {
  "idx": 2328,
  "doc": "Using fancy indexing to get one value from each column of a numpy matrix",
  "code": ">>> a[rows, cols] = 69\n>>> a\narray([[69,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 69, 13, 14],\n       [15, 16, 17, 69, 69],\n       [20, 69, 22, 23, 24]])\n>>> a[rows, cols] = np.array([-111, -111, -222, -333, -666])\n>>> a\narray([[-111,    1,    2,    3,    4],\n       [   5,    6,    7,    8,    9],\n       [  10,   11, -222,   13,   14],\n       [  15,   16,   17, -333, -666],\n       [  20, -111,   22,   23,   24]])\n",
  "label": 0
 },
 {
  "idx": 2329,
  "doc": "Connect to MSSQL Server 2008 on linux",
  "code": "+---------------------------------------+\n| Connected!                            |\n|                                       |\n| sql-statement                         |\n| help [tablename]                      |\n| quit                                  |\n|                                       |\n+---------------------------------------+\nSQL>\n",
  "label": 0
 },
 {
  "idx": 2330,
  "doc": "Following users like twitter in Django, how would you do it?",
  "code": "from django.db import models\n\nfrom annoying.fields import AutoOneToOneField\n\nclass UserProfile(models.Model):\n    user = AutoOneToOneField('auth.user')\n    follows = models.ManyToManyField('UserProfile', related_name='followed_by')\n\n    def __unicode__(self):\n        return self.user.username\n",
  "label": 0
 },
 {
  "idx": 2331,
  "doc": "Setting timeout on selenium webdriver.PhantomJS",
  "code": "require 'selenium-webdriver'\n\ncapabilities = Selenium::WebDriver::Remote::Capabilities.phantomjs(\"phantomjs.page.settings.resourceTimeout\" => \"5000\")\ndriver = Selenium::WebDriver.for :phantomjs, :desired_capabilities => capabilities\n",
  "label": 0
 },
 {
  "idx": 2332,
  "doc": "Setting timeout on selenium webdriver.PhantomJS",
  "code": "driver = webdriver.PhantomJS(desired_capabilities={'phantomjs.page.settings.resourceTimeout': '5000'})\n",
  "label": 1
 },
 {
  "idx": 2333,
  "doc": "Python: compare an array element-wise with a float",
  "code": ">>> A=np.array([np.random.random((4,3)), np.random.random((3,2))])\n>>> A\narray([ array([[ 0.20621572,  0.83799579,  0.11064094],\n       [ 0.43473089,  0.68767982,  0.36339786],\n       [ 0.91399729,  0.1408565 ,  0.76830952],\n       [ 0.17096626,  0.49473758,  0.158627  ]]),\n       array([[ 0.95823229,  0.75178047],\n       [ 0.25873872,  0.67465796],\n       [ 0.83685788,  0.21377079]])], dtype=object)\n",
  "label": 0
 },
 {
  "idx": 2334,
  "doc": "Extract text from webpage using either Python or Applescript",
  "code": "tell application \"Safari\"\n    tell document 1 to set theUrl to (do JavaScript \"document.getElementsByTagName('BODY')[0].getElementsByTagName('b')[0].getElementsByTagName('a').item(0).innerHTML; \")\n end tell\n",
  "label": 0
 },
 {
  "idx": 2335,
  "doc": "Pandas: Adding conditionally",
  "code": "foo = foobar2.clip_lower(0)\nfoo['var3']*=-1\nfoo['var4']*=-1\nfoo = foo.sum(axis=1)\n",
  "label": 1
 },
 {
  "idx": 2336,
  "doc": "Pandas: Adding conditionally",
  "code": "foo = foobar2.clip_lower(0).apply(lambda x: x['var1']+x['var2']-x['var3']-x['var4'], axis=1)\n",
  "label": 1
 },
 {
  "idx": 2337,
  "doc": "How to find out what methods, properties, etc a python module possesses",
  "code": ">>> import module\n>>> help(module)\n",
  "label": 1
 },
 {
  "idx": 2338,
  "doc": "Using pywin32 DosDateTimeToTime to unpack DOS packed time",
  "code": "wFatDate [in]\nThe MS-DOS date. The date is a packed value with the following format.\n    Bits    Description\n    0-4     Day of the month (1\u201331)\n    5-8     Month (1 = January, 2 = February, and so on)\n    9-15    Year offset from 1980 (add 1980 to get actual year)\n\nwFatTime [in]\nThe MS-DOS time. The time is a packed value with the following format.\n    Bits    Description\n    0-4     Second divided by 2\n    5-10    Minute (0\u201359)\n   11-15    Hour (0\u201323 on a 24-hour clock)\n",
  "label": 0
 },
 {
  "idx": 2339,
  "doc": "fabric cleanup operation with atexit",
  "code": "from functools import wraps\nfrom fabric.network import needs_host\nfrom fabric.api import run, env\n\ndef runs_final(func):\n    @wraps(func)\n    def decorated(*args, **kwargs):\n        if env.host_string == env.all_hosts[-1]:\n            return func(*args, **kwargs)\n        else:\n            return None\n    return decorated\n\n@needs_host\ndef hello():\n    run('hostname')\n    atexit()\n\n@runs_final\ndef atexit():\n    print ('this is at exit command.')\n",
  "label": 1
 },
 {
  "idx": 2340,
  "doc": "how to dynamically read a specific cell value in a table using selenium and python",
  "code": "'[contains(concat(\" \", normalize-space(@class), \" \"), \" btn-success \")]'\n",
  "label": 0
 },
 {
  "idx": 2341,
  "doc": "how to dynamically read a specific cell value in a table using selenium and python",
  "code": "column 3:\n0 | 5\nbtn btn-success\n\ncolumn 4:\n0 | 61\nbtn btn-success\n",
  "label": 0
 },
 {
  "idx": 2342,
  "doc": "Represent a class as a dict or list",
  "code": "In [4]: class B(object):\n    ...:     def __init__(self):\n    ...:        self.d = {'key':'value'}\n    ...:        self.l = [1,2,3,4]\n    ...:     def keys(self):\n    ...:         return self.d.keys()\n    ...:     def __getitem__(self, item):\n    ...:         return self.d[item]\n    ...:     def __iter__(self):        \n    ...:         return iter(self.l)\n    ...:     \n\nIn [5]: b = B()\n\nIn [6]: list(b)\nOut[6]: [1, 2, 3, 4]\n\nIn [7]: dict(b)\nOut[7]: {'key': 'value'}\n",
  "label": 1
 },
 {
  "idx": 2343,
  "doc": "Better logging system for entire package",
  "code": "import logging\nlogger = logging.getLogger()\nlogger.debug('Heya')\n",
  "label": 1
 },
 {
  "idx": 2344,
  "doc": "building reusable package in django",
  "code": "INSTALLED_APPS += get_apps()\n",
  "label": 0
 },
 {
  "idx": 2345,
  "doc": "Using pandas to plot data",
  "code": "d.plot()\n",
  "label": 0
 },
 {
  "idx": 2346,
  "doc": "Change specific repeating element in .xml using Python",
  "code": "<html>\n  <A>\n    <B>\n      <C>\n        <D>\n          <TYPE>\n            <NUMBER>7297</NUMBER>\n            <DATA/>\n          </TYPE>\n          <TYPE>\n            <NUMBER>7721</NUMBER>\n            <DATA>A=1,B=2,C=3,spamandeggs</DATA>\n          </TYPE>\n        </D>\n      </C>\n    </B>\n  </A>\n</html>\n",
  "label": 0
 },
 {
  "idx": 2347,
  "doc": "Change specific repeating element in .xml using Python",
  "code": "from lxml import etree\n\nxmlstr = \"\"\"<html>\n  <A>\n    <B>\n      <C>\n        <D>\n          <TYPE>\n            <NUMBER>7297</NUMBER>\n            <DATA />\n          </TYPE>\n          <TYPE>\n            <NUMBER>7721</NUMBER>\n            <DATA>A=1,B=2,C=3,</DATA>\n          </TYPE>\n        </D>\n      </C>\n    </B>\n  </A>\n</html>\"\"\"\n\nhtml_element = etree.fromstring(xmlstr)\n\n# find all the TYPE nodes that have NUMBER=7721 and DATA nodes\ntype_nodes = html_element.xpath(\"//TYPE[NUMBER='7721' and DATA]\")\n\n# the for loop is probably superfluous, but who knows, there might be more than one!\nfor t in type_nodes:\n    d = t.find('DATA')\n    # example: append spamandeggs to the end of the data text\n    if d.text is None:\n        d.text = 'spamandeggs'\n    else:\n        d.text += 'spamandeggs'\nprint etree.tostring(html_element)\n",
  "label": 1
 },
 {
  "idx": 2348,
  "doc": "Python 3.x.x one variable spread across multiple .py files",
  "code": "# part2.py\n\ndef scream():\n print(sound)  \n\n# part1.py\nimport part2\n\nif __name__==\"__main__\":\n    part2.sound = \"Yoooo\"\n    part2.scream()\n\n#Output:\nYoooo\n",
  "label": 1
 },
 {
  "idx": 2349,
  "doc": "Converting string to datetime object in Python (GAE)?",
  "code": "In [70]: import dateutil.parser as parser\nIn [71]: parser.parse('Sunday 31st of July 2005 ( 02:05:50 PM )',fuzzy=True)\nOut[71]: datetime.datetime(2005, 7, 31, 14, 5, 50)\n",
  "label": 1
 },
 {
  "idx": 2350,
  "doc": "Replacing two elements of a list in place with a function [python 3]",
  "code": "def test(lst, start, end):\n    lst.insert(start+1, lst[start])\n    lst.insert(end+2, lst[end+1])\n    lst[start], lst[end+1] = lst[end+2], lst[start+1]\n    del lst[start+1]\n    del lst[end+1]\n",
  "label": 1
 },
 {
  "idx": 2351,
  "doc": "Replacing two elements of a list in place with a function [python 3]",
  "code": "def reverse_sublist(lst, start, end):\n    lst[start:end] = reversed(lst[start:end])\n",
  "label": 1
 },
 {
  "idx": 2352,
  "doc": "Replacing two elements of a list in place with a function [python 3]",
  "code": "def test(lst, start, end):\n    lst.insert(start+1, lst[start])\n    lst.insert(end+1, lst[end])\n    print(lst)\n    lst[start] = lst[end+1]\n    lst[end] = lst[start+1]\n    print(lst)\n    del lst[start+1]\n    del lst[end+1]\n    print(lst)\n",
  "label": 0
 },
 {
  "idx": 2353,
  "doc": "Replacing two elements of a list in place with a function [python 3]",
  "code": ">>> test([1, 2, 3, 4, 5], 0, 4)\n[1, 1, 2, 3, 4, 4, 5] # after insert\n[4, 1, 2, 3, 1, 4, 5] # after swap\n[4, 2, 3, 1, 4] # after del\n",
  "label": 0
 },
 {
  "idx": 2354,
  "doc": "grouping an unknown number of arguments with argparse",
  "code": "$ python ~/sandbox/test.py --group 1 2 3 4 --group 1 2 3 4\nNamespace(group=[['1', '2', '3', '4'], ['1', '2', '3', '4']])\n",
  "label": 0
 },
 {
  "idx": 2355,
  "doc": "replacing appointed characters in a string in txt file",
  "code": ">>> s = '''C  DesignerTEE edBore 1 1/42006\n... Cylinder SingleVerticalB DesignerHHJ e 1 1/8Cooling 1\n... EngineBore 11/16 DesignerTDT 8Length 3Width 3\n... EngineCy DesignerHEE Inline2008Bore 1\n... Height 4TheChallen DesignerTET e 1Stroke 1P 305\n... Height 8C 606Wall15ccG DesignerQBG ccGasEngineJ 142\n... Height DesignerEQE C 60150ccGas2007'''\n>>> import re\n>>> exp = 'Designer[A-Z]{3}'\n>>> re.findall(exp, s)\n['DesignerTEE', 'DesignerHHJ', 'DesignerTDT', 'DesignerHEE', 'DesignerTET', 'DesignerQBG', 'DesignerEQE']\n",
  "label": 1
 },
 {
  "idx": 2356,
  "doc": "Finding combinations that meet a threshold relation",
  "code": "import numpy as np\n\nphi = 0.5\ntheta = 1\nn1 = 10\nn2 = 20\n\nN1 = np.random.randint(-100, 100, size=100)\nN2 = np.random.randint(-100, 100, size=100)\n\nN1 = N1[(N1 >= 0) & (N1 <= n1)]\nN2 = N2[(N2 >= 0) & (N2 <= n2)]\n\na = N2 * theta + phi\nres = N1.reshape(N1.shape[0], 1) - a.reshape(1, a.shape[0])\n\nindices = np.argwhere(res >= 0)\npairs = zip(N1[indices[:,0]], N2[indices[:,1]])\n",
  "label": 1
 },
 {
  "idx": 2357,
  "doc": "How to flexibly change PYTHONPATH",
  "code": "$ PYTHONPATH=/put/path/here python myscript.py\n",
  "label": 1
 },
 {
  "idx": 2358,
  "doc": "What would be a good regexp for identifying the \"original message\" prefix in gmail?",
  "code": "Match the characters \u201cOn\u201d literally \u00abOn\u00bb\nMatch the regular expression below and capture its match into backreference number 1 \u00ab([^,]+,){3}\u00bb\n   Exactly 3 times \u00ab{3}\u00bb\n   Note: You repeated the capturing group itself.  The group will capture only the last iteration.  Put a capturing group around the repeated group to capture all iterations. \u00ab{3}\u00bb\n   Match any character that is NOT a \u201c,\u201d \u00ab[^,]+\u00bb\n      Between one and unlimited times, as many times as possible, giving back as needed (greedy) \u00ab+\u00bb\n   Match the character \u201c,\u201d literally \u00ab,\u00bb\nMatch any single character that is not a line break character \u00ab.*?\u00bb\n   Between zero and unlimited times, as few times as possible, expanding as needed (lazy) \u00ab*?\u00bb\nMatch the characters \u201cwrote:\u201d literally \u00abwrote:\u00bb\n\nCreated with RegexBuddy\n",
  "label": 0
 },
 {
  "idx": 2359,
  "doc": "How do I plot a histogram using Python so that x-values are frequencies of a spectra?",
  "code": "w2=np.concatenate((w-N*dw,w))\nX2=np.concatenate((X,X)\n\nplt.bar(w2, abs(X2), align='center', width=dw)\nplt.xticks([i*8*dw for i in range(-N/16,1+N/16)])\nplt.xlim(-dw*N/2,dw*N/2)\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2360,
  "doc": "Django Python Shell",
  "code": "python manage.py shell\n",
  "label": 1
 },
 {
  "idx": 2361,
  "doc": "Solve Lotka-Volterra model using SciPy",
  "code": "import numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\n\ntime=np.linspace(0,15,5*1024)\n\ndef derivN(N, t):\n    \"\"\"Return the derivative of the vector N, which represents\n    the tuple (N1, N2). \"\"\"\n\n    N1, N2  = N\n    return np.array([N1*(1 - N1 - .7*N2), N2*(1 - N2 - .3*N1)])\n\ndef coupled(time, init, ax):\n    \"\"\"Visualize the system of coupled equations, by passing a timerange and\n    initial conditions for the coupled equations.\n\n    The initical condition is the value that (N1, N2) will assume at the first\n    timestep. \"\"\"\n\n    N = integrate.odeint(derivN, init, time)\n    ax[0].plot(N[:,0], N[:,1], label='[{:.1f}, {:.1f}]'.format(*init))  # plots N2 vs N1, with time as an implicit parameter\n    l1, = ax[1].plot(time, N[:,0], label='[{:.1f}, {:.1f}]'.format(*init))\n    ax[1].plot(time, N[:,1], color=l1.get_color())\n",
  "label": 0
 },
 {
  "idx": 2362,
  "doc": "Solve Lotka-Volterra model using SciPy",
  "code": "fh, ax = plt.subplots(1,2)\ncoupled(time, [.3, 1/.7], ax)\ncoupled(time, [.4, 1/.7], ax)\ncoupled(time, [1/.7, .3], ax)\ncoupled(time, [.5, .5], ax)\ncoupled(time, [.1, .1], ax)\nax[0].legend()\nax[1].legend()\nax[0].set_xlabel('N1')\nax[0].set_ylabel('N2')\nax[1].set_xlabel('time')\nax[1].set_ylabel(r'$N_i$')\nax[0].set_title('implicit')\nax[1].set_title('explicit (i.e. vs independant variable time)')\nplt.show()\n",
  "label": 0
 },
 {
  "idx": 2363,
  "doc": "How to access a button's parent in Tkinter without writing class?",
  "code": "def callback(evt):\n    handling_widget = evt.widget\n    parent_of_handling_widget = handling_widget.master\n    # or evt.widget.master\n    parent_of_handling_widget.destroy()\n",
  "label": 1
 },
 {
  "idx": 2364,
  "doc": "Union of many Counters",
  "code": "counters[0] | counters[1] | counters[2] | ...\n",
  "label": 0
 },
 {
  "idx": 2365,
  "doc": "Using other keys for the waitKey() function of opencv",
  "code": "if cv2.waitKey(33) == ord('a'):\n   print \"pressed a\"\n",
  "label": 1
 },
 {
  "idx": 2366,
  "doc": "regular expression using in glob.glob of python",
  "code": "import glob\nres = [f for f in glob.glob(\"*.txt\") if \"abc\" in f or \"123\" in f or \"a1b\" in f]\nfor f in res:\n    print f\n",
  "label": 1
 },
 {
  "idx": 2367,
  "doc": "regular expression using in glob.glob of python",
  "code": "import os\nimport re\nres = [f for f in os.listdir() if re.search(r'(abc|123|a1b).*\\.txt$', f)]\nfor f in res:\n    print f\n",
  "label": 1
 },
 {
  "idx": 2368,
  "doc": "django serialize foreign key objects",
  "code": "queryset = Model.objects.all()\nlist = [] #create list\nfor row in queryset: #populate list\n    list.append({'title':row.title, 'body': row.body, 'name': row.user.username})\nrecipe_list_json = json.dumps(list) #dump list as JSON\nreturn HttpResponse(recipe_list_json, 'application/javascript')\n",
  "label": 1
 },
 {
  "idx": 2369,
  "doc": "Summing similar elements within a tuple-of-tuples",
  "code": "from collections import OrderedDict\n\nT1 = (('a', 'b', 2), ('a', 'c', 4), ('b', 'c', 1), ('a', 'b', 8),)\n\nd = OrderedDict()\n\nfor x, y, z in T1:\n    d[(x, y)] = d[(x, y)] + z if (x, y) in d else z\n\nT2 = tuple((*k, v) for k, v in d.items())\n\nprint(T2)\n",
  "label": 1
 },
 {
  "idx": 2370,
  "doc": "How do I split items in a list (with delimiter) within a list?",
  "code": ">>> x = [['temp1_a','temp2_b', None, 'temp3_c'],['list1_a','list2_b','list3_c']]\n>>> y, z = [i if i is None else i.split('_')[0] for i in itertools.chain(*x)], [i if i is None else i.split('_')[1] for i in itertools.chain(*x) ]\n>>> y\n['temp1', 'temp2', None, 'temp3', 'list1', 'list2', 'list3']\n>>> z\n['a', 'b', None, 'c', 'a', 'b', 'c']\n",
  "label": 1
 },
 {
  "idx": 2371,
  "doc": "python count business weeks",
  "code": "import datetime as dt\n# same week\nIn [1]: week_difference(dt.datetime(2012, 8, 1),  dt.datetime(2012, 8, 1))\nOut[1]: 0\n\n# your example (see note below) \nIn [2]: week_difference(dt.datetime(2012, 8, 1),  dt.datetime(2012, 8, 13))\nOut[2]: 2\n\n# across years\nIn [3]: week_difference(dt.datetime(2011, 8, 1),  dt.datetime(2012, 8, 13))\nOut[3]: 54\n\n# year boundary: second last business week of 2011, to first business week of 2012\n# which is the same business week as the last business week of 2011\nIn [4]: week_difference(dt.datetime(2011, 12, 20),  dt.datetime(2012, 1, 1))\nOut[4]: 1\n\nIn [5]: week_difference(dt.datetime(2011, 12, 18),  dt.datetime(2012, 1, 1))\nOut[5]: 2\n",
  "label": 0
 },
 {
  "idx": 2372,
  "doc": "pandas: detect the first/last record number from a time stamp of weekday only",
  "code": "df['week_counter'] = (df.weekday != df.weekday.shift()).cumsum()\n>>> df\n    records    weekday  week_counter\n0         1     Monday             1\n1         2     Monday             1\n2         3     Monday             1\n3         4    Tuesday             2\n4         6    Tuesday             2\n5         7  Wednesday             3\n6         8   Thursday             4\n7        12   Thursday             4\n8        14   Thursday             4\n...\n16       43    Tuesday             9\n17       59  Wednesday            10\n18       61  Wednesday            10\n",
  "label": 0
 },
 {
  "idx": 2373,
  "doc": "Finding common elements from two lists of lists",
  "code": ">>> a = [[1, 2, 3], [4, 5, 6], [4, 2, 3]]\n>>> b = [[[11, 22, 3], [12, 34, 6], [41, 2, 34], [198, 213, 536], [1198, 1123, 1156]], [[11, 22, 3], [42, 25, 64], [43, 45, 23]], [[3, 532, 23], [4, 5, 6], [98, 23, 56], [918, 231, 526]]]\n>>> func(a,b)\nTrue\n",
  "label": 0
 },
 {
  "idx": 2374,
  "doc": "Rendering requested type in Tornado",
  "code": "class TaskServer(tornado.web.Application):\n    def __init__(self, newHandlers = [], debug = None):\n        request_format = \"(\\.[a-zA-Z]+$)?\"\n        baseHandlers = [\n            (r\"/jobs\" + request_format, JobsHandler),\n            (r\"/jobs/\", JobsHandler),\n            (r\"/jobs/new\" + request_format, NewJobsHandler),\n            (r\"/jobs/([0-9]+)/edit\" + request_format, EditJobsHandler)\n        ]\n        for handler in newHandlers:\n            baseHandlers.append(handler)\n\n\n    tornado.web.Application.__init__(self, baseHandlers, debug = debug)\n",
  "label": 0
 },
 {
  "idx": 2375,
  "doc": "Python: Find in list",
  "code": "next((x for x in lst if ...), [default value])\n",
  "label": 1
 },
 {
  "idx": 2376,
  "doc": "Python: Find in list",
  "code": "[1,2,3].index(2) # => 1\n[1,2,3].index(4) # => ValueError\n",
  "label": 1
 },
 {
  "idx": 2377,
  "doc": "Python: Find in list",
  "code": "3 in [1, 2, 3] # => True\n",
  "label": 1
 },
 {
  "idx": 2378,
  "doc": "Python - split list of lists by value",
  "code": "a = [[\"aa\",1,3]\n     [\"aa\",3,3]\n     [\"sdsd\",1,3]\n     [\"sdsd\",6,0]\n     [\"sdsd\",2,5]\n     [\"fffffff\",1,3]]\n\nd = {}\nfor sub in a:\n    key = sub[0]\n    if key not in d: d[key] = []\n    d[key].append(sub)\n",
  "label": 1
 },
 {
  "idx": 2379,
  "doc": "Converting dictionary of dictionary of dictionary to pandas data frame",
  "code": "In [2]: nested_dict = {'2': {'lagtime': {'darkgreen': 210,\n   ...:    'darkorange': 141,\n   ...:    'pink': 142,\n   ...:    'red': 141}}}\n\nIn [4]: list_of_dict = []\n\nIn [7]: for key, value in nested_dict.items():\n   ...:     for key1, value1 in value.items():\n   ...:         for key2,value2 in value1.items():\n   ...:             list_of_dict.append({'A':key,'B':key1,'C':key2,'D':value2})\n   ...:\n\nIn [8]: df = pd.DataFrame(list_of_dict)\n\nIn [9]: df\nOut[9]:\n   A        B           C    D\n0  2  lagtime   darkgreen  210\n1  2  lagtime        pink  142\n2  2  lagtime  darkorange  141\n3  2  lagtime         red  141\n",
  "label": 1
 },
 {
  "idx": 2380,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['data_prime'] = df['data'] * 3\n",
  "label": 1
 },
 {
  "idx": 2381,
  "doc": "better way to find pattern in string?",
  "code": ">>> re.search(r\"\"\"(?x)\\b(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.\n...                     (25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.\n...                     (25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.\n...                     (25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\b\"\"\", b).group()\n'100.80.54.93'\n",
  "label": 1
 },
 {
  "idx": 2382,
  "doc": "better way to find pattern in string?",
  "code": ">>> re.search(r\"\\d+\\.\\d+\\.\\d+\\.\\d+\", a).group()\n'100.80.54.162'\n",
  "label": 1
 },
 {
  "idx": 2383,
  "doc": "call function through variable or without parentheses in python",
  "code": ">>> import os\n>>> class EvaluatingName(object):\n...     def __init__(self, callable):\n...         self._callable = callable\n...     def __call__(self):\n...         return self._callable()\n...     def __repr__(self):\n...         return repr(self())\n...\n>>> ls = EvaluatingName(os.getcwd)\n>>> os.chdir('/')\n>>> ls\n'/'\n>>> os.chdir('/tmp')\n>>> ls\n'/private/tmp'\n",
  "label": 1
 },
 {
  "idx": 2384,
  "doc": "Run multiple threads until one exits in python",
  "code": "import multiprocessing\nimport time\n\ndef calculate1(result_queue):\n    print \"calculate1 started\"\n    time.sleep(10)\n    result = 3.14\n    result_queue.put(result)\n    print \"calculate1 found the result!\"\n\ndef calculate2(result_queue):\n    print \"calculate2 started\"\n    time.sleep(2)\n    result = 3.14\n    result_queue.put(result)\n    print \"calculate2 found the result!\"\n\nresult_queue = multiprocessing.Queue()\n\nprocess1 = multiprocessing.Process(target=calculate1, args=[result_queue])\nprocess2 = multiprocessing.Process(target=calculate2, args=[result_queue])\n\nprocess1.start()\nprocess2.start()\n\nprint \"Calculating the result with 2 threads.\"\n\nresult = result_queue.get() # waits until any of the proccess have `.put()` a result\n\nfor process in [process1, process2]: # then kill them all off\n    process.terminate()\n\nprint \"Got result:\", result\n",
  "label": 1
 },
 {
  "idx": 2385,
  "doc": "Converting list of dictionaries to unique list of dictionaries",
  "code": ">>> pprint(combine(l))\n{'ROOT': [{'SecondElem': '5.0.0.1',\n           'ThirdElem': '127.3.15.1',\n           'firstElem': 'gc-3/1/0',\n           'function': 'session',\n           'hw': '0.0.0.0',\n           'index': 16,\n           'resources': {'cpu-info': {'cpu-avg-load': 1,\n                                      'cpu-peak-load': 1},\n                         'memory-total': 1,\n                         'memory-used': 2},\n           'sw': '1.50.1.3'},\n          {'SecondElem': '5.0.0.2',\n           'ThirdElem': '127.3.4.1',\n           'firstElem': 'gc-4/1/0',\n           'function': 'stand',\n           'hw': '0.0.0.0',\n           'index': 5,\n           'resources': {'cpu-info': {'cpu-avg-load': 1,\n                                      'cpu-peak-load': 1},\n                         'memory-total': 1,\n                         'memory-used': 2},\n           'sw': '1.50.1.3'}]}\n>>> \n",
  "label": 0
 },
 {
  "idx": 2386,
  "doc": "Converting list of dictionaries to unique list of dictionaries",
  "code": ">>> from collections import defaultdict\n>>> def  combine(item):\n    # Easy return if not a list: element itself\n    if type(item) != type([]):\n        return item\n    # else call recursion\n    first_ret = [(i.items()[0][0], combine(i.items()[0][1])) for i in item]\n\n    # Here we group by same keys if any ('ROOT', for instance)\n    count_keys = defaultdict(list)\n    for couple in first_ret:\n        count_keys[couple[0]].append(couple[1])\n    return dict((k, v if len(v) > 1 else v[0]) for k, v in count_keys.iteritems())\n",
  "label": 1
 },
 {
  "idx": 2387,
  "doc": "Build slice objetcs from subscript notation",
  "code": ">>> Slice = type('', (), {'__getitem__': lambda _, x: x})()\n>>> Slice[1:2]\nslice(1, 2, None)\n>>> Slice[1:2:3]\nslice(1, 2, 3)\n>>>\n",
  "label": 1
 },
 {
  "idx": 2388,
  "doc": "Python - regex to match url with mongo object id",
  "code": "r'\\/api\\/v1\\/users\\/([a-f\\d]{24})\\/submissions'\n",
  "label": 1
 },
 {
  "idx": 2389,
  "doc": "Send data from c program to python program using pipe?",
  "code": "filename = \"fifo.tmp\"\n\n# Block until writer finishes...\nwith open(filename, 'r') as f:\n    data = f.read()\n\n# Split data into an array\narray = [int(x) for x in data.split()]\n\nprint array\n",
  "label": 0
 },
 {
  "idx": 2390,
  "doc": "Jenkins and Python",
  "code": "python ./local_lib/bin/regression.py -u daily_regression\npython ./local_lib/bin/run.py -t $Test_Name -b -c -no_compile -no_wlf\npython ./local_lib/bin/run.py -t $Test_Name -b -c -no_compile -no_wlf -args=\"$sim_args\"\npython ./local_lib/bin/results.py  -r daily_regression -html  -o $WORK/results/daily_regression_results.html\n",
  "label": 0
 },
 {
  "idx": 2391,
  "doc": "Creating multiple copies of list elements",
  "code": ">>> weighted = [ (\"a\", 3), (\"b\", 1), (\"c\", 4) ]\n>>> [c for c, count in weighted for _ in range(count)]\n['a', 'a', 'a', 'b', 'c', 'c', 'c', 'c']\n>>> from itertools import chain\n>>> list(chain.from_iterable([c] * count for c, count in weighted))\n['a', 'a', 'a', 'b', 'c', 'c', 'c', 'c']\n",
  "label": 1
 },
 {
  "idx": 2392,
  "doc": "Python: Getting all the items out of a `threading.local`",
  "code": "from _threading_local import local\nimport threading\nimport time\n\nl = local()\n\ndef f():\n   global l\n   l.ok = \"HMM\"\n   time.sleep(50)\n\nif __name__ == \"__main__\":\n    l.ok = 'hi'\n    t = threading.Thread(target=f)\n    t.start()\n    for t in threading.enumerate():\n        for item in t.__dict__:\n           if isinstance(item, tuple):\n               print(\"Thread's local is %s\" % t.__dict__[item])\n",
  "label": 1
 },
 {
  "idx": 2393,
  "doc": "Python: Getting all the items out of a `threading.local`",
  "code": ">>> threading.current_thread().__dict__\n{ ..., ('_local__key', 'thread.local.140466266257288'): {'ok': 'hi'}, ...}\n",
  "label": 0
 },
 {
  "idx": 2394,
  "doc": "Grouping data in a list of of dicts",
  "code": "combined_dict = merge_dicts(list_of_dicts)\n\nfor (type, obj_id), (actors, extra_fields) in combined_dict.items():\n    # do stuff with type, obj_id, actors, extra_fields\n",
  "label": 0
 },
 {
  "idx": 2395,
  "doc": "How to index a user input list in Python 2.x?",
  "code": "cities = []\nwhile True:\n    city = raw_input(\"Enter a city you've been to (or press enter to exit): \")\n    if city == '':  # no input -- this is your sentinel\n        break  # leave the loop\n    else:\n        cities.append(city)\n",
  "label": 0
 },
 {
  "idx": 2396,
  "doc": "Spark DataFrame TimestampType - how to get Year, Month, Day values from field?",
  "code": "elevDF = sqlContext.createDataFrame(sc.parallelize([\n        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=1, value=638.55),\n        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=2, value=638.55),\n        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=3, value=638.55),\n        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=4, value=638.55),\n        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=5, value=638.55)]))\n\n(elevDF\n .map(lambda (date, hour, value): (date.year, date.month, date.day))\n .collect())\n",
  "label": 1
 },
 {
  "idx": 2397,
  "doc": "django-mptt get_descendants for a list of nodes",
  "code": "   >> some_nodes = [<Node: T1>, <Node: T2>, <Node: T3>]  # QureySet\n   >> print get_queryset_descendants(some_nodes)\n   [<Node: T1.1>, <Node: T1.2>, <Node: T3.3>, <Node: T3.3.3>] \n   >> print get_queryset_descendants(some_nodes, include_self=True)\n   [<Node: T1>, <Node: T1.1>, <Node: T1.2>, <Node: T2>, <Node: T3>, <Node: T3.3>, <Node: T3.3.3>] \n",
  "label": 0
 },
 {
  "idx": 2398,
  "doc": "3x1 Matrix Multiplication with lists[UPDATED]",
  "code": ">>> zip([1,2],[3,4])\n[(1, 3), (2, 4)]\n>>> \n",
  "label": 0
 },
 {
  "idx": 2399,
  "doc": "How to check if key is primary psycopg2",
  "code": "SELECT column_name\nFROM information_schema.table_constraints\n     JOIN information_schema.key_column_usage\n         USING (constraint_catalog, constraint_schema, constraint_name,\n                table_catalog, table_schema, table_name)\nWHERE constraint_type = 'PRIMARY KEY'\n  AND (table_schema, table_name) = ('yourschema', 'yourtable')\nORDER BY ordinal_position;\n",
  "label": 1
 },
 {
  "idx": 2400,
  "doc": "Custom dictionary lookup in Python",
  "code": "(3, 2, 2)\n",
  "label": 0
 },
 {
  "idx": 2401,
  "doc": "Numpy Compare unequal rows and make both array of same dimension",
  "code": ">>> b[np.array([np.equal(*I) for I in zip(a[:,3],b[:,3])])]\narray([[41641,  1428,     0,  2554],\n       [44075,  1428,     0,  2555],\n       [44901,  1428,     1,  2556],\n       [45377,  1428,     0,  2557]])\n",
  "label": 1
 },
 {
  "idx": 2402,
  "doc": "lxml etree find closest element before",
  "code": "\nfor el in elems:\n    try:\n        print el.xpath(\"preceding::c[@attr1]\")[-1].get(\"attr1\")\n    except IndexError:\n        print \"No preceding 'c' element.\"\n",
  "label": 1
 },
 {
  "idx": 2403,
  "doc": "Drop Duplicate in market data",
  "code": ">>> df != df.shift()\n     Bid    Ask\n1   True   True\n2  False  False\n3  False  False\n4   True   True\n5  False  False\n6   True   True\n7  False  False\n8  False   True\n",
  "label": 0
 },
 {
  "idx": 2404,
  "doc": "Switching Printer Trays",
  "code": "from win32com import client\n    import time\n    ie = client.Dispatch(\"InternetExplorer.Application\")\n    def printPDFDocument(filename):\n        ie.Navigate(filename)\n        if ie.Busy:\n            time.sleep(1)\n        ie.Document.printAll()\n    ie.Quit()\n",
  "label": 0
 },
 {
  "idx": 2405,
  "doc": "Set a kind name independently of the model name (App Engine datastore)",
  "code": "class ModuleModel(db.Model):\n  @classmethod\n  def kind(cls):\n    return '%s_%s' % (cls.__module__, super(ModuleModel, cls).kind())\n",
  "label": 1
 },
 {
  "idx": 2406,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "binwidth = numpy.max(rev_count)//10 # Changed this to floor division\nrevbin = range(0, numpy.max(rev_count), binwidth)\nrevbinnedstars = [None]*len(revbin)\n\nfor i in range(0, len(revbin)-1):\n    # I actually don't know what you wanted to do but I guess you wanted the\n    # \"logical and\" combination in that bin (you don't need to use np.where here)\n    # You can put that all in one statement but it gets crowded so I'll split it:\n    index1 = revbin[i]-binwidth/2 < rev_count\n    index2 = rev_count < revbin[i]+binwidth/2)\n    revbinnedstars[i] = numpy.mean(stars[np.logical_and(index1, index2)])\n",
  "label": 1
 },
 {
  "idx": 2407,
  "doc": "Adding a simple value to a string",
  "code": "path2 = r'\"C:\\Users\\bgbesase\\Documents\\Brent\\Code\\Visual Studio'\n",
  "label": 0
 },
 {
  "idx": 2408,
  "doc": "Grammar rule extraction from parsed result",
  "code": ">>> from nltk.tree import Tree\n>>> bracket_parse = \"(S (VP (VB get) (NP (PRP me)) (ADVP (RB now))))\"\n>>> ptree = Tree.fromstring(bracket_parse)\n>>> ptree\nTree('S', [Tree('VP', [Tree('VB', ['get']), Tree('NP', [Tree('PRP', ['me'])]), Tree('ADVP', [Tree('RB', ['now'])])])])\n>>> for subtree in ptree.subtrees():\n...     print subtree\n... \n(S (VP (VB get) (NP (PRP me)) (ADVP (RB now))))\n(VP (VB get) (NP (PRP me)) (ADVP (RB now)))\n(VB get)\n(NP (PRP me))\n(PRP me)\n(ADVP (RB now))\n(RB now)\n",
  "label": 0
 },
 {
  "idx": 2409,
  "doc": "How to avoid defining a variable to hold a function result which might be needed only once",
  "code": "@save_last\ndef my_func(...):\n    # function definition\n",
  "label": 0
 },
 {
  "idx": 2410,
  "doc": "How to avoid defining a variable to hold a function result which might be needed only once",
  "code": "if my_func(x) == some_value:\n    # do anything with the value returned by my_func, saved in my_func.last\n    # such as\n    print my_func.last\n    return my_func.last\n",
  "label": 0
 },
 {
  "idx": 2411,
  "doc": "Embedding IronPython in a WinForms app and interrupting execution",
  "code": "public void StopButton_OnClick(object sender, EventArgs e) {\n    pythonThread.Abort(new Microsoft.Scripting.KeyboardInterruptException(\"\"));\n}\n",
  "label": 0
 },
 {
  "idx": 2412,
  "doc": "Print floating point values without leading zero",
  "code": ">>> print('some text {:.3f} some more text',format(MyFloat(.4444)))\nsome text 0.444 some more text\n>>> print('some text {:.3fz} some more text',format(MyFloat(.4444)))\nsome text .444 some more text\n\n\n>>> print('some text {:+.3f} some more text',format(MyFloat(.4444)))\nsome text +0.444 some more text\n>>> print('some text {:+.3fz} some more text',format(MyFloat(.4444)))\nsome text +.444 some more text\n\n\n>>> print('some text {:.3f} some more text',format(MyFloat(-.4444)))\nsome text -0.444 some more text\n>>> print('some text {:.3fz} some more text',format(MyFloat(-.4444)))\nsome text -.444 some more text\n",
  "label": 0
 },
 {
  "idx": 2413,
  "doc": "Group counted words in python",
  "code": "from collections import defaultdict\nd = defaultdict(list)\nfor key, value in cnt.items():\n     d[value].append(key)     \n\nfor key, value in d.items():                                                \n   print '{}:{}'.format(key, \" \".join(value))                              \n\n2:windows\n3:android iphone\n5:apple\n....    \n",
  "label": 1
 },
 {
  "idx": 2414,
  "doc": "Conditionally replace several columns with default values in Pandas",
  "code": "df.loc[df.DEFAULT, special] = default\n\ndf\nOut[44]: \n          A         B         C         D         E         F         G  \\\n0  0.513798  0.138073  0.685051  0.173045  0.964050  0.245352  0.360657   \n1  0.286920  0.464747  0.301910  0.857810  0.957686  0.684297  0.381671   \n2  1.000000  0.454802  0.707585  2.000000  0.777142  0.738670  3.000000   \n3  0.894643  0.987747  0.162569  0.430214  0.205933  0.651764  0.361578   \n4  1.000000  0.859582  0.014823  2.000000  0.658297  0.875474  3.000000   \n5  0.075581  0.848288  0.819145  0.429341  0.718035  0.275785  0.951492   \n6  0.984910  0.858093  0.665032  0.138201  0.006561  0.282801  0.050243   \n7  1.000000  0.215375  0.594164  2.000000  0.666909  0.598950  3.000000   \n8  1.000000  0.931840  0.568436  2.000000  0.911106  0.727052  3.000000   \n9  0.140491  0.181527  0.436082  0.617412  0.468370  0.496973  0.426825   \n\n          H         I         J DEFAULT  \n0  0.964239  0.422831  0.660515   False  \n1  0.650808  0.112612  0.897050   False  \n2  0.537366  4.000000  0.243392    True  \n3  0.377302  0.341089  0.488061   False  \n4  0.074656  4.000000  0.317079    True  \n5  0.990471  0.634703  0.141121   False  \n6  0.026650  0.731152  0.589984   False  \n7  0.570956  4.000000  0.762232    True  \n8  0.828288  4.000000  0.359620    True  \n9  0.701504  0.050273  0.427838   False  \n",
  "label": 1
 },
 {
  "idx": 2415,
  "doc": "Using DataFrame to get matrix of identifiers",
  "code": "users = data.set_index('date')['user_id']\nvisits = pd.get_dummies(users)\n",
  "label": 0
 },
 {
  "idx": 2416,
  "doc": "Using DataFrame to get matrix of identifiers",
  "code": "visits.groupby(visits.index).any().astype(int)\n",
  "label": 0
 },
 {
  "idx": 2417,
  "doc": "Using DataFrame to get matrix of identifiers",
  "code": "            a1  a15  a3  a4  a5  a8\ndate                               \n2011-01-02   0    0   0   0   0   1\n2011-01-05   1    0   0   0   0   0\n2011-01-05   1    0   0   0   0   0\n2011-01-12   0    0   0   1   0   0\n2011-01-12   0    0   1   0   0   0\n2011-01-12   1    0   0   0   0   0\n2011-01-12   0    1   0   0   0   0\n2011-01-19   0    1   0   0   0   0\n2011-01-19   1    0   0   0   0   0\n2011-01-19   0    0   0   0   1   0\n",
  "label": 0
 },
 {
  "idx": 2418,
  "doc": "How to see traceback on xmlrpc server, not client?",
  "code": "from SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler\n\nport = 9999\n\ndef func():\n    print 'Hi!'\n    print x # error!\n    print 'Bye!'\n\nclass Handler(SimpleXMLRPCRequestHandler):\n     def _dispatch(self, method, params):\n         try: \n             return self.server.funcs[method](*params)\n         except:\n             import traceback\n             traceback.print_exc()\n             raise\n\n\nif __name__ == '__main__':\n    server = SimpleXMLRPCServer((\"localhost\", port), Handler)\n    server.register_function(func)\n    print \"Listening on port %s...\" % port\n    server.serve_forever()\n",
  "label": 1
 },
 {
  "idx": 2419,
  "doc": "Generic way to get primary key from declaratively defined instance in SQLAlchemy",
  "code": "Base = declarative_base()\n\nclass MyClass(Base):\n    __tablename__ = 'mytable'\n    key = Column(Integer, primary_key=True)\na = MyClass(key=1)\n\nfrom sqlalchemy.inspection import inspect    \npk = inspect(a).identity\nprint pk\n",
  "label": 1
 },
 {
  "idx": 2420,
  "doc": "Generic way to get primary key from declaratively defined instance in SQLAlchemy",
  "code": "(1,)\n",
  "label": 0
 },
 {
  "idx": 2421,
  "doc": "A PYTHONSTARTUP file for a specific directory",
  "code": "#!/bin/sh\n# filename: workon.sh\nexport PYTHONSTARTUP=$HOME/myproject/.pystartup\npython ~/myproject/start.py\n",
  "label": 0
 },
 {
  "idx": 2422,
  "doc": "pandas dataframe: return column that is a compression of other columns",
  "code": ">>> df\n\n  A  B abc1  abc2 abc3 abc4\n0  1  4    x  root    a    d\n1  1  3    y     d    b    e\n2  2  4    z     e    c  bar\n3  3  5    r     g    d    f\n4  4  8    z     z    z    z\n\n>>> cols = [x for x in df.columns if 'abc' in x]\n>>> df['newcol'] = df[cols].apply(lambda x: x.str.contains('r'),axis=0).any(axis=1)\n>>> df['newcol'] = df['newcol'].map({True:'r',False:'np.nan'}) \n>>> df\n\n   A  B abc1  abc2 abc3 abc4  newcol\n0  1  4    x  root    a    d       r\n1  1  3    y     d    b    e  np.nan\n2  2  4    z     e    c  bar       r\n3  3  5    r     g    d    f       r\n4  4  8    z     z    z    z  np.nan\n",
  "label": 1
 },
 {
  "idx": 2423,
  "doc": "pandas dataframe: return column that is a compression of other columns",
  "code": ">>> df\n\n   A  B abc1 abc2 abc3 abc4\n0  1  4    x    r    a    d\n1  1  3    y    d    b    e\n2  2  4    z    e    c    r\n3  3  5    r    g    d    f\n4  4  8    z    z    z    z\n",
  "label": 0
 },
 {
  "idx": 2424,
  "doc": "Pandas OR statement ending in series contains",
  "code": "import numpy as np\nimport pandas as pd\ndf = pd.DataFrame(np.random.randint(0, 10, size=(100, 2)), columns=[\"type\", \"subtype\"])\ncounts = pd.crosstab(df.type, df.subtype)\n\nprint counts.loc[0, [2, 3, 5, 6]].sum() + counts.loc[5, [3, 4, 7, 8]].sum()\n",
  "label": 1
 },
 {
  "idx": 2425,
  "doc": "How to generate an html directory list using Python",
  "code": "def make_tree(path):\n    tree = dict(name=os.path.basename(path), children=[])\n    try: lst = os.listdir(path)\n    except OSError:\n        pass #ignore errors\n    else:\n        for name in lst:\n            fn = os.path.join(path, name)\n            if os.path.isdir(fn):\n                tree['children'].append(make_tree(fn))\n            else:\n                tree['children'].append(dict(name=name))\n    return tree\n",
  "label": 0
 },
 {
  "idx": 2426,
  "doc": "How to generate an html directory list using Python",
  "code": "<!doctype html>\n<title>Path: {{ tree.name }}</title>\n<h1>{{ tree.name }}</h1>\n<ul>\n{%- for item in tree.children recursive %}\n    <li>{{ item.name }}\n    {%- if item.children -%}\n        <ul>{{ loop(item.children) }}</ul>\n    {%- endif %}</li>\n{%- endfor %}\n</ul>\n",
  "label": 0
 },
 {
  "idx": 2427,
  "doc": "Converting coordinate tuple information to numpy arrays",
  "code": "f = data[:, 3].reshape(Nx1, Nx2, Nx3)\ng = data[:, 4].reshape(Nx1, Nx2, Nx3)\nh = data[:, 5].reshape(Nx1, Nx2, Nx3)\n",
  "label": 0
 },
 {
  "idx": 2428,
  "doc": "How to address a dictionary in a list of ordered dicts by unique key value?",
  "code": ">>> d = defaultdict(dict)\n>>> d['a']['values'] = []\n>>> d['b']['values'] = []\n>>> d['a']['values'].append('a')\n>>> d['a']['values'].append('b')\n>>> print(d)\ndefaultdict(<type 'dict'>, {'a': {'values': ['a', 'b']}, 'b': {'values': []}})\n",
  "label": 1
 },
 {
  "idx": 2429,
  "doc": "How to address a dictionary in a list of ordered dicts by unique key value?",
  "code": ">>> from collections import defaultdict\n>>> d = defaultdict(list)\n>>> d['a'].append(1)\n>>> d['a'].append(2)\n>>> d['b'].append(3)\n>>> d['c'].append(4)\n>>> d['b'].append(5)\n>>> print(d['a'])\n[1, 2]\n>>> print(d)\ndefaultdict(<type 'list'>, {'a': [1, 2], 'c': [4], 'b': [3, 5]})\n",
  "label": 1
 },
 {
  "idx": 2430,
  "doc": "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy",
  "code": "import numpy as np\nsummed = 0\n\ndim1 = 2  # this is 81 in your case\ndim2 = 4  # this is 990000 in your case\narray = np.random.random(size=(dim1, dim2, 3))\n\nNt = dim2\ni = Nt // 2\n\nfor k in xrange(dim1):\n    summed = 0\n    for j in xrange(dim2-i):\n        vec1 = array[k][j]\n        vec2 = array[k][j+i]\n        summed += np.dot(vec1,vec2)\n    print summed\n\nprint '='*70\n\nfor k in xrange(dim1):\n    summed = np.einsum('ij,ij', array[k][:Nt//2], array[k][Nt//2:])\n    print summed\n",
  "label": 1
 },
 {
  "idx": 2431,
  "doc": "Make one list from two list applying constraint",
  "code": ">>> A = [2,3,1,4,5,2,4]\n>>> B = [4,2,3,6,2,5,1]\n>>> [i for sublist in [[a, b] if a < b else [b, a] for a, b in zip(A, B)] for i in sublist]\n[2, 4, 2, 3, 1, 3, 4, 6, 2, 5, 2, 5, 1, 4]\n",
  "label": 1
 },
 {
  "idx": 2432,
  "doc": "Python: Scrape Data from Web after Inputing Info",
  "code": "from lxml import html\nimport requests\n\ndef historic_quotes(symbol, stMonth, stDate, stYear, enMonth, enDate, enYear):\n    url = 'https://finance.yahoo.com/q/hp?s=%s+Historical+Prices' % symbol\n\n    params = {\n        'a': stMonth,\n        'b': stDate,\n        'c': stYear,\n        'd': enMonth,\n        'e': enDate,\n        'f': enYear,\n        'submit': 'submit',\n    }\n    response = requests.get(url, params=params)\n\n    tree = html.document_fromstring(response.content)\n    for amount in tree.xpath('//table[@class=\"yfnc_datamodoutline1\"]//tr[td[@class=\"yfnc_tabledata1\"]]//td[5]/text()'):\n        print amount\n\nhistoric_quotes('baba', '00', '11', '2010', '00', '11', '2015')\n",
  "label": 1
 },
 {
  "idx": 2433,
  "doc": "Python list and time",
  "code": "from datetime import datetime\ntime_list = []\ntime_list.append(datetime.now())\n",
  "label": 1
 },
 {
  "idx": 2434,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "import numpy as np\n\ncolor = np.array([\n    [  0,   0,   0],\n    [128,   0, 128],\n    [  0, 128, 128],\n    [  0,   0, 128],\n    [  0, 128,   0],\n    [128, 128,   0],\n    [128, 128, 128],\n    [128,   0,   0],], dtype='uint8').reshape(-1,2,3)\n\ncolor2ind = {(128, 128, 128): 6, \n             (0, 128, 128): 2, \n             (128, 0, 128): 1, \n             (128, 0, 0): 7, \n             (128, 128, 0): 5, \n             (0, 0, 128): 3, \n             (0, 128, 0): 4, \n             (0, 0, 0): 0}\n",
  "label": 0
 },
 {
  "idx": 2435,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "\nIn [295]: color = np.tile(color, (100,100,1))\n\nIn [296]: (rgb2vals(color, color2ind) == using_loops(color, color2ind)).all()\nOut[296]: True\n\nIn [297]: %timeit rgb2vals(color, color2ind)\n100 loops, best of 3: 6.74 ms per loop\n\nIn [298]: %timeit using_loops(color, color2ind)\n1 loops, best of 3: 751 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2436,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [271]: int_keys = rgb2int(np.array(color2ind.keys(), dtype='uint8'))\nIn [271]: int_keys\nOut[271]: \narray([8388608, 8421504, 8388736, 8421376,     128,       0,   32768,\n         32896], dtype=uint32)\n",
  "label": 0
 },
 {
  "idx": 2437,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [283]: int_array = np.r_[int_colors.ravel(), int_keys]\n\nIn [284]: uniq, index = np.unique(int_array, return_inverse=True)\n\nIn [285]: index\nOut[285]: array([0, 5, 3, 1, 2, 6, 7, 4, 4, 7, 5, 6, 1, 0, 2, 3])\n\nIn [286]: uniq\nOut[286]: \narray([      0,     128,   32768,   32896, 8388608, 8388736, 8421376,\n       8421504], dtype=uint32)\n",
  "label": 0
 },
 {
  "idx": 2438,
  "doc": "Beautiful Soup - how to fix broken tags",
  "code": ">>> print s\n\n<tr>\ntd>LABEL1</td><td>INPUT1</td>\n</tr>\n<tr>\n<td>LABEL2</td><td>INPUT2</td>\n</tr>\n\n>>> print re.sub(\">\\s*(\\!--|\\!DOCTYPE|\\\n                       a|abbr|acronym|address|applet|area|\\\n                       b|base|basefont|bdo|big|blockquote|body|br|button|\\\n                       caption|center|cite|code|col|colgroup|\\\n                       dd|del|dfn|dir|div|dl|dt|\\\n                       em|\\\n                       fieldset|font|form|frame|frameset|\\\n                       head|h1|h2|h3|h4|h5|h6|hr|html|\\\n                       i|iframe|img|input|ins|\\\n                       kbd|\\\n                       label|legend|li|link|\\\n                       map|menu|meta|\\\n                       noframes|noscript|\\\n                       object|ol|optgroup|option|\\\n                       p|param|pre|\\\n                       q|\\\n                       s|samp|script|select|small|span|strike|strong|style|sub|sup|\\\n                       table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\\\n                       u|ul|\\\n                       var)>\", \"><\\g<1>>\", s)\n\n<tr><td>LABEL1</td><td>INPUT1</td>\n</tr>\n<tr>\n<td>LABEL2</td><td>INPUT2</td>\n</tr>\n",
  "label": 0
 },
 {
  "idx": 2439,
  "doc": "Custom sort python",
  "code": "alphabet_dict = dict([(x, alphabet.index(x)) for x in alphabet)\nnew_list = sorted(inputList, key=lambda word: [alphabet_dict[c] for c in word[0]])\n",
  "label": 1
 },
 {
  "idx": 2440,
  "doc": "Custom sort python",
  "code": "alphabet = \"zyxwvutsrqpomnlkjihgfedcba\"\n\nnew_list = sorted(inputList, key=lambda word: [alphabet.index(c) for c in word[0]])\n",
  "label": 1
 },
 {
  "idx": 2441,
  "doc": "Changing an input from an integer to a string back to an integer",
  "code": "timeList = timeString.split(\":\")\nprint(timeList) -> [\"10\",\"59\",\"16\"]\n",
  "label": 0
 },
 {
  "idx": 2442,
  "doc": "Changing an input from an integer to a string back to an integer",
  "code": "timeString = \"10:59:16\"\n",
  "label": 0
 },
 {
  "idx": 2443,
  "doc": "Changing an input from an integer to a string back to an integer",
  "code": "hours = int(timeList[0]) -> 10\nminutes = int(timeList[1]) -> 59\nseconds = int(timeList[2]) -> 16\n",
  "label": 0
 },
 {
  "idx": 2444,
  "doc": "Changing an input from an integer to a string back to an integer",
  "code": "timeString = str(hours) + \":\" + str(minutes) + \":\" + str(seconds)\nprint(timeString) -> \"10:59:16\"\n",
  "label": 0
 },
 {
  "idx": 2445,
  "doc": "More efficient way to make unicode escape codes",
  "code": "s = '\u0441\u043b\u043e\u0432\u043e'\nwith open('data.txt','wb') as f:\n    f.write(s.encode('unicode_escape'))\n    f.write(b'\\n')  # add a line feed\n",
  "label": 1
 },
 {
  "idx": 2446,
  "doc": "Is there an easy way to tell which line number a file pointer is on?",
  "code": "f = FileLineWrapper(open(\"myfile.txt\", \"r\"))\nf.readline()\nprint(f.line)\n",
  "label": 0
 },
 {
  "idx": 2447,
  "doc": "How to convert a dict to string?",
  "code": ">>> dct = {'a':'vala', 'b':'valb'}\n>>> ','.join('{}={!r}'.format(k, v) for k, v in dct.items())\n\"a='vala',b='valb'\"\n",
  "label": 1
 },
 {
  "idx": 2448,
  "doc": "How to convert a dict to string?",
  "code": ">>> dct = {'a': 1, 'b': '2'}\n>>> ','.join('{}={!r}'.format(k, v) for k, v in dct.items())\n\"a=1,b='2'\"\n>>> ','.join(\"{}='{}'\".format(k, v) for k, v in dct.items())\n\"a='1',b='2'\"\n",
  "label": 1
 },
 {
  "idx": 2449,
  "doc": "Counting observations after grouping by dates in pandas",
  "code": "In[1]:  grouped_dates = df.groupby(df['Time'].apply(lambda x : x.date()))\nIn[2]:  grouped_dates['Time'].aggregate(len)\nOut[2]:  \n2013-01-01     60\n2013-01-02     60\n",
  "label": 1
 },
 {
  "idx": 2450,
  "doc": "Counting observations after grouping by dates in pandas",
  "code": "In[1]:  df.groupby(df['Time'].apply(lambda x : x.date())).agg({'Time':pd.Series.nunique})\nOut[1]:  \n2013-01-01     60\n2013-01-02     60\n",
  "label": 1
 },
 {
  "idx": 2451,
  "doc": "Counting observations after grouping by dates in pandas",
  "code": "In[1]:  from collections import Counter\nIn[2]:  counted_dates = Counter(df['Time'].apply(lambda x: x.date()))\nIn[3]:  counted_series = pd.Series(counted_dates)\nIn[4]:  counted_series.index = pd.to_datetime(counted_series.index)\nIn[5]:  counted_series\nOut[5]:\n2013-01-01     60\n2013-01-02     60\n",
  "label": 1
 },
 {
  "idx": 2452,
  "doc": "Initialize list with same bool value",
  "code": ">>> [False] * 10\n[False, False, False, False, False, False, False, False, False, False]\n",
  "label": 1
 },
 {
  "idx": 2453,
  "doc": "Accept a single string instead of normal parameters",
  "code": "class Time:\n    def __init__(self, hours=0, minutes=0, seconds=0, time_now=''):\n        if hours == 'now':\n            tmp_t = now()\n            self.hour = tmp_t.hour\n            self.min = tmp_t.min\n            self.sec = tmp_t.sec\n        else:\n            t = abs(3600*hours + 60*minutes + seconds)\n            self.hour = t//3600\n            self.min = t//60%60\n            self.sec = t%60\n",
  "label": 1
 },
 {
  "idx": 2454,
  "doc": "list extend() to index, inserting list elements not only to the end",
  "code": "def my_extend(self, other_list, index):\n    self[index:index] = other_list\n",
  "label": 1
 },
 {
  "idx": 2455,
  "doc": "list extend() to index, inserting list elements not only to the end",
  "code": "a_list[1:1] = b_list\n",
  "label": 1
 },
 {
  "idx": 2456,
  "doc": "Python: Removing random whitespace from a string of numbers",
  "code": "['20101002', '100224', '1', '1044', '45508', '1001', '1002', '1003', '1004', '1005', '1006']\n",
  "label": 0
 },
 {
  "idx": 2457,
  "doc": "How to make QtGui window process events whenever it is brought forward on the screen?",
  "code": "def focusInEvent(self, event):\n    event.accept()\n\n    # insert your code here\n",
  "label": 0
 },
 {
  "idx": 2458,
  "doc": "How to make QtGui window process events whenever it is brought forward on the screen?",
  "code": "0\n Updating the main loop\n1\nUpdating the main loop\n2\nUpdating the main loop\n3\nUpdating the main loop\n4\nUpdating the main loop\n5\nUpdating the main loop\n6\nUpdating the main loop\nUpdating the main loop7\n\n8\nUpdating the main loop\n9\n",
  "label": 0
 },
 {
  "idx": 2459,
  "doc": "Python: How to remove a list containing Nones from a list of lists?",
  "code": "i = 0\nwhile i < len(myList):\n    if(myList[i].count(None) >= 4):\n        del myList[i]\n    else:\n        i += 1\n",
  "label": 1
 },
 {
  "idx": 2460,
  "doc": "Disable pagination in Django tastypie?",
  "code": "class MyResource(ModelResource):\n    ...\n    class Meta:\n        ...\n        max_limit = None\n",
  "label": 0
 },
 {
  "idx": 2461,
  "doc": "Writing to a specific column of a text file in python",
  "code": "arr = ['ABCD', '1', 'P', '15-06-2015', '0', 'Name of the account']\nprint \"{:16}{:3}{:3}{:29}{:3}{:40}\".format(*arr)\n",
  "label": 1
 },
 {
  "idx": 2462,
  "doc": "Assign values to the groups of a groupby in pandas",
  "code": "In [51]: res = df.groupby(['category', 'sensitivity_level']).max()\nIn [48]: x = res[res.val <= 30]\n\nIn [49]: \n\nIn [49]: x\nOut[49]: \n                            val\ncategory sensitivity_level     \nx        A                   20\n         B                   25\ny        A                   20\n\nIn [71]: x.reset_index('category').sort_index(ascending=False).groupby(level='sensitivity_level').first()\nOut[71]: \n                  category  val\nsensitivity_level              \nA                        y   20\nB                        x   25\n",
  "label": 0
 },
 {
  "idx": 2463,
  "doc": "Assign values to the groups of a groupby in pandas",
  "code": "In [33]: df.val.iloc[1] = 20\n\nIn [34]: df\nOut[34]: \n   category  val sensitivity_level\n0         x   20                 A\n1         x   20                 B\n2         x   60                 C\n3         x   20                 A\n4         x   25                 B\n5         x   60                 C\n6         y   20                 A\n7         y   40                 B\n8         y   60                 C\n9         y   20                 A\n10        y   24                 B\n11        y   30                 C\n",
  "label": 0
 },
 {
  "idx": 2464,
  "doc": "Attaching a PDF to an email in Appengine (Python)",
  "code": "pdf_contents = open(os.path.join(os.path.dirname(__file__), 'yourpdf.pdf')).read()\n",
  "label": 0
 },
 {
  "idx": 2465,
  "doc": "Filling gaps for cumulative sum with Pandas",
  "code": "In [12]: res.reindex(np.arange(res.index[0], res.index[-1] + 1))\nOut[12]:\ngoods   a   b   c\n1       0  30 NaN\n2      30 NaN  10\n3     NaN  70 NaN\n4     NaN NaN NaN\n5     NaN  40  50\n6      20 NaN NaN\n",
  "label": 0
 },
 {
  "idx": 2466,
  "doc": "More pythonic way to find a complementary DNA strand",
  "code": "import string\n\ndef complementary_strand(self, strand):\n    return strand.translate(string.maketrans('TAGCtagc', 'ATCGATCG'))\n",
  "label": 1
 },
 {
  "idx": 2467,
  "doc": "Use Python zip to save data in separate columns from a binary file",
  "code": ">>> s = \"abcdefghijklmnopqrstuvwxyz\"\n>>> import itertools\n>>> for val in itertools.islice(s, 0, None, 8):\n...   print val\n...\na\ni\nq\ny\n>>> for val in itertools.islice(s, 1, None, 8):\n...   print val\n...\nb\nj\nr\nz\n>>> for val in itertools.islice(s, 2, None, 8):\n...   print val\n...\nc\nk\ns\n",
  "label": 0
 },
 {
  "idx": 2468,
  "doc": "Conditionally and interatively calculate column based on value of three columns",
  "code": "df['connection'] = df.apply(lambda row: check(row['fld1'], row['fld2'],cnxn), axis=1)\n",
  "label": 0
 },
 {
  "idx": 2469,
  "doc": "Conditionally and interatively calculate column based on value of three columns",
  "code": "def check(fld1,fld2,cnxn_sub):\n    rowpair = ''.join((fld1,fld2))\n    return cnxn_sub[rowpair]\n",
  "label": 0
 },
 {
  "idx": 2470,
  "doc": "Conditionally and interatively calculate column based on value of three columns",
  "code": "fld1    fld2    relationship    connection\n0   x   x   0.25    0.5825\n1   x   y   0.25    0.5000\n2   x   z   0.50    0.5825\n3   y   x   0.33    0.4950\n4   y   y   0.33    0.5775\n5   y   z   0.33    0.4125\n6   z   x   0.50    0.6650\n7   z   y   0.50    0.7500\n",
  "label": 0
 },
 {
  "idx": 2471,
  "doc": "Pandas check for future condition by group",
  "code": "Demonstration / Explanation\n# Let's start with a sub-group\ndf1 = df[df.id == 1].copy()\n\nprint df1.apply(lambda x: check_future_pants(x, df1), axis=1)\n\n0     True\n1    False\n2    False\ndtype: bool\n",
  "label": 0
 },
 {
  "idx": 2472,
  "doc": "Pandas check for future condition by group",
  "code": "df['will_buy_pants'] = df.groupby('id', group_keys=False).apply(check_df_pants)\npring df\n\n   id       date       item will_buy_pants\n0   1 2000-01-01      'foo'           True\n1   1 2000-01-02    'pants'          False\n2   1 2000-01-03      'bar'          False\n3   2 2000-01-02    'organ'          False\n4   2 2000-02-01     'beef'          False\n5   3 2000-01-01    'pants'           True\n6   3 2000-01-10  'oranges'           True\n7   3 2000-02-20    'pants'          False\n",
  "label": 0
 },
 {
  "idx": 2473,
  "doc": "How to set a date restriction for returned events in Google Calendar and put them in order - Python",
  "code": "all_events = []\nfor <loop over events from server>:\n    all_events.append((dateutil.parser.parse(event['start']['date']), event['summary']))\n",
  "label": 0
 },
 {
  "idx": 2474,
  "doc": "How to set a date restriction for returned events in Google Calendar and put them in order - Python",
  "code": "from datetime import datetime, timedelta\n\nmax_td = timedelta(days=30)\nnow = datetime.now()\n\n# Remove events that are too far into the future\nfiltered_events = filter(lambda e: e[0] - now <= max_td, all_events)\n\n# Sort events in ascending order of start time\nfiltered_events.sort()\n",
  "label": 0
 },
 {
  "idx": 2475,
  "doc": "How to dynamically create classes inside a module-level initialize() method in Python",
  "code": "import sys\n\nBase = declarative_base()\nif len(sys.argv) > 1 and sys.argv[1] == '--use-alt-db':\n    engine = create_engine('mysql://user:pass@alt_host/db_name')\nelse:\n    engine = create_engine('mysql://user:pass@main_host/db_name')\n\ntable = Table('something', Base.metadata, autoload_with=engine)\n\nclass Something(Base):\n    __table__ = table\n",
  "label": 1
 },
 {
  "idx": 2476,
  "doc": "pandas: Rolling correlation with fixed patch for pattern-matching",
  "code": "assert np.allclose(expected['corr'].dropna(), result['corr'].dropna())\n",
  "label": 0
 },
 {
  "idx": 2477,
  "doc": "pandas: Rolling correlation with fixed patch for pattern-matching",
  "code": "In [77]: %timeit orig(df.copy(), patch.copy())\n1 loops, best of 3: 3.56 s per loop\n\nIn [78]: %timeit using_numpy(df.copy(), patch.copy())\n1000 loops, best of 3: 1.35 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2478,
  "doc": "Python module for playing sound data with progress bar?",
  "code": "import time\n\nstart_time = time.time()\nduration_s = sndfile.frames / sndfile.samplerate\n\nwhile 1:\n    elapsed_time = time.time() - start_time\n    current_location = elapsed_time / float(duration_s)\n    if current_location >= 1:\n         break\n    time.sleep(.01)\n",
  "label": 0
 },
 {
  "idx": 2479,
  "doc": "Update dictionary in xml from csv file in python",
  "code": "csv_dict = string_to_dict(csv_data)\n# csv_dict = {'AAK': '1|2|8', 'AAC': '1|1|1'}\nxml_dict = string_to_dict(d.text)\n# xml_dict = {'ABC': '1|3|5', 'FFK': '33', 'AAC': '7|3|8', 'DAK': '5|1|3'}\n",
  "label": 0
 },
 {
  "idx": 2480,
  "doc": "Python-Getting contents between current and next occurrence of pattern in a string",
  "code": ">>> findbetween('abc', 'abcabcabcabc')\n['', '', '']\n>>> findbetween(r'', 'abcdef')\n['a', 'b', 'c', 'd', 'e', 'f']\n>>> findbetween(r'ab', 'abcabcabc')\n['c', 'c']\n>>> findbetween(r'b', 'abcabcabc')\n['ca', 'ca']\n>>> findbetween(r'(?<=(.))(?!\\1)', 'aaaaaaaaaaaabbbbbbbbbbbbkkkkkkk')\n['bbbbbbbbbbbb', 'kkkkkkk']\n",
  "label": 0
 },
 {
  "idx": 2481,
  "doc": "Grouping and Computing Frequency ,Pandas",
  "code": "print df.groupby(['Type','Name'])['Type'].agg({'Frequency':'count'})\n\n                     Frequency\nType    Name                  \nBird    Flappy Bird          1\n        Pigeon               2\nPokemon Jerry                3\n        Mudkip               2\n",
  "label": 1
 },
 {
  "idx": 2482,
  "doc": "How to use swig with compiled dll and header file only",
  "code": "%module mymod\n%{\n#include \"myheader.h\"\n%}\n\n%include \"myheader.h\"\n",
  "label": 0
 },
 {
  "idx": 2483,
  "doc": "Assign differing values to list generator results",
  "code": "v = (item for item in propadd if item[0]==row1[8] and harversine(custx,custy,item[2],item[3])<1500)\nk = (item for item in custadd if item[0]==row1[4])\nm = (item for item in numlist if re.search(r\"^[0-9]+(?=\\s)\",row1[0]) is not None and item[0]==re.search(r\"^[0-9]+(?=\\s)\",row1[0]).group())\nextraValues = ('value 1', 'value 2', 'value3')\nfor ind, gen in enumerate((v, k, m)):\n    l = list(gen) \n    if len(l) == 1:\n        row1[1] = l[0][1]\n        row1[2] = l[0][2]\n        row1[3] = extraValues[ind]\n        break\n",
  "label": 1
 },
 {
  "idx": 2484,
  "doc": "Find all combinations of letters, selecting each letter from a different key in a dictionary",
  "code": ">>> import itertools                                                                                                                >>> d = {'1': ['a', 'd', 'e', 'l', 's'], '2': ['s', 'i', 'r', 't', 'n'], '3': ['b', 'o', 'e', 'm', 'k'], '4': ['f', 'y', 'u', 'n', 'g'] }\n>>> for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\n...     print ''.join(combo)\n... \nasbf\nasby\nasbu\nasbn\nasbg\nasof\nasoy\nasou\nason\nasog\nasef\n\n...\n\nsnkf\nsnky\nsnku\nsnkn\nsnkg\n",
  "label": 1
 },
 {
  "idx": 2485,
  "doc": "Proper way to destroy a file chooser dialog in pygtk for python",
  "code": "def run_folder_chooser_dialog():\n    result= []\n\n    def run_dialog(_None):\n        dialog = Gtk.FileChooserDialog(\"Please choose a folder\", None,\n        Gtk.FileChooserAction.SELECT_FOLDER,\n            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n            \"Select\", Gtk.ResponseType.OK))\n\n        response = dialog.run()\n        if response == Gtk.ResponseType.OK:\n            result.append(dialog.get_filename())\n        else:\n            result.append(None)\n\n        dialog.destroy()\n        Gtk.main_quit()\n\n\n    Gdk.threads_add_idle(GLib.PRIORITY_DEFAULT, run_dialog, None)\n    Gtk.main()\n    return result[0]\n",
  "label": 1
 },
 {
  "idx": 2486,
  "doc": "Proper way to destroy a file chooser dialog in pygtk for python",
  "code": "from gi.repository import Gtk, Gdk, GLib\n\ndef run_dialog(_None):\n    dialog = Gtk.FileChooserDialog(\"Please choose a folder\", None,\n    Gtk.FileChooserAction.SELECT_FOLDER,\n        (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n        \"Select\", Gtk.ResponseType.OK))\n\n    response = dialog.run()\n    if response == Gtk.ResponseType.OK:\n        print(\"Select clicked\")\n        print(\"Folder selected: \" + dialog.get_filename())\n    elif response == Gtk.ResponseType.CANCEL:\n        print(\"Cancel clicked\")\n\n    dialog.destroy()\n    Gtk.main_quit()\n\n\nGdk.threads_add_idle(GLib.PRIORITY_DEFAULT, run_dialog, None)\nGtk.main()\n",
  "label": 1
 },
 {
  "idx": 2487,
  "doc": "Acquiring the Minimum array out of Multiple Arrays by order in Python",
  "code": "a = [[1,2,3],[2,3,1],[3,2,1],[1,3,2]]\na.sort()\n",
  "label": 1
 },
 {
  "idx": 2488,
  "doc": "Iterator for all lexicographically ordered variable strings up to length n",
  "code": ">>> list(new(3)) == list(variable_strings_complete(3))\nTrue\n>>> list(new(20)) == list(variable_strings_complete(20))\nTrue\n>>> list(new(10, alphabet=range(4))) == list(variable_strings_complete(10, range(4)))\nTrue\n",
  "label": 0
 },
 {
  "idx": 2489,
  "doc": "How to speed-up python nested loop?",
  "code": "In [86]: %timeit new_function2(close, volume, INTERVAL_LENGTH)\n1 loops, best of 3: 1.15 s per loop\n",
  "label": 0
 },
 {
  "idx": 2490,
  "doc": "Aligning two combined plots - Matplotlib",
  "code": "import matplotlib.pyplot as plt\nimport numpy\n\n# create the data to be shown with \"scatter\"\nyvec, xvec = np.meshgrid(np.linspace(-4.75, 4.75, 20), np.linspace(-4.75, 4.75, 20))\nsc_data = random.random((20,20))\n\n# create the data to be shown with \"imshow\" (20 pixels)\nim_data = random.random((20,20))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.imshow(im_data, extent=[-5,5,-5,5], interpolation='nearest', cmap=plt.cm.gray)\nax.scatter(xvec, yvec, 100*sc_data)\n",
  "label": 1
 },
 {
  "idx": 2491,
  "doc": "Python: output for recursively printing out files and folders",
  "code": "DIR1/  \n    fileA  \n    fileB  \n    DIR3/  \n        fileE  \n        fileF    \nDIR2/  \n    fileC  \n    fileD   \n",
  "label": 0
 },
 {
  "idx": 2492,
  "doc": "inequality comparison of numpy array with nan to a scalar",
  "code": ">>> x[x < -1000] = np.nan\n>>> x\narray([ nan,   1.,   2.,  nan,  nan,   5.])\n",
  "label": 1
 },
 {
  "idx": 2493,
  "doc": "Read a dense matrix from a file directly into a sparse numpy array?",
  "code": "In [842]: ll=[]\nIn [843]: for line in txt:\n    ll.append(np.loadtxt([line],delimiter=','))\n   .....:     \nIn [844]: ll\nOut[844]: \n[array([ 1.,  0.,  0.,  2.,  3.]),\n array([ 0.,  0.,  0.,  0.,  0.]),\n array([ 4.,  0.,  0.,  0.,  0.]),\n array([ 0.,  0.,  0.,  3.,  0.])]\n",
  "label": 0
 },
 {
  "idx": 2494,
  "doc": "Read a dense matrix from a file directly into a sparse numpy array?",
  "code": "In [845]: lc=[[sparse.coo_matrix(l)] for l in ll]\nIn [846]: lc\nOut[846]: \n[[<1x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 3 stored elements in COOrdinate format>],\n [<1x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 0 stored elements in COOrdinate format>],\n [<1x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 1 stored elements in COOrdinate format>],\n [<1x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 1 stored elements in COOrdinate format>]]\n",
  "label": 0
 },
 {
  "idx": 2495,
  "doc": "Read a dense matrix from a file directly into a sparse numpy array?",
  "code": "In [847]: B=sparse.bmat(lc)\nIn [848]: B\nOut[848]: \n<4x5 sparse matrix of type '<class 'numpy.float64'>'\n    with 5 stored elements in COOrdinate format>\nIn [849]: B.A\nOut[849]: \narray([[ 1.,  0.,  0.,  2.,  3.],\n       [ 0.,  0.,  0.,  0.,  0.],\n       [ 4.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  3.,  0.]])\n",
  "label": 0
 },
 {
  "idx": 2496,
  "doc": "Put the result of simple tag into a variable",
  "code": "{% get_current_time \"%Y-%m-%d %I:%M %p\" as the_time %}\n<p>The time is {{ the_time }}.</p>\n",
  "label": 0
 },
 {
  "idx": 2497,
  "doc": "How to post an image in Python just like byte array in Java?",
  "code": ">>> url = 'http://httpbin.org/post'\n>>> files = {'file': open('report.xls', 'rb')}   \n>>> r = requests.post(url, files=files)\n",
  "label": 1
 },
 {
  "idx": 2498,
  "doc": "How to insert arrays into a database?",
  "code": "INSERT INTO `dog_measurement_data` (`dog_measurement_id`,`frame`,`sensor_row`,`sensor_col`,`value`) VALUES\n(*measurement_id?*, *frame_number?*, *sensor_row?*, *sensor_col?*, *value?*)\n",
  "label": 0
 },
 {
  "idx": 2499,
  "doc": "How to insert arrays into a database?",
  "code": "CREATE TABLE `dog_measurements` (\n  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  `dog_id` INT UNSIGNED NOT NULL,\n  `paw` ENUM ('Front Left','Front Right','Rear Left','Rear Right'),\n  `taken_at` DATETIME NOT NULL\n);\n",
  "label": 0
 },
 {
  "idx": 2500,
  "doc": "How to insert arrays into a database?",
  "code": "SELECT `sensor_row`,sensor_col`,`value` FROM `dog_measurement_data`\nWHERE `dog_measurement_id`=*some measurement id* AND `frame`=*some frame number*\nORDER BY `sensor_row`,`sensor_col`\n",
  "label": 0
 },
 {
  "idx": 2501,
  "doc": "authentication in python script to run as root",
  "code": "import os\nimport sys\n\neuid = os.geteuid()\nif euid != 0:\n    print \"Script not started as root. Running sudo..\"\n    args = ['sudo', sys.executable] + sys.argv + [os.environ]\n    # the next line replaces the currently-running process with the sudo\n    os.execlpe('sudo', *args)\n\nprint 'Running. Your euid is', euid\n",
  "label": 1
 },
 {
  "idx": 2502,
  "doc": "Reorder Columns by String Variable",
  "code": "$ cat input.csv | ./reorder\n",
  "label": 0
 },
 {
  "idx": 2503,
  "doc": "What is the idiomatic way of invoking a list of functions in Python?",
  "code": "for f in lst:\n    f(\"event_info\")\n",
  "label": 1
 },
 {
  "idx": 2504,
  "doc": "Return All Matching Lines in a Logfile",
  "code": "[13:40:19.xxx021] status    XYZ  ID:22P00935xxx -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16\n\nID is :  22P00935xxx\n\n[13:40:19.xxx024] status    XYZ  ID:22C0099xxx0 -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70\n\nID is :  22C0099xxx0\n",
  "label": 0
 },
 {
  "idx": 2505,
  "doc": "how to set the buttons size inside a spinner in kivy?",
  "code": "from kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.base import runTouchApp\n\nBuilder.load_string('''\n<SpinnerOption>:\n    size_hint: None, None\n    size: 20, 20\n\n<MyWidget>:\n    Spinner:\n        id:some_id\n        text:\"some text\"\n        values:(\"1\",\"2\",\"3\")\n        size_hint:(None,None)\n        size: root.width/4,root.height/12\n''')\n\nclass MyWidget(BoxLayout):pass\n\nrunTouchApp(MyWidget())\n",
  "label": 1
 },
 {
  "idx": 2506,
  "doc": "How to find connected components in a matrix using Julia",
  "code": "2-element Array{Array{Int64,1},1}:\n [1,2,5,6] \n [16,19,20]\n",
  "label": 0
 },
 {
  "idx": 2507,
  "doc": "Right way to write Unit-Tests in module?",
  "code": "import unittest\nimport calc\n\nclass TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.testInput = 10\n\n    def test_first(self):\n        output = calc.first(self.testInput)\n        correct = 100\n        assert(output == correct)\n\n    def test_second(self):\n        output = calc.second(self.testInput)\n        correct = 1000\n        assert(output == correct)\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "label": 1
 },
 {
  "idx": 2508,
  "doc": "Python Boto List Storage Devices Attached to Instance",
  "code": "for reservation in reservations:\n    for instance in reservation.instances:\n        bdm = instance.block_device_mapping\n        for device in bdm:\n            print('Device: {}'.format(device)\n            bdt = bdm[device]\n            print('\\tVolumeID: {}'.format(bdt.volume_id))\n            print('\\tVolume Status: {}'.format(bd.volume_status))\n",
  "label": 1
 },
 {
  "idx": 2509,
  "doc": "how to groupby pandas dataframe on some condition",
  "code": "# this function is applied to all buyers\ndef find_good_buyers(buyer):\n    # which dates the buyer has made a purchase\n    buyer_dates = buyer.groupby('date')\n    # a string representing the unique items purchased at each date\n    items_on_date = buyer_dates.agg({'item_id': lambda x: '-'.join(x.unique())})\n    # if there is more than 1 combination of item_id, then it means that\n    # the buyer has purchased different things in different dates\n    # so this buyer must be flagged to 1\n    good_buyer = (len(items_on_date.groupby('item_id').groups) > 1) * 1\n    return good_buyer\n\n\ndf['item_id'] = df['item_id'].astype('S')\nbuyers = df.groupby('buyer_id') \n\ngood_buyer = buyers.apply(find_good_buyers)\ndf.set_index('buyer_id', inplace=True)\ndf['good_buyer'] = good_buyer\ndf.reset_index(inplace=True)\n",
  "label": 1
 },
 {
  "idx": 2510,
  "doc": "how to groupby pandas dataframe on some condition",
  "code": "    buyer_id   item_id order_id    date\n         139        57      387    2015-12-28\n         140         9      388    2015-12-28\n         140        57      389    2015-12-28\n          36         9      390    2015-12-28\n          64        49      404    2015-12-29\n         146        49      405    2015-12-29\n          81        49      406    2015-12-29\n         140        80      407    2015-12-30\n         139        81      408    2015-12-30\n          81        50      406    2015-12-29\n          81        49      999    2015-12-30\n          81        50      999    2015-12-30\n",
  "label": 0
 },
 {
  "idx": 2511,
  "doc": "Python BeautifulSoup Mix Matching items in Table",
  "code": "[u'Fri', u'Nov. 21, 2014', u'1', u'$55,139,942', u'-', u'-', u'4,151', u'$13,284', u'$55,139,942', u'1']\n[u'Sat', u'Nov. 22, 2014', u'1', u'$40,905,873', u'-25.8%', u'-', u'4,151', u'$9,854', u'$96,045,815', u'2']\n[u'Sun', u'Nov. 23, 2014', u'1', u'$25,851,819', u'-36.8%', u'-', u'4,151', u'$6,228', u'$121,897,634', u'3']\n[u'Mon', u'Nov. 24, 2014', u'1', u'$8,978,318', u'-65.3%', u'-', u'4,151', u'$2,163', u'$130,875,952', u'4']\n[u'Tue', u'Nov. 25, 2014', u'1', u'$12,131,853', u'+35.1%', u'-', u'4,151', u'$2,923', u'$143,007,805', u'5']\n[u'Wed', u'Nov. 26, 2014', u'1', u'$14,620,517', u'+20.5%', u'-', u'4,151', u'$3,522', u'$157,628,322', u'6']\n[u'Thu', u'Nov. 27, 2014', u'1', u'$11,079,983', u'-24.2%', u'-', u'4,151', u'$2,669', u'$168,708,305', u'7']\n[u'']\n[u'Fri', u'Nov. 28, 2014', u'1', u'$24,199,442', u'+118.4%', u'-56.1%', u'4,151', u'$5,830', u'$192,907,747', u'8']\n[u'Sat', u'Nov. 29, 2014', u'1', u'$21,992,225', u'-9.1%', u'-46.2%', u'4,151', u'$5,298', u'$214,899,972', u'9']\n[u'Sun', u'Nov. 30, 2014', u'1', u'$10,780,932', u'-51.0%', u'-58.3%', u'4,151', u'$2,597', u'$225,680,904', u'10']\n[u'Mon', u'Dec. 1, 2014', u'1', u'$2,635,435', u'-75.6%', u'-70.6%', u'4,151', u'$635', u'$228,316,339', u'11']\n[u'Tue', u'Dec. 2, 2014', u'1', u'$3,160,145', u'+19.9%', u'-74.0%', u'4,151', u'$761', u'$231,476,484', u'12']\n[u'Wed', u'Dec. 3, 2014', u'1', u'$2,332,453', u'-26.2%', u'-84.0%', u'4,151', u'$562', u'$233,808,937', u'13']\n[u'Thu', u'Dec. 4, 2014', u'1', u'$2,317,894', u'-0.6%', u'-79.1%', u'4,151', u'$558', u'$236,126,831', u'14']\n...\n",
  "label": 0
 },
 {
  "idx": 2512,
  "doc": "Printing a two dimensional list",
  "code": "def _new_game_board() -> [[str]]:\n    \"\"\"\n    Creates a new game board.  Initially, a game board has the size\n    BOARD_COLUMNS x BOARD_ROWS and is comprised only of strings with the\n    value NONE\n    \"\"\"\n\n    return [[None] * BOARD_COLUMNS for _ in range(BOARD_ROWS)]\n\nConnectFourGameState = namedtuple('ConnectFourGameState', ['board', 'turn'])\n\ndef new_game_state() -> ConnectFourGameState:\n    \"\"\"\n    Returns a ConnectFourGameState representing a brand new game\n    in which no moves have been made yet.\n    \"\"\"\n\n    return ConnectFourGameState(board=_new_game_board(), turn=RED)\n",
  "label": 0
 },
 {
  "idx": 2513,
  "doc": "how to do an embedded python module for remote sandbox execution?",
  "code": ">>> class A(object): pass\n... \n>>> a = A()\n>>> A.f = lambda self, x: 2 * x  # or a pickled function\n>>> a.f(1)\n2\n>>> A.f = lambda self, x: 3 * x\n>>> a.f(1)\n3\n",
  "label": 0
 },
 {
  "idx": 2514,
  "doc": "how to do an embedded python module for remote sandbox execution?",
  "code": "    some_instance.__class__ = sandbox.SomeClass  # that means the same reloaded class\n",
  "label": 0
 },
 {
  "idx": 2515,
  "doc": "how to properly loop through two files comparing strings in both files against each other",
  "code": "tweet_score = []\nfor word in text.split():\n    if word in scores:\n        tweet_score[word] = scores[word]\n\ntotal_score = sum(tweet_score)\n",
  "label": 0
 },
 {
  "idx": 2516,
  "doc": "BeautifulSoup my for loop is printing all the data from the td tag. I would like to exclude the last section of the td tag",
  "code": "from pprint import pprint\n\nfrom bs4 import BeautifulSoup\n\n\ndata = \"\"\"\n<table>\n    <tr>\n        <th>Class</th>\n        <th class=\"failed\">Fail</th>\n        <th class=\"failed\">Error</th>\n        <th>Skip</th>\n        <th>Success</th>\n        <th>Total</th>\n    </tr>\n        <tr>\n            <td>Regression_TestCase.RegressionProject_TestCase2.RegressionProject_TestCase2</td>\n            <td class=\"failed\">1</td>\n            <td class=\"failed\">9</td>\n            <td>0</td>\n            <td>219</td>\n            <td>229</td>\n        </tr>\n    <tr>\n        <td><strong>Total</strong></td>\n        <td class=\"failed\">1</td>\n        <td class=\"failed\">9</td>\n        <td>0</td>\n        <td>219</td>\n        <td>229</td>\n    </tr>\n</table>\"\"\"\n\nsoup = BeautifulSoup(data, \"html.parser\")\n\nheaders = [header.get_text(strip=True) for header in soup.find_all(\"th\")]\nrows = [dict(zip(headers, [td.get_text(strip=True) for td in row.find_all(\"td\")]))\n        for row in soup.find_all(\"tr\")[1:-1]]\n\npprint(rows)\n",
  "label": 1
 },
 {
  "idx": 2517,
  "doc": "How to define multi-company-aware models in OpenERP",
  "code": "'company_id': fields.many2one('res.company', 'Company', required=False)\n",
  "label": 0
 },
 {
  "idx": 2518,
  "doc": "Python: checking for the existence of a variable in globals() makes it invisible in the local context",
  "code": "def calledfunction():\n  default_local = 'some default'\n  var = globalvar if 'globalvar' in globals() else default_local\n  print var\n\n# -----------------\n\nprint \"calling function before the variable is defined\"\nprint\ncalledfunction()\n\nglobalvar = \"created outside the function\"\n\nprint \"calling function after the variable is defined\"\nprint\ncalledfunction()\n",
  "label": 1
 },
 {
  "idx": 2519,
  "doc": "Proper way to organize testcases that involve a data file for each testcase?",
  "code": "import os\nimport unittest\n\n# Generate a test class for an individual file.\ndef make_test(filename):\n    class TestClass(unittest.TestCase):\n        def test_file(self):\n            # Do the actual testing here.\n            # parsed = do_my_parsing(filename)\n            # golden = load_golden(filename)\n            # self.assertEquals(parsed, golden, 'Parsing failed.')\n\n            # Randomly fail some tests.\n            import random\n            if not random.randint(0, 10):\n                self.assertEquals(0, 1, 'Parsing failed.')\n\n        # Set the docstring so we get nice test messages.\n        test_file.__doc__ = 'Test parsing of %s' % filename\n\n    return TestClass\n\n# Create a single file test.\nTest1 = make_test('file1.html')\n\n# Create several tests from a list.\nfor i in range(2, 5):\n    globals()['Test%d' % i] = make_test('file%d.html' % i)\n\n# Create them from a directory listing.\nfor dirname, subdirs, filenames in os.walk('tests'):\n    for f in filenames:\n        globals()['Test%s' % f] = make_test('%s/%s' % (dirname, f))\n\n# If this file is being run, run all the tests.\nif __name__ == '__main__':\n    unittest.main()\n",
  "label": 1
 },
 {
  "idx": 2520,
  "doc": "Proper way to organize testcases that involve a data file for each testcase?",
  "code": "$ python tests.py -v\nTest parsing of file1.html ... ok\nTest parsing of file2.html ... ok\nTest parsing of file3.html ... ok\nTest parsing of file4.html ... ok\nTest parsing of tests/file5.html ... ok\nTest parsing of tests/file6.html ... FAIL\nTest parsing of tests/file7.html ... ok\nTest parsing of tests/file8.html ... ok\n\n======================================================================\nFAIL: Test parsing of tests/file6.html\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"generic.py\", line 16, in test_file\n    self.assertEquals(0, 1, 'Parsing failed.')\nAssertionError: Parsing failed.\n\n----------------------------------------------------------------------\nRan 8 tests in 0.004s\n\nFAILED (failures=1)\n",
  "label": 0
 },
 {
  "idx": 2521,
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "def filterAcceptsRow(self, row, parent):\n    if self.filterActive and '_B_' in self.sourceModel().data(self.sourceModel().index(row, 0), Qt.DisplayRole).toPyObject():\n        self._view.selectRow(row)\n    return True\n",
  "label": 0
 },
 {
  "idx": 2522,
  "doc": "How to select QTableView index or row from inside of Model",
  "code": "self.filterActive = False\n",
  "label": 0
 },
 {
  "idx": 2523,
  "doc": "How do you map a fully qualified class name to its class object in Python?",
  "code": "from importlib import import_module\n\nname = 'xml.etree.ElementTree.ElementTree'\nparts = name.rsplit('.', 1)\nElementTree = getattr(import_module(parts[0]), parts[1])\ntree = ElementTree()\n",
  "label": 1
 },
 {
  "idx": 2524,
  "doc": "How to extract a file within a folder within a zip in python?",
  "code": "import subprocess\ndef view_file(filepath):\n    subprocess.Popen(filepath, shell=True).wait()\n",
  "label": 0
 },
 {
  "idx": 2525,
  "doc": "How to extract a file within a folder within a zip in python?",
  "code": "import os.path\nimport shutil\nimport sys\nimport tempfile\nfrom zipfile import ZipFile\n\nPREVIEW_PATH = 'QuickLooks/Preview.pdf'  # archive member path\npages_file = input('Enter the path to the .pages file in question: ')\n#pages_file = r'C:\\Stack Overflow\\extract_test.pages'  # hardcode for testing\npages_file = os.path.abspath(pages_file)\nfilename, file_extension = os.path.splitext(pages_file)\nif file_extension == \".pages\":\n    tempdir = tempfile.gettempdir()\n    temp_filename = os.path.join(tempdir, PREVIEW_PATH)\n    with ZipFile(pages_file, 'r') as zipfile:\n        zipfile.extract(PREVIEW_PATH, tempdir)\n    if not os.path.isfile(temp_filename):  # extract failure?\n        sys.exit('unable to extract {} from {}'.format(PREVIEW_PATH, pages_file))\n    final_PDF = filename + '.pdf'\n    shutil.copy2(temp_filename, final_PDF)  # copy and rename extracted file\n    # delete the temporary subdirectory created (along with pdf file in it)\n    shutil.rmtree(os.path.join(tempdir, os.path.split(PREVIEW_PATH)[0]))\n    print('Check out the PDF! It\\'s located at \"{}\".'.format(final_PDF))\n    #view_file(final_PDF)  # see Bonus below\nelse:\n    sys.exit('Sorry, that isn\\'t a .pages file.')\n",
  "label": 1
 },
 {
  "idx": 2526,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "def add_to_tuple(prev,new):\n    return prev+(new,) #prev is a tuple, add in the new element to the tuple\n\nfor path,value in traverse(doc,(),add_to_tuple): #prev_path is initially an empty tuple\n    print(\"{} = {}\".format(path,value))\n",
  "label": 0
 },
 {
  "idx": 2527,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "def traverse(obj, prev_path = \"obj\", path_repr = \"{}[{!r}]\".format)\n    if isinstance(obj,dict):\n        it = obj.items()\n    elif isinstance(obj,list):\n        it = enumerate(obj)\n    else:\n        yield prev_path,obj\n        return\n    for k,v in it:\n        for data in traverse(v, path_repr(prev_path,k), path_repr):\n            yield data\n",
  "label": 0
 },
 {
  "idx": 2528,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "obj[u'session'][u'@id'] = 2934\nobj[u'session'][u'@name'] = Valves\nobj[u'session'][u'@docVersion'] = 5.0.1\nobj[u'session'][u'docInfo'][u'field'][0][u'@name'] = Employee\nobj[u'session'][u'docInfo'][u'field'][0][u'@isMandotory'] = True\nobj[u'session'][u'docInfo'][u'field'][0]['#text'] = Jake Roberts\nobj[u'session'][u'docInfo'][u'field'][1][u'@name'] = Section\nobj[u'session'][u'docInfo'][u'field'][1][u'@isOpen'] = True\nobj[u'session'][u'docInfo'][u'field'][1][u'@isMandotory'] = False\nobj[u'session'][u'docInfo'][u'field'][1]['#text'] = 5\nobj[u'session'][u'docInfo'][u'field'][2][u'@name'] = Location\nobj[u'session'][u'docInfo'][u'field'][2][u'@isOpen'] = True\nobj[u'session'][u'docInfo'][u'field'][2][u'@isMandotory'] = False\nobj[u'session'][u'docInfo'][u'field'][2]['#text'] = Munchen\n",
  "label": 0
 },
 {
  "idx": 2529,
  "doc": "Python: Loop through all nested key-value pairs created by xmltodict",
  "code": "...\nKey :@name,  Value: Employee\nKey :@isMandotory,  Value: True\nKey :#text,  Value: Jake Roberts\nKey :@name,  Value: Section\nKey :@isOpen,  Value: True\nKey :@isMandotory,  Value: False\nKey :#text,  Value: 5\n...\n",
  "label": 0
 },
 {
  "idx": 2530,
  "doc": "Managing Processes from Python multiprocessing module",
  "code": "from multiprocessing import Pool                                                                                      \nimport time\nimport random\n\n\ndef myfunc():\n    a = random.randint(0,3)\n    time.sleep(a)\n    return a\n\nprint(\"Starting...\")\n\np = Pool(processes=8)\nSOME_LIST = p.map(myfunc, range(p._processes))\np.close()\np.join()\n\nprint(\"Stopping...\")\nprint(SOME_LIST)\n",
  "label": 1
 },
 {
  "idx": 2531,
  "doc": "(python) prepend script dir to a path",
  "code": "import inspect\n\ndef getCallerModule():\n    # gets globals of module called from, and prints out __file__ global\n    print(inspect.currentframe().f_back.f_globals['__file__'])\n",
  "label": 1
 },
 {
  "idx": 2532,
  "doc": "(python) prepend script dir to a path",
  "code": "import os\nos.chdir(os.path.split(__file__)[0])\n",
  "label": 1
 },
 {
  "idx": 2533,
  "doc": "How to create a random multidimensional array from existing variables",
  "code": "world = [['g'] * 60 for _ in xrange(60)]\nadd(world, 'e', 25)\nadd(world, 't', 5)\n",
  "label": 0
 },
 {
  "idx": 2534,
  "doc": "How to get parameter arguments from a frozen spicy.stats distribution?",
  "code": "import scipy.stats as stats\n\n# Parameters for this particular alpha distribution\na, loc, scale = 3.14, 5.0, 2.0\n\n# Create frozen distribution\nrv1 = stats.gamma(a, loc, scale)\nrv2 = stats.gamma(a, loc=loc, scale=scale)\n\n# Do something with frozen parameters\nprint 'positional and keyword'\nprint 'frozen args : {}'.format(rv1.args)\nprint 'frozen kwds : {}'.format(rv1.kwds)\nprint\nprint 'positional only'\nprint 'frozen args : {}'.format(rv2.args)\nprint 'frozen kwds : {}'.format(rv2.kwds)\n",
  "label": 1
 },
 {
  "idx": 2535,
  "doc": "Average multiple vectors of points of different lengths in python",
  "code": "def collapseTrajectories(sx, sy, st, trialList, kind='median'):\n    # find the longest trial to use as template\n    l = 0\n    tr = []\n    for t in trialList:\n        if len(st[st==t]) > l:\n            l = len(st[st==t])\n            tr = t\n\n    # Make all vectors the same length by interpolating the values\n    xnew = np.linspace(0, 640, l)\n    ynew = np.linspace(0, 480, l)\n    sx_new = []\n    sy_new = []\n\n    for t in trialList:\n        if len(st[st==t]) > 3:\n            X = sx[st==t]\n            Y = sy[st==t]\n            x = np.linspace(0,640, len(X))\n            y = np.linspace(0,480,len(Y))\n            fx = interp1d(x, X, kind='cubic')\n            fy = interp1d(y, Y, kind='cubic')\n            sx_new.append(fx(xnew))\n            sy_new.append(fy(ynew))\n\n    # Collapse using the appropriate kind\n    if kind == 'median':\n        out_x = np.median(sx_new, axis=0)\n        out_y = np.median(sy_new, axis=0)\n    elif kind=='mean':\n        out_x = np.mean(sx_new, axis=0)\n        out_y = np.mean(sy_new, axis=0)\n\n    return out_x, out_y\n",
  "label": 0
 },
 {
  "idx": 2536,
  "doc": "Average multiple vectors of points of different lengths in python",
  "code": "import numpy as np\n",
  "label": 0
 },
 {
  "idx": 2537,
  "doc": "Python - removing items from lists",
  "code": "$ python -m timeit \\\n  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2)' \\\n  'ts = set(L2); ts.update(L3); L4 = [ n for n in L1 if n not in ts ]'\n10000 loops, best of 3: 39.7 usec per loop\n",
  "label": 1
 },
 {
  "idx": 2538,
  "doc": "repeat arange with numpy",
  "code": "In [2]: a = [2, 1, 4, 0 ,2] # the OP's original example\n\nIn [3]: concatenated_ranges(a) # show it works!\nOut[3]: array([0, 1, 0, 0, 1, 2, 3, 0, 1])\n\nIn [4]: %timeit concatenated_ranges(a)\n10000 loops, best of 3: 31.6 us per loop\n\nIn [5]: %timeit junuxx(a)\n10000 loops, best of 3: 34 us per loop\n\nIn [6]: %timeit mr_e(a)\n100000 loops, best of 3: 2.58 us per loop\n\nIn [7]: a = np.random.randint(1, 10, size=(10,))\n\nIn [8]: %timeit concatenated_ranges(a)\n10000 loops, best of 3: 27.1 us per loop\n\nIn [9]: %timeit junuxx(a)\n10000 loops, best of 3: 79.8 us per loop\n\nIn [10]: %timeit mr_e(a)\n100000 loops, best of 3: 7.82 us per loop\n\nIn [11]: a = np.random.randint(1, 10, size=(100,))\n\nIn [12]: %timeit concatenated_ranges(a)\n10000 loops, best of 3: 57.4 us per loop\n\nIn [13]: %timeit junuxx(a)\n1000 loops, best of 3: 756 us per loop\n\nIn [14]: %timeit mr_e(a)\n10000 loops, best of 3: 149 us per loop\n\nIn [15]: a = np.random.randint(1, 10, size=(1000,))\n\nIn [16]: %timeit concatenated_ranges(a)\n1000 loops, best of 3: 358 us per loop\n\nIn [17]: %timeit junuxx(a)\n100 loops, best of 3: 9.38 ms per loop\n\nIn [18]: %timeit mr_e(a)\n100 loops, best of 3: 8.93 ms per loop\n",
  "label": 0
 },
 {
  "idx": 2539,
  "doc": "repeat arange with numpy",
  "code": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef concatenated_ranges(ranges_list) :\n    ranges_list = np.array(ranges_list, copy=False)\n    base_range = np.arange(ranges_list.max())\n    base_range =  as_strided(base_range,\n                             shape=ranges_list.shape + base_range.shape,\n                             strides=(0,) + base_range.strides)\n    return base_range[base_range < ranges_list[:, None]]\n",
  "label": 1
 },
 {
  "idx": 2540,
  "doc": "Decimal formatting based on number of digits in integer and decimal parts",
  "code": "In [68]: format_float(0.0001, 4)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-68-68e3461a51e5> in <module>()\n----> 1 format_float(0.0001, 4)\n\n<ipython-input-64-d4485ac4e1c9> in format_float(value, ndigits)\n      1 def format_float(value, ndigits=4):\n----> 2     j = min(i-1 for i in range(ndigits+1) if value >= 10 ** (ndigits - i))\n      3     return '{:.0{num_digits}f}'.format(value, num_digits=max(0,j))\n\nValueError: min() arg is an empty sequence\n",
  "label": 0
 },
 {
  "idx": 2541,
  "doc": "Erasing list of phrases from list of texts in python",
  "code": "def find_words_and_remove(words, strings):\n    strings_copy = strings[:]\n    for i, word in enumerate(words):\n        for string in strings:\n            strings_copy[i] = _find_word_and_remove(word, string)\n    return strings_copy\n",
  "label": 1
 },
 {
  "idx": 2542,
  "doc": "How can i search a array from a large array by numpy",
  "code": "In [23]: A\nOut[23]: \narray([['03', '04', '18', '22', '25', '29', '30'],\n       ['02', '04', '07', '09', '14', '29', '30'],\n       ['06', '08', '11', '13', '17', '19', '30'],\n       ['04', '08', '22', '23', '27', '29', '30'],\n       ['03', '05', '15', '22', '24', '25', '30']], \n      dtype='|S2')\n\nIn [24]: B\nOut[24]: \narray(['04', '22'], \n      dtype='|S2')\n\nIn [25]: A[np.in1d(A,B).reshape(A.shape).sum(1) == len(B)]\nOut[25]: \narray([['03', '04', '18', '22', '25', '29', '30'],\n       ['04', '08', '22', '23', '27', '29', '30']], \n      dtype='|S2')\n",
  "label": 1
 },
 {
  "idx": 2543,
  "doc": "Comparing Python dictionaries and nested dictionaries",
  "code": "d1= {'a':{'b':{'cs':10},'d':{'cs':20}}}\nd2= {'a':{'b':{'cs':30} ,'d':{'cs':20}},'newa':{'q':{'cs':50}}}\n\ndef findDiff(d1, d2, path=\"\"):\n    for k in d1.keys():\n        if not d2.has_key(k):\n            print path, \":\"\n            print k + \" as key not in d2\", \"\\n\"\n        else:\n            if type(d1[k]) is dict:\n                if path == \"\":\n                    path = k\n                else:\n                    path = path + \"->\" + k\n                findDiff(d1[k],d2[k], path)\n            else:\n                if d1[k] != d2[k]:\n                    print path, \":\"\n                    print \" - \", k,\" : \", d1[k]\n                    print \" + \", k,\" : \", d2[k] \n\nprint \"comparing d1 to d2:\"\nprint findDiff(d1,d2)\nprint \"comparing d2 to d1:\"\nprint findDiff(d2,d1)\n",
  "label": 1
 },
 {
  "idx": 2544,
  "doc": "Django: how to change label using formset extra?",
  "code": "<form method=\"POST\">\n{% csrf_token %}\n{{ formset.as_p }}\n",
  "label": 0
 },
 {
  "idx": 2545,
  "doc": "Simple loop for all elements of an etree object?",
  "code": "def get_attrs(element, tag, attr):\n    \"\"\"Return attribute `attr` of `tag` child elements of `element`.\"\"\"\n\n    # If an element has any cildren (nested elements) loop through them:\n    if len(element):\n         for node in element:\n            # Recursively call this function, yielding each result:\n            for attribute in get_attrs(node, tag, attr):\n                yield attribute\n\n    # Otherwise, check if element is of type `tag` with attribute `attr`, if so\n    # yield the value of that attribute.\n    if element.tag == 'variable':\n        if attr in element.attrib:\n            yield element.attrib[attr]\n\nids = [id for id in get_attrs(e, 'variable', 'id')]\n\nprint ids\n",
  "label": 1
 },
 {
  "idx": 2546,
  "doc": "Simple loop for all elements of an etree object?",
  "code": "<Element variable at 7f53fbdf1cb0>\n<Element if at 7f53fbdf1cf8>\n",
  "label": 0
 },
 {
  "idx": 2547,
  "doc": "How to incrementally sample without replacement?",
  "code": "import random\ndef sample_gen(n, forbid):\n    state = dict()\n    track = dict()\n    for (i, o) in enumerate(forbid):\n        x = track.get(o, o)\n        t = state.get(n-i-1, n-i-1)\n        state[x] = t\n        track[t] = x\n        state.pop(n-i-1, None)\n        track.pop(o, None)\n    del track\n    for remaining in xrange(n-len(forbid), 0, -1):\n        i = random.randrange(remaining)\n        yield state.get(i, i)\n        state[i] = state.get(remaining - 1, remaining - 1)\n        state.pop(remaining - 1, None)\n",
  "label": 1
 },
 {
  "idx": 2548,
  "doc": "How can I pack images? -Pygame -PyInstaller",
  "code": "import os\nimport hashlib\nimport pygame\nimport time\nimport base64\n\ndef create_assets(asset_dict, asset_dir):\n\n    \"\"\" \n    hand this function a dictionary of assets (images, mp3s, whatever)\n    and an absolute path to the data/asset folder. \n    The function creates the folder and files from the base64 strings\n    if they don't exist. If the files exist, an md5 check is run\n    instead to ensure integrity \n    \"\"\"\n\n    first_run = False\n    if not os.path.isdir(asset_dir):\n        os.mkdir(asset_dir)\n        first_run = True\n    for label in asset_dict:\n        asset = asset_dict[label]\n        filename = os.path.join(asset_dir, asset[\"filename\"])\n        rewrite = False\n        # no need to check file if we just created the data folder\n        if not first_run:\n            if not os.path.isfile(filename):\n                # the file doesn't exist\n                rewrite = True\n            else:\n                # file exists - make sure it's intact via md5\n                with open(filename, \"rb\") as f:\n                    if not hashlib.md5(f.read()).hexdigest() == asset[\"md5\"]:\n                        # the filename exists but the contents is wrong\n                        rewrite = True\n        if first_run or rewrite:\n            # one of our checks failed or first run - write file\n            print (\"Writing file: \",filename)\n            with open(filename, \"wb\") as f:\n                f.write(base64.b64decode(asset[\"data\"]))\n        else:\n            print (\"File exists: \",filename)\n\n\n\"\"\" \nThis the data dictionary. It's very easy to save \nthe whole thing as json should you feel like it.\nThe images are just small, random icons at the moment \n\n\"\"\"\n\nassets = {\n    \"background\": {\n        \"filename\": \"bg1.png\", \n        \"data\": \"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACOUlEQVQ4je2VQUhTcRzHP3szJyHiwbH5aCzpMCJ6NHIjWmzFtCBwKkEX7RYN2g4eAyF2jLRLzE5GoIegOgQNEarJCBwtYeQgPEQ0dC+fDNK5yFD3OuR7zL13WNCx7/ED3x8/vr8/379FVVWVA5WVZZY/TCEXMxxtdxLou082PU61sgpgYKI7hFzM4BD99A/PACBog9KpKPMvruvDwpEnlJUC4YFp2jtcpkzyxQBQ5BxKKQeANdj7LZHPTrK9VQTA7vTiD95lfe09+ewEtrZOTp29xbHjlwysyyFR3iiwvVXkR6XEiZPDtMjFjD5I8sfpdgV4OdtPeGCa/b2f9HgGWUhFqdV2DSwyMofkiyEXM/qWgt3pJRx5zJVrT+l2BQCoVlZ5++omojvIQipKZfOLKQPockiI7hAAy7kkltmkRzU7QLNq9ApmYQMIwhEkXxyr1aabG5mZ1/ow+SzRGPbnT8853XsbyR9HEFpZX1sEMLCLVx8ZDmUNnPma8J4bw9bWSY9nkHfzY/za+U5Z+YggtFJYmqJW2z14p4fZhrxEo9cym/So7R0uLlx+wOKbO3rYzarRKwDUarvs7+3om/yNGr3/j/IPjiK6Q1Qrq+QXJ4mMzDEaW9Hz6R+a0TM1Y6OxFYZuvKbLIXG+7x6iO4RgVkHN1tefGA5Xn0VVVTWdih4qSqWUo6wUyGcnkHxxRHeQ/b0dA9PKWJPd6aUFMFRQNj3eVH1peddXn0X7Auq3VOScIWyzA9QP0vQbENbTigXxO1gAAAAASUVORK5CYII=\",\n        \"md5\": \"12f7eb2eea8992a2644de649dfaf00b3\"\n        },\n    \"player_sprite\": {\n        \"filename\": \"player_img.png\", \n        \"data\": \"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACh0lEQVQ4jZWUS2gTURiFv5lkmiZpk5KmNWmbIFratLWlCiq2blwILly4EFSsG3EjCK5EFITiQhFXbgRBXbXgouBe3GkRKTaYvtLWR01sa5M0j8nDpK9xEWZIwqStZ3nuzLmX/7v3CIE7HxR5KobvwUkaB9wApAIx7H1O5h5+Jv5pFYAjT05r3maygHfIR8OxZlTJs+uERoKI3iEf1kN2HKdc2mJoJEjme1ILK/WyP1IcvNFTFpZfy7H0coaUP4qgKIqSC6exeOrJr2YxuSxM3x1nM5Hn7+8MpTK31Wme/WgTnsud2Puc2npyMlIMVI3p++O0XDiM44SLVCDGt2d+8itZdpOt10n77X7MrXUAGEtnkPJH2c5uItlNLI8t7hlW19FA68V2alusmickv0aVSgD7lR4oUQ8AgGAU8Vz1IdaIVT09UIabg9eHo+9DbMkbZYGeK514h3wIkkjKH9X1CpEcciBGfjVL5F0IeXa9CEUPgFgj4rnWRXg0yE5+u6pXKUEOxpXwaJDExNp/za+ahI/n3ip7f7a36rscRShVd9oHFFWmZosGxWjrdSJPxYoLLguFPzkA2i51FHesNfDr1UxVD6AQybHw9AtmtxXD8/HXw/Y+J/LsOu23+tlKb5BfyZKZjyNIIuHRIMpWcSp6nirfveNkFpIY0/MJlscWkRpMxXtklUhMrLGzsVN2CkDXU+en/lv2ltUKUu9dNakAwm8WqKw+7S2rFZSei+8apgKwdTciGEV+vpgqqz7tLatKTka0naEclBbqsmB2W+l5NEhl9RnOLw0MpwIxbN0OJFsNtW4rB8560QOlSgXQdMaDZDcBEHw8gWSrwahXQdVAVQIonb1aff8A8A1zY9iTMCcAAAAASUVORK5CYII=\",\n        \"md5\": \"79f25f0784a7849415f9c3d0d9d05267\"\n        },\n    \"weapon\": {\n        \"filename\": \"sword1.png\", \n        \"data\": \"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACzUlEQVQ4jZWVX0hTYRjGfydHZJb5J03SrIarrQaNEhKERgT25yaiIjEGQUWB0U03BUHWRVS3BUUOHGkUFg2LjW5bQkUjs6bNHcskJZRVplHTzs7bxdphy0Ot5+Ycnu99n3O+5/l4P+Q32u7FxO0JyOWOPvkbWjujouu68e72BOTqrX5j3UIG9mxdQXOTA4BI7AvB0Aca6itxOUoNruPBW5y2Yupc5RzauxoALakbGkrbvZgA1FQXUr++HEVR8PlVfH7VKGrcYeVoo51L3lcEQyNsql3CueMbjPWnL8eJDn0FIG9i7raWmuWF7G5YgaIoALgcpThtRWiacGSfnZ1bqlEUhYJ8Cw+7Rzm8dzXVSxcYglUVBYQjcW50DcLljj7Dk1zwt/rWzqgoIiL8gSs3+4m+myCiTmC3LqJ27WISM8lZXNpD750BDu5ZldqhiMjrgc9ysbVXevrjIiJy5Ey36Louw6NTouu6nLjwzJRL97o9AXnSM5ZKOTOAYGiExh1Wou++MjQyhXVZIeOffhDuiwOYcsHQB+NZ5yrHcmCXDaetiOCjERrqK9m4roxwJM7KqoWMf/pBeWk+LnsJ375rsziAhvpKgqFUL4Cph9duv2FweIpwXxyXvQSXo5TEtDaLO7DLZnje3ORAURTmpEW8dwZIa2tJITGjAZCYSaJpuimXxrH9a4wjh5mx/xtKZqAWM2NzDcUsUIuZsTXVhTmFYhaoEUqmsf8bShZaO6M5japc0N6lSt7kvO0tmqazfu3irA9FYl+44H2Fw1pEVUWBwfn8KgX5FirK5mfVd9wfxHs3Rt7JU6dbdBE0TYxGAJ9fRR2eZOZnks0bl+Lzq5y/3os6PMnD7lES00lqnamfCEfivB+dwmkrTh0bkdTEztx+T39c3J6APA5/NLjnr8fl7JUX8qRnzLCivUvNmthZgm5PIEv0X6OtvUuddQX8Ag5COzDf7kUwAAAAAElFTkSuQmCC\",\n        \"md5\": \"92485d36b8ac414cc758d9a6c6f28d23\"\n        },\n}\n\n# get absolute path to asset directory\nasset_dir = \"data\"\nasset_dir_path = os.path.join(os.getcwd(), asset_dir)\n\n# create files in asset directory using the assets dictionary\ncreate_assets(assets, asset_dir_path)\n\npygame.init()\n\nWIDTH = 800\nHEIGHT = 600\n\nSCREEN = pygame.display.set_mode((WIDTH, HEIGHT))\n\nloaded_images = {}\n\n# initalize/load all the newly created images\nfor label in assets:\n    file_path = os.path.join(asset_dir_path,assets[label][\"filename\"])\n    loaded_images[label] = pygame.image.load(file_path)\n\npos1 = 0\npos2 = 0\nt_start = time.time()\n\nwhile time.time() - t_start < 5:\n    for img in loaded_images:\n        SCREEN.blit(loaded_images[img], (pos1, pos2))\n        time.sleep(0.2)\n        pos1 += 20\n        pos2 += 20\n        pygame.display.update()\n",
  "label": 1
 },
 {
  "idx": 2549,
  "doc": "Name of Current App in Google App Engine (Python)",
  "code": "from google.appengine.api.app_identity import get_application_id\nappname = get_application_id()\n",
  "label": 1
 },
 {
  "idx": 2550,
  "doc": "Pandas: Collapse first n rows in each group by aggregation",
  "code": "df.groupby([\"id\", \"type\", \"grp_idx\"]).sum().reset_index()\n\n    id  type    grp_idx col_1   col_2   flag\n0   283 A       0       12      18      0\n1   283 A       4       8       12      0\n2   283 A       5       10      15      0\n3   283 A       6       12      18      0\n4   283 A       7       14      21      1\n5   756 X       0       30      6       1\n",
  "label": 0
 },
 {
  "idx": 2551,
  "doc": "Identifying price swings/trends in pandas dataframe with stock quotes",
  "code": "def get_pivots():\n    data = pd.DataFrame.from_csv('tmpData.txt')\n    data['swings'] = np.nan\n\n    pivot = data.irow(0).open\n    last_pivot_id = 0\n    up_down = 0\n\n    diff = .3\n\n    for i in range(0, len(data)):\n        row = data.irow(i)\n\n        # We don't have a trend yet\n        if up_down == 0:\n            if row.low < pivot - diff:\n                data.ix[i, 'swings'] = row.low - pivot\n                pivot, last_pivot_id = row.low, i\n                up_down = -1\n            elif row.high > pivot + diff:\n                data.ix[i, 'swings'] = row.high - pivot\n                pivot, last_pivot_id = row.high, i\n                up_down = 1\n\n        # Current trend is up\n        elif up_down == 1:\n            # If got higher than last pivot, update the swing\n            if row.high > pivot:\n                # Remove the last pivot, as it wasn't a real one\n                data.ix[i, 'swings'] = data.ix[last_pivot_id, 'swings'] + (row.high - data.ix[last_pivot_id, 'high'])\n                data.ix[last_pivot_id, 'swings'] = np.nan\n                pivot, last_pivot_id = row.high, i\n            elif row.low < pivot - diff:\n                data.ix[i, 'swings'] = row.low - pivot\n                pivot, last_pivot_id = row.low, i\n                # Change the trend indicator\n                up_down = -1\n\n        # Current trend is down\n        elif up_down == -1:\n             # If got lower than last pivot, update the swing\n            if row.low < pivot:\n                # Remove the last pivot, as it wasn't a real one\n                data.ix[i, 'swings'] = data.ix[last_pivot_id, 'swings'] + (row.low - data.ix[last_pivot_id, 'low'])\n                data.ix[last_pivot_id, 'swings'] = np.nan\n                pivot, last_pivot_id = row.low, i\n            elif row.high > pivot - diff:\n                data.ix[i, 'swings'] = row.high - pivot\n                pivot, last_pivot_id = row.high, i\n                # Change the trend indicator\n                up_down = 1\n\n    print data\n",
  "label": 1
 },
 {
  "idx": 2552,
  "doc": "Pythonic way of looping over variable that is either an element or a list",
  "code": "test = test if is_iterable(test) else [test]\nfor x in test:\n    do_stuff\n    ...\n",
  "label": 0
 },
 {
  "idx": 2553,
  "doc": "Matching y axis points together",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\n\nnewvid = asciitable.read('user4.cat') \n\nn_new = newvid['n']\nre_new = newvid['re']\nnumber = newvid['number']\nstd_dev = newvid['standard_deviation']\n\nn_max = float(number.max())  # for coloring later\n\nplt.figure()\nplt.title('sersic parameter vs. standard deviation distribution of noise') \nplt.xlabel('standard deviation')\nplt.ylabel('sersic parameter')\nplt.xlim(0,12)\nplt.ylim(0,5) \nfor n in np.unique(number):\n    n_mask = number == n                 # pick out just where n_new is the current n\n    order = np.argsort(std_dev[n_mask])  # sort by std_dev, so line doesn't zig zag\n    plt.plot(std_dev[n_mask][order], n_new[n_mask][order],\n             label=str(n), color=cm.jet(n/n_max))    # label and color by n\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.title('half-light radius vs. standard deviation distribution of noise') \nplt.xlabel('standard deviation')\nplt.ylabel('half-light radius')\nplt.xlim(0,12)\nplt.ylim(-2,15)\n\n# do one plot per number\nfor n in np.unique(number):\n    n_mask = number == n                 # pick out just where n_new is the current n\n    order = np.argsort(std_dev[n_mask])  # sort by std_dev, so line doesn't zig zag\n    plt.plot(std_dev[n_mask][order], re_new[n_mask][order],\n             label=str(n), color=cm.jet(n/n_max))    # label and color by n\nplt.legend()\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2554,
  "doc": "Nested options with argparse",
  "code": "parser = argparse.ArgumentParser()\n\nsubparsers = parser.add_subparsers(title = 'subcommands')\n\nparser_create = subparsers.add_parser('create')\nparser_create.add_argument('path')\nparser_create.add_argument('-s', '--skeleton')\nparser_create.set_defaults(target=create)\n\nparser_build = subparsers.add_parser('build')\nparser_build.set_defaults(target = build)\n\nargs = parser.parse_args()\nargs.target(**{k: v for k, v in vars(args).items() if k != 'target'})\n",
  "label": 1
 },
 {
  "idx": 2555,
  "doc": "Data structure for UDP Server parsing JSON objects in python",
  "code": " def main():\n   nodes = {}     # use a simple dict for storing the nodes\n   lock = RLock() # if you need this\n   # pass nodes and lock to server thread and start it\n   t = threading.Thread(target = udp_server, args = (udp_ip, udp_port, nodes, lock))\n   t.start() \n   ...\n",
  "label": 0
 },
 {
  "idx": 2556,
  "doc": "Data structure for UDP Server parsing JSON objects in python",
  "code": " def main()\n   nodes = {}     # use a simple dict for storing the nodes\n   lock = RLock() # if you need this\n   q = Queue()    # create a Queue and pass it to the udp server\n   # pass nodes and lock to server thread and start it\n   t = threading.Thread(target = udp_server, args = (udp_ip, udp_port, nodes, lock, q))\n   t.start() \n   # process entries from the Queue\n   while True:\n     item = q.get()\n     ... process item...\n",
  "label": 0
 },
 {
  "idx": 2557,
  "doc": "Efficiently finding the shortest path in large graphs",
  "code": "biggraph generate 100000 nodes    00:00:00\nbiggraph generate 1000000 edges   00:00:00\nbiggraph add edges                00:00:07\nbiggraph Dijkstra                 00:01:27\nbiggraph shortest_path done       00:23:44\nstep: 48437 4\nstep: 66200 3\nstep: 83824 2\nstep: 0 1\nbiggraph walk done                00:23:44\npath: [99999, 48437, 66200, 83824, 0]\n",
  "label": 0
 },
 {
  "idx": 2558,
  "doc": "Efficiently finding the shortest path in large graphs",
  "code": "$ python2.6 biggraph.py 4 6\nbiggraph generate 10000 nodes     00:00:00\nbiggraph generate 1000000 edges   00:00:00\nbiggraph add edges                00:00:05\nbiggraph Dijkstra                 00:01:32\nbiggraph shortest_path done       00:04:15\nstep: 1915 2\nstep: 0 1\nbiggraph walk done                00:04:15\npath: [9999, 1915, 0]\n",
  "label": 0
 },
 {
  "idx": 2559,
  "doc": "Efficiently finding the shortest path in large graphs",
  "code": "#!/usr/bin/python\n\nimport pygraph.classes.graph\nimport pygraph.algorithms\nimport pygraph.algorithms.minmax\nimport time\nimport random\nimport sys\n\nif len(sys.argv) != 3:\n    print ('usage %s: node_exponent edge_exponent' % sys.argv[0])\n    sys.exit(1)\n\nnnodes = 10**int(sys.argv[1])\nnedges = 10**int(sys.argv[2])\n\nstart_time = time.clock()\ndef timestamp(s):\n    t = time.gmtime(time.clock() - start_time)\n    print 'biggraph', s.ljust(24), time.strftime('%H:%M:%S', t)\n\ntimestamp('generate %d nodes' % nnodes)\nbg = pygraph.classes.graph.graph()\nbg.add_nodes(xrange(nnodes))\n\ntimestamp('generate %d edges' % nedges)\nedges = set()\nwhile len(edges) < nedges:\n    left, right = random.randrange(nnodes), random.randrange(nnodes)\n    if left == right:\n        continue\n    elif left > right:\n        left, right = right, left\n    edges.add((left, right))\n\ntimestamp('add edges')\nfor edge in edges:\n    bg.add_edge(edge)\n\ntimestamp(\"Dijkstra\")\ntarget = 0\nspan, dist = pygraph.algorithms.minmax.shortest_path(bg, target)\ntimestamp('shortest_path done')\n\n# the paths from any node to target is in dict span, let's\n# pick any arbitrary node (the last one) and walk to the\n# target from there, the associated distance will decrease\n# monotonically\nlastnode = nnodes - 1\npath = []\nwhile lastnode != target:\n    nextnode = span[lastnode]\n    print 'step:', nextnode, dist[lastnode]\n    assert nextnode in bg.neighbors(lastnode)\n    path.append(lastnode)\n    lastnode = nextnode\npath.append(target)\ntimestamp('walk done')\nprint 'path:', path\n",
  "label": 1
 },
 {
  "idx": 2560,
  "doc": "Python: multidimensional array masking",
  "code": ">>> import numpy as np\n>>> A = np.ones((5,5), dtype=int)\n>>> B = [1, 3, 7, 23]\n>>> A\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])\n>>> A_ = A.ravel()\n>>> A_[B] = 0\n>>> A_.reshape(A.shape)\narray([[1, 0, 1, 0, 1],\n       [1, 1, 0, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 0, 1]])\n",
  "label": 1
 },
 {
  "idx": 2561,
  "doc": "how do I concatenate 3 lists using a list comprehension?",
  "code": "itertools.product(list1, list2, list3)\n",
  "label": 0
 },
 {
  "idx": 2562,
  "doc": "Pandas: Delete rows of a DataFrame if total count of a particular column occurs only 1 time",
  "code": "vc = df['Series'].value_counts()\nu  = [i not in set(vc[vc==1].index) for i in df['Series']]\ndf = df[u]\n",
  "label": 1
 },
 {
  "idx": 2563,
  "doc": "Skip unittest test without decorator syntax",
  "code": "test_egg (__main__.TestFoo) ... setup\nteardown\nok\ntest_ham (__main__.TestFoo) ... skipped 'criteria'\ntest_spam (__main__.TestFoo) ... skipped 'criteria'\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nOK (skipped=2)\n\n\n----------------------------------------------------------------------\nRan 3 tests in 0.002s\n\nOK (skipped=2)\n",
  "label": 0
 },
 {
  "idx": 2564,
  "doc": "PLY YACC pythonic syntax for accumulating list of comma-separated values",
  "code": "def p_type_list_1(p):\n    '''type_list : type'''\n    p[0] = [p[1]]\n\ndef p_type_list_2(p):\n    '''type_list : type_list COMMA type'''\n    p[0] = p[1] + [p[3]]\n",
  "label": 1
 },
 {
  "idx": 2565,
  "doc": "matplotlib/python: how to have an area with no values",
  "code": "import datetime as DT\nimport numpy as np\nimport matplotlib.pyplot as plt\nnp.random.seed(2015)\n\nx = [DT.date(2015,6,15)+DT.timedelta(days=i*7)\n     for i in range(5)]\ny = np.random.randint(25, size=(3,5)).astype(float)\n\nfig, ax = plt.subplots()\ncolor = ['blue', 'green', 'red']\nfor i in range(3):\n    ax.plot(x, y[i], '.-', markersize=8, fillstyle='full', linewidth=1.5, \n            clip_on=True, zorder=30)\n\n    ax.fill_between(x, 0, y[i], alpha=0.5, color=color[i], \n                    edgecolor=\"white\", zorder=20)\nax.set_xlim(min(x), max(x)+DT.timedelta(days=7))\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2566,
  "doc": "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?",
  "code": "freq_diffs  = np.abs(table[:,2:6] - table[:,-4:])  # 4 columns, n rows\n\nmean_freq_diff = freq_diffs.mean(axis=0) # holds 4 numbers, these are the means over all the rows\nstd_freq_diff = freq_diffs.std(axis=0) # similar: std over all the rows\n\ncondition = freq_diffs > (mean_freq_diff + 2*std_freq_diff)\n",
  "label": 0
 },
 {
  "idx": 2567,
  "doc": "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?",
  "code": "import numpy as np\nfrom collections import Counter    \n\nnucleotid_bases = ('C', 'A', 'T', 'G', '.')\nresults = []\nchecksum = []\nwith open('datafile.txt') as f:\n    for line in f:\n        fields = line.split()  # splits by consecutive whitespace, empty records will be purged\n        chrom, pos = [int(fields[x]) for x in (0,1)]\n        results.append([chrom,pos])  # start by building the current record\n        allele1, allele2 = [fields[i] for i in (3,4)]\n        checksum.append([allele1, allele2])  # you wanted to keep these, most likely for debugging purposes?\n        popA = fields[3:26]  # population size: 2*23\n        popB = fields[26:36]  # population size: 2*10\n        for population in (popA, popB):\n            summary = Counter(population) # traverses the line only once - much more efficient!\n            base_counts = [ sum(summary[k] for k in summary.keys() if base in k) for base in nucleotid_bases]\n            for index, base_name in enumerate(nucleotid_bases):\n                # Double the count when there is an exact match, e.g. \"A/A\" -> \"A\"\n                # An 'in' match can match an item anywhere in the string: 'A' in 'A/C' evaluates to True\n                base_counts[index] += summary[base_name]    \n            results[-1].extend(base_counts)  # append to the current record\nresults = np.array(results, dtype=np.float)  # shape is now (x, 12) with x the amount of lines read\nresults[:, 2:7] /= 46\nresults[:, 7:] /= 20\n",
  "label": 0
 },
 {
  "idx": 2568,
  "doc": "How to xor in python using hex",
  "code": ">>> b''.join(chr(x) for x in xors)\n'ByI0*f\\x0b,60%'\n",
  "label": 0
 },
 {
  "idx": 2569,
  "doc": "Trying to do left outer joins to two related tables",
  "code": "FROM foo LEFT OUTER JOIN baz ON foo.id=baz.foo_id RIGHT OUTER JOIN bar ON bar.id=baz.bar_id\n",
  "label": 0
 },
 {
  "idx": 2570,
  "doc": "Convert property to django model field",
  "code": "class VirtualField(object):\n    rel = None\n\n    def contribute_to_class(self, cls, name):\n        self.attname = self.name = name\n        # cls._meta.add_virtual_field(self)\n        get_field = cls._meta.get_field\n        cls._meta.get_field = lambda name, many_to_many=True: self if name == self.name else get_field(name, many_to_many)\n        models.signals.pre_init.connect(self.pre_init, sender=cls) #, weak=False)\n        models.signals.post_init.connect(self.post_init, sender=cls) #, weak=False)\n        setattr(cls, name, self)\n\n    def pre_init(self, signal, sender, args, kwargs, **_kwargs):\n        sender._meta._field_name_cache.append(self)\n\n    def post_init(self, signal, sender, **kwargs):\n        sender._meta._field_name_cache[:] = sender._meta._field_name_cache[:-1]\n\n    def __get__(self, instance, instance_type=None):\n        if instance is None:\n            return self\n        return instance.field1 + '/' + instance.field2\n\n    def __set__(self, instance, value):\n        if instance is None:\n             raise AttributeError(u\"%s must be accessed via instance\" % self.related.opts.object_name)\n        instance.field1, instance.field2 = value.split('/')\n\n    def to_python(self, value):\n        return value\n\nclass A(models.Model):\n     field1 = models.TextField()\n     field2 = models.TextField()\n     virtual_field = VirtualField()\n\n# legacy.json\n[{\"pk\": 1, \"model\": \"so.a\", \"fields\": {\"virtual_field\": \"A/B\"}}, {\"pk\": 2, \"model\": \"so.a\", \"fields\": {\"virtual_field\": \"199/200\"}}]\n\n$ ./manage.py loaddump legacy.json\nInstalled 2 object(s) from 1 fixture(s)\n",
  "label": 1
 },
 {
  "idx": 2571,
  "doc": "Finding time intervals per day from a list of timestamps in Python",
  "code": "Output\n{datetime.date(2007, 4, 10): (1176239419.0, 1176239419.0),\n datetime.date(2007, 4, 11): (1176334733.0, 1176334733.0),\n datetime.date(2007, 4, 13): (1176445137.0, 1176445137.0),\n datetime.date(2007, 4, 26): (1177619954.0, 1177621082.0),\n datetime.date(2007, 4, 29): (1177838576.0, 1177838576.0),\n datetime.date(2007, 5, 5): (1178349385.0, 1178401697.0),\n datetime.date(2007, 5, 6): (1178437886.0, 1178437886.0),\n datetime.date(2007, 5, 11): (1178926650.0, 1178926650.0),\n datetime.date(2007, 5, 12): (1178982127.0, 1178982127.0),\n datetime.date(2007, 5, 14): (1179130340.0, 1179130340.0),\n datetime.date(2007, 5, 15): (1179263733.0, 1179264930.0),\n datetime.date(2007, 5, 19): (1179574273.0, 1179574273.0),\n datetime.date(2007, 5, 20): (1179671730.0, 1179671730.0),\n datetime.date(2007, 5, 30): (1180549056.0, 1180549056.0),\n datetime.date(2007, 6, 2): (1180763342.0, 1180763342.0),\n datetime.date(2007, 6, 9): (1181386289.0, 1181386289.0),\n datetime.date(2007, 6, 16): (1181990860.0, 1181990860.0),\n datetime.date(2007, 6, 27): (1182979573.0, 1182979573.0),\n datetime.date(2007, 7, 1): (1183326862.0, 1183326862.0)}\n",
  "label": 0
 },
 {
  "idx": 2572,
  "doc": "How to directly set RGB/RGBA colors in mayavi",
  "code": "pts.actor.mapper.input=pts.mlab_source.dataset\n",
  "label": 0
 },
 {
  "idx": 2573,
  "doc": "Adding docstrings to namedtuples?",
  "code": ">>> help(nt.Point)  # which outputs...\n",
  "label": 0
 },
 {
  "idx": 2574,
  "doc": "Special End-line characters/string from lines read from text file, using Python",
  "code": "te = clock()\nfor line in liner('fofo.txt',':;:', 65536):\n    pass\nprint clock()-te\n\n\nfh = open('fofo.txt', 'rb')\nzenBreaker = SpecialDelimiters(fh, ':;:', 65536)\n\nte = clock()\nfor line in zenBreaker:\n    pass\nprint clock()-te\n",
  "label": 0
 },
 {
  "idx": 2575,
  "doc": "How to recursively sum and store all child values in a tree",
  "code": "class Node:\n    def __init__(self, name, weight, children):\n        self.children = children\n        self.weight = weight\n        self.weight_plus_children = weight\n\n    def get_all_weight(self):\n        if self.children is None:\n          return self.weight_plus_children\n        else:\n          for child in self.children:\n            print \"child.get_all_weight()\", child.get_weigth_with_children()\n            self.weight_plus_children += child.get_weigth_with_children()\n\n        return self.weight_plus_children\n\n    def get_weigth_with_children(self):\n        return self.weight_plus_children\n\nleaf1 = Node('C1', 58, None)\nleaf2 = Node('C2', 7, None)\nleaf3 = Node('C3', 10, None)\nleaf4 = Node('C4', 20, None)\n\nsubroot = Node('B1', 50, [leaf1, leaf2])\nsubroot1 = Node('B2', 50, [leaf3, leaf4])\n\nroot = Node('A', 100, [subroot, subroot1])\n\nprint subroot.get_all_weight()\nprint\nprint subroot1.get_all_weight()\nprint\nprint root.get_all_weight()\n",
  "label": 1
 },
 {
  "idx": 2576,
  "doc": "Is there a mercurial command which can generate a clone without largefiles?",
  "code": "hg lfconvert --to-normal <old> <new>\n",
  "label": 1
 },
 {
  "idx": 2577,
  "doc": "How to determine type of nested data structures in Python?",
  "code": "def type_spec_iterable(obj, name):\n    tps = set(type_spec(e) for e in obj)\n    if len(tps) == 1:\n        return name + \"<\" + next(iter(tps)) + \">\"\n    else:\n        return name + \"<?>\"\n\n\ndef type_spec_dict(obj):\n    tps = set((type_spec(k), type_spec(v)) for (k,v) in obj.iteritems())\n    keytypes = set(k for (k, v) in tps)\n    valtypes =  set(v for (k, v) in tps)\n    kt = next(iter(keytypes)) if len(keytypes) == 1 else \"?\"\n    vt = next(iter(valtypes)) if len(valtypes) == 1 else \"?\"\n    return \"dict<%s, %s>\" % (kt, vt)\n\n\ndef type_spec_tuple(obj):\n    return \"tuple<\" + \", \".join(type_spec(e) for e in obj) + \">\"\n\n\ndef type_spec(obj):\n    t = type(obj)\n    res = {\n        int: \"int\",\n        str: \"str\",\n        bool: \"bool\",\n        float: \"float\",\n        type(None): \"(none)\",\n        list: lambda o: type_spec_iterable(o, 'list'),\n        set: lambda o: type_spec_iterable(o, 'set'),\n        dict: type_spec_dict,\n        tuple: type_spec_tuple,\n    }.get(t, lambda o: type(o).__name__)\n    return res if type(res) is str else res(obj)\n\n\nif __name__ == \"__main__\":\n    class Foo(object):\n        pass\n    for obj in [\n        1,\n        2.3,\n        None,\n        False,\n        \"hello\",\n        [1, 2, 3],\n        [\"a\", \"b\"],\n        [1, \"h\"],\n        (False, 1, \"2\"),\n        set([1.2, 2.3, 3.4]),\n        [[1,2,3],[4,5,6],[7,8,9]],\n        [(1,'a'), (2, 'b')],\n        {1:'b', 2:'c'},\n        [Foo()], # todo - inheritance?\n    ]:\n        print repr(obj), \":\", type_spec(obj)\n",
  "label": 1
 },
 {
  "idx": 2578,
  "doc": "PYTHON: How do I create a list of every possible letter mapping using a dictionary that stores every possible letter mapping combination?",
  "code": "import itertools\nfrom collections import OrderedDict\nimport string\nseed = {\n'A' : ['A'],\n'B' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'C' : ['C'],\n'D' : ['D'],\n'E' : ['E'],\n'F' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'G' : ['G', 'W'],\n'H' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'I' : ['I'],\n'J' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'K' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'L' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'M' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'N' : ['N'],\n'O' : ['O'],\n'P' : ['P'],\n'Q' : ['Q'],\n'R' : ['R'],\n'S' : ['S'],\n'T' : ['T'],\n'U' : ['U'],\n'V' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'W' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'],\n'X' : ['X'],\n'Y' : ['Y'],\n'Z' : ['B', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'V', 'W', 'Z'] \n}\nd = OrderedDict(sorted(seed.items(), key=lambda t: t[0]))\nlistOfList = d.values()\nfor i in itertools.product(* listOfList):\n    # print the possible dict\n    print dict(zip(string.ascii_uppercase, i))\n",
  "label": 1
 },
 {
  "idx": 2579,
  "doc": "Run parts of a ipython notebook in a loop / with different input parameter",
  "code": "import itertools\n# parameters\nP_peak_all = [100, 200]\nidle_ratio_all = [0., 0.3, 0.6]\n# iterate through these parameters and call the notebook's logic\nfor P_peak, idle_ratio in itertools.product(P_peak_all, idle_ratio_all):\n    print(P_peak, idle_ratio, P_peak*idle_ratio)\n    print('========================')\n    m_synth, m_synth_ns = build_synth_measurement(P_peak, idle_ratio)\n    compare_measurements(m_synth, m_synth_ns, \"Peak pauser\", \"No scheduler\", file_note=\"-%d-%d\" % (P_peak, int(idle_ratio*100)))\n",
  "label": 1
 },
 {
  "idx": 2580,
  "doc": "Making id case-insensitive but case-preserving in endpoints-proto-datastore",
  "code": "self.caseful_id = value\n",
  "label": 0
 },
 {
  "idx": 2581,
  "doc": "Making id case-insensitive but case-preserving in endpoints-proto-datastore",
  "code": "def IdSet(self, value):\n    if not isinstance(value, basestring):\n        raise TypeError('ID must be a string.')\n    self.UpdateFromKey(ndb.Key(self.__class__, value.lower()))\n    if self.caseful_id is None:\n        self.caseful_id = value\n",
  "label": 0
 },
 {
  "idx": 2582,
  "doc": "Django User Model one-to-one with other model and Forms",
  "code": "The Teacher Model\nFEMALE = 'F'\nMALE = 'M' \nclass Teacher(models.Model): \n    GENDER_CHOICES = ( \n        (MALE, _('Male')), \n        (FEMALE, _('Female')), \n        )  \n    gender = models.CharField(max_length=1, verbose_name=_('Gender'), choices=GENDER_CHOICES) \n    civil_id = models.CharField(max_length=12, verbose_name=_('Civil ID')) \n    phone_number = models.CharField(max_length=15, verbose_name=_('Phone Number')) \n    job_title = models.CharField(max_length=15, verbose_name=_('Title')) \n    user = models.OneToOneField(to=User, related_name='teacher_profile') \n\n    def enable(self): \n    \"\"\" \n    Enable teacher profile \n    :return: \n    \"\"\" \n    self.user.is_active = True \n    self.user.save() \n\n    def disable(self): \n    \"\"\" \n    Disable teacher profile \n    :return: \n    \"\"\" \n    self.user.is_active = False \n    self.user.save() \n\n    def get_absolute_url(self): \n       return reverse('teacher_details', args=(self.pk,))\n",
  "label": 0
 },
 {
  "idx": 2583,
  "doc": "Asynchronous data through Bloomberg's new data API (COM v3) with Python?",
  "code": "import win32com.client\n\nsession = win32com.client.Dispatch('blpapicom.Session')\nsession.QueueEvents = True\nsession.Start()\nstarted = session.OpenService('//blp/refdata')\ndataService = session.GetService('//blp/refdata')\nrequest = dataService.CreateRequest('HistoricalDataRequest')\nrequest.GetElement('securities').AppendValue('5 HK Equity')\nrequest.GetElement('fields').AppendValue('PX_LAST')\nrequest.Set('periodicitySelection', 'DAILY')\nrequest.Set('startDate', '20090119')\nrequest.Set('endDate', '20090130')\ncid = session.SendRequest(request)\nADMIN = 1\nAUTHORIZATION_STATUS = 11\nBLPSERVICE_STATUS = 9\nPARTIAL_RESPONSE = 6\nPUBLISHING_DATA = 13\nREQUEST_STATUS = 4\nRESOLUTION_STATUS = 12\nRESPONSE = 5\nSESSION_STATUS = 2\nSUBSCRIPTION_DATA = 8\nSUBSCRIPTION_STATUS = 3\nTIMEOUT = 10\nTOKEN_STATUS = 15\nTOPIC_STATUS = 14\nUNKNOWN = -1\nstayHere = True\nwhile stayHere:\n    event = session.NextEvent();\n    if event.EventType == PARTIAL_RESPONSE or event.EventType == RESPONSE:\n        iterator = event.CreateMessageIterator()\n        iterator.Next()\n        message = iterator.Message\n        securityData = message.GetElement('securityData')\n        securityName = securityData.GetElement('security')\n        fieldData = securityData.GetElement('fieldData')\n        returnList = [[0 for col in range(fieldData.GetValue(row).NumValues+1)] for row in range(fieldData.NumValues)]\n        for row in range(fieldData.NumValues):\n            rowField = fieldData.GetValue(row)\n            for col in range(rowField.NumValues+1):\n                colField = rowField.GetElement(col)\n                returnList[row][col] = colField.Value\n        stayHere = False\n        break\nelement = None\niterator = None\nmessage = None\nevent = None\nsession = None\nprint returnList\n",
  "label": 0
 },
 {
  "idx": 2584,
  "doc": "Pandas Dataframe - How To Convert Date to Boolean Columns?",
  "code": ">>> target = pd.DataFrame(0, index=df.index, columns=range(1,13))\n>>> target\n            1   2   3   4   5   6   7   8   9   10  11  12\n2011-01-01   0   0   0   0   0   0   0   0   0   0   0   0\n2011-03-22   0   0   0   0   0   0   0   0   0   0   0   0\n2011-06-10   0   0   0   0   0   0   0   0   0   0   0   0\n2011-08-29   0   0   0   0   0   0   0   0   0   0   0   0\n2011-11-17   0   0   0   0   0   0   0   0   0   0   0   0\n",
  "label": 0
 },
 {
  "idx": 2585,
  "doc": "How to turn a dictionary \"inside-out\"",
  "code": "for k, v in d.items():\n    if v == searchValue:\n        print(k)\n",
  "label": 0
 },
 {
  "idx": 2586,
  "doc": "Visual module in python assign objects",
  "code": ">>> from visual import sphere\n>>> s = sphere()\n",
  "label": 0
 },
 {
  "idx": 2587,
  "doc": "Splitting Strings in Python with Separator variable",
  "code": "def split_string(source,separators):\n    return re.split('|'.join(re.escape(x) for x in separators),source)\n",
  "label": 1
 },
 {
  "idx": 2588,
  "doc": "Groupby in a list for python",
  "code": ">>> lst = [tuple(i) for i in ls]\n>>> collections.Counter(lst)\nCounter({('A', 4): 2, ('F', 3): 1, ('B', 1): 1, ('B', 4): 1})\n",
  "label": 0
 },
 {
  "idx": 2589,
  "doc": "How can I treat a section of a file as though it's a file itself?",
  "code": "import string, random\n\nf = open('test.txt', 'w')\n\nfor i in range(10):\n    rand_list = list(string.ascii_letters)\n    random.shuffle(rand_list)\n    rand_str = \"\".join(rand_list[:9])\n    f.write(\".%d%s\" % (len(rand_str), rand_str))\n",
  "label": 0
 },
 {
  "idx": 2590,
  "doc": "How can I treat a section of a file as though it's a file itself?",
  "code": "import os\n\nclass View:\n    def __init__(self, f, offset, length):\n        self.f = f\n        self.f_offset = offset\n        self.offset = 0\n        self.length = length\n\n    def seek(self, offset, whence=0):\n        if whence == os.SEEK_SET:\n            self.offset = offset\n        elif whence == os.SEEK_CUR:\n            self.offset += offset\n        elif whence == os.SEEK_END:\n            self.offset = self.length+offset\n        else:\n            # Other values of whence should raise an IOError\n            return self.f.seek(offset, whence)\n        return self.f.seek(self.offset+self.f_offset, os.SEEK_SET)\n\n    def tell(self):\n        return self.offset\n\n    def read(self, size=-1):\n        self.seek(self.offset)\n        if size<0:\n            size = self.length-self.offset\n        size = max(0, min(size, self.length-self.offset))\n        self.offset += size\n        return self.f.read(size)\n\nif __name__ == \"__main__\":\n    f = open('test.txt', 'r')\n\n    views = []\n    offsets = [i*11 for i in range(10)]\n\n    for o in offsets:\n        f.seek(o+1)\n        length = int(f.read(1))\n        views.append(View(f, o+2, length))\n\n    f.seek(0)\n\n    completes = {}\n    for v in views:\n        completes[v.f_offset] = v.read()\n        v.seek(0)\n\n    import collections\n    strs = collections.defaultdict(str)\n    for i in range(3):\n        for v in views:\n            strs[v.f_offset] += v.read(3)\n    strs = dict(strs) # We want it to raise KeyErrors after that.\n\n    for offset, s in completes.iteritems():\n        print offset, strs[offset], completes[offset]\n        assert strs[offset] == completes[offset], \"Something went wrong!\"\n",
  "label": 1
 },
 {
  "idx": 2591,
  "doc": "How do i randomly select more than one item from a list in linux scripting?",
  "code": "import random, collections, csv\n\ndef pick_non_zero(count):\n    ditems = collections.defaultdict(int)\n\n    # Read the current stock file in\n    with open(\"stock.csv\", \"r\") as f_input:\n        csv_input = csv.reader(f_input, delimiter=\"\\t\")\n        headers = csv_input.next()\n\n        for item, quantity in csv_input:\n            ditems[item] += int(quantity)\n\n    lchoices = []\n\n    for n in range(count):\n        # Create a list of items with quantity remaining\n        lnon_zero = [item for item, quantity in ditems.items() if quantity > 0]\n\n        if len(lnon_zero) == 0:\n            lchoices.append(\"No more stock\")\n            break\n\n        # Pick one\n        choice = random.choice(lnon_zero)\n        # Reduce quantity by 1\n        ditems[choice] -= 1\n        lchoices.append(choice)\n\n    # Write the updated stock back to the file\n    with open(\"stock.csv\", \"wb\") as f_output:\n        csv_output = csv.writer(f_output, delimiter=\"\\t\")\n        csv_output.writerow(headers)\n\n        for item, quantity in ditems.items():\n            csv_output.writerow([item, quantity])\n\n    print \"Stock left\"\n\n    for item, quantity in ditems.items():\n        print \"%-10s  %d\" % (item, quantity)\n\n    return lchoices\n\nlpicked = pick_non_zero(6)\n\nprint\nprint \"Picked:\", lpicked\n",
  "label": 1
 },
 {
  "idx": 2592,
  "doc": "referencing list object by data python",
  "code": "mylist[mylist.index(value)]\n",
  "label": 0
 },
 {
  "idx": 2593,
  "doc": "Get header row in pandas dataframe",
  "code": "In [8]:\ndf = pd.read_table(io.StringIO(t), skiprows=3, header=None, nrows=1)\ndf\n\nOut[8]:\n                        0\n0  Col_A    Col_B   Col_C\n\nIn [10]:\ndf.iloc[0][0]\n\nOut[10]:\n'Col_A    Col_B   Col_C'\n",
  "label": 1
 },
 {
  "idx": 2594,
  "doc": "Parsing an equation with custom functions in python",
  "code": "from __future__ import print_function\nimport ast\n\ndef transform(eq,functions):\n    class EqVisitor(ast.NodeVisitor):\n        def visit_BinOp(self,node):\n            #generate(\"=>BinOp\")\n            generate(\"(\")\n            self.visit(node.left)\n            self.visit(node.op)\n            #generate(\"ici\",str(node.op),node._fields,node._attributes)\n            #generate(dir(node.op))\n            self.visit(node.right)\n            generate(\")\")\n            #ast.NodeVisitor.generic_visit(self,node)\n        def visit_USub(self,node):\n            generate(\"-\")\n        def visit_UAdd(self,node):\n            generate(\"+\")\n\n        def visit_Sub(self,node):\n            generate(\"-\")\n        def visit_Add(self,node):\n            generate(\"+\")\n        def visit_Pow(self,node):\n            generate(\"**\")\n        def visit_Mult(self,node):\n            generate(\"*\")\n        def visit_Div(self,node):\n            generate(\"/\")\n        def visit_Name(self,node):\n            generate(node.id)\n        def visit_Call(self,node):\n            debug(\"function\",node.func.id)\n            if node.func.id in functions:\n                debug(\"defined function\")\n                func_visit(functions[node.func.id],node.args)\n                return\n            debug(\"not defined function\",node.func.id)    \n            #generate(node._fields)\n            #generate(\"args\")\n            generate(node.func.id)\n            generate(\"(\")\n            sep = \"\"\n            for arg in node.args:\n                generate (sep)\n                self.visit(arg)\n                sep=\",\"\n            generate(\")\")\n        def visit_Num(self,node):\n            generate(node.n)\n        def generic_visit(self, node):\n\n\n            debug (\"\\n\",type(node).__name__)\n            debug (node._fields)\n            ast.NodeVisitor.generic_visit(self, node)  \n\n    def func_visit(definition,concrete_args):\n        class FuncVisitor(EqVisitor):\n            def visit_arguments(self,node):\n                #generate(\"visit arguments\")\n                #generate(node._fields)\n                self.arguments={}\n                for concrete_arg,formal_arg in zip(concrete_args,node.args):\n                    #generate(formal_arg._fields)\n                    self.arguments[formal_arg.id]=concrete_arg\n                debug(self.arguments)\n            def visit_Name(self,node):\n                debug(\"visit Name\",node.id)\n                if node.id in self.arguments:\n                    eqV.visit(self.arguments[node.id])\n                else:\n                    generate(node.id)\n\n\n        funcV=FuncVisitor()\n        funcV.visit(ast.parse(definition))\n\n    eqV=EqVisitor()\n    result = []\n    def generate(s):\n        #following line maybe usefull for debug\n        debug(str(s))\n        result.append(str(s))\n    eqV.visit(ast.parse(eq,mode=\"eval\"))\n    return \"\".join(result)\ndef debug(*args,**kwargs):\n    #print(*args,**kwargs)\n    pass\nfunctions= {\n    \"f1\":\"def f1(x,y):return x+y**2\",\n    \"f2\":\"def f2(x,y):return sin(x+y)\",\n}\neq=\"-(a+b)+f1(f2(+x,y),z)*4/365.12-h\"\nprint(transform(eq,functions))\n",
  "label": 1
 },
 {
  "idx": 2595,
  "doc": "Track changes of atributes in instance. Python",
  "code": "def add_old_setattr_to_class(cls):\n    def __setattr__(self, attr, val):\n        super_setattr = super(self.__class__, self).__setattr__\n        if attr.startswith('old_'):\n            super_setattr(attr, val)\n        else:\n            super_setattr('old_' + attr, getattr(self, attr))\n            super_setattr(attr, val)\n    cls.__setattr__ = __setattr__\n\n\nclass MyObject(object):\n    def __init__(self):\n        self.attr_one = None\n        self.attr_two = 1\n\nobj = MyObject()\nadd_old_setattr_to_class(obj.__class__)\nobj.attr_one = 'new value'\nobj.attr_two = 2\n\nprint obj.old_attr_one\nprint obj.attr_one\nprint obj.old_attr_two\nprint obj.attr_two\n",
  "label": 1
 },
 {
  "idx": 2596,
  "doc": "Compare two lists in python and print the output",
  "code": "items = {item[4] for item in main_list}\nfor child in xml_data:\n    value = child.get('value')\n    if value in items:\n        print(value)\n",
  "label": 1
 },
 {
  "idx": 2597,
  "doc": "Concatenate elements of a list",
  "code": ">>> l=['a', 'b', 'c']\n>>> ''.join(l)\n'abc'\n>>> '-'.join(l)\n'a-b-c'\n>>> ' - spam ham and eggs - '.join(l)\n'a - spam ham and eggs - b - spam ham and eggs - c'\n",
  "label": 1
 },
 {
  "idx": 2598,
  "doc": "How to remove/omit smaller contour lines using matplotlib",
  "code": "import scipy.interpolate as interp   #the new one\n\n# assume you have X,Y,Z,levels defined as before\n\n# start resampling stuff\ndN = 10 # use every dN'th element of the gridded input data\nmy_slice = [slice(None,None,dN),slice(None,None,dN)]\n\n# downsampled data\nX2,Y2,Z2 = X[my_slice],Y[my_slice],Z[my_slice]\n# same as X2 = X[::dN,::dN] etc.\n\n# upsampling with griddata over original mesh\nZsmooth = interp.griddata(np.array([X2.ravel(),Y2.ravel()]).T,Z2.ravel(),(X,Y),method='cubic')\n\n# plot\nplt.figure()\nCS = plt.contour(X, Y, Zsmooth, colors='b', linewidths=2, levels=levels)\n",
  "label": 0
 },
 {
  "idx": 2599,
  "doc": "Parse logs containing python tracebacks using logstash",
  "code": "filter {\n\n    multiline {\n        pattern => \"^[^\\[]\"\n        what => \"previous\"\n    }\n\n\n\n    grok {\n        match => [\n            \"message\", \"\\[pid\\: %{NUMBER:process_id:int}\\|app: 0\\|req: %{NUMBER}/%{NUMBER}\\] %{IPORHOST:clientip} \\(\\) \\{%{NUMBER:vars:int} vars in %{NUMBER:bytes:int} bytes\\} \\[%{GREEDYDATA:timestamp}\\] %{WORD:method} /%{GREEDYDATA:referrer} \\=\\> generated %{NUMBER:generated_bytes:int} bytes in %{NUMBER} msecs \\(HTTP/%{NUMBER} %{NUMBER:status_code:int}\\) %{NUMBER:headers:int} headers in %{NUMBER:header_bytes:int} bytes \\(%{NUMBER:switches:int} switches on core %{NUMBER:core:int}\\)%{GREEDYDATA:traceback}\"\n        ]\n    }\n\n    if \"_grokparsefailure\" in [tags] {\n        grok {\n            match => [\n            \"message\", \"\\[pid\\: %{NUMBER:process_id:int}\\|app: 0\\|req: %{NUMBER}/%{NUMBER}\\] %{IPORHOST:clientip} \\(\\) \\{%{NUMBER:vars:int} vars in %{NUMBER:bytes:int} bytes\\} \\[%{GREEDYDATA:timestamp}\\] %{WORD:method} /%{GREEDYDATA:referrer} \\=\\> generated %{NUMBER:generated_bytes:int} bytes in %{NUMBER} msecs \\(HTTP/%{NUMBER} %{NUMBER:status_code:int}\\) %{NUMBER:headers:int} headers in %{NUMBER:header_bytes:int} bytes \\(%{NUMBER:switches:int} switches on core %{NUMBER:core:int}\\)\"\n                ]\n            remove_tag => [\"_grokparsefailure\"]\n        }\n    }\n\n    else {\n        mutate {\n            convert => {\"traceback\" => \"string\"}\n        }\n    }\n\n    date {\n        match => [\"timestamp\", \"dd/MM/YYYY:HH:MM:ss Z\"]\n        locale => en\n    }\n    geoip {\n        source => \"clientip\"\n    }\n    useragent {\n        source => \"agent\"\n        target => \"Useragent\"\n    }\n}\n",
  "label": 1
 },
 {
  "idx": 2600,
  "doc": "Python: put all function arguments into **kwargs automatically",
  "code": ">>> def a(a,b,c):\n...     kwargs = {'a':a , 'b':b , 'c':c}\n...     d(**kwargs)\n...\n>>> def d(**kwargs):\n...     print(kwargs)\n...\n>>> a(1,2,3)\n{'c': 3, 'a': 1, 'b': 2}\n",
  "label": 1
 },
 {
  "idx": 2601,
  "doc": "Python: put all function arguments into **kwargs automatically",
  "code": ">>> def a(a,b,c):\n...     lcl = locals()\n...     print(lcl)\n...     d(**lcl)\n...     e = 123\n...     print(locals())\n...\n>>> def d(**kwargs):\n...     print(kwargs)\n...\n>>> a(1,2,3)\n{'c': 3, 'a': 1, 'b': 2}\n{'c': 3, 'a': 1, 'b': 2}\n{'c': 3, 'a': 1, 'e': 123, 'lcl': {...}, 'b': 2}\n",
  "label": 1
 },
 {
  "idx": 2602,
  "doc": "Use a class method as an integrand to GSL QAGS",
  "code": "from functools import partial\n\nfoo = Foo()\nintegrand_func = partial(Foo._integrand, foo)\n",
  "label": 1
 },
 {
  "idx": 2603,
  "doc": "Stiff ODE-solver",
  "code": "from __future__ import print_function\n\nimport numpy as np\nfrom scipy.integrate import ode\n\n\ndef func(t, u, mu):\n    tvals.append(t)\n    u1 = u[1]\n    u2 = mu*(1 - u[0]*u[0])*u[1] - u[0]\n    return np.array([u1, u2])\n\n\ndef jac(t, u, mu):\n    j = np.empty((2, 2))\n    j[0, 0] = 0.0\n    j[0, 1] = 1.0\n    j[1, 0] = -mu*2*u[0]*u[1] - 1\n    j[1, 1] = mu*(1 - u[0]*u[0])\n    return j\n\n\nmu = 10000.0\nu0 = [2, 0]\nt0 = 0.0\ntf = 10\n\nfor name, kwargs in [('vode', dict(method='adams')),\n                     ('vode', dict(method='bdf')),\n                     ('lsoda', {})]:\n    for j in [None, jac]:\n        solver = ode(func, jac=j)\n        solver.set_integrator(name, atol=1e-8, rtol=1e-6, **kwargs)\n        solver.set_f_params(mu)\n        solver.set_jac_params(mu)\n        solver.set_initial_value(u0, t0)\n\n        tvals = []\n        i = 0\n        while solver.successful() and solver.t < tf:\n            solver.integrate(tf, step=True)\n            i += 1\n\n        print(\"%-6s %-8s jac=%-5s \" %\n              (name, kwargs.get('method', ''), j.func_name if j else None),\n              end='')\n\n        tvals = np.unique(tvals)\n        print(\"len(tvals) =\", len(tvals))\n",
  "label": 1
 },
 {
  "idx": 2604,
  "doc": "How do I create a Django form that displays a checkbox label to the right of the checkbox?",
  "code": "{% load pretty_forms %}\n<form action=\".\" method=\"POST\">\n{{ form.as_p|pretty_checkbox }}\n<p><input type=\"submit\" value=\"Submit\"></p>\n</form>\n",
  "label": 0
 },
 {
  "idx": 2605,
  "doc": "Python Matplotlib: Splitting one Large Graph into several Sub-Graphs (Subplot)",
  "code": "import pandas as pd\nfrom matplotlib import rcParams\nimport matplotlib.pyplot as plt\nfrom operator import itemgetter\n\nrcParams.update({'figure.autolayout': True})\nplt.figure(figsize=(14,9), dpi=600)\n\nreso_names = ['A','B','C','D','E','F','G','H']\nreso_values = [5,7,3,8,2,9,1,3]\n\nN=3\nsublists_names = [reso_names[x:x+N] for x in range(0, len(reso_names), N)]\nsublists_values = [reso_values[x:x+N] for x in range(0, len(reso_values), N)]\n\nsize = int(len(reso_values))\nfig, axs = plt.subplots(nrows=size//N+1, sharey=True, figsize=(14,18), dpi=50)\n\nfig.suptitle('Graph', \n          **{'family': 'Arial Black', 'size': 22, 'weight': 'bold'})\n\nfor ax, names, values in zip(axs, sublists_names, sublists_values):\n    ax.bar(range(len(values)), values, align='center')\n    ax.set_xlabel('X-Axis')\n    ax.set_ylabel('Y-Axis')\n    ax.set_xticks(range(len(names)))\n    ax.set_xticklabels(names, rotation='vertical')\n    ax.set_xlim(0, len(names))\n    #ax.set_xlim(0, N)\n\nfig.subplots_adjust(bottom=0.05, top=0.95)\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2606,
  "doc": "Python Flatten Dataframe With Multiple Columns all n-length",
  "code": "In [11]: df1 = df[[\"Misc\", \"Year\"] + [c for c in df.columns if c[-1] == \"1\"]]\n\nIn [12]: df1 = df1.rename(columns=lambda x: x[:-1] if x[-1] == \"1\" else x)\n\nIn [13]: df1\nOut[13]:\n  Misc  Year   a  b    c\n0    A  1991  10  h  4.1\n1    R  1992  20  i  4.2\n2    B  1993  30  j  4.3\n\nIn [14]: df2 = df[[\"Misc\", \"Year\"] + [c for c in df.columns if c[-1] == \"2\"]]\n\nIn [15]: df2 = df2.rename(columns=lambda x: x[:-1] if x[-1] == \"2\" else x)\n\nIn [16]: pd.concat([df1, df2])\nOut[16]:\n  Misc  Year   a  b    c\n0    A  1991  10  h  4.1\n1    R  1992  20  i  4.2\n2    B  1993  30  j  4.3\n0    A  1991  40  k  4.4\n1    R  1992  50  l  4.5\n2    B  1993  60  m  4.6\n",
  "label": 1
 },
 {
  "idx": 2607,
  "doc": "python remove element from list while traversing it",
  "code": ">>> l = range(10)\n>>> for i in l:\n...     l.remove(i)\n... \n>>> l\n[1, 3, 5, 7, 9]\n",
  "label": 0
 },
 {
  "idx": 2608,
  "doc": "How to get console output printed using kivy",
  "code": "    from kivy.app import App\n    from kivy.uix.boxlayout import BoxLayout\n    from kivy.uix.popup import Popup\n    from kivy.properties import ObjectProperty\n    from kivy.uix.label import Label \n    import subprocess\n\n    class shellcommand(BoxLayout):\n        first=ObjectProperty()\n        second=ObjectProperty()\n        third=ObjectProperty()\n\n        def uname(self):\n            v=subprocess.check_output(\"uname -a\",shell=True)\n            result=Popup(title=\"RESULT\",content=Label(text=\"kernel is\\n\" + v))\n            result.open()\n        def date(self):\n            d=subprocess.check_output(\"date\",shell=True)\n            res=Popup(title=\"DATE\",content=Label(text=\"the date today is\\n\" + d))\n            res.open()\n        def last(self):\n            last=subprocess.check_output(\"w\",shell=True)\n            ls=Popup(title=\"LOGIN\",content=Label(text=\"logged in \\n\" + last))\n            ls.open()\n\n\n    class shellApp(App):\n        def build(self):\n            return shellcommand()\n\n    shellApp().run()\n",
  "label": 0
 },
 {
  "idx": 2609,
  "doc": "Collect values of pandas dataframe column A if column B is NaN (Python)",
  "code": "In [166]: df\nOut[166]:\n     a    b  c\n0  NaN  5.0  3\n1  7.0  NaN  8\n2  4.0  9.0  7\n3  8.0  NaN  9\n4  3.0  0.0  5\n5  NaN  3.0  5\n6  9.0  0.0  3\n7  0.0  2.0  6\n8  7.0  8.0  7\n9  1.0  7.0  6\n\n\nIn [163]: pd.isnull(df[['a','b']]).any(axis=1)\nOut[163]:\n0     True\n1     True\n2    False\n3     True\n4    False\n5     True\n6    False\n7    False\n8    False\n9    False\ndtype: bool\n\nIn [164]: df.ix[pd.isnull(df[['a','b']]).any(axis=1)]\nOut[164]:\n     a    b  c\n0  NaN  5.0  3\n1  7.0  NaN  8\n3  8.0  NaN  9\n5  NaN  3.0  5\n\nIn [165]: df.ix[pd.isnull(df[['a','b']]).any(axis=1), 'c']\nOut[165]:\n0    3\n1    8\n3    9\n5    5\nName: c, dtype: int32\n",
  "label": 1
 },
 {
  "idx": 2610,
  "doc": "Iterate over a \u2018window\u2019 of adjacent elements in Python",
  "code": "In [32]: kwa = dict(gen=xrange(1000), size=4, fill=-1, fill_left=True, fill_right=True)\nIn [33]: %timeit -n 10000 [a+b+c+d for a,b,c,d in tmpf5.ia(**kwa)]\n10000 loops, best of 3: 358 us per loop\nIn [34]: %timeit -n 10000 [a+b+c+d for a,b,c,d in tmpf5.window(**kwa)]\n10000 loops, best of 3: 368 us per loop\nIn [36]: %timeit -n 10000 [sum(x) for x in tmpf5.ia(**kwa)]\n10000 loops, best of 3: 340 us per loop\nIn [37]: %timeit -n 10000 [sum(x) for x in tmpf5.window(**kwa)]\n10000 loops, best of 3: 432 us per loop\n",
  "label": 0
 },
 {
  "idx": 2611,
  "doc": "Simulating a key press event in Python 2.7",
  "code": "from win32api import keybd_event\nimport time\nimport random\n\n\nCombs = {\n    'A': [\n        'SHIFT',\n        'a'],\n    'B': [\n        'SHIFT',\n        'b'],\n    'C': [\n        'SHIFT',\n        'c'],\n    'D': [\n        'SHIFT',\n        'd'],\n    'E': [\n        'SHIFT',\n        'e'],\n    'F': [\n        'SHIFT',\n        'f'],\n    'G': [\n        'SHIFT',\n        'g'],\n    'H': [\n        'SHIFT',\n        'h'],\n    'I': [\n        'SHIFT',\n        'i'],\n    'J': [\n        'SHIFT',\n        'j'],\n    'K': [\n        'SHIFT',\n        'k'],\n    'L': [\n        'SHIFT',\n        'l'],\n    'M': [\n        'SHIFT',\n        'm'],\n    'N': [\n        'SHIFT',\n        'n'],\n    'O': [\n        'SHIFT',\n        'o'],\n    'P': [\n        'SHIFT',\n        'p'],\n    'R': [\n        'SHIFT',\n        'r'],\n    'S': [\n        'SHIFT',\n        's'],\n    'T': [\n        'SHIFT',\n        't'],\n    'U': [\n        'SHIFT',\n        'u'],\n    'W': [\n        'SHIFT',\n        'w'],\n    'X': [\n        'SHIFT',\n        'x'],\n    'Y': [\n        'SHIFT',\n        'y'],\n    'Z': [\n        'SHIFT',\n        'z'],\n    'V': [\n        'SHIFT',\n        'v'],\n    'Q': [\n        'SHIFT',\n        'q'],\n    '?': [\n        'SHIFT',\n        '/'],\n    '>': [\n        'SHIFT',\n        '.'],\n    '<': [\n        'SHIFT',\n        ','],\n    '\"': [\n        'SHIFT',\n        \"'\"],\n    ':': [\n        'SHIFT',\n        ';'],\n    '|': [\n        'SHIFT',\n        '\\\\'],\n    '}': [\n        'SHIFT',\n        ']'],\n    '{': [\n        'SHIFT',\n        '['],\n    '+': [\n        'SHIFT',\n        '='],\n    '_': [\n        'SHIFT',\n        '-'],\n    '!': [\n        'SHIFT',\n        '1'],\n    '@': [\n        'SHIFT',\n        '2'],\n    '#': [\n        'SHIFT',\n        '3'],\n    '$': [\n        'SHIFT',\n        '4'],\n    '%': [\n        'SHIFT',\n        '5'],\n    '^': [\n        'SHIFT',\n        '6'],\n    '&': [\n        'SHIFT',\n        '7'],\n    '*': [\n        'SHIFT',\n        '8'],\n    '(': [\n        'SHIFT',\n        '9'],\n    ')': [\n        'SHIFT',\n        '0'] }\nBase = {\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    '.': 190,\n    '-': 189,\n    ',': 188,\n    '=': 187,\n    '/': 191,\n    ';': 186,\n    '[': 219,\n    ']': 221,\n    '\\\\': 220,\n    \"'\": 222,\n    'ALT': 18,\n    'TAB': 9,\n    'CAPSLOCK': 20,\n    'ENTER': 13,\n    'BS': 8,\n    'CTRL': 17,\n    'ESC': 27,\n    ' ': 32,\n    'END': 35,\n    'DOWN': 40,\n    'LEFT': 37,\n    'UP': 38,\n    'RIGHT': 39,\n    'SELECT': 41,\n    'PRINTSCR': 44,\n    'INS': 45,\n    'DEL': 46,\n    'LWIN': 91,\n    'RWIN': 92,\n    'LSHIFT': 160,\n    'SHIFT': 161,\n    'LCTRL': 162,\n    'RCTRL': 163,\n    'VOLUP': 175,\n    'DOLDOWN': 174,\n    'NUMLOCK': 144,\n    'SCROLL': 145 }\n\ndef KeyUp(Key):\n    keybd_event(Key, 0, 2, 0)\n\n\ndef KeyDown(Key):\n    keybd_event(Key, 0, 1, 0)\n\n\ndef Press(Key, speed=1):\n    rest_time = 0.05/speed\n    if Key in Base:\n        Key = Base[Key]\n        KeyDown(Key)\n        time.sleep(rest_time)\n        KeyUp(Key)\n        return True\n    if Key in Combs:\n        KeyDown(Base[Combs[Key][0]])\n        time.sleep(rest_time)\n        KeyDown(Base[Combs[Key][1]])\n        time.sleep(rest_time)\n        KeyUp(Base[Combs[Key][1]])\n        time.sleep(rest_time)\n        KeyUp(Base[Combs[Key][0]])\n        return True\n    return False\n\n\ndef Write(Str, speed = 1):\n    for s in Str:\n        Press(s, speed)\n        time.sleep((0.1 + random.random()/10.0) / float(speed))\n",
  "label": 1
 },
 {
  "idx": 2612,
  "doc": "Pyyaml - Using different styles for keys and integers and strings",
  "code": "import ruamel.yaml as yaml\n\n# the scalar emitter from emitter.py\ndef process_scalar(self):\n    if self.analysis is None:\n        self.analysis = self.analyze_scalar(self.event.value)\n    if self.style is None:\n        self.style = self.choose_scalar_style()\n    split = (not self.simple_key_context)\n    # VVVVVVVVVVVVVVVVVVVV added\n    try:\n        x = int(self.event.value)  # might need to expand this\n    except:\n        # we have string\n        if split:\n            self.style = \"'\"\n        else:\n            self.style = '\"'\n    # ^^^^^^^^^^^^^^^^^^^^\n    # if self.analysis.multiline and split    \\\n    #         and (not self.style or self.style in '\\'\\\"'):\n    #     self.write_indent()\n    if self.style == '\"':\n        self.write_double_quoted(self.analysis.scalar, split)\n    elif self.style == '\\'':\n        self.write_single_quoted(self.analysis.scalar, split)\n    elif self.style == '>':\n        self.write_folded(self.analysis.scalar)\n    elif self.style == '|':\n        self.write_literal(self.analysis.scalar)\n    else:\n        self.write_plain(self.analysis.scalar, split)\n    self.analysis = None\n    self.style = None\n    if self.event.comment:\n        self.write_post_comment(self.event)\n\n\ninfile = yaml.load(open('yamlfile'), Loader=yaml.RoundTripLoader)\n\nfor key, value in infile['main'].items():\n    if key == 'keepalivetimeout':\n        item = value['item']\n        item['keepalivetimeout'] = 400\n\ndd = yaml.RoundTripDumper\ndd.process_scalar = process_scalar\n\nprint '---'\nprint yaml.dump(infile, Dumper=dd)\n",
  "label": 1
 },
 {
  "idx": 2613,
  "doc": "Python get get average of neighbours in matrix with na value",
  "code": "In [587]: arr\nOut[587]: \narray([[ 4.,  0.,  3.,  3.,  3.,  1.,  3.],\n       [ 2.,  4.,  0.,  0.,  4.,  2.,  1.],\n       [ 0.,  1.,  1.,  0.,  1.,  4.,  3.],\n       [ 0.,  3.,  0.,  2.,  3.,  0.,  1.]])\n\nIn [588]: arr_out\nOut[588]: \narray([[ 4.  ,  3.5 ,  3.  ,  3.  ,  3.  ,  1.  ,  3.  ],\n       [ 2.  ,  4.  ,  2.  ,  1.75,  4.  ,  2.  ,  1.  ],\n       [ 1.5 ,  1.  ,  1.  ,  1.  ,  1.  ,  4.  ,  3.  ],\n       [ 2.  ,  3.  ,  2.25,  2.  ,  3.  ,  2.25,  1.  ]])\n",
  "label": 0
 },
 {
  "idx": 2614,
  "doc": "Python get get average of neighbours in matrix with na value",
  "code": "import numpy as np\nfrom scipy import signal\n\n# Inputs\na = [[1,2,3],[3,4,5],[5,6,7],[4,8,9]]\n\n# Convert to numpy array\narr = np.asarray(a,float)\n\n# Define kernel for convolution                                         \nkernel = np.array([[0,1,0],\n                   [1,0,1],\n                   [0,1,0]]) \n\n# Perform 2D convolution with input data and kernel \nconv_out = signal.convolve2d(arr, kernel, boundary='wrap', mode='same')/kernel.sum()\n\n# Initialize output array as a copy of input array\narr_out = arr.copy()\n\n# Setup a mask of zero elements in input array and \n# replace those in output array with the convolution output\nmask = arr==0\narr_out[mask] = conv_out[mask]\n",
  "label": 1
 },
 {
  "idx": 2615,
  "doc": "Ordering a nested dictionary by the frequency of the nested value",
  "code": "from collections import Counter\n\nl = ['foobar', 'foofoo', 'foobar', 'barfoo']\nD = Counter((v[:3], v[3:]) for v in l)\nprint D.most_common() # [(('foo', 'bar'), 2), (('foo', 'foo'), 1), (('bar', 'foo'), 1)]\n",
  "label": 1
 },
 {
  "idx": 2616,
  "doc": "Print two report in Odoo8",
  "code": "//download.js v3.0, by dandavis; 2008-2014. [CCBY2] see     http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to     local un-named files, upgraded to use a hidden frame and     optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+)     support, and window.URL support for larger+faster saves     than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and     legacy dataURL fallback was improved with force-download mime and     base64 support\n\n// data can be a string, Blob, File, or dataURL\n\n\n\n\nfunction download(data, strFileName, strMimeType) {\n    var self = window, // this script is only for browsers     anyway...\n        u = \"application/octet-stream\", // this default mime     also triggers iframe downloads\n        m = strMimeType || u, \n        x = data,\n        D = document,\n        a = D.createElement(\"a\"),\n        z = function(a){return String(a);},\n\n\n        B = self.Blob || self.MozBlob || self.WebKitBlob || z,\n        BB = self.MSBlobBuilder || self.WebKitBlobBuilder ||     self.BlobBuilder,\n        fn = strFileName || \"download\",\n        blob, \n        b,\n        ua,\n        fr;\n\n    //if(typeof B.bind === 'function' ){ B=B.bind(self); }\n\n    if(String(this)===\"true\"){ //reverse arguments, allowing     download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n        x=[x, m];\n        m=x[0];\n        x=x[1]; \n    }\n\n\n\n    //go ahead and download dataURLs right away\n    if(String(x).match(/^data\\:[\\w+\\-]+\\/[\\w+\\-]+[,;]/)){\n        return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n            navigator.msSaveBlob(d2b(x), fn) : \n            saver(x) ; // everyone else can save dataURLs un-processed\n    }//end if dataURL passed?\n\n    try{\n\n        blob = x instanceof B ? \n            x : \n            new B([x], {type: m}) ;\n    }catch(y){\n        if(BB){\n            b = new BB();\n            b.append([x]);\n            blob = b.getBlob(m); // the blob\n        }\n\n    }\n\n\n\n    function d2b(u) {\n        var p= u.split(/[:;,]/),\n        t= p[1],\n        dec= p[2] == \"base64\" ? atob : decodeURIComponent,\n        bin= dec(p.pop()),\n        mx= bin.length,\n        i= 0,\n        uia= new Uint8Array(mx);\n\n        for(i;i<mx;++i) uia[i]= bin.charCodeAt(i);\n\n        return new B([uia], {type: t});\n     }\n\n    function saver(url, winMode){\n\n\n        if ('download' in a) { //html5 A[download]          \n            a.href = url;\n            a.setAttribute(\"download\", fn);\n            a.innerHTML = \"downloading...\";\n            D.body.appendChild(a);\n            setTimeout(function() {\n            a.click();\n            D.body.removeChild(a);\n            if(winMode===true){setTimeout(function(){     self.URL.revokeObjectURL(a.href);}, 250 );}\n            }, 66);\n            return true;\n        }\n\n        //do iframe dataURL download (old ch+FF):\n        var f = D.createElement(\"iframe\");\n        D.body.appendChild(f);\n        if(!winMode){ // force a mime that will download:\n            url=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, u);\n        }\n\n\n        f.src = url;\n        setTimeout(function(){ D.body.removeChild(f); }, 333);\n\n    }//end saver \n\n\n    if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not     a[download] or URL)\n        return navigator.msSaveBlob(blob, fn);\n    }   \n\n    if(self.URL){ // simple fast and modern way using Blob and     URL:\n        saver(self.URL.createObjectURL(blob), true);\n    }else{\n        // handle non-Blob()+non-URL browsers:\n        if(typeof blob === \"string\" || blob.constructor===z ){\n            try{\n                return saver( \"data:\" +  m   + \";base64,\"  +      self.btoa(blob)  ); \n            }catch(y){\n                return saver( \"data:\" +  m   + \",\" +     encodeURIComponent(blob)  ); \n            }\n        }\n\n        // Blob but not URL:\n        fr=new FileReader();\n        fr.onload=function(e){\n            saver(this.result); \n        };\n        fr.readAsDataURL(blob);\n    }   \n    return true;\n} /* end download() */\n",
  "label": 0
 },
 {
  "idx": 2617,
  "doc": "How can you bundle all your python code into a single zip file?",
  "code": "[zart@feena ziplib-demo]$ cd unpacked\n[zart@feena unpacked]$ ls\nwaitress  waitress-0.8.5-py2.7.egg-info\n[zart@feena unpacked]$ zip -r9 ../library.zip *\n  adding: waitress/ (stored 0%)\n  adding: waitress/receiver.py (deflated 71%)\n  adding: waitress/server.pyc (deflated 64%)\n  adding: waitress/utilities.py (deflated 62%)\n  adding: waitress/trigger.pyc (deflated 63%)\n  adding: waitress/trigger.py (deflated 61%)\n  adding: waitress/receiver.pyc (deflated 60%)\n  adding: waitress/adjustments.pyc (deflated 51%)\n  adding: waitress/compat.pyc (deflated 56%)\n  adding: waitress/adjustments.py (deflated 60%)\n  adding: waitress/server.py (deflated 68%)\n  adding: waitress/channel.py (deflated 72%)\n  adding: waitress/task.pyc (deflated 57%)\n  adding: waitress/tests/ (stored 0%)\n  adding: waitress/tests/test_regression.py (deflated 63%)\n  adding: waitress/tests/test_functional.py (deflated 88%)\n  adding: waitress/tests/test_parser.pyc (deflated 76%)\n  adding: waitress/tests/test_trigger.pyc (deflated 73%)\n  adding: waitress/tests/test_init.py (deflated 72%)\n  adding: waitress/tests/test_utilities.pyc (deflated 78%)\n  adding: waitress/tests/test_buffers.pyc (deflated 79%)\n  adding: waitress/tests/test_trigger.py (deflated 82%)\n  adding: waitress/tests/test_buffers.py (deflated 86%)\n  adding: waitress/tests/test_runner.py (deflated 75%)\n  adding: waitress/tests/test_init.pyc (deflated 69%)\n  adding: waitress/tests/__init__.pyc (deflated 21%)\n  adding: waitress/tests/support.pyc (deflated 48%)\n  adding: waitress/tests/test_utilities.py (deflated 73%)\n  adding: waitress/tests/test_channel.py (deflated 87%)\n  adding: waitress/tests/test_task.py (deflated 87%)\n  adding: waitress/tests/test_functional.pyc (deflated 82%)\n  adding: waitress/tests/__init__.py (deflated 5%)\n  adding: waitress/tests/test_compat.pyc (deflated 53%)\n  adding: waitress/tests/test_receiver.pyc (deflated 79%)\n  adding: waitress/tests/test_adjustments.py (deflated 78%)\n  adding: waitress/tests/test_adjustments.pyc (deflated 74%)\n  adding: waitress/tests/test_server.pyc (deflated 73%)\n  adding: waitress/tests/fixtureapps/ (stored 0%)\n  adding: waitress/tests/fixtureapps/filewrapper.pyc (deflated 59%)\n  adding: waitress/tests/fixtureapps/getline.py (deflated 37%)\n  adding: waitress/tests/fixtureapps/nocl.py (deflated 47%)\n  adding: waitress/tests/fixtureapps/sleepy.pyc (deflated 44%)\n  adding: waitress/tests/fixtureapps/echo.py (deflated 40%)\n  adding: waitress/tests/fixtureapps/error.py (deflated 52%)\n  adding: waitress/tests/fixtureapps/nocl.pyc (deflated 48%)\n  adding: waitress/tests/fixtureapps/getline.pyc (deflated 32%)\n  adding: waitress/tests/fixtureapps/writecb.pyc (deflated 42%)\n  adding: waitress/tests/fixtureapps/toolarge.py (deflated 37%)\n  adding: waitress/tests/fixtureapps/__init__.pyc (deflated 20%)\n  adding: waitress/tests/fixtureapps/writecb.py (deflated 50%)\n  adding: waitress/tests/fixtureapps/badcl.pyc (deflated 44%)\n  adding: waitress/tests/fixtureapps/runner.pyc (deflated 58%)\n  adding: waitress/tests/fixtureapps/__init__.py (stored 0%)\n  adding: waitress/tests/fixtureapps/filewrapper.py (deflated 74%)\n  adding: waitress/tests/fixtureapps/runner.py (deflated 41%)\n  adding: waitress/tests/fixtureapps/echo.pyc (deflated 42%)\n  adding: waitress/tests/fixtureapps/groundhog1.jpg (deflated 24%)\n  adding: waitress/tests/fixtureapps/error.pyc (deflated 48%)\n  adding: waitress/tests/fixtureapps/sleepy.py (deflated 42%)\n  adding: waitress/tests/fixtureapps/toolarge.pyc (deflated 43%)\n  adding: waitress/tests/fixtureapps/badcl.py (deflated 45%)\n  adding: waitress/tests/support.py (deflated 52%)\n  adding: waitress/tests/test_task.pyc (deflated 78%)\n  adding: waitress/tests/test_channel.pyc (deflated 78%)\n  adding: waitress/tests/test_regression.pyc (deflated 68%)\n  adding: waitress/tests/test_parser.py (deflated 80%)\n  adding: waitress/tests/test_server.py (deflated 78%)\n  adding: waitress/tests/test_receiver.py (deflated 87%)\n  adding: waitress/tests/test_compat.py (deflated 51%)\n  adding: waitress/tests/test_runner.pyc (deflated 72%)\n  adding: waitress/__init__.pyc (deflated 50%)\n  adding: waitress/channel.pyc (deflated 58%)\n  adding: waitress/runner.pyc (deflated 54%)\n  adding: waitress/buffers.py (deflated 74%)\n  adding: waitress/__init__.py (deflated 61%)\n  adding: waitress/runner.py (deflated 58%)\n  adding: waitress/parser.py (deflated 69%)\n  adding: waitress/compat.py (deflated 69%)\n  adding: waitress/buffers.pyc (deflated 69%)\n  adding: waitress/utilities.pyc (deflated 60%)\n  adding: waitress/parser.pyc (deflated 53%)\n  adding: waitress/task.py (deflated 72%)\n  adding: waitress-0.8.5-py2.7.egg-info/ (stored 0%)\n  adding: waitress-0.8.5-py2.7.egg-info/dependency_links.txt (stored 0%)\n  adding: waitress-0.8.5-py2.7.egg-info/installed-files.txt (deflated 83%)\n  adding: waitress-0.8.5-py2.7.egg-info/top_level.txt (stored 0%)\n  adding: waitress-0.8.5-py2.7.egg-info/PKG-INFO (deflated 65%)\n  adding: waitress-0.8.5-py2.7.egg-info/not-zip-safe (stored 0%)\n  adding: waitress-0.8.5-py2.7.egg-info/SOURCES.txt (deflated 71%)\n  adding: waitress-0.8.5-py2.7.egg-info/entry_points.txt (deflated 33%)\n  adding: waitress-0.8.5-py2.7.egg-info/requires.txt (deflated 5%)\n[zart@feena unpacked]$ cd ..\n",
  "label": 0
 },
 {
  "idx": 2618,
  "doc": "PyGTK/GIO: monitor directory for changes recursively",
  "code": "import time\nimport os\n\nclass Watcher(object):\n    def __init__(self):\n        self.dirs = []\n        self.snapshots = {}\n\n    def add_dir(self, dir):\n        self.dirs.append(dir)\n\n    def check_for_changes(self, dir):\n        snapshot = self.snapshots.get(dir)\n        curstate = os.listdir(dir)\n        if not snapshot:\n            self.snapshots[dir] = curstate\n        else:\n            if not snapshot == curstate:\n                print 'Changes: ',\n                for change in set(curstate).symmetric_difference(set(snapshot)):\n                    if os.path.isdir(change):\n                        print \"isdir\"\n                        self.add_dir(change)\n                    print change,\n\n                self.snapshots[dir] = curstate\n                print\n\n    def mainloop(self):\n        if len(self.dirs) < 1:\n            print \"ERROR: Please add a directory with add_dir()\"\n            return\n\n        while True:\n            for dir in self.dirs:\n                self.check_for_changes(dir)\n            time.sleep(4) # Don't want to be a resource hog\n\nw = Watcher()\nw.add_dir('.')\n\n\nw.mainloop()\n",
  "label": 1
 },
 {
  "idx": 2619,
  "doc": "Computing the Difference between two graphs 'edge wise' in networkx",
  "code": "import networkx as nx\n\nS = nx.DiGraph()#S-sample graph\nS.add_nodes_from([0, 1, 2])\nS.add_edge(0, 2)\nS.add_edge(1, 2)\n\nR = nx.DiGraph()#R-reference graph\nR.add_nodes_from([0, 1, 2])\nR.add_edge(1, 2)\n\n\ndef difference(S, R):\n    DIF = nx.create_empty_copy(R)\n    DIF.name = \"Difference of (%s and %s)\" % (S.name, R.name)\n    if set(S) != set(R):\n        raise nx.NetworkXError(\"Node sets of graphs is not equal\")\n\n    r_edges = set(R.edges_iter())\n    s_edges = set(S.edges_iter())\n\n    # I'm not sure what the goal is: the difference, or the edges that are in R but not in S\n    # In case it is the difference:\n    diff_edges = r_edges.symmetric_difference(s_edges)\n\n    # In case its the edges that are in R but not in S:\n    # diff_edges = r_edges - s_edges\n\n    DIF.add_edges_from(diff_edges)\n\n    return DIF\n\nprint(difference(S, R).edges())\n",
  "label": 1
 },
 {
  "idx": 2620,
  "doc": "Computing the Difference between two graphs 'edge wise' in networkx",
  "code": "set([frozenset(x) for x in S.edges()])\n",
  "label": 0
 },
 {
  "idx": 2621,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "        selected = set()\n        for index in indices:\n            selected.add(index.row())\n",
  "label": 0
 },
 {
  "idx": 2622,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "        indices = self.selectedIndexes()\n",
  "label": 0
 },
 {
  "idx": 2623,
  "doc": "Multiple drag and drop in PyQt4",
  "code": "    def dragEnterEvent(self, event):\n        if event.mimeData().hasFormat(\"application/pubmedrecord\"):\n            event.setDropAction(Qt.MoveAction)\n            event.accept()\n        else:\n            event.ignore()\n\n    def startDrag(self, event):\n",
  "label": 0
 },
 {
  "idx": 2624,
  "doc": "How to process input in parallel with python, but without processes?",
  "code": "from threading import Thread\nfrom collections import deque\nimport time\n\n\nclass Pool():\n\n    def __init__(self, n_threads):\n        self.n_threads = n_threads\n\n    def map(self, func, data):\n        inqueue = deque(data)\n        result = deque()\n\n        workers = [Worker(inqueue, result, func) for i in range(self.n_threads)]\n\n        for worker in workers:\n            worker.start()\n\n        for worker in workers:\n            worker.join()\n\n        return list(result)\n\n\nclass Worker(Thread):\n\n    def __init__(self, inqueue, outqueue, func):\n        '''\n        A worker that calls func on objects in inqueue and\n        pushes the result into outqueue\n\n        runs until inqueue is empty\n        '''\n\n        self.inqueue = inqueue\n        self.outqueue = outqueue\n        self.func = func\n        super().__init__()\n\n    # override the run method, this is starte when\n    # you call worker.start()\n    def run(self):\n        while self.inqueue:\n            data = self.inqueue.popleft()\n            print('start')\n            result = self.func(data)\n            self.outqueue.append(result)\n            print('finished')\n\n\ndef test(x):\n    time.sleep(x)\n    return 2 * x\n\n\nif __name__ == '__main__':\n    data = 12 * [1, ]\n\n    pool = Pool(6)\n    result = pool.map(test, data)\n\n    print(result)\n",
  "label": 1
 },
 {
  "idx": 2625,
  "doc": "How to process input in parallel with python, but without processes?",
  "code": "from threading import Thread\nfrom collections import deque\nimport time\n\n\n# Create a new class that inherits from Thread\nclass Worker(Thread):\n\n    def __init__(self, inqueue, outqueue, func):\n        '''\n        A worker that calls func on objects in inqueue and\n        pushes the result into outqueue\n\n        runs until inqueue is empty\n        '''\n\n        self.inqueue = inqueue\n        self.outqueue = outqueue\n        self.func = func\n        super().__init__()\n\n    # override the run method, this is starte when\n    # you call worker.start()\n    def run(self):\n        while self.inqueue:\n            data = self.inqueue.popleft()\n            print('start')\n            result = self.func(data)\n            self.outqueue.append(result)\n            print('finished')\n\n\ndef test(x):\n    time.sleep(x)\n    return 2 * x\n\n\nif __name__ == '__main__':\n    data = 12 * [1, ]\n    queue = deque(data)\n    result = deque()\n\n    # create 3 workers working on the same input\n    workers = [Worker(queue, result, test) for _ in range(3)]\n\n    # start the workers\n    for worker in workers:\n        worker.start()\n\n    # wait till all workers are finished\n    for worker in workers:\n        worker.join()\n\n    print(result)\n",
  "label": 1
 },
 {
  "idx": 2626,
  "doc": "Python 3 concurrent.futures and per-thread initialization",
  "code": "IN_IPYNB = 'get_ipython' in vars()\n\nif IN_IPYNB:\n    logger = logging.getLogger()\n    logger.setLevel(logging.DEBUG)\n    for h in logger.handlers:\n        h.setFormatter(logging.Formatter(\n                '(%(threadName)-0s) %(relativeCreated)d - %(message)s'))\nelse:\n    logging.basicConfig(level=logging.DEBUG, format='(%(threadName)-0s) %(relativeCreated)d - %(message)s')\n",
  "label": 0
 },
 {
  "idx": 2627,
  "doc": "Python 3 concurrent.futures and per-thread initialization",
  "code": "import time\nimport threading\nimport concurrent.futures\nimport random\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG, format='(%(threadName)-0s) %(relativeCreated)d - %(message)s')\n\nx = [0.1, 0.1, 0.2, 0.4, 1.0, 0.1, 0.0]\n\nmydata = threading.local()\n\ndef do_work(secs):\n    if 'session' in mydata.__dict__:\n        logging.debug('re-using session \"{}\"'.format(mydata.session))\n    else:\n        mydata.session = random.randint(0,1000)\n        logging.debug('created new session: \"{}\"'.format(mydata.session))\n    time.sleep(secs)\n    logging.debug('slept for {} seconds'.format(secs))\n    return secs\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n    y = executor.map(do_work, x)\n\nprint(list(y))\n",
  "label": 1
 },
 {
  "idx": 2628,
  "doc": "Can you make a function that would create several instances of a class for you in Python?",
  "code": ">>> class Room(object):\n...     def __init__(self, x, y):\n...         self.x = x\n...         self.y = y\n...         \n>>> rooms = {}\n>>> names = ['a', 'b', 'c', 'd']\n>>> locations = [[1,1], [1,2], [2,1], [2,2]]\n>>> for name, loc in zip(names, locations):\n...     rooms[name] = Room(*loc)\n...     \n>>> rooms\n{'a': <__main__.Room object at 0x8a0030c>, 'c': <__main__.Room object at 0x89b01cc>, 'b': <__main__.Room object at 0x89b074c>, 'd': <__main__.Room object at 0x89b02ec>}\n>>> rooms['c']\n<__main__.Room object at 0x89b01cc>\n>>> rooms['c'].x\n2\n>>> rooms['c'].y\n1\n",
  "label": 1
 },
 {
  "idx": 2629,
  "doc": "How to print available tags while using Robot Framework",
  "code": "from robot.parsing import TestData\nimport sys\n\ndef main(path):\n    suite = TestData(parent=None, source=path)\n    tags = get_tags(suite)\n    print \", \".join(sorted(set(tags)))\n\ndef get_tags(suite):\n    tags = []\n\n    if suite.setting_table.force_tags:\n        tags.extend(suite.setting_table.force_tags.value)\n\n    if suite.setting_table.default_tags:\n        tags.extend(suite.setting_table.default_tags.value)\n\n    for testcase in suite.testcase_table.tests:\n        if testcase.tags:\n            tags.extend(testcase.tags.value)\n\n    for child_suite in suite.children:\n        tags.extend(get_tags(child_suite))\n\n    return tags\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n",
  "label": 1
 },
 {
  "idx": 2630,
  "doc": "Base-2 (Binary) Representation Using Python",
  "code": "Num Bits:              8       16       32       64      128      256\n---------------------------------------------------------------------\nbin                0.544    0.586    0.744    1.942    1.854    3.357 \nbin16              0.542    0.494    0.592    0.773    1.150    1.886\nconstantin_bin     2.238    3.803    7.794   17.869   34.636   94.799\nnum_bin            3.712    5.693   12.086   32.566   67.523  128.565\nPython3's bin      0.079    0.045    0.062    0.069    0.212    0.201\n",
  "label": 0
 },
 {
  "idx": 2631,
  "doc": "Base-2 (Binary) Representation Using Python",
  "code": "_conv_table = [_bin(x,8) for x in range(256)]\n",
  "label": 0
 },
 {
  "idx": 2632,
  "doc": "Using selenium at hosted app?",
  "code": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\ndesired_cap = {'os': 'Windows', 'os_version': 'xp', 'browser': 'IE', 'browser_version': '7.0' }\n\ndriver = webdriver.Remote(\n    command_executor='http://username:key@hub.browserstack.com:80/wd/hub',\n    desired_capabilities=desired_cap)\n\ndriver.get(\"http://www.google.com\")\nif not \"Google\" in driver.title:\n    raise Exception(\"Unable to load google page!\")\nelem = driver.find_element_by_name(\"q\")\nelem.send_keys(\"BrowerStack\")\nelem.submit()\nprint driver.title\ndriver.quit()\n",
  "label": 1
 },
 {
  "idx": 2633,
  "doc": "How to print framed strings",
  "code": "UL, UR = '\u2554', '\u2557'\nSL, SR = '\u2560', '\u2551'\nDL, DR = '\u255a', '\u255d'\nAL, AR = '\u2550', '>'\n\n\ndef padded(\n    line, info=None, width=42, intro='>', outro='<', filler='.', chopped='..'\n):\n    # cleanup input\n    line = ''.join([' ', line.strip()]) if line else ''\n    info = info.strip() if info else ''\n\n    # determine available width\n    width -= sum([len(intro), len(outro), len(line), len(info)])\n    if width < 0:\n        # chop off overflowing text\n        line = line[:len(line)+width]\n        if chopped:\n            # place chopped characters (if set)\n            chopped = chopped.strip()\n            line = ' '.join([line[:len(line)-(len(chopped)+1)], chopped])\n\n    return ''.join(e for e in [\n        intro,\n        info,\n        line,\n        ''.join(filler for _ in range(width)),\n        outro\n    ] if e)\n\n\ndef box(rnum, nbeds, *extras):\n    arrow = (AL+AR)\n    res = [\n        # head line\n        padded(\n            'Stanza n. {:03d} <'.format(rnum), (AL+AL+arrow),\n            intro=UL, outro=UR, filler=AL\n        ),\n        # first line\n        padded(\n            'Num letti: {:3d}'.format(nbeds), arrow,\n            intro=SL, outro=SR, filler=' '\n        ),\n    ]\n    # following lines\n    res.extend(padded(e, arrow, intro=SL, outro=SR, filler=' ') for e in extras)\n    # bottom line\n    res.append(padded(None, None, intro=DL, outro=DR, filler=AL))\n\n    return '\\n'.join(res)\n\n\nprint(\n    box(485, 3, 'Fumatori', 'Televisione')\n)\nprint(\n    box(123, 4, 'Fumatori', 'Televisione', 'Aria Condizionata')\n)\nprint(\n    box(1, 1, 'this is so much text it will be chopped off')\n)\n",
  "label": 1
 },
 {
  "idx": 2634,
  "doc": "matplotlib align twinx tick marks",
  "code": "ax1.set_yticks(np.linspace(ax1.get_ybound()[0], ax1.get_ybound()[1], 5))\nax2.set_yticks(np.linspace(ax2.get_ybound()[0], ax2.get_ybound()[1], 5))\n",
  "label": 0
 },
 {
  "idx": 2635,
  "doc": "Remembering Scroll value of a QTreeWidget in PyQt",
  "code": "bar = treeWidget.verticalScrollBar()\nyScroll = bar.value()\n# repopulate here ...\ntreeWidget.scrollContentsBy(0, yScroll)\n",
  "label": 0
 },
 {
  "idx": 2636,
  "doc": "Manipulating rows of csv file in python",
  "code": "import csv\nimport math\n\nf = open('citydata.csv')\n\ncsv_f = csv.reader(f)\ncontent = [row for row in csv_f]\n\nfor row in content[1:]:\n    x1 = float(row[2])\n    x2 = float(row[3])\n    for rowOther in content[1:]:\n        y1 = float(rowOther[2])\n        y2 = float(rowOther[3])\n\n        answer = (x1-(math.pow(x2,2))) - (y1-(math.pow(y2,2)))\n\n        print(answer)\n",
  "label": 0
 },
 {
  "idx": 2637,
  "doc": "python, how to run commands on remote hosts and show output in GUI in real time?",
  "code": "tail -f /var/log/apache2/access.log | /usr/share/bin/myharvester \n",
  "label": 0
 },
 {
  "idx": 2638,
  "doc": "How to make a calculator with strings and numbers as mixed input using parser python ply",
  "code": "#!/usr/bin/python\n\nfrom __future__ import print_function\n\nimport sys\nimport ply.lex as lex\nimport ply.yacc as yacc\n\n# ------- Calculator tokenizing rules\n\ntokens = (\n    'NUMBER', 'times', 'divided_by', 'plus', 'minus', 'plustext',\n    'one', 'two', 'three',\n)\n\nliterals = ['=','+','-','*','/', '(',')']\n\nt_ignore = \" \\t\\n\"\n\nt_plustext    = r'plus'\nt_plus    = r'\\+'\nt_minus   = r'-'\nt_times   = r'\\*'\nt_divided_by  = r'/'\nt_one = 'one'\nt_two = 'two'\nt_three = 'three'\n\ndef t_NUMBER(t):\n    r'\\d+'\n    try:\n        t.value = int(t.value)\n    except ValueError:\n        print(\"Integer value too large %d\", t.value)\n        t.value = 0\n    return t\n\nprecedence = (\n    ('left','+','-','plustext'),\n    ('left','times','divided_by'),\n    ('left','*','/'),\n)\n\n\ndef p_statement_expr(p):\n    'statement : expression'\n    p[0] = p[1]\n    print(p[1])\n\ndef p_expression_binop(p):\n    '''expression : expression '+' expression\n                  | expression plustext expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expression'''\n    if p[2] ==   '+'  : p[0] = p[1] + p[3]\n    elif p[2] == '-': p[0] = p[1] - p[3]\n    elif p[2] == '*': p[0] = p[1] * p[3]\n    elif p[2] == '/': p[0] = p[1] / p[3]\n    elif p[2] == 'plus': p[0] = p[1] + p[3]\n\ndef p_statement_lit(p):\n    '''expression : NUMBER\n          | TXTNUMBER\n    '''\n    p[0] = p[1]\n\ndef p_txtnumber(p):\n    '''TXTNUMBER : one\n         | two\n         | three\n    '''\n    p[0] = w2n(p[1])\n\ndef w2n(s):\n    if s == 'one': return 1\n    elif s == 'two': return 2\n    elif s == 'three': return 3\n    assert(False)\n    # See http://stackoverflow.com/questions/493174/is-there-a-way-to-convert-number-words-to-integers-python for a complete implementation\n\ndef process(data):\n    lex.lex()\n        yacc.yacc()\n        #yacc.parse(data, debug=1, tracking=True)\n        yacc.parse(data)\n\nif __name__ == \"__main__\":\n        data = open(sys.argv[1]).read()\n        process(data)\n",
  "label": 1
 },
 {
  "idx": 2639,
  "doc": "Python extract info from a local html file",
  "code": "soup = BeautifulSoup(data, \"lxml\")\n",
  "label": 0
 },
 {
  "idx": 2640,
  "doc": "Python extract info from a local html file",
  "code": ">>> from bs4 import BeautifulSoup\n>>>\n>>> data = \"\"\"\n... <! Created by program ApproxMAP by Hye-Chung(Monica) Kum>\n... <HTML><font size=5 face='Helvetica-Narrow'><b>\n... <font color='000000'> Cluster Support= [Pattern=</font>\n... <font color='000000'> 50</font>\n... <font color='000000'> % : Variation=</font>\n... <font color='000000'> 20</font>\n... <font color='000000'> %]; Database Support= [Min= </font>\n... <font color='000000'> 1</font>\n... <font color='000000'>  seq: Max=</font>\n... <font color='000000'> 50</font>\n... <font color='000000'> %]</font>\n... <BR>\n... <font color='a9a9a9'> cluster=0 size=3</font>\n... <font color='000000'>   =<100:</font>\n... <font color='434343'> 85:</font>\n... <font color='767676'> 70:</font>\n... <font color='a9a9a9'> 50:</font>\n... <font color='c8c8c8'> 35:</font>\n... <font color='e1e1e1'> 20></font>\n... <BR>\n... <font color='000000'> <u>PATTERN:</font>\n... <font color='000000'> {1,} {2,3,} {4,5,}\n... </font>\n... <font color='000000'> =</font>\n... <font color='000000'> 5</font>\n... <font color='000000'> </u></font>\n... <BR>\n... <font color='000000'> {</font>\n... <font color='000000'> 1</font>\n... <font color='cbcbcb'> 12</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='cbcbcb'> 24</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='7f7f7f'> 2</font>\n... <font color='7f7f7f'> 3</font>\n... <font color='cbcbcb'> 25</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='cbcbcb'> 1</font>\n... <font color='7f7f7f'> 4</font>\n... <font color='7f7f7f'> 5</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='cbcbcb'> 26</font>\n... <font color='000000'> }</font>\n... <BR>\n... <font color='000000'> <u>PATTERN:</font>\n... <font color='000000'> {9,10,} {11,} {12,13,}\n... </font>\n... <font color='000000'> =</font>\n... <font color='000000'> 5</font>\n... <font color='000000'> </u></font>\n... <BR>\n... <font color='000000'> {</font>\n... <font color='717171'> 9</font>\n... <font color='989898'> 10</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='d3d3d3'> 11</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='404040'> 11</font>\n... <font color='000000'> }</font>\n... <font color='000000'> {</font>\n... <font color='404040'> 12</font>\n... <font color='989898'> 13</font>\n... <font color='000000'> }</font>\n... <BR>\n... <font color='000000'> TOTAL LEN=</font>\n... <font color='000000'> 10</font>\n... <BR>\n... <BR>\n... </b></font></html>\n... \"\"\"\n>>> \n>>> soup = BeautifulSoup(data)\n>>> \n>>> for elm in soup.find_all(text=\"PATTERN:\"):\n...     print elm.find_parent(\"font\").find_next_sibling(\"font\").get_text(strip=True)\n... \n{1,} {2,3,} {4,5,}\n{9,10,} {11,} {12,13,}\n",
  "label": 1
 },
 {
  "idx": 2641,
  "doc": "Changing the columns in DataFrame with respect to values in other columns",
  "code": "#Change how we index the frame\ndf.set_index([\"Trans\", \"Num\"], inplace=True)\n",
  "label": 0
 },
 {
  "idx": 2642,
  "doc": "What is the fastest way to parse large XML docs in Python?",
  "code": "\n# get an iterable\ncontext = iterparse(source, events=(\"start\", \"end\"))\n\n# turn it into an iterator\ncontext = iter(context)\n\n# get the root element\nevent, root = context.next()\n\nfor event, elem in context:\n    if event == \"end\" and elem.tag == \"record\":\n        ... process record elements ...\n        root.clear()\n",
  "label": 1
 },
 {
  "idx": 2643,
  "doc": "Using multiple programs simultaneously in Python",
  "code": "def start_tcp_client(cond): \n    ls_output = subprocess.Popen(['tcpclient.exe','192.168.4.110','8000','1000','1400'],stdin=subprocess.PIPE,stdout=subprocess.PIPE,bufsize=3)\n    with cond:\n        cond.wait()\n        ls_output.communicate(input = '3')\n        ls_output.communicate()\n\ndef TCPSettings(cond):\n    with cond:\n        RunSer2Command(lines2[22])\n        RunSer2Command(lines2[23])\n        cond.notify()\n\n    condition = threading.Condition()\n    condition1 = threading.Condition()\n    Client_thread=threading.Thread(name='Client_thread', target=start_tcp_client, args=(condition,))\n    TCP_thread=threading.Thread(name='TCP_thread', target=TCPSettings, args=(condition,))\n    RunSer2Command(lines2[21])\n    time.sleep(2)   \n    Client_thread.start()\n    time.sleep(2)\n    TCP_thread.start()\n    time.sleep(1)\n    Client_thread.join()\n    time.sleep(10)\n    RunSer2Command(lines2[24])\n",
  "label": 1
 },
 {
  "idx": 2644,
  "doc": "Plotting Histogram: How can I do it from scratch using data stored in a database?",
  "code": "import MySQLdb\n\ndef DumpHistogramData(databaseHost, databaseName, databaseUsername, databasePassword, dataTableName, binsTableName, binSize, histogramDataFilename):\n    #Open a file for writing into\n    output = open(\"./\" + histogramDataFilename, \"w\")\n\n    #Connect to the database\n    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)\n    cursor = db.cursor()\n\n    #Form the query\n    sql = \"\"\"select b.*, count(*) as total \n            FROM \"\"\" + binsTableName + \"\"\" b \n            LEFT OUTER JOIN \"\"\" + dataTableName + \"\"\" a \n            ON a.total between b.min AND b.max \n            group by b.min;\"\"\"\n    cursor.execute(sql)\n\n    #Get the result and print it into a file for further processing\n    count = 0;\n    while True:\n        results = cursor.fetchmany(10000)\n        if not results:\n            break\n        for result in results:\n            #print >> output, str(result[0]) + \"-\" + str(result[1]) + \"\\t\" + str(result[2])\n    db.close()\n\ndef PrepareHistogramBins(databaseHost, databaseName, databaseUsername, databasePassword, binsTableName, maxValue, totalBins):\n\n    #Connect to the database    \n    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)\n    cursor = db.cursor()\n\n    #Check if the table was already created\n    sql = \"\"\"DROP TABLE IF EXISTS \"\"\" + binsTableName\n    cursor.execute(sql)\n\n    #Create the table\n    sql = \"\"\"CREATE TABLE \"\"\" + binsTableName + \"\"\"(min int(11), max int(11));\"\"\"\n    cursor.execute(sql)\n\n    #Calculate the bin size\n    binSize = maxValue/totalBins\n\n    #Generate the bin sizes\n    for i in range(0, maxValue, binSize):\n        if i is 0:\n            min = i\n            max = i+binSize\n        else:\n            min = i+1\n            max = i+binSize\n        sql = \"\"\"INSERT INTO \"\"\" + binsTableName + \"\"\"(min, max) VALUES(\"\"\" + str(min) + \"\"\", \"\"\" + str(max) + \"\"\");\"\"\"\n        cursor.execute(sql)\n    db.close()\n    return binSize\n\nbinSize = PrepareHistogramBins(\"localhost\", \"testing\", \"root\", \"\", \"bins\", 5000, 100)\nDumpHistogramData(\"localhost\", \"testing\", \"root\", \"\", \"faults\", \"bins\", binSize, \"histogram\")\n",
  "label": 0
 },
 {
  "idx": 2645,
  "doc": "How to plot real-time graph, with both axis dependent on time?",
  "code": "# -*- coding: utf-8 -*-\n\nfrom math import *\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\n\n\ndef Plongeon():\n    h = float(input(\"height = \"))\n    g = 9.81\n\n    #calculate air time, Tc\n    Tc = sqrt(2 * h / g)\n\n    # First set up the figure, the axis, and the plot element we want to animate\n    fig = plt.figure()\n    ax = plt.axes(xlim=(0, 2), ylim=(-2, h+1))  #ymax : initial height+1\n    line, = ax.plot([], [], ' o', lw=2)\n\n    step = 0.01  # animation step\n    xs = [1]  # the vertical position is fixed on x-axis\n    ys = [h]\n\n\n    # animation function.  This is called sequentially\n    def animate(y):\n        ys[-1] = y\n        line.set_data(xs, ys)\n        return line,\n\n    def get_y():\n        t = 0\n        while t <= Tc:\n            y = -0.5 * g * t**2 + h  # the equation of diver's displacement on y axis\n            yield y\n            t += step\n\n    # call the animator.  blit=True means only re-draw the parts that have changed.\n    anim = animation.FuncAnimation(fig, animate, frames=get_y, interval=100)\n\n    plt.show()\nPlongeon()\n",
  "label": 1
 },
 {
  "idx": 2646,
  "doc": "Python: Is there a shortcut to finding which substring(from a set of substrings) comes first in a string?",
  "code": "def make_trie(*words):\n     root = {}\n     for word in words:\n         current = root\n         for letter in word:\n             current = current.setdefault(letter, {})\n         # insert sentinel at the end\n         current[None] = None\n     return root\n\ndef find_first(s, trie):\n    for i in range(len(s)):\n        pos, current, found = i, trie, []\n        while pos < len(s) and s[pos] in current:\n            found.append(s[pos])\n            current = current[s[pos]]\n            if None in current:  # whole substring detected\n                return ''.join(found)\n            pos += 1\n\nleftmost = find_first(s, make_trie(s1, s2, s3))\n",
  "label": 1
 },
 {
  "idx": 2647,
  "doc": "remove dictionary from list in pandas colum",
  "code": "value_counts = [{d.get('type'): d.get('value') for d in cell} for cell in df.misc]\nfor n, row in enumerate(value_counts):\nif row:\n    items, values = zip(*row.items())\n    df.loc[df.index[n], items] = values\n\ndel df['misc']\n\n>>> df\n  name  age  cars  shoes  pets  siblings\n0  Jim   44     3     13     1         0\n1  Bob   25     0      0     1         3\n2  Sue   55     0      0     0         0\n",
  "label": 0
 },
 {
  "idx": 2648,
  "doc": "Deleting specific text files",
  "code": "if os.path.isfile(file_path): # or some other condition\n    delete = True             # Standard action: delete\n    try:\n        with open(file_path) as infile:\n            if \"dollar\" in infile.read(): # don't delete if \"dollar\" is found\n                delete = False \n    except IOError:\n        print(\"Could not access file {}\".format(file_path))\n    if delete: \n        os.unlink(file_path)\n",
  "label": 1
 },
 {
  "idx": 2649,
  "doc": "How to use malloc and free with python ctypes?",
  "code": "x.py\nimport ctypes\n\nclass Example(ctypes.Structure):\n\n    _fields_ = [\n        ('data',ctypes.POINTER(ctypes.c_char)),\n        ('len',ctypes.c_int),\n        ('doubles',ctypes.POINTER(ctypes.c_double)),\n        ('count',ctypes.c_int)]\n\n    def __init__(self,length,count):\n        self.data = ctypes.cast(ctypes.create_string_buffer(length),ctypes.POINTER(ctypes.c_char))\n        self.len = length\n        self.doubles = (ctypes.c_double * count)()\n        self.count = count\n\n    def __repr__(self):\n        return 'Example({},[{}])'.format(\n            ctypes.string_at(self.data),\n            ','.join(str(self.doubles[i]) for i in range(self.count)))\n\nclass Dll:\n\n    def __init__(self):\n        self.dll = ctypes.CDLL('x')\n        self.dll.func.argtypes = [ctypes.POINTER(Example)]\n        self.dll.func.restype = None\n\n    def func(self,ex):\n        self.dll.func(ctypes.byref(ex))\n\nd = Dll()\ne = Example(20,5)\nprint('before:',e)\nd.func(e)\nprint ('after:',e)\n",
  "label": 0
 },
 {
  "idx": 2650,
  "doc": "How to Get Variable from another .py",
  "code": "from communicate import *\nx = 2 + 2\nsend_and_exit(x)\n",
  "label": 0
 },
 {
  "idx": 2651,
  "doc": "building full path filename in python,",
  "code": "os.path.join(dir_name, base_filename + \".\" + filename_suffix)\n",
  "label": 1
 },
 {
  "idx": 2652,
  "doc": "building full path filename in python,",
  "code": "os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))\n",
  "label": 1
 },
 {
  "idx": 2653,
  "doc": "modify range in every loop of the range",
  "code": "(species) C (are in groups) OG_1, OG_3\n(species) A (are in groups) OG_1, OG_2, OG_3\n(species) B (are in groups) OG_1, OG_2, OG_3\n(species) C,A (are in groups) OG_1, OG_3\n(species) C,B (are in groups) OG_1, OG_3\n(species) A,B (are in groups) OG_1, OG_2, OG_3\n(species) C,A,B (are in groups) OG_1, OG_3\n",
  "label": 0
 },
 {
  "idx": 2654,
  "doc": "Python/ Pandas CSV Parsing",
  "code": "\nimport pandas as pd\nimport numpy as np\nimport csv\nimport re\nimport itertools as it\nimport pprint\nimport datetime as dt\n\nrecords = [] #Construct a complete record for each person\n\ncolon_pairs = r\"\"\"\n    (\\w+)   #Match a 'word' character, one or more times, captured in group 1, followed by..\n    :       #A colon, followed by...\n    \\s*     #Whitespace, 0 or more times, followed by...\n    (\\w+)   #A 'word' character, one or more times, captured in group 2.\n\"\"\"\n\ncolon_pairs_per_person = 3\n\nwith open(\"csv1.csv\", encoding='utf-8') as f:\n    next(f) #skip header line\n    record = {}\n\n    for date, info, the_type in csv.reader(f):\n        info_parser = re.finditer(colon_pairs, info, flags=re.X)\n\n        for i, match_obj in enumerate(info_parser):\n            key, val = match_obj.groups()\n            record[key] = val\n\n            if (i+1) % colon_pairs_per_person == 0: #then done with info for a person\n                record['Date'] = dt.datetime.strptime(date, '%Y-%m-%d') #So that you can sort the DataFrame rows by date.\n                record['Type'] = the_type\n\n                records.append(record)\n                record = {}\n\npprint.pprint(records)\ndf = pd.DataFrame(\n        sorted(records, key=lambda record: record['Date'])\n)\nprint(df)\ndf.set_index('Date', inplace=True)\nprint(df)\n\n--output:--\n[{'Date': datetime.datetime(2015, 12, 7, 0, 0),\n  'First': 'Jim',\n  'Last': 'Jones',\n  'School': 'MCAA',\n  'Type': 'Old'},\n {'Date': datetime.datetime(2015, 12, 7, 0, 0),\n  'First': 'Jane',\n  'Last': 'Jones',\n  'School': 'MCAA',\n  'Type': 'Old'},\n {'Date': datetime.datetime(2015, 12, 6, 0, 0),\n  'First': 'Tom',\n  'Last': 'Smith',\n  'School': 'MCAA',\n  'Type': 'New'},\n {'Date': datetime.datetime(2015, 12, 6, 0, 0),\n  'First': 'Tammy',\n  'Last': 'Smith',\n  'School': 'MCAA',\n  'Type': 'New'}]\n\n        Date  First   Last School Type\n0 2015-12-06    Tom  Smith   MCAA  New\n1 2015-12-06  Tammy  Smith   MCAA  New\n2 2015-12-07    Jim  Jones   MCAA  Old\n3 2015-12-07   Jane  Jones   MCAA  Old\n\n            First   Last School Type\nDate                                \n2015-12-06    Tom  Smith   MCAA  New\n2015-12-06  Tammy  Smith   MCAA  New\n2015-12-07    Jim  Jones   MCAA  Old\n2015-12-07   Jane  Jones   MCAA  Old\n",
  "label": 1
 },
 {
  "idx": 2655,
  "doc": "Finding matching submatrices inside a matrix",
  "code": "import numpy\nfrom scipy import signal\n\n# Set up the inputs\na = numpy.random.randn(100, 200)\na[a<0] = 0\na[a>0] = 255\n\nb = numpy.random.randn(20, 20)\nb[b<0] = 0\nb[b>0] = 255\n\n# put b somewhere in a\na[37:37+b.shape[0], 84:84+b.shape[1]] = b\n\n# Now the actual solution...\n\n# Set the black values to -1\na[a==0] = -1\nb[b==0] = -1\n\n# and the white values to 1\na[a==255] = 1\nb[b==255] = 1\n\nmax_peak = numpy.prod(b.shape)\n\n# c will contain max_peak where the overlap is perfect\nc = signal.correlate(a, b, 'valid')\n\noverlaps = numpy.where(c == max_peak)\n\nprint overlaps\n",
  "label": 1
 },
 {
  "idx": 2656,
  "doc": "PyTables read random subset",
  "code": "In [26]: df = DataFrame(np.random.randn(100,2),columns=['A','B'])\n\nIn [27]: df.to_hdf('test.h5','df',mode='w',format='table')\n\nIn [28]: store = pd.HDFStore('test.h5')\n\nIn [29]: nrows = store.get_storer('df').nrows\n\nIn [30]: nrows\nOut[30]: 100\n\nIn [32]: r = np.random.randint(0,nrows,size=10)\n\nIn [33]: r\nOut[33]: array([69, 28,  8,  2, 14, 51, 92, 25, 82, 64])\n\nIn [34]: pd.read_hdf('test.h5','df',where=pd.Index(r))\nOut[34]: \n           A         B\n69 -0.370739 -0.325433\n28  0.155775  0.961421\n8   0.101041 -0.047499\n2   0.204417  0.470805\n14  0.599348  1.174012\n51  0.634044 -0.769770\n92  0.240077 -0.154110\n25  0.367211 -1.027087\n82 -0.698825 -0.084713\n64 -1.029897 -0.796999\n\n[10 rows x 2 columns]\n",
  "label": 1
 },
 {
  "idx": 2657,
  "doc": "Replace xml tag contents using python",
  "code": "#!/usr/bin/python\n# Alternative Implementation with ElementTree XML Parser\n\nxml = '''\\\n<Emps>\n    <Emp>\n        <Name>Raja</Name>\n        <Location>\n            <city>ABC</city>\n            <geocode>123</geocode>\n            <state>XYZ</state>\n        </Location>\n        <sal>100</sal>\n        <type>temp</type>\n    </Emp>\n    <Emp>\n        <Name>GsusRecovery</Name>\n        <Location>\n            <city>Torino</city>\n            <geocode>456</geocode>\n            <state>UVW</state>\n        </Location>\n        <sal>120</sal>\n        <type>perm</type>\n    </Emp>\n</Emps>\n'''\n\nfrom xml.etree import ElementTree as ET\n# tree = ET.parse('input.xml')  # decomment to parse xml from file\ntree = ET.ElementTree(ET.fromstring(xml))\nroot = tree.getroot()\n\nfor location in root.iter('Location'):\n    if location.find('city').text == 'Torino':\n        location.set(\"isupdated\", \"1\")\n        location.find('city').text = 'MyCity'\n        location.find('geocode').text = '10.12'\n        location.find('state').text = 'MyState'\n\nprint ET.tostring(root, encoding='utf8', method='xml')\n# tree.write('output.xml') # decomment if you want to write to file\n",
  "label": 1
 },
 {
  "idx": 2658,
  "doc": "Django dynamic model fields",
  "code": "#app/models.py\nfrom django.contrib.postgres.fields import JSONField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = JSONField(db_index=True)\n",
  "label": 0
 },
 {
  "idx": 2659,
  "doc": "Django dynamic model fields",
  "code": "# equivalence\nSomething.objects.filter(data={'a': '1', 'b': '2'})\n\n# subset by key/value mapping\nSomething.objects.filter(data__a='1')\n\n# subset by list of keys\nSomething.objects.filter(data__has_keys=['a', 'b'])\n\n# subset by single key\nSomething.objects.filter(data__has_key='a')    \n",
  "label": 0
 },
 {
  "idx": 2660,
  "doc": "Django dynamic model fields",
  "code": "import eav\nfrom app.models import Patient, Encounter\n\neav.register(Encounter)\neav.register(Patient)\nAttribute.objects.create(name='age', datatype=Attribute.TYPE_INT)\nAttribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)\nAttribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)\n\nself.yes = EnumValue.objects.create(value='yes')\nself.no = EnumValue.objects.create(value='no')\nself.unkown = EnumValue.objects.create(value='unkown')\nynu = EnumGroup.objects.create(name='Yes / No / Unknown')\nynu.enums.add(self.yes)\nynu.enums.add(self.no)\nynu.enums.add(self.unkown)\n\nAttribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\\\n                                       enum_group=ynu)\n\n# When you register a model within EAV,\n# you can access all of EAV attributes:\n\nPatient.objects.create(name='Bob', eav__age=12,\n                           eav__fever=no, eav__city='New York',\n                           eav__country='USA')\n# You can filter queries based on their EAV fields:\n\nquery1 = Patient.objects.filter(Q(eav__city__contains='Y'))\nquery2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)\n",
  "label": 1
 },
 {
  "idx": 2661,
  "doc": "How to represent dbus type b(oss) in python?",
  "code": "dbus.Struct((dbus.Boolean(a_boolean),\n             dbus.Struct((dbus.ObjectPath(s1),\n                          dbus.String(s2),\n                          dbus.String(s3)))),\n            signature=\"(b(oss))\")\n",
  "label": 1
 },
 {
  "idx": 2662,
  "doc": "detecting POS tag pattern along with specified words",
  "code": "s1 = [('This', 'DT'), ('feature', 'NN'), ('would', 'MD'), ('be', 'VB'), ('nice', 'JJ'), ('to', 'TO'), ('have', 'VB')]\ns2 = [('I', 'PRP'), ('am', 'VBP'), ('able', 'JJ'), ('to', 'TO'), ('delete', 'VB'), ('the', 'DT'), ('group', 'NN'), ('functionality', 'NN')]\n\ndef would_be(tagged):\n   return any(['would', 'be', 'JJ'] == [tagged[i][0], tagged[i+1][0], tagged[i+2][1]] for i in xrange(len(tagged) - 2))\n\ndef am_able_to(tagged):\n    return any(['am', 'able', 'to', 'VB'] == [tagged[i][0], tagged[i+1][0], tagged[i+2][0], tagged[i+3][1]] for i in xrange(len(tagged) - 3))\n\nsent1 = ' '.join(s[0] for s in s1)\nsent2 = ' '.join(s[0] for s in s2)\n\nprint(\"Is '{1}' of type 'would be' + adj? {0}\".format(would_be(s1), sent1))\nprint(\"Is '{1}' of type 'am able to' + verb? {0}\".format(am_able_to(s1), sent1))\n\nprint(\"Is '{1}' of type 'would be' + adj? {0}\".format(would_be(s2), sent2))\nprint(\"Is '{1}' of type 'am able to' + verb? {0}\".format(am_able_to(s2), sent2))\n",
  "label": 1
 },
 {
  "idx": 2663,
  "doc": "Python iterate list of dicts and create a new one",
  "code": ">>> import math\n>>> def calculateRange (x1, x2, y1, y2):\n...   squareNumber = math.sqrt(math.pow ((x1-x2),2) + math.pow((y1-y2),2))\n...   return round(squareNumber, 1)\n...\n>>> x = 2\n>>> y = 3\n>>> mxr = 30\n>>> inputlist = [\n...    {'town':'A', 'x':12, 'y':13},\n...    {'town':'B', 'x':100, 'y':43},\n...    {'town':'C', 'x':19, 'y':5}\n... ]\n>>> for entry in inputlist:\n...     entry['r'] = min(mxr, calculateRange(x, entry['x'], y, entry['y']))\n... \n>>> inputlist\n[{'town': 'A', 'x': 12, 'r': 14.1, 'y': 13}, {'town': 'B', 'x': 100, 'r': 30, 'y': 43}, {'town': 'C', 'x': 19, 'r': 17.1, 'y': 5}]\n",
  "label": 1
 },
 {
  "idx": 2664,
  "doc": "Slicing pandas groupby groups into equal lengths",
  "code": "import pandas as pd\n\ncols = ['page', 'hour', 'count']\ndata = [\n    (3727441,    1,  2003),\n    (3727441,    2,   654),\n    (3727441,    3,  5434),\n    (3727458,    1,   326),\n    (3727458,    2,  2348),\n    (3727458,    3,  4040),\n    (3727458,    4,   374),\n    (3727458,    5,  2917),\n    (3727458,    6,  3937),\n    (3735634,    1,  1957),\n    (3735634,    2,  2398),\n    (3735634,    3,  2812),\n    (3768433,    1,   499),\n    (3768433,    2,  4924),\n    (3768433,    3,  5460),\n    (3768433,    4,  1710),\n    (3768433,    5,  3877),\n    (3768433,    6,  1912),\n    (3768433,    7,  1367),\n    (3768433,    8,  1626),\n    (3768433,    9,  4750),\n]\n\ndf = pd.DataFrame.from_records(data, columns=cols)\n\ndef f(row):\n    n = (row.hour - 1) / 3 \n    if n > 0:\n        return str(row.page) + '_{0}'.format(int(n))\n    else:\n        return row.page\n\ndf['page'] = df.apply(f, axis=1)\n\nprint df\n",
  "label": 1
 },
 {
  "idx": 2665,
  "doc": "Iterate over model instance field names and values in template",
  "code": "<table class=\"client-view\">\n    <tbody>\n    {% for field, value in model_data.items %}\n        <tr>\n            <td class=\"field-name\">{{ field }}</td><td>{{ value }}</td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n",
  "label": 0
 },
 {
  "idx": 2666,
  "doc": "How to detect Mac OS version using Python?",
  "code": ">>> import platform\n>>> platform.mac_ver()\n('10.5.8', ('', '', ''), 'i386')\n",
  "label": 1
 },
 {
  "idx": 2667,
  "doc": "Sort generated numbers using another python generator",
  "code": ">>> class GeneratorSort():\n...     def __init__(self, *args):\n...         self.values = [(arg.next(), i) for i, arg in enumerate(args)]\n...         self.generators = args\n...     def generate(self):\n...         while any(self.values):\n...             r, index = min(v for v in self.values if v)\n...             try:\n...                 self.values[index] = (self.generators[index].next(), index)\n...             except StopIteration:\n...                 self.values[index] = None\n...             yield r\n... \n>>> l1 = [2, 5, 6, 8]\n>>> l2 = [1, 4, 5, 7]\n>>> l3 = [0, 3, 9, 10]\n>>> a = GeneratorSort(iter(l1), iter(l2), iter(l3))\n>>> list(a.generate())\n[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]\n",
  "label": 1
 },
 {
  "idx": 2668,
  "doc": "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?",
  "code": "re_natural = re.compile('[0-9]+|[^0-9]+')\n\ndef natural_key(s):\n    return [(1, int(c)) if c.isdigit() else (0, c.lower()) for c in re_natural.findall(s)] + [s]\n\nfor case in test_cases:\n    print case[1]\n    print sorted(case[0], key=natural_key)\n\n['a', 'b', 'c']\n['a', 'b', 'c']\n['A', 'b', 'C']\n['A', 'b', 'C']\n['a', 'B', 'r', '0', '9']\n['a', 'B', 'r', '0', '9']\n['a1', 'a2', 'a100', '1a', '10a']\n['a1', 'a2', 'a100', '1a', '10a']\n['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']\n['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']\n['A', 'a', 'b', 'r', '0', '9']\n['A', 'a', 'b', 'r', '0', '9']\n['ABc', 'Abc', 'abc']\n['ABc', 'Abc', 'abc']\n",
  "label": 1
 },
 {
  "idx": 2669,
  "doc": "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?",
  "code": "def natural_key2(s):\n    parts = re_natural.findall(s)\n    natural = [(1, int(c)) if c.isdigit() else (0, c.lower()) for c in parts]\n    ties_alpha = [c for c in parts if not c.isdigit()]\n    ties_numeric = [c for c in parts if c.isdigit()]\n    return natural + [(-1,)] + ties_alpha + ties_numeric\n",
  "label": 1
 },
 {
  "idx": 2670,
  "doc": "create dictionary from list same values",
  "code": ">>> to_nested_dict({'abc': [['aaa', '123'], ['aaa', '321']]})\n{'abc': {'aaa': ['123', '321']}}\n>>> to_nested_dict({'abc': [['aaa', '123'], ['aaa', '321'], ['bbb', '456']]})\n{'abc': {'aaa': ['123', '321'], 'bbb': ['456']}}\n>>> to_nested_dict({'abc': [['aaa', '123'], ['aaa', '321'], ['bbb', '456']], 'efg': [['eee', '789']]})\n{'abc': {'aaa': ['123', '321'], 'bbb': ['456']}, 'efg': {'eee': ['789']}}\n",
  "label": 0
 },
 {
  "idx": 2671,
  "doc": "In Python how do I parse the 11th and 12th bit of 3 bytes?",
  "code": "In [52]: %timeit n = int.from_bytes(bytes_input, 'big')\n1000000 loops, best of 3: 237 ns per loop\n\nIn [53]: %timeit n >> bit_position & 0b11\n10000000 loops, best of 3: 107 ns per loop\n",
  "label": 1
 },
 {
  "idx": 2672,
  "doc": "In Python how do I parse the 11th and 12th bit of 3 bytes?",
  "code": "(int.from_bytes(bytes_input, 'big') >> bit_position) & 0b11\n",
  "label": 1
 },
 {
  "idx": 2673,
  "doc": "Time - get yesterdays date",
  "code": "#!/usr/bin/env python\nimport time\n\ndef posix_time(utc_time_tuple):\n    \"\"\"seconds since Epoch as defined by POSIX.\"\"\"\n    # from https://gist.github.com/zed/ff4e35df3887c1f82002\n    tm_year = utc_time_tuple.tm_year - 1900\n    tm_yday = utc_time_tuple.tm_yday - 1\n    tm_hour = utc_time_tuple.tm_hour\n    tm_min = utc_time_tuple.tm_min\n    tm_sec = utc_time_tuple.tm_sec\n    # http://pubs.opengroup.org/stage7tc1/basedefs/V1_chap04.html#tag_04_15\n    return (tm_sec + tm_min*60 + tm_hour*3600 + tm_yday*86400 +\n            (tm_year-70)*31536000 + ((tm_year-69)//4)*86400 -\n            ((tm_year-1)//100)*86400 + ((tm_year+299)//400)*86400)\n\nnow = time.localtime()\nyesterday = time.gmtime(posix_time(now) - 86400)\nprint(yesterday)\n# -> time.struct_time(tm_year=2015, tm_mon=4, tm_mday=22, tm_hour=22, tm_min=6, tm_sec=16, tm_wday=2, tm_yday=112, tm_isdst=0)\n",
  "label": 1
 },
 {
  "idx": 2674,
  "doc": "Dynamically pass parameters to function",
  "code": "@pause_wrapper(x, n)\ndef function(a, b, c):\n    ...\n",
  "label": 0
 },
 {
  "idx": 2675,
  "doc": "Python - compare columns in a text file, loop and pop lists",
  "code": "import csv\n\nwith open(fn, 'r') as fin:\n    reader=csv.reader(fin, skipinitialspace=True)\n    header=next(reader)\n    data={k:[] for k in header}\n    for row in reader:\n        row_di={k:v for k,v in zip(header, row)}\n        if (all(len(data[e]) for e in header) \n               and row_di['Third col']==data['Third col'][-1] \n               and row_di['Fourth col']==data['Fourth col'][-1]):\n            for e in header:\n                data[e].pop()\n        else:\n            for e in header:\n                data[e].append(row_di[e])\n\n>>> data\n{'Second col': ['Bryant', 'Bryant', 'Williams', 'Williams', 'Williams'], 'First col': ['Pat', 'Pat', 'Jim', 'Jim', 'Jim'], 'Fourth col': ['29th April', '9th May', '10th March', '17th March', '21st March'], 'Third col': ['ID2', 'ID2', 'ID3', 'ID3', 'ID3'], '...': ['...   ', '... ', '...  ', '...   ', '...']}\n",
  "label": 1
 },
 {
  "idx": 2676,
  "doc": "Apply a weighted average function to a dataframe without grouping it, as if it was a single group",
  "code": "mdft(df)\nOut[9]: 1.9429828309434094\n",
  "label": 0
 },
 {
  "idx": 2677,
  "doc": "Using np.searchsorted to find the most recent timestamp",
  "code": ">>> np.searchsorted(a, b, side='right') - 1\narray([0, 2, 3])\n>>> a[np.searchsorted(a, b, side='right') - 1]\narray([0, 4, 6])\n",
  "label": 0
 },
 {
  "idx": 2678,
  "doc": "Byte formatting in python 3",
  "code": "msg = '\u00fc' # len(msg) is 1 character\nencoded_msg = msg.encode('utf-8') # len(encoded_msg) is 2 bytes\nencoded_prefix = '{:0>5d}'.format(len(encoded_msg)).encode('utf-8')\nfull_message = encoded_prefix + encoded_msg # both are bytes, so we can concat\n\nprint(full_message) # prints: b'00002\\xc3\\xbc'\n",
  "label": 1
 },
 {
  "idx": 2679,
  "doc": "How do I find the maximum amount of possible correct matches in these arrays?",
  "code": "\nimport random\n\ndef read_file():\n    res = {}\n    start = True\n    with open('pairs.txt', 'r') as f:\n        for line in f.readlines():\n            if start:\n                start = False\n                continue\n            woman, matches = line.strip().split(': ')\n            woman = int(woman)\n            matches = map(int, matches.split(' '))\n            res[woman] = matches\n    return res\n\n\ndef build_random_match(graph):\n    edges = {}\n    for woman in graph:\n        for man in graph[woman]:\n            if already_in_edges(man, edges):\n                continue\n            else:\n                edges[woman] = man\n                break\n    return edges\n\n\ndef already_in_edges(man, edges):\n    for woman in edges:\n        if edges[woman] == man:\n            return True\n    else:\n        return False\n\n\ndef get_unmatched_women(match, graph):\n    return  [woman for woman in graph.keys() if woman not in match.keys()]\n\n\ndef not_in_match(man, match):\n    for woman in match:\n        if match[woman] == man:\n            return False\n    else:\n        return True\n\n\ndef find_unmatched_man(graph, match, woman):    \n    potentials = graph[woman]\n    for man in potentials:\n        if not_in_match(man, match):\n            return man\n    else:\n        return False\n\n\ndef remove_man_from_match(man, unmatched_woman, match, graph):  \n    # find the woman that this man is currently matched with\n    # and cancel this matching\n    for woman in match:\n        if match[woman] == man:\n            match_to_del = woman\n            break   \n    del match[match_to_del]\n    # also remove the man from the orig woman (graph) \n    # to prevent infinite loop\n    men = graph[unmatched_woman]\n    men.remove(man)\n    graph[unmatched_woman] = men\n\n    return match_to_del\n\n\ndef relax(unmatched_woman, match, graph):   \n    unmatched_man = find_unmatched_man(graph, match, unmatched_woman)\n    if unmatched_man:\n        match[unmatched_woman] = unmatched_man      \n    elif len(graph[unmatched_woman]) == 0:\n        return match\n    else:\n        # grab one of the possible matchings randomly\n        rand_index = random.randint(0, len(graph[unmatched_woman])-1)\n        man = graph[unmatched_woman][rand_index]\n        new_unmatched_woman = remove_man_from_match(man, unmatched_woman, match, graph)\n        match[unmatched_woman] = man\n        match = relax(new_unmatched_woman, match, graph)\n\n    return match\n\n\ndef improve_match(match, graph):\n    if len(match) == len(graph):\n        return match\n\n    unmatched_women = get_unmatched_women(match, graph) \n    for woman in unmatched_women:\n        copy_graph = graph.copy()\n        suggested = relax(woman, match, copy_graph)\n        if len(suggested) > len(match):\n            return suggested\n        else:\n            suggested = match\n    else:\n        return suggested\n\n\ndef main():\n    graph = read_file()\n    match = build_random_match(graph)   \n    if len(match) == len(graph):\n        print 'Got a perfect match:', match\n    else:\n        match_size = 0\n        while match_size < len(match):\n            match_size = len(match)\n            match = improve_match(match, graph)\n\n    return match\n\nif __name__ == '__main__':\n    res = main()    \n    print \"Size of match:\", len(res)\n    print \"Match:\", res\n",
  "label": 1
 },
 {
  "idx": 2680,
  "doc": "Writing to separate columns instead of comma seperated for csv files in scrapy",
  "code": "from texttable import Texttable\n\n# ----------------------------------------------------------------\n# Imagine data to be generated by Scrapy, for each record:\n# a dictionary of three items. The first set ot functions\n# generate the data for use in the texttable function\n\ndef process_item(item):\n    # This massages each record in preparation for writing to csv\n    item['Title'] = item['Title'].encode('utf-8') + ','\n    item['Release Date'] = item['Release Date'].encode('utf-8') + ','\n    item['Director'] = item['Director'].encode('utf-8')\n    return item\n\ndef initialise_dataset():\n    data = [{'Title' : 'Title',\n         'Release Date' : 'Release Date',\n         'Director' : 'Director'\n         }, # first item holds the table header\n            {'Title' : 'And Now For Something Completely Different',\n         'Release Date' : '1971',\n         'Director' : 'Ian MacNaughton'\n         },\n        {'Title' : 'Monty Python And The Holy Grail',\n         'Release Date' : '1975',\n         'Director' : 'Terry Gilliam and Terry Jones'\n         },\n        {'Title' : \"Monty Python's Life Of Brian\",\n         'Release Date' : '1979',\n         'Director' : 'Terry Jones'\n         }\n        ]\n\n    data = [ process_item(item) for item in data ]\n    return data\n\ndef records(data):\n    for item in data:\n        yield [item['Title'], item['Release Date'], item['Director'] ]\n\n# this ends the data simulation part\n# --------------------------------------------------------\n\ndef create_table(data):\n    # Create the table\n    table = Texttable(max_width=0)\n    table.set_deco(Texttable.HEADER)\n    table.set_cols_align([\"l\", \"c\", \"c\"])\n    table.add_rows( records(data) )\n\n    # split, remove the underlining below the header\n    # and pull together again. Many ways of cleaning this...\n    tt = table.draw().split('\\n')\n    del tt[1] # remove the line under the header\n    tt = '\\n'.join(tt)\n    return tt\n\nif __name__ == '__main__':\n    data = initialise_dataset()\n    table = create_table(data)\n    print table\n",
  "label": 1
 },
 {
  "idx": 2681,
  "doc": "TensorFlow Resize image tensor to dynamic shape",
  "code": "shape = tf.shape(image)\nheight = shape[0]\nwidth = shape[1]\nnew_shorter_edge = 400\nheight_smaller_than_width = tf.less_equal(height, width)\n\nnew_shorter_edge = tf.constant(400)\nnew_height, new_width = tf.cond(\n    height_smaller_than_width,\n    lambda: new_shorter_edge, (width / height) * new_shorter_edge,\n    lambda: new_shorter_edge, (height / width) * new_shorter_edge)\n",
  "label": 1
 },
 {
  "idx": 2682,
  "doc": "How to make POS n-grams more effective?",
  "code": "import time\n\nfrom nltk.corpus import brown\nfrom nltk import sent_tokenize, word_tokenize, pos_tag\nfrom nltk import pos_tag_sents\n\n# Load brown corpus\nstart = time.time()\nbrown_corpus = brown.raw()\nloading_time = time.time() - start\nprint \"Loading brown corpus took\",  loading_time\n\n# Sentence tokenizing corpus\nstart = time.time()\nbrown_sents = sent_tokenize(brown_corpus)\nsent_time = time.time() - start\nprint \"Sentence tokenizing corpus took\", sent_time\n\n\n# Word tokenizing corpus\nstart = time.time()\nbrown_words = [word_tokenize(i) for i in brown_sents]\nword_time = time.time() - start\nprint \"Word tokenizing corpus took\", word_time\n\n# Loading, sent_tokenize, word_tokenize all together.\nstart = time.time()\nbrown_words = [word_tokenize(s) for s in sent_tokenize(brown.raw())]\ntokenize_time = time.time() - start\nprint \"Loading and tokenizing corpus took\", tokenize_time\n\n# POS tagging one sentence at a time took.\nstart = time.time()\nbrown_tagged = [pos_tag(word_tokenize(s)) for s in sent_tokenize(brown.raw())]\ntagging_time = time.time() - start\nprint \"Tagging sentence by sentence took\", tagging_time\n\n\n# Using batch_pos_tag.\nstart = time.time()\nbrown_tagged = pos_tag_sents([word_tokenize(s) for s in sent_tokenize(brown.raw())])\ntagging_time = time.time() - start\nprint \"Tagging sentences by batch took\", tagging_time\n",
  "label": 1
 },
 {
  "idx": 2683,
  "doc": "Fastest way to remove subsets of lists from a list in Python",
  "code": "fruits = [['apple', 'pear'],\n        ['apple', 'pear', 'banana'],\n        ['banana', 'pear'],\n        ['pear', 'pineapple'],\n        ['apple', 'pear', 'banana', 'watermelon']]\n\nfrom itertools import imap, ifilter, compress    \n\ndef f1():              \n    sets={frozenset(e) for e in fruits}  \n    us=[]\n    while sets:\n        e=sets.pop()\n        if any(e.issubset(s) for s in sets) or any(e.issubset(s) for s in us):\n            continue\n        else:\n            us.append(list(e))   \n    return us           \n\ndef f2():\n    supersets = imap(lambda a: list(ifilter(lambda x: len(a) < len(x) and set(a).issubset(x), fruits)), fruits)\n    new_list = list(compress(fruits, imap(lambda x: 0 if x else 1, supersets)))\n    return new_list\n\ndef f3():\n    return filter(lambda f: not any(set(f) < set(g) for g in fruits), fruits)\n\ndef f4():              \n    sets={frozenset(e) for e in fruits}  \n    us=[]\n    for e in sets:\n        if any(e < s for s in sets):\n            continue\n        else:\n            us.append(list(e))   \n    return us              \n\nif __name__=='__main__':\n    import timeit     \n    for f in (f1, f2, f3, f4):\n        print f.__name__, timeit.timeit(\"f()\", setup=\"from __main__ import f, fruits\"), f()  \n",
  "label": 1
 },
 {
  "idx": 2684,
  "doc": "How do I index n sets of 4 columns to plot multiple plots using matplotlib?",
  "code": ">>> # create a NumPy array for use as our data set\n>>> import numpy as NP\n>>> D = NP.random.randint(0, 10, 40).reshape(8, 5)\n\n>>> # create some generic row and column names to pass to the constructor\n>>> row_ids = [ \"row{0}\".format(c) for c in range(D1.shape[0]) ]\n>>> rows = 'rows_id', row_ids\n\n>>> variables = [ \"col{0}\".format(c) for c in range(D1.shape[1]) ]\n>>> cols = 'variable', variables\n",
  "label": 0
 },
 {
  "idx": 2685,
  "doc": "Save app data in Weather App",
  "code": "import requests\nconditions_image1 = \"http://openweathermap.org/img/w/{}.png\".format(result['list'][1]['weather'][0]['icon'])\n#or whatever be the name of your image\nresponse1 = requests.get(conditions_image1)\nif response1.status_code == 200:\n    f = open(\"./icons/wc1.png\", 'wb')\n    f.write(response1.content)\n    f.close()\n",
  "label": 0
 },
 {
  "idx": 2686,
  "doc": "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?",
  "code": ">>> Palette('#F1E1BD', '#EEBA85', name='palette2')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: __init__() got multiple values for argument 'name'\n",
  "label": 0
 },
 {
  "idx": 2687,
  "doc": "Python: Determine whether each step in path across n arrays falls below threshold value",
  "code": "Finding edges from layer 0 to 1 ...\nReachable nodes of next layer: [10]\nFinding edges from layer 1 to 2 ...\nReachable nodes of next layer: [13]\nTrue\n\nFinding edges from layer 0 to 1 ...\nReachable nodes of next layer: [10, 13]\nFinding edges from layer 1 to 2 ...\nReachable nodes of next layer: [13]\nTrue\n",
  "label": 0
 },
 {
  "idx": 2688,
  "doc": "Python : How to create a dynamic list of class values",
  "code": "inst1.i = 4\n",
  "label": 0
 },
 {
  "idx": 2689,
  "doc": "Remove namedtuple from list based on value",
  "code": "def remove(self, id=None, value=None):\n    for elem in self:\n        if (id is not None and elem.id == id or\n                value is not None and elem.value == value):\n            super(Orders, self).remove(elem)\n            break\n",
  "label": 1
 },
 {
  "idx": 2690,
  "doc": "Remove namedtuple from list based on value",
  "code": "def __init__(self, *args):\n    # ...\n    self._ids = {}\n\ndef append(self, id, value):\n    if id in ids:\n        raise ValueError('This order already exists!')\n    super(Orders, self).append(Order(id, value))\n    self._ids[id] = len(self) - 1\n",
  "label": 0
 },
 {
  "idx": 2691,
  "doc": "combining lists inside values in pyspark",
  "code": "def append_values_inside(key, value):\n    temp = []\n    for v in value:\n        for entry in v:\n            temp.append(entry)\n    return (key, temp)\nfor entry in ratings_and_users.map(lambda a: append_values_inside(a[0], a[1])).collect() :\n        print(entry)\n",
  "label": 1
 },
 {
  "idx": 2692,
  "doc": "How to match phone number prefixes?",
  "code": ">>> data = [['Country', 'Destination', 'Country Code', 'Destination Code', 'Remarks'],\n... ['AAA', 'Some Mobile', '111', '12, 23, 34, 46','Some remarks'],\n... ['AAA', 'Some city A', '111', '55, 56, 57, 51', 'Some more remarks'],\n... ['BBB', 'Some city B', '222', '234, 345, 456', 'Other remarks']]\n>>> \n>>> op=[data[0]]\n>>> for i in data[1:]:\n...    for j in i.pop(3).split(','):\n...       op.append([k+j.strip() if i.index(k)==2 else k for k in i])\n... \n\n>>> for i in op:\n...    print i\n... \n['Country', 'Destination', 'Country Code', 'Destination Code', 'Remarks']\n['AAA', 'Some Mobile', '11112', 'Some remarks']\n['AAA', 'Some Mobile', '11123', 'Some remarks']\n['AAA', 'Some Mobile', '11134', 'Some remarks']\n['AAA', 'Some Mobile', '11146', 'Some remarks']\n['AAA', 'Some city A', '11155', 'Some more remarks']\n['AAA', 'Some city A', '11156', 'Some more remarks']\n['AAA', 'Some city A', '11157', 'Some more remarks']\n['AAA', 'Some city A', '11151', 'Some more remarks']\n['BBB', 'Some city B', '222234', 'Other remarks']\n['BBB', 'Some city B', '222345', 'Other remarks']\n['BBB', 'Some city B', '222456', 'Other remarks']\n",
  "label": 1
 },
 {
  "idx": 2693,
  "doc": "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?",
  "code": "binom_test = np.vectorize(stats.binom_test)\nresult = binom_test(x, x+y)\n",
  "label": 0
 },
 {
  "idx": 2694,
  "doc": "Using Twitter Bootstrap radio buttons with Flask",
  "code": "from flask import render_template\n\n@app.route('/form/')\ndef hello(name=None):\n    return render_template('hello.html', buttons=['A', 'B', 'C'], active_btns=['A', 'C'])\n",
  "label": 0
 },
 {
  "idx": 2695,
  "doc": "retrive minimum maximum values of a ctype",
  "code": "class MaxVal:\n    SI8  = 2 ** 7  - 1\n    UI8  = 2 ** 8  - 1\n    SI16 = 2 ** 15 - 1\n    UI16 = 2 ** 16 - 1\n    SI32 = 2 ** 31 - 1\n    UI32 = 2 ** 32 - 1\n    SI64 = 2 ** 63 - 1\n    UI64 = 2 ** 64 - 1\n",
  "label": 0
 },
 {
  "idx": 2696,
  "doc": "retrive minimum maximum values of a ctype",
  "code": "print( MaxVal.UI32 )\n",
  "label": 0
 },
 {
  "idx": 2697,
  "doc": "Using Python Iterparse For Large XML Files",
  "code": "import lxml.etree as ET\nimport textwrap\nimport io\n\ndef setup_ABC():\n    content = textwrap.dedent('''\\\n      <root>\n        <A1>\n          <B1></B1>\n          <C>1<D1></D1></C>\n          <E1></E1>\n        </A1>\n        <A2>\n          <B2></B2>\n          <C>2<D></D></C>\n          <E2></E2>\n        </A2>\n      </root>\n        ''')\n    return content\n\n\ndef study_fast_iter():\n    def orig_fast_iter(context, func, *args, **kwargs):\n        for event, elem in context:\n            print('Processing {e}'.format(e=ET.tostring(elem)))\n            func(elem, *args, **kwargs)\n            print('Clearing {e}'.format(e=ET.tostring(elem)))\n            elem.clear()\n            while elem.getprevious() is not None:\n                print('Deleting {p}'.format(\n                    p=(elem.getparent()[0]).tag))\n                del elem.getparent()[0]\n        del context\n\n    def mod_fast_iter(context, func, *args, **kwargs):\n        \"\"\"\n        http://www.ibm.com/developerworks/xml/library/x-hiperfparse/\n        Author: Liza Daly\n        See also http://effbot.org/zone/element-iterparse.htm\n        \"\"\"\n        for event, elem in context:\n            print('Processing {e}'.format(e=ET.tostring(elem)))\n            func(elem, *args, **kwargs)\n            # It's safe to call clear() here because no descendants will be\n            # accessed\n            print('Clearing {e}'.format(e=ET.tostring(elem)))\n            elem.clear()\n            # Also eliminate now-empty references from the root node to elem\n            for ancestor in elem.xpath('ancestor-or-self::*'):\n                print('Checking ancestor: {a}'.format(a=ancestor.tag))\n                while ancestor.getprevious() is not None:\n                    print(\n                        'Deleting {p}'.format(p=(ancestor.getparent()[0]).tag))\n                    del ancestor.getparent()[0]\n        del context\n\n    content = setup_ABC()\n    context = ET.iterparse(io.BytesIO(content), events=('end', ), tag='C')\n    orig_fast_iter(context, lambda elem: None)\n    # Processing <C>1<D1/></C>\n    # Clearing <C>1<D1/></C>\n    # Deleting B1\n    # Processing <C>2<D/></C>\n    # Clearing <C>2<D/></C>\n    # Deleting B2\n\n    print('-' * 80)\n    \"\"\"\n    The improved fast_iter deletes A1. The original fast_iter does not.\n    \"\"\"\n    content = setup_ABC()\n    context = ET.iterparse(io.BytesIO(content), events=('end', ), tag='C')\n    mod_fast_iter(context, lambda elem: None)\n    # Processing <C>1<D1/></C>\n    # Clearing <C>1<D1/></C>\n    # Checking ancestor: root\n    # Checking ancestor: A1\n    # Checking ancestor: C\n    # Deleting B1\n    # Processing <C>2<D/></C>\n    # Clearing <C>2<D/></C>\n    # Checking ancestor: root\n    # Checking ancestor: A2\n    # Deleting A1\n    # Checking ancestor: C\n    # Deleting B2\n\nstudy_fast_iter()\n",
  "label": 1
 },
 {
  "idx": 2698,
  "doc": "Python: Pass a generic dictionary as a command line arguments",
  "code": "$ Script.py file1 bob=1 sue=2 ben=3\nfile1\n{'bob': '1', 'ben': '3', 'sue': '2'}\n",
  "label": 0
 },
 {
  "idx": 2699,
  "doc": "Python: Pass a generic dictionary as a command line arguments",
  "code": "import sys\nfilename = sys.argv[1]\nargs = dict([arg.split('=', maxsplit=1) for arg in sys.argv[2:]])\nprint filename\nprint args\n",
  "label": 1
 },
 {
  "idx": 2700,
  "doc": "Can you do regex with concordance?",
  "code": ">>> from nltk.corpus import gutenberg\n>>> emma = gutenberg.raw(fileids='austen-emma.txt')\n>>> comma_separated = RegExConcordanceIndex(emma)\n>>> comma_separated.print_concordance(r\"(?<=, )[A-Za-z]+(?=,)\", demarcation='**')  # matches are enclosed in double asterisks\n\nDisplaying 25 matches:\nEmma Woodhouse, **handsome**, clever, and rich, with a comfortab\nEmma Woodhouse, handsome, **clever**, and rich, with a comfortable home\nThe real evils, **indeed**, of Emma's situation were the power \no her many enjoyments.  The danger, **however**, was at present\nwell-informed, **useful**, gentle, knowing all the ways of the\nwell-informed, useful, **gentle**, knowing all the ways of the family,\na good-humoured, **pleasant**, excellent man, that he thoroughly \n\"No, **papa**, nobody thought of your walking.  We \n\"I believe it is very true, my dear, **indeed**,\" said Mr. Woodhouse,\nshould not like her so well as we do, **sir**,\ne none for myself, papa; but I must, **indeed**,\nmet with him in Broadway Lane, **when**, because it began to drizzle,\nlike Mr. Elton, **papa**,--I must look about for a wife for hi\n\"With a great deal of pleasure, **sir**, at any time,\" said Mr. Knightley,\nbetter thing.  Invite him to dinner, **Emma**, and help him to the best\ny.  He had received a good education, **but**,\nMiss Churchill, **however**, being of age, and with the full co\nFrom the expense of the child, **however**, he was soon relieved.\nIt was most unlikely, **therefore**, that he should ever want his\n strong enough to affect one so dear, **and**, as he believed,\nIt was, **indeed**, a highly prized letter.  Mrs. Westo\nand he had, **therefore**, earnestly tried to dissuade them \nFortunately for him, **Highbury**, including Randalls in the same par\nhandsome, **rich**, nor married.  Miss Bates stood in th\na real, **honest**, old-fashioned Boarding-school, wher\n",
  "label": 0
 },
 {
  "idx": 2701,
  "doc": "Abort a running task in Celery within django",
  "code": "abortable_async_result = AsyncBoot.apply_async(args=[name], name=name, connect_timeout=3)\nmyTaskId = abortable_async_result.task_id\n",
  "label": 0
 },
 {
  "idx": 2702,
  "doc": "Parse valid JSON object or array from a string",
  "code": ">>> import re\n>>> string1 = 'bob1: The ceo of the company {\"salary\": 100000}'\n>>> string2 = 'bob1: The ceo of the company [\"10001\", \"10002\"]'\n>>> \n>>> re.search(r\"\\s([{\\[].*?[}\\]])$\", string1).group(1)\n'{\"salary\": 100000}'\n>>> re.search(r\"\\s([{\\[].*?[}\\]])$\", string2).group(1)\n'[\"10001\", \"10002\"]'\n",
  "label": 1
 },
 {
  "idx": 2703,
  "doc": "Parse valid JSON object or array from a string",
  "code": ">>> re.split(r\"\\s(?=[{\\[])\", string1)[-1]\n'{\"salary\": 100000}'\n>>> re.split(r\"\\s(?=[{\\[])\", string2)[-1]\n'[\"10001\", \"10002\"]'\n",
  "label": 1
 },
 {
  "idx": 2704,
  "doc": "Getting the key and value of br.forms() in Mechanize",
  "code": "<GET http://www.w3schools.com/html/action_page.php application/x-www-form-urlencoded\n  <TextControl(firstname=Mickey)>\n  <TextControl(lastname=Mouse)>\n  <SubmitControl(<None>=Submit) (readonly)>>\n[('firstname', 'Mickey'), ('lastname', 'Mouse')]\n<GET http://www.w3schools.com/html/action_page.php application/x-www-form-urlencoded\n  <TextControl(firstname=Mickey)>\n  <TextControl(lastname=Mouse)>\n  <SubmitControl(<None>=Submit) (readonly)>>\n[('firstname', 'Mickey'), ('lastname', 'Mouse')]\n<GET http://www.w3schools.com/html/html_forms.asp application/x-www-form-urlencoded\n  <TextControl(err_email=)>\n  <TextControl(err_url=) (disabled)>\n  <TextareaControl(err_desc=)>\n  <IgnoreControl(<None>=<None>)>>\n[('err_email', ''), ('err_desc', '')]\n",
  "label": 0
 },
 {
  "idx": 2705,
  "doc": "XOR neural network backprop",
  "code": "dCE/dtheta2(0) = dCE/dZ3 * dZ3/dtheta2(0)\n               = (L3-Y) * 1\ndCE/dtheta2(1) = dCE/dZ3 * dZ3/dtheta2(1)\n               = (L3-Y) * L2(1)\ndCE/dtheta2(2) = dCE/dZ3 * dZ3/dtheta2(2)\n               = (L3-Y) * L2(2)\ndCE/dtheta2(3) = dCE/dZ3 * dZ3/dtheta2(3)\n               = (L3-Y) * L2(3)\n",
  "label": 0
 },
 {
  "idx": 2706,
  "doc": "XOR neural network backprop",
  "code": "dZ3/dBias  = theta2(0)\n",
  "label": 0
 },
 {
  "idx": 2707,
  "doc": "finding the greatest Fibonacci number within limited time in python",
  "code": "def fibTimeLimited(limit):\n  start = time.time()\n  n, f0, f1 = 1, 0, 1\n  while time.time() < start + limit:\n    n += 1\n    f0, f1 = f1, f0+f1\n  return (n, f1)\n",
  "label": 1
 },
 {
  "idx": 2708,
  "doc": "finding the greatest Fibonacci number within limited time in python",
  "code": "3.12172317505\n",
  "label": 0
 },
 {
  "idx": 2709,
  "doc": "\"Canonical\" offset from UTC using pytz?",
  "code": "import pytz\nimport datetime as DT\nutcnow = DT.datetime.utcnow()\n\ncanonical = dict()\nfor name in pytz.all_timezones:\n    tzone = pytz.timezone(name)\n    try:\n        dstoffset = tzone.dst(utcnow, is_dst=False)\n    except TypeError:\n        # pytz.utc.dst does not have a is_dst keyword argument\n        dstoffset = tzone.dst(utcnow)\n    if dstoffset == DT.timedelta(0):\n        # utcnow happens to be in a non-DST period\n        canonical[name] = tzone.localize(utcnow, is_dst=False).strftime('%z') \n    else:\n        # step through the transition times until we find a non-DST datetime\n        date = utcnow\n        while True:\n            date = date - DT.timedelta(days=1)\n            dstoffset = tzone.dst(date, is_dst=False) \n            if dstoffset == DT.timedelta(0):\n                canonical[name] = (tzone.localize(date, is_dst=False)\n                                   .strftime('%z'))\n                break\n\nfor name, utcoffset in canonical.iteritems():\n    print('{} --> {}'.format(name, utcoffset)) \n\n# All timezones have been accounted for\nassert len(canonical) == len(pytz.all_timezones)\n",
  "label": 1
 },
 {
  "idx": 2710,
  "doc": "\"Canonical\" offset from UTC using pytz?",
  "code": "import pytz\nimport datetime as DT\nutcnow = DT.datetime.utcnow()\n\ncanonical = dict()\nfor name in pytz.all_timezones:\n    tzone = pytz.timezone(name)\n    try:\n        dstoffset = tzone.dst(utcnow, is_dst=False)\n    except TypeError:\n        # pytz.utc.dst does not have a is_dst keyword argument\n        dstoffset = tzone.dst(utcnow)\n    if dstoffset == DT.timedelta(0):\n        # utcnow happens to be in a non-DST period\n        canonical[name] = tzone.localize(utcnow, is_dst=False).strftime('%z') \n    else:\n        # step through the transition times until we find a non-DST datetime\n        for transition in tzone._utc_transition_times[::-1]:\n            dstoffset = tzone.dst(transition, is_dst=False) \n            if dstoffset == DT.timedelta(0):\n                canonical[name] = (tzone.localize(transition, is_dst=False)\n                                   .strftime('%z'))\n                break\n\nfor name, utcoffset in canonical.iteritems():\n    print('{} --> {}'.format(name, utcoffset)) \n\n# All timezones have been accounted for\nassert len(canonical) == len(pytz.all_timezones)\n",
  "label": 1
 },
 {
  "idx": 2711,
  "doc": "Trying to convert HSV image to Black and white [opencv]",
  "code": "skin = #Initialize this variable with the image produced after separating the skin pixels from the image.\n\nbw_image = cv2.cvtColor(skin, cv2.HSV2GRAY)\n\nnew_image = bw_image[:]\n\nthreshold = 1 \n #This value is set to 1 because We want to separate out the pixel values which are purely BLACK whose grayscale value is constant (0) \n",
  "label": 0
 },
 {
  "idx": 2712,
  "doc": "dictionary of dictionaries(nested dicts)",
  "code": "subdict = {bet_pav: [kk]}\n",
  "label": 0
 },
 {
  "idx": 2713,
  "doc": "dictionary of dictionaries(nested dicts)",
  "code": "pavdict.setdefault(pav, []).append(subdict)\n",
  "label": 0
 },
 {
  "idx": 2714,
  "doc": "Pandas: add dataframes to dataframe - match on index and column value",
  "code": "               value1  value2\n           id                \n2015-05-01 1       13       4\n           2       14       7\n2015-05-02 1       15       5\n           2       16       8\n",
  "label": 0
 },
 {
  "idx": 2715,
  "doc": "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?",
  "code": "f(0.00000000000000000) is returning 1.000000\nf(0.00000000000014901) is returning 1.000000\nf(0.00000000000038602) is returning 1.000000\nf(0.00000000000031065) is returning 1.000000\nf(0.00000000310683694) is returning 1.000000\nf(0.00000003417209978) is returning 1.000000\nf(0.00000034482472820) is returning 1.000000\nf(0.00000345135101245) is returning 1.000000\nf(0.00003451661385491) is returning 1.000000\nf(0.00034516924227954) is returning 1.000000\nf(0.00345169552652583) is returning 1.000000\nf(0.03451695836898876) is returning 1.000000\nf(0.34516958679361798) is returning 1.000000\nf(3.45169587103990994) is returning 1.000000\n1.0 [ 1.] [1]\nf(1.00000000000000000) is returning 2.000000\nf(1.00000004712160906) is returning 2.000000\nf(1.00004853947319172) is returning 2.000000\nf(1.00002426973659575) is returning 2.000000\nf(1.24272163569515759) is returning 2.000000\nf(3.66969529528077576) is returning 2.000000\n2.0 [ 3.] [2]\nf(2.00000000000000000) is returning 3.000000\nf(2.00000008161702114) is returning 3.000000\nf(2.00009034213922021) is returning 3.000000\nf(2.00004517106961011) is returning 3.000000\nf(2.45175586717085858) is returning 3.000000\nf(6.96886282818334202) is returning 3.000000\n3.0 [ 6.] [3]\nf(3.00000000000000000) is returning 4.000000\nf(3.00000009424321812) is returning 4.000000\nf(3.00009707894638256) is returning 4.000000\nf(3.00004853947319150) is returning 4.000000\nf(3.48544327138667454) is returning 4.000000\nf(8.33939059052150533) is returning 4.000000\n4.0 [10.] [4]\nf(4.00000000000000000) is returning 5.000000\nf(4.00000010536712125) is returning 5.000000\nf(4.00010264848819030) is returning 5.000000\nf(4.00005132424409471) is returning 5.000000\nf(4.51329376519484793) is returning 5.000000\nf(9.64571817470238457) is returning 5.000000\n5.0 [ 15.] [5]\n",
  "label": 0
 },
 {
  "idx": 2716,
  "doc": "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?",
  "code": "f(0.00000000000000000) is returning 1.000000\nf(0.00000000000014901) is returning 1.000000\nf(0.00000000000038602) is returning 1.000000\nf(0.00000000000031065) is returning 1.000000\nf(0.00000000310683694) is returning 1.000000\nf(0.00000003417209978) is returning 1.000000\nf(0.00000034482472820) is returning 1.000000\nf(0.00000345135101245) is returning 1.000000\nf(0.00003451661385491) is returning 1.000000\nf(0.00034516924227954) is returning 1.000000\nf(0.00345169552652583) is returning 1.000000\nf(0.03451695836898876) is returning 1.000000\nf(0.34516958679361798) is returning 1.000000\nf(3.45169587103990994) is returning 1.000000\n1.0 [ 1.] [1]\n2.0 [ 2.] [2]\n3.0 [ 3.] [3]\nf(34.51695871350283085) is returning 4.000000\nf(34.51695871350283085) is returning 4.000000\nf(6.55822215528620234) is returning 4.000000\nf(6.55822215528620234) is returning 4.000000\nf(3.76234849946453931) is returning 4.000000\nf(3.76234849946453931) is returning 4.000000\nf(3.45169587103990994) is returning 4.000000\nf(3.48276113388237274) is returning 4.000000\nf(3.51382639672483554) is returning 4.000000\nf(3.82447902514946492) is returning 4.000000\nf(6.93100530939575776) is returning 4.000000\n4.0 [ 5.64491239] [4]\n5.0 [ 9.64491239] [5]\n",
  "label": 0
 },
 {
  "idx": 2717,
  "doc": "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?",
  "code": "def f(t,ys,a):\n    print \"f(%.17f) is returning %f\" % (t, a)\n    return a\n",
  "label": 0
 },
 {
  "idx": 2718,
  "doc": "In Django, how could I in a single query get total row count based on distinct field values?",
  "code": "Lead.objects.values('site', 'companies').annotate(Count('id'))\n",
  "label": 1
 },
 {
  "idx": 2719,
  "doc": "In Django, how could I in a single query get total row count based on distinct field values?",
  "code": "Lead.objects.values('site', 'companies', 'type').annotate(Count('id'))\n",
  "label": 1
 },
 {
  "idx": 2720,
  "doc": "Sympy library solve to an unknown variable",
  "code": ">>> C_b\n38.0\u2217C0\n+3.0\u2217((0.17\u2217C0+0.076)\u2217\u22172+(2.0\u2217C0+0.0066)\u2217\u22172)\u2217\u22170.5\n+3.0\u2217((0.35\u2217C0+0.076)\u2217\u22172+(2.0\u2217C0+0.0066)\u2217\u22172)\u2217\u22170.5\n+3.0\u2217((2.0\u2217C0+0.0066)\u2217\u22172+0.0058)\u2217\u22170.5\n+9.4\n\n>>> simplify(C_b)\n38.0\u2217C0\n+3.0\u2217(4.0\u2217C0\u2217\u22172+0.027\u2217C0+0.0058)\u2217\u22170.5\n+3.0\u2217(4.1\u2217C0\u2217\u22172+0.053\u2217C0+0.0058)\u2217\u22170.5\n+3.0\u2217(4.2\u2217C0\u2217\u22172+0.08\u2217C0+0.0058)\u2217\u22170.5\n+9.4\n",
  "label": 0
 },
 {
  "idx": 2721,
  "doc": "Print from txt file",
  "code": "template = '''\\\nURL GOTO=https://www.url.com/{user1}\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27'''\n\nwith open('users.txt') as file:\n    for line in file:\n        print(template.format(user1=line.strip()))\n",
  "label": 1
 },
 {
  "idx": 2722,
  "doc": "Print from txt file",
  "code": "from string import Template\n\ntemplate = Template('''\\\nURL GOTO=https://www.url.com/$user1\nTAG POS=1 TYPE=BUTTON ATTR=TXT:Follow\nWAIT SECONDS= 27''')\n\nwith open('users.txt') as file:\n    for line in file:\n        print(template.substitute({'user1': line.strip()}))\n",
  "label": 1
 },
 {
  "idx": 2723,
  "doc": "Automatic conversion to boost shared_ptr in boost python",
  "code": "#include <iostream>\n#include <boost/make_shared.hpp>\n#include <boost/python.hpp>\n#include <boost/shared_ptr.hpp>\n\n/// @brief Mockup Spam class.\nstruct Spam\n{\n  int x;\n  int y;\n  Spam()  { std::cout << \"Spam()\" << std::endl; }\n  ~Spam() { std::cout << \"~Spam()\" << std::endl; }\n\n  Spam(const Spam& rhs) : x(rhs.x), y(rhs.y)\n    { std::cout << \"Spam(const Spam&)\" << std::endl; }\n};\n\n/// @brief Helper function to ceck if an object has an attributed with a\n///        specific type.\ntemplate <typename T>\nbool hasattr(const boost::python::object& obj,\n             const char* name)\n{\n  return PyObject_HasAttrString(obj.ptr(), name) &&\n         boost::python::extract<T>(obj.attr(name)).check();\n}\n\n/// @brief Helper type that provides conversions from a Python object to Spam.\nstruct spam_from_python\n{\n  spam_from_python()\n  {\n    boost::python::converter::registry::push_back(\n      &spam_from_python::convertible,\n      &spam_from_python::construct,\n      boost::python::type_id<Spam>());\n  }\n\n  /// @brief Check if PyObject contains an x and y int attribute.\n  static void* convertible(PyObject* object)\n  {\n    namespace python = boost::python;\n    python::handle<> handle(python::borrowed(object));\n    python::object o(handle);\n\n    // If x and y are not int attributes, then return null.\n    if (!hasattr<int>(o, \"x\") && hasattr<int>(o, \"y\"))\n      return NULL;\n\n    return object;\n  }\n\n  /// @brief Convert PyObject to Spam.\n  static void construct(\n    PyObject* object,\n    boost::python::converter::rvalue_from_python_stage1_data* data)\n  {\n    // Obtain a handle to the memory block that the converter has allocated\n    // for the C++ type.\n    namespace python = boost::python;\n    typedef python::converter::rvalue_from_python_storage<Spam> storage_type;\n    void* storage = reinterpret_cast<storage_type*>(data)->storage.bytes;\n\n    // Allocate the C++ type into the converter's memory block, and assign\n    // its handle to the converter's convertible variable.\n    Spam* spam;\n    data->convertible = spam = new (storage) Spam();\n\n    // Initialize spam from an object.\n    initialize_spam(spam, object);\n  }\n\n  /// @brief Initialize a spam instance based on a python object.\n  static void initialize_spam(Spam* spam, PyObject* object)\n  {\n    namespace python = boost::python;\n    python::handle<> handle(python::borrowed(object));\n    python::object o(handle);\n\n    spam->x = python::extract<int>(o.attr(\"x\"));\n    spam->y = python::extract<int>(o.attr(\"y\"));\n  } \n};\n\n/// @brief Helper type that provides conversions from a Python object to\n///        boost::shared_ptr<Spam>.\nstruct shared_spam_from_python\n{\n  shared_spam_from_python()\n  {\n    boost::python::converter::registry::push_back(\n      &spam_from_python::convertible,\n      &shared_spam_from_python::construct,\n      boost::python::type_id<boost::shared_ptr<Spam> >());\n  }\n\n  /// @brief Convert PyObject to boost::shared<Spam>.\n  static void construct(\n    PyObject* object,\n    boost::python::converter::rvalue_from_python_stage1_data* data)\n  {\n    // Obtain a handle to the memory block that the converter has allocated\n    // for the C++ type.\n    namespace python = boost::python;\n    typedef python::converter::rvalue_from_python_storage<\n                                        boost::shared_ptr<Spam> > storage_type;\n    void* storage = reinterpret_cast<storage_type*>(data)->storage.bytes;\n\n    // Allocate the C++ type into the converter's memory block, and assign\n    // its handle to the converter's convertible variable.\n    boost::shared_ptr<Spam>* spam;\n    data->convertible = spam =\n        new (storage) boost::shared_ptr<Spam>(boost::make_shared<Spam>());\n\n    // Initialize spam from an object.\n    spam_from_python::initialize_spam(spam->get(), object);\n  }\n};\n\n/// @brief Mockup functions acceping Spam in different ways.\nvoid by_value(Spam spam)            { std::cout << \"by_value()\" << std::endl; }\nvoid by_const_ref(const Spam& spam) { std::cout << \"by_cref()\"  << std::endl; }\nvoid by_ref(Spam& spam)             { std::cout << \"by_ref()\"   << std::endl; }\nvoid by_ptr(Spam* spam)             { std::cout << \"by_ptr()\"   << std::endl; }\n\n/// @brief Use auxiliary functions that accept boost::shared_ptr<Spam> and \n///        delegate to functions that have formal parameters of Spam& and\n///        Spam*.\nvoid by_ref_wrap(boost::shared_ptr<Spam> spam) { return by_ref(*spam); }\nvoid by_ptr_wrap(boost::shared_ptr<Spam> spam) { return by_ptr(spam.get()); }\n\nBOOST_PYTHON_MODULE(example)\n{\n  namespace python = boost::python;\n\n  // Enable python to Spam conversion.\n  spam_from_python();\n\n  // Enable python to boost::shared_ptr<Spam> conversion.\n  shared_spam_from_python();\n\n  // Expose functions that have parameters that can accept a const Spam&\n  // argument.\n  python::def(\"by_value\",     &by_value);\n  python::def(\"by_const_ref\", &by_const_ref);\n\n  // Expose functions that have parameters that can accept a const\n  // boost::shared_ptr<Spam>& argument.  As copies of shared_ptr are cheap,\n  // a copy is used and the managed instance is passed to other functions,\n  // allowing Spam& and Spam* parameters.\n  python::def(\"by_ptr\", &by_ptr_wrap);\n  python::def(\"by_ref\", &by_ref_wrap);\n}\n",
  "label": 1
 },
 {
  "idx": 2724,
  "doc": "Pandas -- how to iterate through a list of dates which filter a DataFrame",
  "code": "parse = lambda x: datetime(int(x[0]),int(x[1]),int(x[2]))\ndatelist['end'] = datelist['date'].str.split(',').apply(parse)\nprint datelist \n\n        date        end\n0  2013, 2,3 2013-02-03\n1  2013, 2,6 2013-02-06\n2  2013, 3,6 2013-03-06\n3  2013, 3,8 2013-03-08\n",
  "label": 0
 },
 {
  "idx": 2725,
  "doc": "SCons to generate variable number of targets",
  "code": "Import('env')\n\ndef my_emitter( env, target, source ):\n    data = str(source[0])\n    target = []\n    with open( data, 'r' ) as lines:\n        for line in lines:\n           line = line.strip()\n           name, contents = line.split(' ', 1)\n           if not name: continue\n\n           generated_source  = env.Command( name, [], 'echo \"{0}\" > $TARGET'.format(contents) )\n           source.extend( generated_source )\n           target.append( name+'.c' )\n\n    return target, source\n\ndef my_action( env, target, source ):\n    for t,s in zip(target, source[1:]):\n        with open(t.abspath, 'w') as tf:\n            with open(s.abspath, 'r') as sf:\n                tf.write( sf.read() )\n\nSourcesGenerator = env.Builder( action = my_action, emitter = my_emitter )\ngenerated_sources = SourcesGenerator( env, source = 'source.txt' )\n\nlib = env.Library( 'functions', generated_sources )\n",
  "label": 0
 },
 {
  "idx": 2726,
  "doc": "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood",
  "code": "board = [\n    [1,0,1,0,1],\n    [1,0,1,0,1],\n    [1,0,1,0,1],\n    [1,0,1,0,1],\n    [1,0,1,0,1]\n]\n\ndef clamp(minV,maxV,x):\n    if x < minV:\n        return minV \n    elif x > maxV:\n        return maxV\n    else:\n        return x\n\ndef getNeighbour(grid,startx,starty,radius):\n    width = len(grid[starty])\n    height = len(grid)\n    neighbourhood = []\n    for y in range(clamp(0,height,starty-radius),clamp(0,height,starty+radius)+1):\n        row = []\n        for x in range(clamp(0,width,startx-radius),clamp(0,width,startx+radius)+1):\n            if x != startx or (x==startx and  y != starty):\n                row.append(grid[y][x])\n        neighbourhood.append(row)\n    return neighbourhood\n",
  "label": 1
 },
 {
  "idx": 2727,
  "doc": "Python function for rotating 2d objects",
  "code": "import math\ndef rotatePolygon(polygon,theta):\n    \"\"\"Rotates the given polygon which consists of corners represented as (x,y),\n    around the ORIGIN, clock-wise, theta degrees\"\"\"\n    theta = math.radians(theta)\n    rotatedPolygon = []\n    for corner in polygon :\n        rotatedPolygon.append(( corner[0]*math.cos(theta)-corner[1]*math.sin(theta) , corner[0]*math.sin(theta)+corner[1]*math.cos(theta)) )\n    return rotatedPolygon\n\n\nmy_polygon = [(0,0),(1,0),(0,1)]\nprint rotatePolygon(my_polygon,90)\n",
  "label": 1
 },
 {
  "idx": 2728,
  "doc": "How can I use a pre-made color map for my heat map in matplotlib?",
  "code": "['Spectral', 'summer', 'RdBu', 'Set1', 'Set2', 'Set3', 'brg_r', 'Dark2', 'hot', 'PuOr_r', 'afmhot_r', 'terrain_r', 'PuBuGn_r', 'RdPu', 'gist_ncar_r', 'gist_yarg_r', 'Dark2_r', 'YlGnBu', 'RdYlBu', 'hot_r', 'gist_rainbow_r', 'gist_stern', 'gnuplot_r', 'cool_r', 'cool', 'gray', 'copper_r', 'Greens_r', 'GnBu', 'gist_ncar', 'spring_r', 'gist_rainbow', 'RdYlBu_r', 'gist_heat_r', 'OrRd_r', 'bone', 'gist_stern_r', 'RdYlGn', 'Pastel2_r', 'spring', 'terrain', 'YlOrRd_r', 'Set2_r', 'winter_r', 'PuBu', 'RdGy_r', 'spectral', 'flag_r', 'jet_r', 'RdPu_r', 'Purples_r', 'gist_yarg', 'BuGn', 'Paired_r', 'hsv_r', 'bwr', 'YlOrRd', 'Greens', 'PRGn', 'gist_heat', 'spectral_r', 'Paired', 'hsv', 'Oranges_r', 'prism_r', 'Pastel2', 'Pastel1_r', 'Pastel1', 'gray_r', 'PuRd_r', 'Spectral_r', 'gnuplot2_r', 'BuPu', 'YlGnBu_r', 'copper', 'gist_earth_r', 'Set3_r', 'OrRd', 'PuBu_r', 'ocean_r', 'brg', 'gnuplot2', 'jet', 'bone_r', 'gist_earth', 'Oranges', 'RdYlGn_r', 'PiYG', 'YlGn', 'binary_r', 'gist_gray_r', 'Accent', 'BuPu_r', 'gist_gray', 'flag', 'seismic_r', 'RdBu_r', 'BrBG', 'Reds', 'BuGn_r', 'summer_r', 'GnBu_r', 'BrBG_r', 'Reds_r', 'RdGy', 'PuRd', 'Accent_r', 'Blues', 'Greys', 'autumn', 'PRGn_r', 'Greys_r', 'pink', 'binary', 'winter', 'gnuplot', 'pink_r', 'prism', 'YlOrBr', 'rainbow_r', 'rainbow', 'PiYG_r', 'YlGn_r', 'Blues_r', 'YlOrBr_r', 'seismic', 'Purples', 'bwr_r', 'autumn_r', 'ocean', 'Set1_r', 'PuOr', 'PuBuGn', 'afmhot']\n",
  "label": 0
 },
 {
  "idx": 2729,
  "doc": "How do I define custom function to be called from IPython's prompts?",
  "code": "c.InteractiveShellApp.exec_files = [b'gitprompt.py']\n",
  "label": 0
 },
 {
  "idx": 2730,
  "doc": "How to split a byte string into separate bytes in python",
  "code": ">>> value = b'\\x00\\x01\\x00\\x02\\x00\\x03'\n>>> value[:2]\nb'\\x00\\x01'\n>>> value[2:4]\nb'\\x00\\x02'\n>>> value[-2:]\nb'\\x00\\x03'\n",
  "label": 1
 },
 {
  "idx": 2731,
  "doc": "How to split a byte string into separate bytes in python",
  "code": ">>> mv = memoryview(value).cast('H')\n>>> mv[0], mv[1], mv[2]\n256, 512, 768\n",
  "label": 0
 },
 {
  "idx": 2732,
  "doc": "Wait on Arduino auto-reset using pySerial",
  "code": "void setup() {\n  //Initialize serial and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for Leonardo only\n  }\n}\n",
  "label": 0
 },
 {
  "idx": 2733,
  "doc": "Modifying a recursive function that counts no. of paths, to get sequence of all paths",
  "code": ">>> for path in generate_paths(3):\n...    print(path)\n\n((0, 0), (1, 0), (2, 0), (3, 0))\n((0, 0), (1, 0), (2, 0), (3, 1))\n((0, 0), (1, 0), (2, 1), (3, 1))\n((0, 0), (1, 0), (2, 1), (3, 2))\n((0, 0), (1, 1), (2, 1), (3, 1))\n((0, 0), (1, 1), (2, 1), (3, 2))\n((0, 0), (1, 1), (2, 2), (3, 2))\n((0, 0), (1, 1), (2, 2), (3, 3))\n>>> print(len(tuple(generate_paths(14))))\n16384\n",
  "label": 0
 },
 {
  "idx": 2734,
  "doc": "Permutation of values on numpy array/matrix",
  "code": "import numpy as np\n\ndef permgrid(m, n):\n    inds = np.indices((m,) * n)\n    return inds.reshape(n, -1).T\n",
  "label": 1
 },
 {
  "idx": 2735,
  "doc": "writing csv output python",
  "code": "import csv\nimport calendar\nfrom collections import defaultdict\n\nmonths = [calendar.month_name[i] for i in range(0, 13)]\ntotals = defaultdict(int)\n\nwith open(\"data.csv\", \"r\") as inf, open(\"data-out.csv\", \"w\") as ouf:\n    reader = csv.DictReader(inf)\n    writer = csv.DictWriter(ouf, ['Name'] + months[5:9])\n    writer.writeheader()\n    for row in reader:\n        m1 = months[int(row['Date1'].split('/')[0])]\n        p2 = int(row['Price2'])\n        totals[m1] += p2\n\n        m2 = months[int(row['Date2'].split('/')[0])]\n        p1 = int(row['Price1'])\n        totals[m2] += p1\n\n        writer.writerow({'Name': row['Name'], m1: p2, m2: p1})\n\n    totals['Name'] = 'Total'\n    writer.writerow(totals)\n",
  "label": 1
 },
 {
  "idx": 2736,
  "doc": "How to force sympy to extract specific subexpressions?",
  "code": "[{V_Ci: k_1, \n  V_Cf: R_S/(R_1 + R_S), \n   tau: R_1*R_S*(C_1 + C_S)/(R_1 + R_S)}]\n",
  "label": 0
 },
 {
  "idx": 2737,
  "doc": "Binary search of a number within a list in Python",
  "code": "import random\ndef binarySearch(alist, item):\n        first = 0\n        last = len(alist) - 1\n        found = False\n\n        while first<=last and not found:\n            midpoint = (first + last)//2            \n            if alist[midpoint] == item:\n                found = True\n            else:\n                if item < alist[midpoint]:\n                    last = midpoint-1\n                else:\n                    first = midpoint+1  \n        return found\n\ndef findThisNum(mynum):\n\n    testlist = [x for x in range(listlength)]\n\n    print \"testlist = \", testlist\n    print \"finding number \", mynum\n\n    if (binarySearch(testlist, findnum)) == True:\n        print \"found %d\" %mynum\n    else:\n        print \"Not found %d\" %mynum\n\n\n\n\n#### Main_Function ####\n\nif __name__ == \"__main__\":\n    #\n\n    #Search 1 [ Even numbered list ]\n    listlength = 10    \n    findnum = random.randrange(0,listlength)\n    findThisNum(findnum)     \n\n    #Search 2 [ [ Odd numbered list ]\n    listlength = 13    \n    findnum = random.randrange(0,listlength)\n    findThisNum(findnum)\n\n    #search 3  [ find item not in the list ]\n\n    listlength = 13    \n    findnum = random.randrange(0,listlength) + listlength\n    findThisNum(findnum)\n",
  "label": 1
 },
 {
  "idx": 2738,
  "doc": "Remove rows from data: overlapping time intervals?",
  "code": "   username          machine               start                 end\n1     user1 D5599.domain.com 2011-01-03 02:44:18 2011-01-03 03:09:16\n2     user1 D5599.domain.com 2011-01-03 07:07:36 2011-01-03 07:56:17\n3     user1 D5599.domain.com 2011-01-05 08:03:17 2011-01-05 08:23:15\n4     user1 D5599.domain.com 2011-02-14 07:33:39 2011-02-14 07:40:16\n5     user1 D5599.domain.com 2011-02-23 06:54:30 2011-02-23 06:58:23\n6     user1 D5599.domain.com 2011-03-21 04:10:18 2011-03-21 04:32:22\n7     user1 D5645.domain.com 2011-06-09 03:12:41 2011-06-09 03:58:59\n8     user1 D5682.domain.com 2011-01-03 05:03:45 2011-01-03 05:29:43\n9     USER2 D5682.domain.com 2011-01-12 07:26:05 2011-01-12 07:32:53\n10    USER2 D5682.domain.com 2011-01-17 08:06:19 2011-01-17 08:44:22\n11    USER2 D5682.domain.com 2011-01-18 08:07:30 2011-01-18 08:42:43\n12    USER2 D5682.domain.com 2011-01-25 08:20:55 2011-01-25 08:24:38\n13    USER2 D5682.domain.com 2011-02-14 07:59:23 2011-02-14 08:14:47\n",
  "label": 0
 },
 {
  "idx": 2739,
  "doc": "Reordering same characters such that the characters are at least distance d from each other",
  "code": "most common:  ('b', 3)  # character b with frequency 3\n['-', '-', '-', '-', '-', '-']\nupdated o:  ['b', '-', '-', '-', '-', '-']\n['b', '-', '-', '-', '-', '-']\nupdated o:  ['b', '-', 'b', '-', '-', '-']\n['b', '-', 'b', '-', '-', '-']\nupdated o:  ['b', '-', 'b', '-', 'b', '-']\nmost common:  ('c', 2)\n['b', '-', 'b', '-', 'b', '-']\nupdated o:  ['b', 'c', 'b', '-', 'b', '-']\n['b', 'c', 'b', '-', 'b', '-']\nupdated o:  ['b', 'c', 'b', 'c', 'b', '-']\nmost common:  ('a', 1)\n['b', 'c', 'b', 'c', 'b', '-']\nupdated o:  ['b', 'c', 'b', 'c', 'b', 'a']\n",
  "label": 0
 },
 {
  "idx": 2740,
  "doc": "Beautiful Soup [Python] and the extracting of text in a table",
  "code": "table = soup.find('table' ,attrs={'class':'bp_ergebnis_tab_info'})\n",
  "label": 0
 },
 {
  "idx": 2741,
  "doc": "Matplotlib Half color axis",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Evaluate an existing colormap from 0.5 (midpoint) to 1 (upper end)\ncmap = plt.get_cmap('gist_earth')\ncolors = cmap(np.linspace(0.5, 1, cmap.N // 2))\n\n# Create a new colormap from those colors\ncmap2 = LinearSegmentedColormap.from_list('Upper Half', colors)\n\ny, x = np.mgrid[-200:1900, -300:2000]\nz = np.cos(np.hypot(x, y) / 100) + 1\n\nfig, axes = plt.subplots(ncols=2)\nfor ax, cmap in zip(axes.flat, [cmap, cmap2]):\n    cax = ax.imshow(z, cmap=cmap, origin='lower',\n                    extent=[x.min(), x.max(), y.min(), y.max()])\n    cbar = fig.colorbar(cax, ax=ax, orientation='horizontal')\n    cbar.set_label(cmap.name)\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2742,
  "doc": "Creating a dictionary and adding a set as its value",
  "code": "d = {}\nfor num in datasource:\n    d.setdefault(key, set()).add(num)\n",
  "label": 1
 },
 {
  "idx": 2743,
  "doc": "Finding a vector that is approximately equally distant from all vectors in a set",
  "code": "data = []\nfor n in range(1000):\n    d = []\n    for m in range(300):\n        if random.random() <= 0.1:\n            d.append(random.normalvariate(0.0, 1.0))\n        else:\n            d.append(random.normalvariate(100.0, 1.0))\n    data.append(d)\n",
  "label": 0
 },
 {
  "idx": 2744,
  "doc": "How can I scrape data from a text table using Python?",
  "code": "for person in db:\n    print \"Name:\", person[0][0]\n    print \" \".join(s.strip() for s in person[0][1:])\n    print\n",
  "label": 0
 },
 {
  "idx": 2745,
  "doc": "How does one parse a file to a 2d array whilst maintaining data types in Python?",
  "code": "def nearest_applicable_conversion(x):\n  try:\n    return int(x)\n  except ValueError:\n    pass\n  try:\n    return float(x)\n  except ValueError:\n    pass\n  return x\n",
  "label": 1
 },
 {
  "idx": 2746,
  "doc": "How to perform a 'one-liner' assignment on all elements of a list of lists in python",
  "code": "In [13]: %%timeit                                          \nlol = [[1,2,3,4,5,6,7,8] for _ in range(100000)]\nmap(lambda x: setitem(x, 1, -2), lol)\n   ....: \n\n10 loops, best of 3: 45.4 ms per loop\n\nIn [14]: \n\nIn [14]: %%timeit                                          \nlol = [[1,2,3,4,5,6,7,8] for _ in range(100000)]\nfor sub in lol:\n    sub[1] = -2\n   ....: \n10 loops, best of 3: 31.7 ms per \n",
  "label": 1
 },
 {
  "idx": 2747,
  "doc": "How to iterate through a list of lists in python?",
  "code": "temp = []\nfor sub_list in documents:\n    temp.append(sub_list[0])\ndocuments = temp\n",
  "label": 1
 },
 {
  "idx": 2748,
  "doc": "Regex Parse Email Python",
  "code": "\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\nimport re\nwith open(\"/path/to/file\", \"r\") as fileInput:\n    listLines = [   line.strip()\n                    for line in fileInput.readlines()\n                    if re.match(\"^[0-9]*\\+.*$\", line)\n                    ] \n\n\nfor line in listLines:\n    print line\n\n>>> 10+BB {MYXV ABC 4116    SM  MYXV YA 102-15 <DO>} | 2010/11 4.0s             4.0s\n>>> 6+ BB {MYXV ABC 4132    NS  MYXV YT 102-22 <DO>} | 2010 4.5s                4.5s\n>>> 10+BB  {NXTW VXA 4061   SL  MYXV YA 103-22 <DO>} | 11 wala 3.5s             3.5s\n>>> 10+BB  {NXTW VXA 12-47  SP  MYXV YA 106-20 <DO>} | 22 wala 4.0s             4.0s\n",
  "label": 0
 },
 {
  "idx": 2749,
  "doc": "Is there an efficient way to fill date gaps in python?",
  "code": "# make the column datetime object instead of string\ndf['date_closed'] = pd.to_datetime(df['date_closed'])\n# align the index using .reindex\ndf.set_index('date_closed').reindex(hourly_date_rng).fillna(0).reset_index()\n\n           date_closed  amount\n0  2012-08-04 12:00:00       0\n1  2012-08-04 13:00:00       0\n2  2012-08-04 14:00:00       0\n3  2012-08-04 15:00:00       0\n4  2012-08-04 16:00:00       0\n5  2012-08-04 17:00:00       0\n6  2012-08-04 18:00:00       0\n7  2012-08-04 19:00:00       0\n8  2012-08-04 20:00:00       0\n9  2012-08-04 21:00:00       0\n10 2012-08-04 22:00:00       0\n11 2012-08-04 23:00:00       0\n",
  "label": 0
 },
 {
  "idx": 2750,
  "doc": "Generating passwords in Python 3.1.1",
  "code": "import random\n\nprint('Username: ' + os.environ['USER'])\npasswd = getpass('Password: ')\nsalt = ''.join(random.choice('BCDFGHJKLMNPQRSTVWXYZ') for range(4))\nh = hashlib.md5()\nh.update(salt)\nh.update(passwd.encode())\npasswd_encrypt = salt + h.hexdigest()\n",
  "label": 0
 },
 {
  "idx": 2751,
  "doc": "define different function for different versions of python",
  "code": "import sys\n\nif sys.version_info[0] < 3:\n    def py2_compat(cls):\n        if hasattr(cls, '__str__'):\n            cls.__unicode__ = cls.__str__\n            del cls.__str__\n            # or optionally supply an str that \n            # encodes the output of cls.__unicode__\n        return cls\nelse:\n    def py2_compat(cls):\n        return cls\n\n@py2_compat\nclass MyPython3Class(object):\n    def __str__(self):\n        return u'Here I am!'\n",
  "label": 1
 },
 {
  "idx": 2752,
  "doc": "Python: How can I print out an object as a regular dictionary without reference?",
  "code": "class Object1:\n    d = 1\n\n    def __str__(self):\n        return str(self.d)\n\n    def __repr__(self):\n        return str(self.d)\n",
  "label": 1
 },
 {
  "idx": 2753,
  "doc": "Python Class Based Decorator with parameters that can decorate a method or a function",
  "code": "class MyDecorator(object):\n    def __init__(self, argument):\n        self.arg = argument\n\n    def __call__(self, fn):\n        @functools.wraps(fn)\n        def decorated(*args, **kwargs):\n            print \"In my decorator before call, with arg %s\" % self.arg\n            fn(*args, **kwargs)\n            print \"In my decorator after call, with arg %s\" % self.arg\n        return decorated\n",
  "label": 1
 },
 {
  "idx": 2754,
  "doc": "Python: How to \"perfectly\" override a dict",
  "code": "class MyTransformedDict(TransformedDict):\n\n    def __keytransform__(self, key):\n        return key.lower()\n\n\ns = MyTransformedDict([('Test', 'test')])\n\nassert s.get('TEST') is s['test']   # free get\nassert 'TeSt' in s                  # free __contains__\n                                    # free setdefault, __eq__, and so on\n\nimport pickle\nassert pickle.loads(pickle.dumps(s)) == s\n                                    # works too since we just use a normal dict\n",
  "label": 0
 },
 {
  "idx": 2755,
  "doc": "Checkbox to determine if an action is completed or not",
  "code": "for client in dict_list:\n    currentClient = Label(text='Client: ' + client['Client']).grid(row=[i], column=1)\n    ...\n",
  "label": 0
 },
 {
  "idx": 2756,
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "def convert_to_dict(line, header):\n    d = {}\n    for cell in header:\n        d[cell] = ''\n\n    row = line.strip().split(';')    \n    for cell in row:\n        if cell:\n            key, value = cell.split('=')\n            d[key] = value\n\n    return d\n",
  "label": 0
 },
 {
  "idx": 2757,
  "doc": "Parse Specific Text File to CSV Format with Headers",
  "code": "if __name__ == '__main__':\n    with open('report.log', 'r') as logfile:\n        with open('report.csv', 'wb') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            header = extract_fields(logfile)\n            csvwriter.writerow(header)\n\n            for line in logfile:\n                d = convert_to_dict(line, header)\n                csvwriter.writerow([d[cell] for cell in header])\n",
  "label": 0
 },
 {
  "idx": 2758,
  "doc": "two dimensional array for encryption in python",
  "code": "23 54 34 75\n",
  "label": 0
 },
 {
  "idx": 2759,
  "doc": "two dimensional array for encryption in python",
  "code": "Code\nimport numpy as np\n\nclass CustomIndexTable:\n    def __init__(self, rows, columns, elements):\n        self.rows = rows\n        self.columns = columns\n        self.data = np.array(elements, dtype=object)\n        self.data = self.data.reshape((len(rows), len(columns)))\n\n    def __getitem__(self, index):\n        x, y = index[:2], index[2:]\n        return self.data[self.rows.index(x),self.columns.index(y)]\n\n    def __setitem__(self, index, element):\n        x, y = index[:2], index[2:]\n        self.data[self.rows.index(x),self.columns.index(y)] = element\n\n    def _where(self, element):\n        x, y = np.where(self.data == element)\n        return self.rows[x] + self.columns[y]\n\n    def transpose(self):\n        self.rows, self.columns = self.columns, self.rows\n        self.data = self.data.T\n\n    def where(self, sequence):\n        elements = []\n        start = 0\n        for end in xrange(1, len(sequence)+1):\n            if sequence[start:end] in self.data:\n                elements.append(sequence[start:end])\n                start = end\n        return ''.join(self._where(e) for e in elements)\n\ndef input_matrix_data(text):\n    return raw_input(text).split()\n\ncol_indices = input_matrix_data(\"Column indices: \")\nrow_indices = input_matrix_data(\"Row indices: \")\ndata = input_matrix_data(\"All data, sorted by row: \")\n\ntable = CustomIndexTable(row_indices, col_indices, data)\n",
  "label": 1
 },
 {
  "idx": 2760,
  "doc": "grouping dictionary with list values",
  "code": "{'C': ['Cloth', 15, 150], 'E': ['Toy', 11, 110]}\n",
  "label": 0
 },
 {
  "idx": 2761,
  "doc": "Using Numba to improve finite-differences laplacian",
  "code": "import numba as nb\nimport numpy as np\n\ndef neumann_laplacian_1d(u,dx2):\n    \"\"\"Return finite difference Laplacian approximation of 2d array.\n    Uses Neumann boundary conditions and a 2nd order approximation.\n    \"\"\"\n    laplacian = np.zeros(u.shape)\n    laplacian[1:-1] =  ((1.0)*u[2:] \n                       +(1.0)*u[:-2]\n                       -(2.0)*u[1:-1])\n    # Neumann boundary conditions\n    # edges\n    laplacian[0]  =  ((2.0)*u[1]-(2.0)*u[0])\n    laplacian[-1] =  ((2.0)*u[-2]-(2.0)*u[-1])\n\n    return laplacian/ dx2\n\n@nb.autojit(nopython=True)\ndef neumann_laplacian_1d_numba(u,dx2):\n    \"\"\"Return finite difference Laplacian approximation of 2d array.\n    Uses Neumann boundary conditions and a 2nd order approximation.\n    \"\"\"\n    laplacian = np.zeros(u.shape)\n    laplacian[1:-1] =  ((1.0)*u[2:] \n                       +(1.0)*u[:-2]\n                       -(2.0)*u[1:-1])\n    # Neumann boundary conditions\n    # edges\n    laplacian[0]  =  ((2.0)*u[1]-(2.0)*u[0])\n    laplacian[-1] =  ((2.0)*u[-2]-(2.0)*u[-1])\n\n    return laplacian/ dx2\n\na = np.random.random(252)\n#run once to make the JIT do it's work before timing\nneumann_laplacian_1d_numba(a, 1.0)\n\n\n%timeit neumann_laplacian_1d(a, 1.0)\n%timeit neumann_laplacian_1d_numba(a, 1.0)\n\n>>10000 loops, best of 3: 21.5 \u00b5s per loop\n>>The slowest run took 4.49 times longer than the fastest. This could mean that an intermediate result is being cached \n>>100000 loops, best of 3: 3.53 \u00b5s per loop\n",
  "label": 1
 },
 {
  "idx": 2762,
  "doc": "talking between python tcp server and a c++ client",
  "code": "tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on lo, link-type EN10MB (Ethernet), capture size 96 bytes\n12:42:37.683710 IP localhost:33491 > localhost.1234: S 1129726741:1129726741(0) win 32792 <mss 16396,sackOK,timestamp 640881101 0,nop,wscale 7>\nE..<R.@.@...............CVC.........I|....@....\n&3..........\n12:42:37.684049 IP localhost.1234 > localhost:33491: S 1128039653:1128039653(0) ack 1129726742 win 32768 <mss 16396,sackOK,timestamp 640881101 640881101,nop,wscale 7>\nE..<..@.@.<.............C<..CVC.....Ia....@....\n&3..&3......\n12:42:37.684087 IP localhost:33491 > localhost.1234: . ack 1 win 257 <nop,nop,timestamp 640881102 640881101>\nE..4R.@.@...............CVC.C<......1......\n&3..&3..\n12:42:37.684220 IP localhost:33491 > localhost.1234: P 1:8(7) ack 1 win 257 <nop,nop,timestamp 640881102 640881101>\nE..;R.@.@...............CVC.C<......./.....\n&3..&3..hello 1\n12:42:37.684271 IP localhost.1234 > localhost:33491: . ack 8 win 256 <nop,nop,timestamp 640881102 640881102>\nE..4.(@.@...............C<..CVC.....1}.....\n&3..&3..\n12:42:37.684755 IP localhost.1234 > localhost:33491: F 1:1(0) ack 8 win 256 <nop,nop,timestamp 640881103 640881102>\nE..4.)@.@...............C<..CVC.....1{.....\n&3..&3..\n12:42:37.685639 IP localhost:33491 > localhost.1234: . ack 2 win 257 <nop,nop,timestamp 640881104 640881103>\nE..4R.@.@...............CVC.C<......1x.....\n&3..&3..\n12:42:42.683367 IP localhost:33491 > localhost.1234: P 8:15(7) ack 2 win 257 <nop,nop,timestamp 640886103 640881103>\nE..;R.@.@...............CVC.C<......./.....\n&3%W&3..hello 2\n12:42:42.683401 IP localhost.1234 > localhost:33491: R 1128039655:1128039655(0) win 0\nE..(..@.@.<.............C<......P...b...\n\n9 packets captured\n27 packets received by filter\n0 packets dropped by kernel\n",
  "label": 0
 },
 {
  "idx": 2763,
  "doc": "how to mask the specific array data based on the shapefile",
  "code": "def point_is_in_mask(mask, point):\n    # this is just pseudocode\n    return mask.contains(point) \n",
  "label": 0
 },
 {
  "idx": 2764,
  "doc": "Opening a text file and then storing the contents into a nested dictionary in python 2.7",
  "code": ">>> with open(infilepath) as infile:\n...   answer = {}\n...   name = None\n...   for line in infile:\n...     line = line.strip()\n...     if line.startswith(\"NGC\"):\n...       name = line\n...       answer[name] = {}\n...     else:\n...       var, val = line.split(':', 1)\n...       answer[name][var.strip()] = val.strip()\n... \n>>> answer\n{'NGC6853': {'Messier': 'M27', 'Magnitude': '7.4', 'Distance': '1.25', 'Name': 'Dumbbell Nebula'}, 'NGC4254': {'Brightness': '9.9 mag', 'Messier': 'M99', 'Distance': '60000', 'Name': 'Coma Pinwheel Galaxy'}, 'NGC4594': {'Messier': 'M104', 'Distance': '50000', 'Name': 'Sombrero Galaxy'}, 'NGC0224': {'Messier': 'M31', 'Magnitude': '3.4', 'Distance': '2900', 'Name': 'Andromeda Galaxy'}, 'NGC4826': {'Messier': 'M64', 'Magnitude': '8.5', 'Distance': '19000', 'Name': 'Black Eye Galaxy'}, 'NGC5457': {'Messier': 'M101', 'Magnitude': '7.9', 'Distance': '27000', 'Name': 'Pinwheel Galaxy'}}\n",
  "label": 0
 },
 {
  "idx": 2765,
  "doc": "How to loop through subfolders showing jpg in Tkinter?",
  "code": "self.Button = Tkinter.Button(self,text=\"Next\",command=self.display_next)\n",
  "label": 0
 },
 {
  "idx": 2766,
  "doc": "Recreating builtin s.find('substring') function",
  "code": "for i, char in enumerate(str1):\n    if str2[0] == char:\n        print(\"found first instance of letter at,\", i)\n        print(str2 == str1[i:i + len(str2)])\n",
  "label": 1
 },
 {
  "idx": 2767,
  "doc": "How to get only even numbers from list",
  "code": "def get_even_lists(lst):\n    \"\"\" (list of list of int) -> list of list of int\n\n    Return a list of the lists in lst that contain only even integers. \n\n    >>> only_evens([[1, 2, 4], [4, 0, 6], [22, 4, 3], [2]])\n    [[4, 0, 6], [2]]\n    \"\"\"\n    return [sublst for sublst in lst if all(i % 2 == 0 for i in sublst)]\n",
  "label": 1
 },
 {
  "idx": 2768,
  "doc": "How to align and compare two elements (sequence) in a list using python",
  "code": "if (x == 'X'):\n    new_disorder.append( \"{} {}\".format(i, seq[i]) )\n",
  "label": 0
 },
 {
  "idx": 2769,
  "doc": "How to access members of an rdf list with rdflib (or plain sparql)",
  "code": "import rdflib\n\nRDF = rdflib.namespace.RDF\n\n#Parse the file\ng = rdflib.Graph()\ng.parse(\"zot.rdf\")\n\n#So that we are sure we get something back\nprint \"Number of triples\",len(g)\n\n#Couple of handy namespaces to use later\nBIB = rdflib.Namespace(\"http://purl.org/net/biblio#\")\nFOAF = rdflib.Namespace(\"http://xmlns.com/foaf/0.1/\")\n\n#Author counter to print at the bottom\ni=0\n\n#Article for wich we want the list of authors\narticle = rdflib.term.URIRef(\"http://www.ncbi.nlm.nih.gov/pubmed/18273724\")\n\n#First loop filters is equivalent to \"get all authors for article x\" \nfor triple in g.triples((article,BIB[\"authors\"],None)):\n\n    #This expresions removes the rdf:type predicate cause we only want the bnodes\n    # of the form http://www.w3.org/1999/02/22-rdf-syntax-ns#_SEQ_NUMBER\n    # where SEQ_NUMBER is the index of the element in the rdf:Seq\n    list_triples = filter(lambda y: RDF['type'] != y[1], g.triples((triple[2],None,None)))\n\n    #We sort the authors by the predicate of the triple - order in sequences do matter ;-)\n    # so \"http://www.w3.org/1999/02/22-rdf-syntax-ns#_435\"[44:] returns 435\n    # and since we want numberic order we do int(x[1][44:]) - (BTW x[1] is the predicate)\n    authors_sorted =  sorted(list_triples,key=lambda x: int(x[1][44:]))\n\n    #We iterate the authors bNodes and we get surname and givenname\n    for author_bnode in authors_sorted:\n        for x in g.triples((author_bnode[2],FOAF['surname'],None)):\n            author_surname = x[2]\n        for y in g.triples((author_bnode[2],FOAF['givenname'],None)):\n            author_name = y[2]\n        print \"author(%s): %s %s\"%(i,author_name,author_surname)\n        i += 1\n",
  "label": 1
 },
 {
  "idx": 2770,
  "doc": "create sublists within sublists in python",
  "code": "def nest_in_pairs(original):\n    return [original[i:i+2] for i in range(0,len(original),2)]\n\nprint nest_in_pairs(nest_in_pairs(original))\n",
  "label": 1
 },
 {
  "idx": 2771,
  "doc": "Draw different sized circles on a map",
  "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({'Total': [20,15,13,1],\n                   'lat': [40,0,-30,50],\n                   'lon': [40,50,60,70], }, \n                  index=['Location {}'.format(i) for i in range(1,5)])\n\ncmap = plt.get_cmap('gist_rainbow_r')\ndf.plot(kind='scatter', x='lon', y='lat', s=df['Total']*50, c=df['Total'], cmap=cmap)\n\nfor idx, row in df.iterrows():\n    x, y = row[['lon','lat']]\n    plt.annotate(\n        str(idx), \n        xy = (x, y), xytext = (-20, 20),\n        textcoords = 'offset points', ha = 'right', va = 'bottom',\n        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))\n\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2772,
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "dot product((a*t+b, c*t+d), (-f, e)) = 0\n-(a*t+b)*f + (c*t+d)*e = 0\n",
  "label": 0
 },
 {
  "idx": 2773,
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "a*(-b) + b*(a) = 0\n",
  "label": 0
 },
 {
  "idx": 2774,
  "doc": "How to find a point (if any) on quadratic Bezier with a given tangent direction?",
  "code": "B'(t) = V\n",
  "label": 0
 },
 {
  "idx": 2775,
  "doc": "Reading serial data in realtime in Python",
  "code": "Read a line which is terminated with end-of-line (eol) character (\\n by default) or until timeout.\n",
  "label": 0
 },
 {
  "idx": 2776,
  "doc": "Fast way to find index of array in array of arrays",
  "code": "import numpy as np\n\ndef asvoid(arr):\n    \"\"\"View the array as dtype np.void (bytes)\n    This collapses ND-arrays to 1D-arrays, so you can perform 1D operations on them.\n    http://stackoverflow.com/a/16216866/190597 (Jaime)\"\"\"    \n    arr = np.ascontiguousarray(arr)\n    return arr.view(np.dtype((np.void, arr.dtype.itemsize * arr.shape[-1])))\n\ndef find_index(arr, x):\n    arr_as1d = asvoid(arr)\n    x = asvoid(x)\n    return np.nonzero(arr_as1d == x)[0]\n\n\narr = np.array([[  1,  15,   0,   0],\n                [ 30,  10,   0,   0],\n                [ 30,  20,   0,   0],\n                [1, 2, 3, 4],\n                [104, 139, 146,  75],\n                [  9,  11, 146,  74],\n                [  9, 138, 146,  75]], dtype='uint8')\n\narr = np.tile(arr,(1221488,1))\nx = np.array([1,2,3,4], dtype='uint8')\n\nprint(find_index(arr, x))\n",
  "label": 1
 },
 {
  "idx": 2777,
  "doc": "Gnuplot: use a function to transform a column of a data file and plot the transformed data and the function",
  "code": "plot \"energy_vs_volume.dat\" using 1:(P($1))\nset table \"output.dat\"\nreplot\nunset table\n",
  "label": 1
 },
 {
  "idx": 2778,
  "doc": "Python method for reading keypress?",
  "code": "from msvcrt import getch\nwhile True:\n    key = ord(getch())\n    if key == 27: #ESC\n        break\n    elif key == 13: #Enter\n        select()\n    elif key == 224: #Special keys (arrows, f keys, ins, del, etc.)\n        key = ord(getch())\n        if key == 80: #Down arrow\n            moveDown()\n        elif key == 72: #Up arrow\n            moveUp()\n",
  "label": 1
 },
 {
  "idx": 2779,
  "doc": "How to send cookie with scrapy CrawlSpider requests?",
  "code": "#!/usr/bin/env python\n# encoding: utf-8\nimport scrapy\n\n\nclass MySpider(scrapy.Spider):\n    name = 'redditscraper'\n    allowed_domains = ['reddit.com', 'imgur.com']\n    start_urls = ['https://www.reddit.com/r/nsfw']\n\n    def request(self, url, callback):\n        \"\"\"\n         wrapper for scrapy.request\n        \"\"\"\n        request = scrapy.Request(url=url, callback=callback)\n        request.cookies['over18'] = 1\n        request.headers['User-Agent'] = (\n            'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, '\n            'like Gecko) Chrome/45.0.2454.85 Safari/537.36')\n        return request\n\n    def start_requests(self):\n        for i, url in enumerate(self.start_urls):\n            yield self.request(url, self.parse_item)\n\n    def parse_item(self, response):\n        titleList = response.css('a.title')\n\n        for title in titleList:\n            item = {}\n            item['url'] = title.xpath('@href').extract()\n            item['title'] = title.xpath('text()').extract()\n            yield item\n        url = response.xpath('//a[@rel=\"nofollow next\"]/@href').extract_first()\n        if url:\n            yield self.request(url, self.parse_item)\n        # you may consider scrapy.pipelines.images.ImagesPipeline :D\n",
  "label": 1
 },
 {
  "idx": 2780,
  "doc": "Require one out of two keyword arguments",
  "code": "if {}.viewkeys() < kargs.viewkeys() < {'dollar', 'euro'}:\n    raise ValueError('One keyword argument is required: dollar=x or euro=x')\n",
  "label": 1
 },
 {
  "idx": 2781,
  "doc": "Python: Data validation using regular expression",
  "code": "import re\ndata = \"asdsaq2323-asds\"\nif re.compile(\"^[a-zA-Z0-9*]+$\").match(data):\n    print \"match\"\nelse:\n    print \"no match\"\n",
  "label": 1
 },
 {
  "idx": 2782,
  "doc": "Iterate over Python list, preserving structure of embedded lists",
  "code": ">>> [[(int(a), int(b), 2) for a, b in pairs] for pairs in l]\n[[(100, 200, 2), (300, 400, 2), (500, 600, 2)], [(100, 200, 2)], [(100, 200, 2)]]\n",
  "label": 1
 },
 {
  "idx": 2783,
  "doc": "python regular expressions in find and replace",
  "code": "r.sub(r'\\1 \\2', s)\n",
  "label": 0
 },
 {
  "idx": 2784,
  "doc": "How to Chage selection field automaticaly in odoo",
  "code": "<group col='4' name=\"doss_grp\" string=\"Dossier de Soumission\" colspan=\"4\" >\n    <field name=\"casier_judiciare\" on_change=\"onchange_casier_judiciare(casier_judiciare, certificat_qual, extrait_role, reference_pro)\"/> \n    <field name=\"certificat_qual\"/> \n    <field name=\"extrait_role\"/> \n    <field name=\"reference_pro\"/> \n    <field name=\"statut_entre\" style=\"width:20%%\"/> \n    <field name=\"etat_dos\"/> \n</group>\n",
  "label": 0
 },
 {
  "idx": 2785,
  "doc": "Matplotlib half black and half white circle",
  "code": "import matplotlib.pyplot as plt\nfrom matplotlib.patches import Wedge\n\ndef main():\n    fig, ax = plt.subplots()\n    dual_half_circle(radius=0.1, angle=90, ax=ax)\n    ax.axis('equal')\n    plt.show()\n\ndef dual_half_circle(radius, angle=0, ax=None, colors=('w','k'), **kwargs):\n    \"\"\"\n    Add two half circles to the axes *ax* (or the current axes) at the lower\n    left corner of the axes with the specified facecolors *colors* rotated at\n    *angle* (in degrees).\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n    kwargs.update(transform=ax.transAxes, clip_on=False)\n    center = (0, 0)\n    theta1, theta2 = angle, angle + 180\n    w1 = Wedge(center, radius, theta1, theta2, fc=colors[0], **kwargs)\n    w2 = Wedge(center, radius, theta2, theta1, fc=colors[1], **kwargs)\n    for wedge in [w1, w2]:\n        ax.add_artist(wedge)\n    return [w1, w2]\n\nmain()\n",
  "label": 1
 },
 {
  "idx": 2786,
  "doc": "How to create a double dictionary in Python?",
  "code": "In [1]: from collections import defaultdict\n\nIn [2]: names = {'Will': 'january', 'Mary': 'february', 'George': 'march', 'Steven': 'april', 'Peter': 'may'}\n\nIn [3]: dates = {'Will': '7/01', 'George': '21/03', 'Steven': '14/03', 'Mary': '2/02', 'Marat': '27/03'}\n\nIn [4]: results = defaultdict(dict)\n\nIn [5]: for name in set(names.keys() + dates.keys()):\n   ...:     if name in names:\n   ...:         results[name]['month'] = names[name]\n   ...:     if name in dates:\n   ...:         results[name]['day'] = dates[name]\n   ...:\n   ...:\n\nIn [6]: for k, v in results.iteritems():\n   ...:     print k, v\n   ...:\n   ...:\nGeorge {'day': '21/03', 'month': 'march'}\nWill {'day': '7/01', 'month': 'january'}\nMarat {'day': '27/03'}\nSteven {'day': '14/03', 'month': 'april'}\nPeter {'month': 'may'}\nMary {'day': '2/02', 'month': 'february'}\n",
  "label": 0
 },
 {
  "idx": 2787,
  "doc": "Multiple Forms and Formsets in CreateView",
  "code": "<form id=\"father-form\" method=\"POST\" enctype=\"multipart/form-data\" action=\".\">\n{% csrf_token %}\n<div class=\"row\">\n  {% for f in form %}\n    <div class=\"span3\">{{ f.label }}<br />{{ f }}\n      {% if f.errors %}\n          {% for v in f.errors %}\n            <br /><span style=\"color:red;\">{{ v }}</span>\n          {% endfor %}\n      {% endif %}\n    </div>\n {% endfor %}\n</div>\n<hr />\n<h2>Sons:</h2>\n<table class=\"table-striped\">\n <table>\n {%  for f2 in inlines %}\n   <tr id=\"{{ f2.prefix }}-row\">\n      {% for i in f2 %}\n        <td>\n           {{ i }}{% if i.errors %}<span style=\"color:red;\">{{ i.errors }}</span>{% endif %}\n        </td>\n      {% endfor %}\n   </tr>\n {% endfor %}\n</table>\n{{ inlines.management_form }}\n<input type=\"submit\" class=\"btn btn-primary\" value=\"Go Go Gadget &rarr;\">\n</form>\n<script type=\"text/javascript\">\n    $(function() {\n        $('#father-form tr').formset({\n            prefix: '{{ inlines.prefix }}'\n        });\n    })\n</script>\n",
  "label": 0
 },
 {
  "idx": 2788,
  "doc": "Multiple Forms and Formsets in CreateView",
  "code": "class CreateFatherView(CreateView):\n    template_name = 'father_create.html'\n    model = Father\n    form_class = FatherForm # the parent object's form\n\n    # On successful form submission\n    def get_success_url(self):\n        return reverse('father-created')\n\n    # Validate forms\n    def form_valid(self, form):\n        ctx = self.get_context_data()\n        inlines = ctx['inlines']\n        if inlines.is_valid() and form.is_valid():\n            self.object = form.save() # saves Father and Children\n            return redirect(self.get_success_url())\n        else:\n            return self.render_to_response(self.get_context_data(form=form))\n\n    def form_invalid(self, form):\n        return self.render_to_response(self.get_context_data(form=form))\n\n    # We populate the context with the forms. Here I'm sending\n    # the inline forms in `inlines`\n    def get_context_data(self, **kwargs):\n        ctx = super(CreateFatherView, self).get_context_data(**kwargs)\n        if self.request.POST:\n            ctx['form'] = FatherForm(self.request.POST)\n            ctx['inlines'] = FatherInlineFormSet(self.request.POST)\n        else:\n            ctx['form'] = Father()\n            ctx['inlines'] = FatherInlineFormSet()\n        return ctx\n",
  "label": 0
 },
 {
  "idx": 2789,
  "doc": "Transform QuadgramCollationFinder into PentagramCollationFinder",
  "code": "import collections\n\ndef make_ngram_ipatterns(n):\n    \"\"\"Make all needed patterns used by *gramCollocationFinder up to n words\"\"\"\n\n    i_patterns = []\n\n    for i in xrange(1, n+1):\n        if i <= 2:\n            i_patterns.append('i' * i)\n\n        else:\n            for j in xrange(2**(i-2)):\n                 bin_str = '{0:0{1}b}'.format(j, i-2)\n                 ix_pattern = bin_str.replace('0', 'x').replace('1', 'i')\n                 i_patterns.append('i{}i'.format(ix_pattern))\n\n    return i_patterns\n\ndef make_ngram_npatterns(n):\n    \"\"\"Make all needed n-patterings used by *gramCollocationFinder up to n words\"\"\"\n    all_ipatterns = make_ngram_ipatterns(n)\n\n    npatterns = []\n\n    for ipattern in all_ipatterns:\n         i_order = sum(c == 'i' for c in ipattern)\n         i_length = len(ipattern)\n         for j in xrange(n - i_length+1):\n             npattern = 'n_{}{}{}'.format('x'* j,\n                                           ipattern ,\n                                           'x'* (n - i_length - j))\n\n             npatterns.append((i_order, ipattern, npattern))\n\n    return sorted(npatterns)\n\n\ndef main():\n\n    n = 5\n\n    all_ipatterns = make_ngram_ipatterns(n)\n\n    print '\\n'.join(make_ngram_ipatterns(n))\n\n    for order, ipattern, npattern in make_ngram_npatterns(n):\n         wparams = ', '.join('w{}'.format(i+1)\n                                for i, c in enumerate(npattern[2:])\n                                if c == 'i'\n                            )\n         print('order: {1:2}   ipattern: {2:{0}s}   npattern: {3}'\n               ' ->  {3} = self.{2}({4})'.format(\n                   n, order, ipattern, npattern, wparams))\n\n\nif __name__ == '__main__':\n    main()\n",
  "label": 1
 },
 {
  "idx": 2790,
  "doc": "Transform QuadgramCollationFinder into PentagramCollationFinder",
  "code": "i\nii\nixi\niii\nixxi\nixii\niixi\niiii\nixxxi\nixxii\nixixi\nixiii\niixxi\niixii\niiixi\niiiii\norder:  1   ipattern: i       npattern: n_ixxxx ->  n_ixxxx = self.i(w1)\norder:  1   ipattern: i       npattern: n_xixxx ->  n_xixxx = self.i(w2)\norder:  1   ipattern: i       npattern: n_xxixx ->  n_xxixx = self.i(w3)\norder:  1   ipattern: i       npattern: n_xxxix ->  n_xxxix = self.i(w4)\norder:  1   ipattern: i       npattern: n_xxxxi ->  n_xxxxi = self.i(w5)\norder:  2   ipattern: ii      npattern: n_iixxx ->  n_iixxx = self.ii(w1, w2)\norder:  2   ipattern: ii      npattern: n_xiixx ->  n_xiixx = self.ii(w2, w3)\norder:  2   ipattern: ii      npattern: n_xxiix ->  n_xxiix = self.ii(w3, w4)\norder:  2   ipattern: ii      npattern: n_xxxii ->  n_xxxii = self.ii(w4, w5)\norder:  2   ipattern: ixi     npattern: n_ixixx ->  n_ixixx = self.ixi(w1, w3)\norder:  2   ipattern: ixi     npattern: n_xixix ->  n_xixix = self.ixi(w2, w4)\norder:  2   ipattern: ixi     npattern: n_xxixi ->  n_xxixi = self.ixi(w3, w5)\norder:  2   ipattern: ixxi    npattern: n_ixxix ->  n_ixxix = self.ixxi(w1, w4)\norder:  2   ipattern: ixxi    npattern: n_xixxi ->  n_xixxi = self.ixxi(w2, w5)\norder:  2   ipattern: ixxxi   npattern: n_ixxxi ->  n_ixxxi = self.ixxxi(w1, w5)\norder:  3   ipattern: iii     npattern: n_iiixx ->  n_iiixx = self.iii(w1, w2, w3)\norder:  3   ipattern: iii     npattern: n_xiiix ->  n_xiiix = self.iii(w2, w3, w4)\norder:  3   ipattern: iii     npattern: n_xxiii ->  n_xxiii = self.iii(w3, w4, w5)\norder:  3   ipattern: iixi    npattern: n_iixix ->  n_iixix = self.iixi(w1, w2, w4)\norder:  3   ipattern: iixi    npattern: n_xiixi ->  n_xiixi = self.iixi(w2, w3, w5)\norder:  3   ipattern: iixxi   npattern: n_iixxi ->  n_iixxi = self.iixxi(w1, w2, w5)\norder:  3   ipattern: ixii    npattern: n_ixiix ->  n_ixiix = self.ixii(w1, w3, w4)\norder:  3   ipattern: ixii    npattern: n_xixii ->  n_xixii = self.ixii(w2, w4, w5)\norder:  3   ipattern: ixixi   npattern: n_ixixi ->  n_ixixi = self.ixixi(w1, w3, w5)\norder:  3   ipattern: ixxii   npattern: n_ixxii ->  n_ixxii = self.ixxii(w1, w4, w5)\norder:  4   ipattern: iiii    npattern: n_iiiix ->  n_iiiix = self.iiii(w1, w2, w3, w4)\norder:  4   ipattern: iiii    npattern: n_xiiii ->  n_xiiii = self.iiii(w2, w3, w4, w5)\norder:  4   ipattern: iiixi   npattern: n_iiixi ->  n_iiixi = self.iiixi(w1, w2, w3, w5)\norder:  4   ipattern: iixii   npattern: n_iixii ->  n_iixii = self.iixii(w1, w2, w4, w5)\norder:  4   ipattern: ixiii   npattern: n_ixiii ->  n_ixiii = self.ixiii(w1, w3, w4, w5)\norder:  5   ipattern: iiiii   npattern: n_iiiii ->  n_iiiii = self.iiiii(w1, w2, w3, w4, w5)\n",
  "label": 0
 },
 {
  "idx": 2791,
  "doc": "Search for a key in a nested Python dictionary",
  "code": "idnum = 11\nprint sum(idnum in idnumber for idnumber in A.itervalues())\n",
  "label": 0
 },
 {
  "idx": 2792,
  "doc": "How to extract literal words from a consecutive string efficiently?",
  "code": "The code\nimport math\n\n# Build a cost dictionary, assuming Zipf's law and cost = -math.log(probability).\nwords = open(\"words-by-frequency.txt\").read().split()\nwordcost = dict((k,math.log((i+1)*math.log(len(words)))) for i,k in enumerate(words))\nmaxword = max(len(x) for x in words)\n\ndef infer_spaces(s):\n    \"\"\"Uses dynamic programming to infer the location of spaces in a string\n    without spaces.\"\"\"\n\n    # Find the best match for the i first characters, assuming cost has\n    # been built for the i-1 first characters.\n    # Returns a pair (match_cost, match_length).\n    def best_match(i):\n        candidates = enumerate(reversed(cost[max(0, i-maxword):i]))\n        return min((c + wordcost.get(s[i-k-1:i], 9e999), k+1) for k,c in candidates)\n\n    # Build the cost array.\n    cost = [0]\n    for i in range(1,len(s)+1):\n        c,k = best_match(i)\n        cost.append(c)\n\n    # Backtrack to recover the minimal-cost string.\n    out = []\n    i = len(s)\n    while i>0:\n        c,k = best_match(i)\n        assert c == cost[i]\n        out.append(s[i-k:i])\n        i -= k\n\n    return \" \".join(reversed(out))\n",
  "label": 1
 },
 {
  "idx": 2793,
  "doc": "Remove unnecessary whitespace from Jinja rendered template",
  "code": "app.jinja_env.trim_blocks = True\napp.jinja_env.lstrip_blocks = True\n",
  "label": 1
 },
 {
  "idx": 2794,
  "doc": "Reshape for array multiplication/division in python",
  "code": "x.reshape((-1,1)) * y\n",
  "label": 1
 },
 {
  "idx": 2795,
  "doc": "Get item with value from tuple in python",
  "code": "results = [('object%d' % i, '111.111.5.%d' % i) for i in range(1,8)]\n\nkey = '111.111.5.4'\nresult = None\nfor t in results:\n    if t[1] == key:\n        result = t\n\nprint result\n",
  "label": 1
 },
 {
  "idx": 2796,
  "doc": "Go through every possible combination of an array python",
  "code": ">>> from itertools import permutations\n>>> [i for i in permutations(range(1, 5), 4)]\n[(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]\n",
  "label": 1
 },
 {
  "idx": 2797,
  "doc": "Go through every possible combination of an array python",
  "code": ">>> from itertools import permutations\n>>> list(permutations(range(1, 5), 4))\n[(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]\n",
  "label": 1
 },
 {
  "idx": 2798,
  "doc": "use scikit-learn to classify into multiple categories",
  "code": "import numpy as np\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.multiclass import OneVsRestClassifier\n\nX_train = np.array([\"new york is a hell of a town\",\n                    \"new york was originally dutch\",\n                    \"the big apple is great\",\n                    \"new york is also called the big apple\",\n                    \"nyc is nice\",\n                    \"people abbreviate new york city as nyc\",\n                    \"the capital of great britain is london\",\n                    \"london is in the uk\",\n                    \"london is in england\",\n                    \"london is in great britain\",\n                    \"it rains a lot in london\",\n                    \"london hosts the british museum\",\n                    \"new york is great and so is london\",\n                    \"i like london better than new york\"])\ny_train = [[0],[0],[0],[0],[0],[0],[1],[1],[1],[1],[1],[1],[0,1],[0,1]]\nX_test = np.array(['nice day in nyc',\n                   'welcome to london',\n                   'hello welcome to new york. enjoy it here and london too'])   \ntarget_names = ['New York', 'London']\n\nclassifier = Pipeline([\n    ('vectorizer', CountVectorizer(min_n=1,max_n=2)),\n    ('tfidf', TfidfTransformer()),\n    ('clf', OneVsRestClassifier(LinearSVC()))])\nclassifier.fit(X_train, y_train)\npredicted = classifier.predict(X_test)\nfor item, labels in zip(X_test, predicted):\n    print '%s => %s' % (item, ', '.join(target_names[x] for x in labels))\n",
  "label": 1
 },
 {
  "idx": 2799,
  "doc": "Extracting URL parameters into Pandas DataFrame",
  "code": ">>> pd.DataFrame({p: [d.get(p) for d in params] \n                  for p in ['param1', 'param2', 'param3', 'param4']})\n     param1    param2    param3    param4\n0   [apple]  [tomato]  [carrot]      None\n1  [banana]      None  [potato]   [berry]\n2      None   [apple]  [tomato]  [carrot]\n",
  "label": 1
 },
 {
  "idx": 2800,
  "doc": "Finding start and stops of consecutive values block in Python/Numpy/Pandas",
  "code": "def get_nans_blocks_length(a):\n    \"\"\"\n    Returns 1D length of np.nan s block in sequence depth wise (last axis).\n    \"\"\"\n    nan_mask = np.isnan(a)\n    start_nans_mask = np.concatenate((np.resize(nan_mask[...,0],a.shape[:-1]+(1,)),\n                                 np.logical_and(np.logical_not(nan_mask[...,:-1]), nan_mask[...,1:])\n                                 ), axis=a.ndim-1)\n    stop_nans_mask = np.concatenate((np.logical_and(nan_mask[...,:-1], np.logical_not(nan_mask[...,1:])),\n                                np.resize(nan_mask[...,-1], a.shape[:-1]+(1,))\n                                ), axis=a.ndim-1)\n\n    start_idxs = np.where(start_nans_mask)\n    stop_idxs = np.where(stop_nans_mask)\n    return stop_idxs[-1] - start_idxs[-1] + 1\n",
  "label": 0
 },
 {
  "idx": 2801,
  "doc": "First non-null value per row from a list of Pandas columns",
  "code": "In [160]:\ndef func(x):\n    if x.values[0] is None:\n        return None\n    else:\n        return df.loc[x.name, x.values[0]]\npd.DataFrame(df.apply(lambda x: x.first_valid_index(), axis=1)).apply(func,axis=1)\n\u200b\nOut[160]:\n0     1\n1     3\n2     4\n3   NaN\ndtype: float64\n",
  "label": 1
 },
 {
  "idx": 2802,
  "doc": "check if variable is dataframe",
  "code": "if obj.__class__.__name__ = \"MyInheritedClass\":\n    expect_problems_some_day()\n",
  "label": 0
 },
 {
  "idx": 2803,
  "doc": "pandas multiindex assignment from another dataframe",
  "code": "df.loc['A', :] = df_.values\n",
  "label": 0
 },
 {
  "idx": 2804,
  "doc": "pandas multiindex assignment from another dataframe",
  "code": "A a  0.229970  0.730824  0.784356\n  b  0.584390  0.628337  0.318222\n  c  0.257192  0.624273  0.221279\n  d  0.787023  0.056342  0.240735\nB a       NaN       NaN       NaN\n  b       NaN       NaN       NaN\n  c       NaN       NaN       NaN\n  d       NaN       NaN       NaN\n",
  "label": 0
 },
 {
  "idx": 2805,
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "A = 1 / (2 * sigma^2)\nB = mu / (2 * sigma^2)\nC = mu^2 / sigma^2 + ln(height)\n",
  "label": 0
 },
 {
  "idx": 2806,
  "doc": "How can I perform a least-squares fitting over multiple data sets fast?",
  "code": "def parallel_main():\n    import multiprocessing\n    p = multiprocessing.Pool()\n    x, data = generate_data(256, 262144)\n    args = itertools.izip(itertools.repeat(x), data.T)\n    model = p.imap(parallel_func, args, chunksize=500)\n    sigma, mu, height = [np.array(item) for item in zip(*model)]\n    prediction = gaussian(x, sigma, mu, height)\n\ndef parallel_func(args):\n    return invert(*args)\n",
  "label": 0
 },
 {
  "idx": 2807,
  "doc": "Django - access foreign key data in an annotated query",
  "code": ">>> from so.models import *\n>>> from django.contrib.auth.models import User\n>>> u1 = User()\n>>> u1.username='user1'\n>>> u1.save()\n>>> u2 = User()\n>>> u2.username='user2'\n>>> u2.save()\n>>> u3=User()\n>>> u3.username='user3'\n>>> u3.save()\n>>> # so we have 3 users now\n>>> r1 = Relationship()\n>>> r1.from_user=u1\n>>> r1.to_user=u2\n>>> r1.save()\n>>> r2=Relationship()\n>>> r2.from_user=u1\n>>> r2.to_user=u3\n>>> r2.save()\n>>> r3=Relationship()\n>>> r3.from_user=u2\n>>> r3.to_user=u3\n>>> r3.save()\n>>> rels = Relationship.objects.all()\n>>> rels.count()\n3\n>>> # we have 3 relationships: user1 follows user2, user1 follows user3, user2 follows user3\n>>> users = User.objects.annotate(num_followers=Count('to_users')).order_by('-num_followers')\n>>> for user in users:\n>>>     print user.username, user.num_followers\nuser3 2\nuser2 1\nuser1 0\n",
  "label": 0
 },
 {
  "idx": 2808,
  "doc": "Is there a standard way to store XY data in python?",
  "code": "In [175]: import numpy as np\n\nIn [176]: x = np.random.random(10)\n\nIn [177]: y = np.random.random(10)\n\nIn [179]: zip(x,y)\nOut[179]: \n[(0.27432965895978034, 0.034808254176554643),\n (0.10231729328413885, 0.3311112896885462),\n (0.87724361175443311, 0.47852682944121905),\n (0.24291769332378499, 0.50691735432715967),\n (0.47583427680221879, 0.04048957803763753),\n (0.70710641602121627, 0.27331443495117813),\n (0.85878694702522784, 0.61993945461613498),\n (0.28840423235739054, 0.11954319357707233),\n (0.22084849730366296, 0.39880927226467255),\n (0.42915612628398903, 0.19197320645915561)]\n\nIn [180]: data = np.array( zip(x,y), dtype=[('x',float),('y',float)])\n\nIn [181]: data['x']\nOut[181]: \narray([ 0.27432966,  0.10231729,  0.87724361,  0.24291769,  0.47583428,\n        0.70710642,  0.85878695,  0.28840423,  0.2208485 ,  0.42915613])\n\nIn [182]: data['y']\nOut[182]: \narray([ 0.03480825,  0.33111129,  0.47852683,  0.50691735,  0.04048958,\n        0.27331443,  0.61993945,  0.11954319,  0.39880927,  0.19197321])\n\nIn [183]: data[0]\nOut[183]: (0.27432965895978034, 0.03480825417655464)\n",
  "label": 1
 },
 {
  "idx": 2809,
  "doc": "Extracting a feature by feature name in scikit dict vectorizer",
  "code": "from sklearn.feature_extraction import DictVectorizer\n>>> v = DictVectorizer(sparse=False)\n>>> D = [{'foo': 1, 'bar': 2}, {'foo': 3, 'baz': 1}]\n>>> X = v.fit_transform(D)\n>>> X\narray([[ 2.,  0.,  1.],\n       [ 0.,  1.,  3.]])\n>>> v.inverse_transform(X) == [{'bar': 2.0, 'foo': 1.0}, {'baz': 1.0, 'foo': 3.0}]\nTrue\n",
  "label": 0
 },
 {
  "idx": 2810,
  "doc": "Python regular expression: get result without the search string used",
  "code": "StartTime = re.findall(r\"StartTime (\\d\\.\\d{2})\", text)\n",
  "label": 1
 },
 {
  "idx": 2811,
  "doc": "python tkinter calender, placing the numbers",
  "code": "self.labels[i][j].config(text='foo')\n",
  "label": 0
 },
 {
  "idx": 2812,
  "doc": "Python-like list comprehension in Java",
  "code": "public static <In, Out> List<Out> map(List<In> in, Func<In, Out> f) {\n    List<Out> out = new ArrayList<Out>(in.size());\n    for (In inObj : in) {\n        out.add(f.apply(inObj));\n    }\n    return out;\n}\n// ...\nList<String> myList = ...;\nList<String> lowerCased = map(myList, new Func<String, String>() {\n    public String apply(String in) {\n        return in.toLowerCase();\n    }\n});\n",
  "label": 0
 },
 {
  "idx": 2813,
  "doc": "Mixed content (float || unicode) for database column",
  "code": "from sqlalchemy import create_engine, Column, Integer, SmallInteger, String, ForeignKey, Table, Index\nfrom sqlalchemy.orm import relationship, scoped_session, sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n# Configure test data SA\nengine = create_engine('sqlite:///:memory:', echo=True)\nsession = scoped_session(sessionmaker(bind=engine))\nBase = declarative_base()\nBase.query = session.query_property()\n\nclass _BaseMixin(object):\n    \"\"\" Just a helper mixin class to set properties on object creation.  \n    Also provides a convenient default __repr__() function, but be aware that \n    also relationships are printed, which might result in loading relations.\n    \"\"\"\n    def __init__(self, **kwargs):\n        for k,v in kwargs.items():\n            setattr(self, k, v)\n\n    def __repr__(self):\n        return \"<%s(%s)>\" % (self.__class__.__name__, \n            ', '.join('%s=%r' % (k, self.__dict__[k]) \n                for k in sorted(self.__dict__) if '_sa_' != k[:4] and '_backref_' != k[:9])\n            )\n\n### AnswerOption hierarchy\nclass AnswerOption(Base, _BaseMixin):\n    \"\"\" Possible answer options (choice or any other configuration).  \"\"\"\n    __tablename__ = u'answer_options'\n    id = Column(Integer, primary_key=True)\n    question_id = Column(Integer, ForeignKey('questions.id'), nullable=False)\n    value = Column(Integer, nullable=False)\n    type = Column(String(10), nullable=False)\n    __mapper_args__ = {'polymorphic_on': type}\n\nclass AnswerOptionChoice(AnswerOption):\n    \"\"\" A possible answer choice for the question.  \"\"\"\n    text = Column(String, nullable=True) # when mapped to single-table, must be NULL in the DB\n    __mapper_args__ = {'polymorphic_identity': 'choice'}\n\nclass AnswerOptionInput(AnswerOption):\n    \"\"\" A configuration entry for the input-type of questions.  \"\"\"\n    input = Column(Integer, nullable=True) # when mapped to single-table, must be NULL in the DB\n    __mapper_args__ = {'polymorphic_identity': 'input'}\n\n### Question hierarchy\nclass Question(Base, _BaseMixin):\n    \"\"\" Base class for all types of questions.  \"\"\"\n    __tablename__ = u'questions'\n    id = Column(Integer, primary_key=True)\n    text = Column(String, nullable=False)\n    type = Column(String(10), nullable=False)\n    answer_options = relationship(AnswerOption, backref='question')\n    __mapper_args__ = {'polymorphic_on': type}\n\n    def get_answer_value(self, answer):\n        \"\"\" function to get a value of the answer to the question.  \"\"\"\n        raise Exception('must be implemented in a subclass')\n\nclass QuestionChoice(Question):\n    \"\"\" Single-choice question.  \"\"\"\n    __mapper_args__ = {'polymorphic_identity': 'choice'}\n\n    def get_answer_value(self, answer):\n        assert isinstance(answer, AnswerChoice)\n        assert answer.answer_option in self.answer_options, \"Incorrect choice\"\n        return answer.answer_option.value\n\nclass QuestionInput(Question):\n    \"\"\" Input type question.  \"\"\"\n    __mapper_args__ = {'polymorphic_identity': 'input'}\n\n    def get_answer_value(self, answer):\n        assert isinstance(answer, AnswerInput)\n        value_list = sorted([(_i.input, _i.value) for _i in self.answer_options])\n        if not value_list:\n            raise Exception(\"no input is specified for the question {0}\".format(self))\n        if answer.answer_input <= value_list[0][0]:\n            return value_list[0][1]\n        elif answer.answer_input >= value_list[-1][0]:\n            return value_list[-1][1]\n        else: # interpolate in the range:\n            for _pos in range(len(value_list)-1):\n                if answer.answer_input == value_list[_pos+1][0]:\n                    return value_list[_pos+1][1]\n                elif answer.answer_input < value_list[_pos+1][0]:\n                    # interpolate between (_pos, _pos+1)\n                    assert (value_list[_pos][0] != value_list[_pos+1][0])\n                    return value_list[_pos][1] + (value_list[_pos+1][1] - value_list[_pos][1]) * (answer.answer_input - value_list[_pos][0]) / (value_list[_pos+1][0] - value_list[_pos][0])\n        assert False, \"should never reach here\"\n\n### Answer hierarchy\nclass Answer(Base, _BaseMixin):\n    \"\"\" Represents an answer to the question.  \"\"\"\n    __tablename__ = u'answers'\n    id = Column(Integer, primary_key=True)\n    type = Column(String(10), nullable=False)\n    question_id = Column(Integer, ForeignKey('questions.id'), nullable=True) # when mapped to single-table, must be NULL in the DB\n    question = relationship(Question)\n    test_id = Column(Integer, ForeignKey('tests.id'), nullable=True) # @todo: decide if allow answers without a Test\n    __mapper_args__ = {'polymorphic_on': type}\n\n    def get_value(self):\n        return self.question.get_answer_value(self)\n\nclass AnswerChoice(Answer):\n    \"\"\" Represents an answer to the *Choice* question.  \"\"\"\n    __mapper_args__ = {'polymorphic_identity': 'choice'}\n    answer_option_id = Column(Integer, ForeignKey('answer_options.id'), nullable=True) \n    answer_option = relationship(AnswerOption, single_parent=True)\n\nclass AnswerInput(Answer):\n    \"\"\" Represents an answer to the *Choice* question.  \"\"\"\n    __mapper_args__ = {'polymorphic_identity': 'input'}\n    answer_input = Column(Integer, nullable=True) # when mapped to single-table, must be NULL in the DB\n\n### other classes (Questionnaire, Test) and helper tables\nassociation_table = Table('questionnaire_question', Base.metadata,\n    Column('id', Integer, primary_key=True),\n    Column('questionnaire_id', Integer, ForeignKey('questions.id')),\n    Column('question_id', Integer, ForeignKey('questionnaires.id'))\n)\n_idx = Index('questionnaire_question_u_nci', \n            association_table.c.questionnaire_id, \n            association_table.c.question_id, \n            unique=True)\n\nclass Questionnaire(Base, _BaseMixin):\n    \"\"\" Questionnaire is a compilation of questions.  \"\"\"\n    __tablename__ = u'questionnaires'\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    # @note: could use relationship with order or even add question number\n    questions = relationship(Question, secondary=association_table)\n\nclass Test(Base, _BaseMixin):\n    \"\"\" Test is a 'test' - set of answers for a given questionnaire. \"\"\"\n    __tablename__ = u'tests'\n    id = Column(Integer, primary_key=True)\n    # @todo: add user name or reference\n    questionnaire_id = Column(Integer, ForeignKey('questionnaires.id'), nullable=False)\n    questionnaire = relationship(Questionnaire, single_parent=True)\n    answers = relationship(Answer, backref='test')\n    def total_points(self):\n        return sum(ans.get_value() for ans in self.answers)\n\n# -- end of model definition --\n\nBase.metadata.create_all(engine)\n\n# -- insert test data --\nprint '-' * 20 + ' Insert TEST DATA ...'\nq1 =  QuestionChoice(text=\"What is your fav pet?\")\nq1c1 = AnswerOptionChoice(text=\"cat\", value=1, question=q1)\nq1c2 = AnswerOptionChoice(text=\"dog\", value=2, question=q1)\nq1c3 = AnswerOptionChoice(text=\"caiman\", value=3)\nq1.answer_options.append(q1c3)\na1 = AnswerChoice(question=q1, answer_option=q1c2)\nassert a1.get_value() == 2\nsession.add(a1)\nsession.flush()\n\nq2 =  QuestionInput(text=\"How many liters of beer do you drink a day?\")\nq2i1 = AnswerOptionInput(input=0, value=0, question=q2)\nq2i2 = AnswerOptionInput(input=1, value=1, question=q2)\nq2i3 = AnswerOptionInput(input=3, value=5)\nq2.answer_options.append(q2i3)\n\n# test interpolation routine\n_test_ip = ((-100, 0),\n            (0, 0),\n            (0.5, 0.5),\n            (1, 1),\n            (2, 3),\n            (3, 5),\n            (100, 5)\n)\na2 = AnswerInput(question=q2, answer_input=None)\nfor _inp, _exp in _test_ip:\n    a2.answer_input = _inp\n    _res = a2.get_value()\n    assert _res == _exp, \"{0}: {1} != {2}\".format(_inp, _res, _exp)\na2.answer_input = 2\nsession.add(a2)\nsession.flush()\n\n# create a Questionnaire and a Test\nqn = Questionnaire(name='test questionnaire')\nqn.questions.append(q1)\nqn.questions.append(q2)\nsession.add(qn)\nte = Test(questionnaire=qn)\nte.answers.append(a1)\nte.answers.append(a2)\nassert te.total_points() == 5\nsession.add(te)\nsession.flush()\n\n# -- other tests --\nprint '-' * 20 + ' TEST QUERIES ...'\nsession.expunge_all() # clear the session cache\na1 = session.query(Answer).get(1)\nassert a1.get_value() == 2 # @note: will load all dependant objects (question and answer_options) automatically to compute the value\na2 = session.query(Answer).get(2)\nassert a2.get_value() == 3 # @note: will load all dependant objects (question and answer_options) automatically to compute the value\nte = session.query(Test).get(1)\nassert te.total_points() == 5\n",
  "label": 0
 },
 {
  "idx": 2814,
  "doc": "Mixed content (float || unicode) for database column",
  "code": "CREATE TABLE questions (\n    id INTEGER NOT NULL, \n    text VARCHAR NOT NULL, \n    type VARCHAR(10) NOT NULL, \n    PRIMARY KEY (id)\n)\n\nCREATE TABLE answer_options (\n    id INTEGER NOT NULL, \n    question_id INTEGER NOT NULL, \n    value INTEGER NOT NULL, \n    type VARCHAR(10) NOT NULL, \n    text VARCHAR, \n    input INTEGER, \n    PRIMARY KEY (id), \n    FOREIGN KEY(question_id) REFERENCES questions (id)\n)\n\nCREATE TABLE answers (\n    id INTEGER NOT NULL, \n    type VARCHAR(10) NOT NULL, \n    question_id INTEGER, \n    test_id INTEGER, \n    answer_option_id INTEGER, \n    answer_input INTEGER, \n    PRIMARY KEY (id), \n    FOREIGN KEY(question_id) REFERENCES questions (id), \n    FOREIGN KEY(answer_option_id) REFERENCES answer_options (id), \n    --FOREIGN KEY(test_id) REFERENCES tests (id)\n)\n",
  "label": 0
 },
 {
  "idx": 2815,
  "doc": "Override python logging for test efficiency",
  "code": "class MockLogger(object):\n    def debug(msg, *args, **kwargs): pass\n    def info(msg, *args, **kwargs): pass\n    def warn(msg, *args, **kwargs): pass\n    def error(msg, *args, **kwargs): pass\n    def critical(msg, *args, **kwargs): pass\n\nclass Test(unittest.TestCase):\n    def test_func(self):\n        _logger1=testmodule.logger1\n        _logger2=testmodule.logger2\n        testmodule.logger1=MockLogger()\n        testmodule.logger2=MockLogger()\n        # perform test\n        testmodule.logger1=_logger1\n        testmodule.logger2=_logger2\n",
  "label": 1
 },
 {
  "idx": 2816,
  "doc": "read snippet of file with regular expressions from text file in python",
  "code": "matching = False\nfound = []\nwith open('fileinput.txt', 'r') as file\n    it = iter(file)\n    for line in it:\n        if matching:\n            if line.strip() == '':\n                break\n            else:\n                found.append(line)\n        elif line.endswith('PATTERN:'):\n            for _ in range(6):\n                next(it)\n            matching = True\n",
  "label": 1
 },
 {
  "idx": 2817,
  "doc": "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?",
  "code": "[<li class=\"nv-talk\"><a href=\"/wiki/Template_talk:Data_structures\" title=\"Template talk:Data    structures\"><span style=\";;background:none transparent;border:none;;\"    title=\"Discuss this template\">t</span></a></li>]\n",
  "label": 0
 },
 {
  "idx": 2818,
  "doc": "how to get the class type in lua / translation from python",
  "code": "local A = torch.class('ClassA')\nfunction A:__init(val)\n    self.val = val\nend\n\nlocal B, parent = torch.class('ClassB', 'ClassA')\nfunction B:__init(val)\n    parent.__init(self, val)\nend\n\nb = ClassB(5)\ntype(b)       == 'table' # Because the class was written in Lua\ntorch.type(b) == 'ClassB'\nb:type() # exception; Custom Torch classes have no :type() method by defauld\n",
  "label": 1
 },
 {
  "idx": 2819,
  "doc": "how to get the class type in lua / translation from python",
  "code": "type('Hello world')                    == 'string'\ntype(3.14)                             == 'number'\ntype(true)                             == 'boolean'\ntype(nil)                              == 'nil'\ntype(print)                            == 'function'\ntype(coroutine.create(function() end)) == 'thread'\ntype({})                               == 'table'\ntype(torch.Tensor())                   == 'userdata'\n",
  "label": 1
 },
 {
  "idx": 2820,
  "doc": "how to get the class type in lua / translation from python",
  "code": "t = torch.Tensor()\ntype(t)       == 'userdata' # Because the class was written in C\ntorch.type(t) == 'torch.DoubleTensor'\n# or\nt:type()      == 'torch.DoubleTensor'\n",
  "label": 1
 },
 {
  "idx": 2821,
  "doc": "Finding if a number is a perfect square",
  "code": "def isSquare(x):\n    if x == 1:\n        return True\n    low = 0\n    high = x // 2\n    root = high\n    while root * root != x:\n       root = (low + high) // 2\n       if low + 1 >= high:\n          return False\n       if root * root > x:\n          high = root\n       else:\n          low = root\n    return True\n",
  "label": 0
 },
 {
  "idx": 2822,
  "doc": "Compile Python 2.5.5 on OS X 10.6",
  "code": "$ python2.5\nPython 2.5.5 (r255:77872, Sep 29 2010, 10:23:54) \n[GCC 4.0.1 (Apple Inc. build 5494)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nModule readline not available.\n>>> \n",
  "label": 0
 },
 {
  "idx": 2823,
  "doc": "How can I use pyparsing to data from VC++ autoexp.dat?",
  "code": "from pyparsing import *\n\nLPAR,RPAR,COMMA,HASH,COLON = map(Suppress, '(),#:')\nident = Word(alphas+'_', alphanums+'_')\nfnumber = Regex(r'[+-]?\\d+\\.\\d*').setParseAction(lambda t:float(t[0]))\ninumber = Regex(r'[+-]?\\d+').setParseAction(lambda t:int(t[0]))\nnumber = fnumber | inumber\nref_name = Combine(\"$\" + delimitedList(ident, delim=oneOf(\". ->\"), combine=True))\nnamed_ref = Group(ident(\"name\") + COLON + ref_name(\"ref\"))\nunnamed_ref = Group(ref_name(\"ref\"))\n\nIF, ELSE = map(Keyword, \"if else\".split())\n\nstmt = Forward()\n\ndecl = named_ref | unnamed_ref\n\ndef setType(typ):\n    def parseAction(tokens):\n        tokens['type'] = typ\n    return parseAction\ncond = operatorPrecedence(ref_name | number,\n            [\n            (oneOf(\"< == > <= >= !=\"), 2, opAssoc.LEFT),\n            ])\nif_else = Group(HASH + IF + LPAR + cond(\"condition\") + RPAR + \n                    LPAR + stmt(\"then\") + RPAR + \n                    Optional(HASH + ELSE + LPAR + stmt(\"else\") + RPAR))\n\nif_else.setParseAction(setType(\"IF_ELSE\"))\ndecl.setParseAction(setType(\"DECL\"))\n\nstmt << Group(decl | if_else | (HASH + LPAR + delimitedList(stmt) + RPAR))\n\nsection = Group(ident(\"section_name\") + LPAR + Group(ZeroOrMore(stmt))(\"section_body\") + RPAR)\n\nparser = OneOrMore(section)\n\n\nsource = \"\"\"\npreview \n( \n    #if ($e.d.stateFlags == 0) ( \n        $e.d \n    ) #else ( \n        #( $e.d->scheme, $e.d->host, $e.d->path ) \n    ) \n) \nchildren \n( \n    #( \n        scheme: $c.d->scheme, \n        host: $c.d->host, \n        path: $c.d->path, \n        username: $c.d->userName, \n        password: $c.d->password, \n        encodedOriginal: $c.d->encodedOriginal, \n        query: $c.d->query, \n        fragment: $c.d->fragment \n    ) \n)\"\"\"\n\n\ndef dump_stmt(tokens, depth=0):\n    if 'type' in tokens:\n        print tokens.type\n        print tokens[0].dump(depth=depth)\n    else:\n        for stmt in tokens:\n            dump_stmt(stmt, depth=depth+1)\n\nfor sec in parser.parseString(source):\n    print sec.dump()\n    print sec.section_name\n    for statement in sec.section_body:\n        dump_stmt(statement)\n    print\n",
  "label": 1
 },
 {
  "idx": 2824,
  "doc": "Python - \"properly\" organise (spread out) x and y data",
  "code": "from __future__ import division\ndef spreadout(X, Y):\n    ratio = len(X) / len(Y)\n    result = []\n    while X or Y:\n        if not Y or len(X)/len(Y) >= ratio:\n            result.append(X.pop())\n        else:\n            result.append(Y.pop())\n    return result\n",
  "label": 1
 },
 {
  "idx": 2825,
  "doc": "Python Pandas Use if-else to populate new column",
  "code": "   col2  col3\n0     0     0\n1     1     1\n2     0     0\n3     0     0\n4     3     1\n5     0     0\n6     4     1\n",
  "label": 0
 },
 {
  "idx": 2826,
  "doc": "Convert pandas datetime objects",
  "code": "In [8]:\ndf['Time'] = df['Date'].dt.time\ndf\n\nOut[8]:\n            Timestamp                    Date             Time\n0  20160208_095900.51 2016-02-08 09:59:00.510  09:59:00.510000\n1  20160208_095901.51 2016-02-08 09:59:01.510  09:59:01.510000\n2  20160208_095902.51 2016-02-08 09:59:02.510  09:59:02.510000\n3  20160208_095903.51 2016-02-08 09:59:03.510  09:59:03.510000\n4  20160208_095904.51 2016-02-08 09:59:04.510  09:59:04.510000\n5  20160208_095905.51 2016-02-08 09:59:05.510  09:59:05.510000\n6  20160208_095906.51 2016-02-08 09:59:06.510  09:59:06.510000\n7  20160208_095907.51 2016-02-08 09:59:07.510  09:59:07.510000\n8  20160208_095908.51 2016-02-08 09:59:08.510  09:59:08.510000\n9  20160208_095909.51 2016-02-08 09:59:09.510  09:59:09.510000\n",
  "label": 1
 },
 {
  "idx": 2827,
  "doc": "Convert pandas datetime objects",
  "code": "In [7]:\ndf['Time'] = df['Date'].dt.strftime('%H:%M:%S')\ndf\n\nOut[7]:\n            Timestamp                    Date      Time\n0  20160208_095900.51 2016-02-08 09:59:00.510  09:59:00\n1  20160208_095901.51 2016-02-08 09:59:01.510  09:59:01\n2  20160208_095902.51 2016-02-08 09:59:02.510  09:59:02\n3  20160208_095903.51 2016-02-08 09:59:03.510  09:59:03\n4  20160208_095904.51 2016-02-08 09:59:04.510  09:59:04\n5  20160208_095905.51 2016-02-08 09:59:05.510  09:59:05\n6  20160208_095906.51 2016-02-08 09:59:06.510  09:59:06\n7  20160208_095907.51 2016-02-08 09:59:07.510  09:59:07\n8  20160208_095908.51 2016-02-08 09:59:08.510  09:59:08\n9  20160208_095909.51 2016-02-08 09:59:09.510  09:59:09\n",
  "label": 1
 },
 {
  "idx": 2828,
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "str = re.sub(r'\\W', ' ', str, flags=re.UNICODE)\n",
  "label": 0
 },
 {
  "idx": 2829,
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": ">>> parseTags(\"tHiS iS a tAg, \\t\\n!&#^ , secondcomment , no!punc$$, ifNOSPACESthenPRESERVEcaps\")\n['thisIsATag', 'secondcomment', 'noPunc', 'ifNOSPACESthenPRESERVEcaps']\n",
  "label": 0
 },
 {
  "idx": 2830,
  "doc": "Python regular expression to remove space and capitalize letters where the space was?",
  "code": "def parseTags(str):\n    return filter(None, map(sanitizeTag, str.split(',')))\n\ndef sanitizeTag(str):\n    words    = ''.join(c if c.isalnum() else ' ' for c in str).split()\n    numWords = len(words)\n    if numWords == 0:\n        return None\n    elif numWords == 1:\n        return words[0]\n    else:\n        return words[0].lower() + ''.join(w.capitalize() for w in words[1:])\n",
  "label": 0
 },
 {
  "idx": 2831,
  "doc": "Comparing two lists items in python",
  "code": "def file_loader(f):\n    file_dict = {}\n    current_set = None\n    for line in f:\n        if line.startswith('d.complex'):\n            file_dict[line] = current_set = {}\n            continue\n\n        if current_set is not None:\n            current_set[line] = current_set.get(line, 0)\n\n    return file_dict\n",
  "label": 0
 },
 {
  "idx": 2832,
  "doc": "Assistance on automated image/text Document",
  "code": "with open('card.html') as f:\n    card = f.read()\n\nwith open('text.txt') as f:\n    text = f.read()\n\nwith open('input.html', 'w') as f:\n    f.write(card.replace('{{ text }}', text))\n",
  "label": 0
 },
 {
  "idx": 2833,
  "doc": "Assistance on automated image/text Document",
  "code": "<html>\n  <body>\n    <h1>Trademark</h1>\n    <div id=\"container\">\n      <div id=\"photos\">\n        <img src=\"photo.jpg\">\n      </div>\n      <div id=\"text\">\n        {{ text }}\n      </div>\n    </div>\n  </body>\n</html>\n",
  "label": 0
 },
 {
  "idx": 2834,
  "doc": "Pyramid authorization for stored items",
  "code": "class Root(dict):\n    # this is the root factory, you can set an __acl__ here for all resources\n    __acl__ = [\n        (Allow, 'admin', ALL_PERMISSIONS),\n    ]\n    def __init__(self, request):\n        self.request = request\n        self['foos'] = FooContainer(self, 'foos')\n        self['bars'] = BarContainer(self, 'bars')\n\nclass FooContainer(object):\n    # set ACL here for *all* objects of type Foo\n    __acl__ = [\n    ]\n\n    def __init__(self, parent, name):\n        self.__parent__ = parent\n        self.__name__ = name\n\n    def __getitem__(self, key):\n        # get a database connection\n        s = DBSession()\n        obj = s.query(Foo).filter_by(id=key).scalar()\n        if obj is None:\n            raise KeyError\n        obj.__parent__ = self\n        obj.__name__ = key\n        return obj\n\nclass Foo(object):\n    # this __acl__ is computed dynamically based on the specific object\n    @property\n    def __acl__(self):\n        acls = [(Allow, 'u:%d' % o.id, 'view') for o in self.owners]\n        return acls\n\n    owners = relation('FooOwner')\n\nclass Bar(object):\n    # allow any authenticated user to view Bar objects\n    __acl__ = [\n        (Allow, Authenticated, 'view')\n    ]\n",
  "label": 0
 },
 {
  "idx": 2835,
  "doc": "Switching positions of two strings within a list",
  "code": ">>> a = \"1234567890\"\n>>> a[9] + a[5:9] + a[1:5] + a[0]\n'0678923451'\n>>>\n",
  "label": 1
 },
 {
  "idx": 2836,
  "doc": "Switching positions of two strings within a list",
  "code": "original[0], original[9] = original[9], original[0]\n",
  "label": 1
 },
 {
  "idx": 2837,
  "doc": "List of (date, day_of_week) tuples",
  "code": "[(datetime.datetime(2013, 2, 16, 0, 0), 5), (datetime.datetime(2013, 2, 17, 0, 0), 6), (datetime.datetime(2013, 2, 18, 0, 0), 0), (datetime.datetime(2013, 2, 19, 0, 0), 1), (datetime.datetime(2013, 2, 20, 0, 0), 2), (datetime.datetime(2013, 2, 21, 0, 0), 3), (datetime.datetime(2013, 2, 22, 0, 0), 4), (datetime.datetime(2013, 2, 23, 0, 0), 5), (datetime.datetime(2013, 2, 24, 0, 0), 6), (datetime.datetime(2013, 2, 25, 0, 0), 0), (datetime.datetime(2013, 2, 26, 0, 0), 1), (datetime.datetime(2013, 2, 27, 0, 0), 2), (datetime.datetime(2013, 2, 28, 0, 0), 3), (datetime.datetime(2013, 3, 1, 0, 0), 4), (datetime.datetime(2013, 3, 2, 0, 0), 5), (datetime.datetime(2013, 3, 3, 0, 0), 6), (datetime.datetime(2013, 3, 4, 0, 0), 0), (datetime.datetime(2013, 3, 5, 0, 0), 1), (datetime.datetime(2013, 3, 6, 0, 0), 2), (datetime.datetime(2013, 3, 7, 0, 0), 3), (datetime.datetime(2013, 3, 8, 0, 0), 4), (datetime.datetime(2013, 3, 9, 0, 0), 5), (datetime.datetime(2013, 3, 10, 0, 0), 6), (datetime.datetime(2013, 3, 11, 0, 0), 0), (datetime.datetime(2013, 3, 12, 0, 0), 1), (datetime.datetime(2013, 3, 13, 0, 0), 2), (datetime.datetime(2013, 3, 14, 0, 0), 3), (datetime.datetime(2013, 3, 15, 0, 0), 4), (datetime.datetime(2013, 3, 16, 0, 0), 5), (datetime.datetime(2013, 3, 17, 0, 0), 6), (datetime.datetime(2013, 3, 18, 0, 0), 0), (datetime.datetime(2013, 3, 19, 0, 0), 1), (datetime.datetime(2013, 3, 20, 0, 0), 2), (datetime.datetime(2013, 3, 21, 0, 0), 3), (datetime.datetime(2013, 3, 22, 0, 0), 4), (datetime.datetime(2013, 3, 23, 0, 0), 5), (datetime.datetime(2013, 3, 24, 0, 0), 6), (datetime.datetime(2013, 3, 25, 0, 0), 0), (datetime.datetime(2013, 3, 26, 0, 0), 1), (datetime.datetime(2013, 3, 27, 0, 0), 2), (datetime.datetime(2013, 3, 28, 0, 0), 3), (datetime.datetime(2013, 3, 29, 0, 0), 4), (datetime.datetime(2013, 3, 30, 0, 0), 5), (datetime.datetime(2013, 3, 31, 0, 0), 6), (datetime.datetime(2013, 4, 1, 0, 0), 0), (datetime.datetime(2013, 4, 2, 0, 0), 1), (datetime.datetime(2013, 4, 3, 0, 0), 2), (datetime.datetime(2013, 4, 4, 0, 0), 3), (datetime.datetime(2013, 4, 5, 0, 0), 4), (datetime.datetime(2013, 4, 6, 0, 0), 5), (datetime.datetime(2013, 4, 7, 0, 0), 6), (datetime.datetime(2013, 4, 8, 0, 0), 0), (datetime.datetime(2013, 4, 9, 0, 0), 1), (datetime.datetime(2013, 4, 10, 0, 0), 2), (datetime.datetime(2013, 4, 11, 0, 0), 3), (datetime.datetime(2013, 4, 12, 0, 0), 4), (datetime.datetime(2013, 4, 13, 0, 0), 5), (datetime.datetime(2013, 4, 14, 0, 0), 6), (datetime.datetime(2013, 4, 15, 0, 0), 0), (datetime.datetime(2013, 4, 16, 0, 0), 1), (datetime.datetime(2013, 4, 17, 0, 0), 2), (datetime.datetime(2013, 4, 18, 0, 0), 3), (datetime.datetime(2013, 4, 19, 0, 0), 4), (datetime.datetime(2013, 4, 20, 0, 0), 5), (datetime.datetime(2013, 4, 21, 0, 0), 6), (datetime.datetime(2013, 4, 22, 0, 0), 0), (datetime.datetime(2013, 4, 23, 0, 0), 1), (datetime.datetime(2013, 4, 24, 0, 0), 2), (datetime.datetime(2013, 4, 25, 0, 0), 3), (datetime.datetime(2013, 4, 26, 0, 0), 4), (datetime.datetime(2013, 4, 27, 0, 0), 5), (datetime.datetime(2013, 4, 28, 0, 0), 6), (datetime.datetime(2013, 4, 29, 0, 0), 0), (datetime.datetime(2013, 4, 30, 0, 0), 1), (datetime.datetime(2013, 5, 1, 0, 0), 2), (datetime.datetime(2013, 5, 2, 0, 0), 3), (datetime.datetime(2013, 5, 3, 0, 0), 4), (datetime.datetime(2013, 5, 4, 0, 0), 5), (datetime.datetime(2013, 5, 5, 0, 0), 6), (datetime.datetime(2013, 5, 6, 0, 0), 0), (datetime.datetime(2013, 5, 7, 0, 0), 1), (datetime.datetime(2013, 5, 8, 0, 0), 2), (datetime.datetime(2013, 5, 9, 0, 0), 3), (datetime.datetime(2013, 5, 10, 0, 0), 4), (datetime.datetime(2013, 5, 11, 0, 0), 5), (datetime.datetime(2013, 5, 12, 0, 0), 6), (datetime.datetime(2013, 5, 13, 0, 0), 0), (datetime.datetime(2013, 5, 14, 0, 0), 1), (datetime.datetime(2013, 5, 15, 0, 0), 2), (datetime.datetime(2013, 5, 16, 0, 0), 3), (datetime.datetime(2013, 5, 17, 0, 0), 4), (datetime.datetime(2013, 5, 18, 0, 0), 5), (datetime.datetime(2013, 5, 19, 0, 0), 6), (datetime.datetime(2013, 5, 20, 0, 0), 0), (datetime.datetime(2013, 5, 21, 0, 0), 1), (datetime.datetime(2013, 5, 22, 0, 0), 2), (datetime.datetime(2013, 5, 23, 0, 0), 3), (datetime.datetime(2013, 5, 24, 0, 0), 4), (datetime.datetime(2013, 5, 25, 0, 0), 5), (datetime.datetime(2013, 5, 26, 0, 0), 6), (datetime.datetime(2013, 5, 27, 0, 0), 0), (datetime.datetime(2013, 5, 28, 0, 0), 1), (datetime.datetime(2013, 5, 29, 0, 0), 2), (datetime.datetime(2013, 5, 30, 0, 0), 3), (datetime.datetime(2013, 5, 31, 0, 0), 4), (datetime.datetime(2013, 6, 1, 0, 0), 5), (datetime.datetime(2013, 6, 2, 0, 0), 6), (datetime.datetime(2013, 6, 3, 0, 0), 0), (datetime.datetime(2013, 6, 4, 0, 0), 1), (datetime.datetime(2013, 6, 5, 0, 0), 2), (datetime.datetime(2013, 6, 6, 0, 0), 3), (datetime.datetime(2013, 6, 7, 0, 0), 4), (datetime.datetime(2013, 6, 8, 0, 0), 5), (datetime.datetime(2013, 6, 9, 0, 0), 6), (datetime.datetime(2013, 6, 10, 0, 0), 0), (datetime.datetime(2013, 6, 11, 0, 0), 1), (datetime.datetime(2013, 6, 12, 0, 0), 2), (datetime.datetime(2013, 6, 13, 0, 0), 3), (datetime.datetime(2013, 6, 14, 0, 0), 4), (datetime.datetime(2013, 6, 15, 0, 0), 5), (datetime.datetime(2013, 6, 16, 0, 0), 6), (datetime.datetime(2013, 6, 17, 0, 0), 0), (datetime.datetime(2013, 6, 18, 0, 0), 1), (datetime.datetime(2013, 6, 19, 0, 0), 2), (datetime.datetime(2013, 6, 20, 0, 0), 3), (datetime.datetime(2013, 6, 21, 0, 0), 4), (datetime.datetime(2013, 6, 22, 0, 0), 5), (datetime.datetime(2013, 6, 23, 0, 0), 6), (datetime.datetime(2013, 6, 24, 0, 0), 0), (datetime.datetime(2013, 6, 25, 0, 0), 1), (datetime.datetime(2013, 6, 26, 0, 0), 2), (datetime.datetime(2013, 6, 27, 0, 0), 3), (datetime.datetime(2013, 6, 28, 0, 0), 4), (datetime.datetime(2013, 6, 29, 0, 0), 5), (datetime.datetime(2013, 6, 30, 0, 0), 6), (datetime.datetime(2013, 7, 1, 0, 0), 0), (datetime.datetime(2013, 7, 2, 0, 0), 1), (datetime.datetime(2013, 7, 3, 0, 0), 2), (datetime.datetime(2013, 7, 4, 0, 0), 3), (datetime.datetime(2013, 7, 5, 0, 0), 4), (datetime.datetime(2013, 7, 6, 0, 0), 5), (datetime.datetime(2013, 7, 7, 0, 0), 6), (datetime.datetime(2013, 7, 8, 0, 0), 0), (datetime.datetime(2013, 7, 9, 0, 0), 1), (datetime.datetime(2013, 7, 10, 0, 0), 2), (datetime.datetime(2013, 7, 11, 0, 0), 3), (datetime.datetime(2013, 7, 12, 0, 0), 4), (datetime.datetime(2013, 7, 13, 0, 0), 5), (datetime.datetime(2013, 7, 14, 0, 0), 6), (datetime.datetime(2013, 7, 15, 0, 0), 0), (datetime.datetime(2013, 7, 16, 0, 0), 1), (datetime.datetime(2013, 7, 17, 0, 0), 2), (datetime.datetime(2013, 7, 18, 0, 0), 3), (datetime.datetime(2013, 7, 19, 0, 0), 4), (datetime.datetime(2013, 7, 20, 0, 0), 5), (datetime.datetime(2013, 7, 21, 0, 0), 6), (datetime.datetime(2013, 7, 22, 0, 0), 0), (datetime.datetime(2013, 7, 23, 0, 0), 1), (datetime.datetime(2013, 7, 24, 0, 0), 2), (datetime.datetime(2013, 7, 25, 0, 0), 3), (datetime.datetime(2013, 7, 26, 0, 0), 4), (datetime.datetime(2013, 7, 27, 0, 0), 5), (datetime.datetime(2013, 7, 28, 0, 0), 6), (datetime.datetime(2013, 7, 29, 0, 0), 0), (datetime.datetime(2013, 7, 30, 0, 0), 1), (datetime.datetime(2013, 7, 31, 0, 0), 2), (datetime.datetime(2013, 8, 1, 0, 0), 3), (datetime.datetime(2013, 8, 2, 0, 0), 4), (datetime.datetime(2013, 8, 3, 0, 0), 5), (datetime.datetime(2013, 8, 4, 0, 0), 6), (datetime.datetime(2013, 8, 5, 0, 0), 0), (datetime.datetime(2013, 8, 6, 0, 0), 1), (datetime.datetime(2013, 8, 7, 0, 0), 2), (datetime.datetime(2013, 8, 8, 0, 0), 3), (datetime.datetime(2013, 8, 9, 0, 0), 4), (datetime.datetime(2013, 8, 10, 0, 0), 5)]\n",
  "label": 0
 },
 {
  "idx": 2838,
  "doc": "Most efficient way to delete needless newlines in Python",
  "code": "import re\n\noldtext = \"\"\"\\\nThis would keep paragraphs separated.\nThis would keep paragraphs separated.\n\nThis would keep paragraphs separated.\n\\tThis would keep paragraphs separated.\n\n\\rWhen, in the course\nof human events,\nit becomes necessary\n\\rfor one people\n\"\"\"\n\nnewtext = re.sub(r'(?<!\\n)\\n(?![\\n\\t])', ' ', oldtext.replace('\\r', ''))\n",
  "label": 1
 },
 {
  "idx": 2839,
  "doc": "Support multiple API versions in flask",
  "code": "from api.v1 import api as api_v1\nfrom api.v1_1 import api as api_v1_1\nfrom api.v2 import api as api_v2\n\napp.register_blueprint(api_v1, url_prefix='/v1')\napp.register_blueprint(api_v1_1, url_prefix='/v1.1')\napp.register_blueprint(api_v2, url_prefix='/v2')\n",
  "label": 0
 },
 {
  "idx": 2840,
  "doc": "Support multiple API versions in flask",
  "code": "my_project\n+-- api/\n    +-- v1/\n        +-- __init__.py\n        +-- routes.py\n    +-- v1_1/\n        +-- __init__.py\n        +-- routes.py\n    +-- v2/\n        +-- __init__.py\n        +-- routes.py\n    +-- __init__.py\n    +-- common.py\n",
  "label": 0
 },
 {
  "idx": 2841,
  "doc": "Splitting a list of lists and strings by a string",
  "code": "In [4]: for key, group in groupby(lst, lambda x: x!=','):\n   ...:     print key, list(group)\n   ...:     \nTrue [['something', ',', 'eh']]\nFalse [',']\nTrue [['more']]\nFalse [',']\nTrue ['yet more', '|', 'even more']\n",
  "label": 0
 },
 {
  "idx": 2842,
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "from sqlalchemy import TypeDecorator, type_coerce, String, or_\n\nclass NullComparisons(TypeDecorator):\n    impl = String\n\n    class comparator_factory(TypeDecorator.Comparator):\n        def __ne__(self, other):\n            expr = type_coerce(self.expr, String)\n            return or_(expr == None, expr != other)\n",
  "label": 0
 },
 {
  "idx": 2843,
  "doc": "NULL safe inequality comparisons in SQL Alchemy?",
  "code": "thing.data IS NULL OR thing.data != :param_1\n",
  "label": 0
 },
 {
  "idx": 2844,
  "doc": "Binning data based on one column in 2D array and estimate mean in each bin using cython",
  "code": "import numpy as np\nd = np.random.random(10**5)\nnumbins = 10\n\nbins = np.linspace(d.min(), d.max(), numbins+1)\n# This line is not necessary, but without it the smallest bin only has 1 value.\nbins = bins[1:]\ndigitized = bins.searchsorted(d)\n\nbin_means = (np.bincount(digitized, weights=d, minlength=numbins) /\n             np.bincount(digitized, minlength=numbins))\n",
  "label": 1
 },
 {
  "idx": 2845,
  "doc": "Converting C style for loop to python",
  "code": "range(...)\n    range(stop) -> list of integers\n    range(start, stop[, step]) -> list of integers\n",
  "label": 0
 },
 {
  "idx": 2846,
  "doc": "How can I send an MMS via a GSM/GPRS modem connected to a linux computer?",
  "code": "> AT+CMMSEDIT=1  # Enter edit mode\nOK\n> AT+CMMSDOWN=\"PIC\",54321,30000 # Download a pic that is 54321 bytes\n                                # and set the latency\n                                # for the download to 30000 ms\nCONNECT                         # This means, ready to receive data\n                                # so send your file\nOK                              # Data received\n> AT+CMMSRECP=\"123456789\"       # Set the recipient\nOK\n> AT+CMMSVIEW                   # View your message\n(your message)\nOK\n> AT+CMMSSEND                   # Send the message\nOK                              # Message sent\n> AT+CMMSEDIT=0                 # Exit edit mode, and clear the buffer\nOK\n",
  "label": 0
 },
 {
  "idx": 2847,
  "doc": "combining python watchdog with multiprocessing or threading",
  "code": "Main Monitoring of Cameras\ndef monitorCam(camera, config, mainlog):\n    '''Uses the Watchdog package to monitor the data directory for new files.\n    See the MonitorFiles class in dosClasses for actual monitoring code.  Monitors each camera.'''\n\n    mainlog.info('Process Name, PID: {0},{1}'.format(mp.current_process().name,mp.current_process().pid))\n\n    #init cam log\n    camlog = initLogger(config, filename='manga_dos_{0}'.format(camera))\n    camlog.info('Camera {0}, PID {1} '.format(camera,mp.current_process().pid))\n    config.camera=camera\n\n    event_handler = dosclass.MonitorFiles(config, camlog, mainlog)\n\n    # add logging the the event handler\n    log_handler = LoggingEventHandler()\n\n    # set up observer\n    observer = Observer()\n    observer.schedule(event_handler, path=config.fitsDir, recursive=False)\n    observer.schedule(log_handler, config.fitsDir, recursive=False)\n    observer.daemon=True\n    observer.start()\n    camlog.info('Begin MaNGA DOS!')\n    camlog.info('Start watching directory {0} for new files ...'.format(config.fitsDir))\n    camlog.info('Watching directory {0} for new files from camera {1}'.format(config.fitsDir,camera))\n\n    # monitor\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.unschedule_all()\n        observer.stop()\n        camlog.info('Stop watching directory ...')\n        camlog.info('End MaNGA DOS!')\n        camlog.info('--------------------------')\n        camlog.info('')\n    #observer.join()\n\n    if observer.is_alive():\n        camlog.info('still alive')\n    else:\n        camlog.info('thread ending')    \n",
  "label": 0
 },
 {
  "idx": 2848,
  "doc": "Modifying a cooldown decorator to work for methods instead of functions",
  "code": "def __get__(self, obj, objtype):\n    return Wrapper(self, obj)\n",
  "label": 0
 },
 {
  "idx": 2849,
  "doc": "How can I find the average of each similar entry in a list of tuples?",
  "code": "from itertools import groupby\n\ntuples = [('Jem', 10), ('Sam', 10), ('Sam', 2), ('Jem', 9), ('Jem', 10)]\ntuples.sort(key=lambda tup: tup[0])\n# tuples is now [('Jem', 10), ('Jem', 9), ('Jem', 10), ('Sam', 10), ('Sam', 2)]\n\ngroups = groupby(tuples, lambda tup: tup[0])\n",
  "label": 0
 },
 {
  "idx": 2850,
  "doc": "How can I find the average of each similar entry in a list of tuples?",
  "code": "for name, values in d.items():\n    print(\"{name} {avg}\".format(name=name, avg=sum(values)/len(values)))\n",
  "label": 0
 },
 {
  "idx": 2851,
  "doc": "How to find cluster sizes in 2D numpy array?",
  "code": "lw, num = measurements.label(z2)\nprint lw\narray([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n   [0, 0, 1, 0, 2, 0, 0, 0, 3, 0],\n   [0, 0, 0, 0, 0, 0, 4, 0, 3, 0],\n   [0, 0, 0, 0, 0, 0, 4, 0, 0, 0],\n   [0, 0, 0, 0, 5, 0, 4, 0, 0, 0],\n   [0, 0, 0, 0, 0, 4, 4, 0, 0, 0],\n   [0, 0, 0, 6, 0, 4, 0, 0, 0, 0],\n   [0, 0, 0, 0, 7, 0, 0, 0, 0, 0],\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n",
  "label": 0
 },
 {
  "idx": 2852,
  "doc": "How to find cluster sizes in 2D numpy array?",
  "code": "from pylab import *\nfrom scipy.ndimage import measurements\n\nz2 = array([[0,0,0,0,0,0,0,0,0,0],\n    [0,0,1,0,0,0,0,0,0,0],\n    [0,0,1,0,1,0,0,0,1,0],\n    [0,0,0,0,0,0,1,0,1,0],\n    [0,0,0,0,0,0,1,0,0,0],\n    [0,0,0,0,1,0,1,0,0,0],\n    [0,0,0,0,0,1,1,0,0,0],\n    [0,0,0,1,0,1,0,0,0,0],\n    [0,0,0,0,1,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0]])\n",
  "label": 0
 },
 {
  "idx": 2853,
  "doc": "reading Unicode string as json object in python",
  "code": ">>> json.loads(repair_json(v[0]))\n{u'maxColsVisible': 100, u'maxRowsVisible': 20, u'hasSearch': True, u'parent': u'rcJobsGrid_parent', u'url': u'/jobs/apply/ajax?action=careerCenterBean.jobsGrid.onAJAX&type=METHOD_ACTION', u'onPostRenderTable': u'if(WFN.getWidget(\"rcJobsGrid_toolbar_delete\")!=null){WFN.getWidget(\"rcJobsGrid_toolbar_delete\").set(\"useBusy\",false);}WFN.handleButtonEnabling(\"rcJobsGrid\", \"rcJobsGrid_toolbar_delete\");', u'widthType': u'px', u'store': {u'maxRowsVisible': 20, u'endPosition': 6, u'gridId': u'rcJobsGrid', u'gridExpressionString': u'#{careerCenterBean.jobsGrid}', u'noDataMessage': u'There are currently no jobs available.', u'customProperties': [{u'value': u'false', u'key': u'USE_DEFAULT_CONFIRM_DELETE_DLG'}, {u'value': u'0', u'key': u'OTHER_PAGES_SELECTION_COUNT'}, {u'value': u'Are you sure you want to delete the selected records?', u'key': u'TABLE_GRID_DELETE_CONFIRM_MSG'}], u'total': 6, u'hasPagination': True, u'tabIndex': 0, u'headerRows': [{u'columns': [{u'locked': False, u'align': u'left', u'label': u'Job Opening', u'width': 300, u'html': False, u'widthType': u'px', u'sortable': True, u'hidden': False, u'id': u'0'}, {u'locked': False, u'align': u'left', u'label': u'Worked In Country', u'width': 200, u'html': False, u'widthType': u'px', u'sortable': True, u'hidden': False, u'id': u'1'}, {u'locked': False, u'align': u'left', u'label': u'Location', u'width': 225, u'html': False, u'widthType': u'px', u'sortable': True, u'hidden': False, u'id': u'2'}, {u'locked': False, u'align': u'left', u'label': u'Date Posted', u'width': 150, u'html': False, u'widthType': u'px', u'sortable': True, u'hidden': False, u'id': u'3'}, {u'locked': False, u'align': u'left', u'label': u'Job ID', u'width': 75, u'html': False, u'widthType': u'px', u'sortable': True, u'hidden': False, u'id': u'4'}]}], u'rows': [{u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'Research Assistant'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2', u'value': u'Arlington, VA'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/16/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1010'}], u'selected': False, u'id': u'0', u'customProperties': [{u'value': u'46702', u'key': u'oid'}]}, {u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'Research Analyst'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2', u'value': u'Arlington, VA'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/16/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1011'}], u'selected': False, u'id': u'1', u'customProperties': [{u'value': u'46747', u'key': u'oid'}]}, {u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'User Experience Researcher'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2', u'value': u'Arlington, VA'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/08/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1007'}], u'selected': False, u'id': u'2', u'customProperties': [{u'value': u'46467', u'key': u'oid'}]}, {u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'Research Manager'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2', u'value': u'Arlington, VA'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/03/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1004'}], u'selected': False, u'id': u'3', u'customProperties': [{u'value': u'15082', u'key': u'oid'}]}, {u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'Summer Intern'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2', u'value': u'Arlington, VA'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/03/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1008'}], u'selected': False, u'id': u'4', u'customProperties': [{u'value': u'46476', u'key': u'oid'}]}, {u'cells': [{u'action': u'#{careerCenterBean.viewJobPostingDetails}', u'align': u'left', u'type': u'LINK', u'id': u'0', u'value': u'All Other Jobs'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'1', u'value': u'UNITED STATES'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'2'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'3', u'value': u'04/03/2014'}, {u'align': u'left', u'type': u'OUTPUT_TEXT', u'id': u'4', u'value': u'1009'}], u'selected': False, u'id': u'5', u'customProperties': [{u'value': u'46530', u'key': u'oid'}]}], u'maxColsVisible': 100, u'label': u'name', u'width': 950, u'sortType': 1, u'hasSearch': True, u'lastSort': 0, u'widthType': u'px', u'transparent': False, u'url': u'/jobs/apply/ajax?action=careerCenterBean.jobsGrid.onAJAX&type=METHOD_ACTION', u'footerRows': [], u'startPosition': 1, u'identifier': u'id', u'possibleRowsPerPage': u'10, 20, 30', u'rowsPerPage': 20}, u'possibleRowsPerPage': [10, 20, 30], u'hasPagination': True, u'customRenderers': [{u'toggle': False, u'type': u'STATUS_PROGRESS_BAR_CUSTOM_TYPE', u'renderer': u'com.adp.wfn.customrenderers.renderStatusProgressBar'}], u'toolbar': [{u'iconClass': u'', u'title': u'', u'iconClassDisabled': u'', u'children': None, u'value': u'', u'label': u'', u'active': False, u'onClick': u'', u'action': u'', u'id': u'_toolbar_add'}, {u'iconClass': u'', u'title': u'', u'iconClassDisabled': u'', u'children': None, u'value': u'', u'label': u'', u'active': False, u'onClick': u'', u'action': u'', u'id': u'_toolbar_delete'}], u'timeout': 30000, u'hasResizeColumns': True, u'transparent': False, u'id': u'rcJobsGrid', u'rowsPerPage': 20, u'tabIndex': 0}\n",
  "label": 0
 },
 {
  "idx": 2854,
  "doc": "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?",
  "code": "In [10]: np.random.seed(123)\n\nIn [11]: x = np.random.randint(0, 4, size=(8, 10))\n\nIn [12]: x\nOut[12]: \narray([[2, 1, 2, 2, 0, 2, 2, 1, 3, 2],\n       [3, 1, 2, 1, 0, 1, 2, 3, 1, 0],\n       [2, 0, 3, 1, 3, 2, 1, 0, 0, 0],\n       [0, 1, 3, 3, 2, 0, 3, 2, 0, 3],\n       [0, 1, 0, 3, 1, 3, 0, 0, 0, 2],\n       [1, 1, 2, 2, 3, 2, 1, 0, 0, 3],\n       [2, 1, 0, 3, 2, 2, 2, 2, 1, 2],\n       [0, 3, 3, 3, 1, 0, 2, 0, 2, 1]])\n\nIn [13]: y = x.reshape(x.shape[0]/2, 2, x.shape[1]/2, 2)\n",
  "label": 0
 },
 {
  "idx": 2855,
  "doc": "Drawing a clamped uniform cubic B-spline using Cairo",
  "code": "class BSplineDrawer(object):\n    def __init__(self, context):\n        self.ctx = context\n\n    def draw(self, bspline):\n        pairs = zip(bspline.points[:-1], bspline.points[1:])\n        one_thirds = [p1.interpolate(p2, 1/3.) for p1, p2 in pairs)\n        two_thirds = [p2.interpolate(p1, 1/3.) for p1, p2 in pairs)\n\n        coords = [None] * 6\n        for i in xrange(len(bspline.points) - 3):\n            start = two_thirds[i].interpolate(one_thirds[i+1])\n            coords[0:2] = one_thirds[i+1]\n            coords[2:4] = two_thirds[i+1]\n            coords[4:6] = two_thirds[i+1].interpolate(one_thirds[i+2])\n\n            self.context.move_to(*start)\n            self.context.curve_to(*coords)\n            self.context.stroke()\n",
  "label": 0
 },
 {
  "idx": 2856,
  "doc": "Drawing a clamped uniform cubic B-spline using Cairo",
  "code": "class CubicBSpline(object):\n    __slots__ = (\"points\", )\n\n    def __init__(self, points):\n        self.points = [Point(*coords) for coords in points]\n",
  "label": 0
 },
 {
  "idx": 2857,
  "doc": "optparse(): Input validation",
  "code": "if (opts.e_opt and opts.d_opt):\n",
  "label": 0
 },
 {
  "idx": 2858,
  "doc": "python plot distribution across mean",
  "code": "from datetime import date, timedelta as td, datetime\nd1 = datetime.strptime('1/1/2015', \"%m/%d/%Y\")\nd2 = datetime.strptime('12/31/2015', \"%m/%d/%Y\")\n\nAllDays = []\nwhile(d1<=d2):\n    AllDays.append(d1)\n    d1 = d1 + td(days=1)\n\ntemps = np.random.normal( 20, 0.5, size=(500,365) )\ntemps = pd.DataFrame( temps.T, index=AllDays )\n\nfig, ax = plt.subplots( 1, 1, figsize=(16,8) )\nax.plot( temps.index, temps.T.mean(), color='blue', linewidth=2 )\n",
  "label": 1
 },
 {
  "idx": 2859,
  "doc": "Programming contest like input validator",
  "code": "input_stream = \"\"\"\n2 \n8 9\n3\nasd dsa fff\n2\n1 2\n3 4\n\"\"\"\ntokens = input_stream.split()\n",
  "label": 0
 },
 {
  "idx": 2860,
  "doc": "Programming contest like input validator",
  "code": "print validateSchema(schema, tokens)\n",
  "label": 0
 },
 {
  "idx": 2861,
  "doc": "How to Parse an orderedDict?",
  "code": ">>> from collections import OrderedDict\n>>> od = OrderedDict([(u'attributes', OrderedDict([(u'type', u'Campaign__c'), (u'url', u'/services/data/v29.0/sobjects/Campaign__c/a0B9000000I6CDUEA3')])), (u'clicks__c', 0.0)])\n>>> od.keys()\n[u'attributes', u'clicks__c']\n>>> od['clicks__c']\n0.0\n",
  "label": 1
 },
 {
  "idx": 2862,
  "doc": "Allocate items according to an approximate ratio in Python",
  "code": "import collections\nimport itertools\nimport string\n\ndef allocate_goals(prop_low, prop_high):\n    prop_high3 = prop_high * 3\n    while True:\n        for g in prop_low:\n            yield g\n        for g in prop_high3:\n            yield g\n\ndef allocate(goals, players):\n    letters = string.ascii_uppercase[:goals]\n    high_count = goals // 2\n    prop_high, prop_low = letters[:high_count], letters[high_count:]\n    g = allocate_goals(prop_low, prop_high)\n    return collections.Counter(itertools.islice(g, players))\n\nfor goals in xrange(2, 9):\n    print goals, sorted(allocate(goals, 8).items())\n",
  "label": 1
 },
 {
  "idx": 2863,
  "doc": "Allocate items according to an approximate ratio in Python",
  "code": "2 [('A', 6), ('B', 2)]\n3 [('A', 4), ('B', 2), ('C', 2)]\n4 [('A', 3), ('B', 3), ('C', 1), ('D', 1)]\n5 [('A', 3), ('B', 2), ('C', 1), ('D', 1), ('E', 1)]\n6 [('A', 2), ('B', 2), ('C', 1), ('D', 1), ('E', 1), ('F', 1)]\n7 [('A', 2), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 1)]\n8 [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 1), ('H', 1)]\n",
  "label": 0
 },
 {
  "idx": 2864,
  "doc": "How to convert an xml string to a dictionary in Python?",
  "code": "import cElementTree as ElementTree\n\nclass XmlListConfig(list):\n    def __init__(self, aList):\n        for element in aList:\n            if element:\n                # treat like dict\n                if len(element) == 1 or element[0].tag != element[1].tag:\n                    self.append(XmlDictConfig(element))\n                # treat like list\n                elif element[0].tag == element[1].tag:\n                    self.append(XmlListConfig(element))\n            elif element.text:\n                text = element.text.strip()\n                if text:\n                    self.append(text)\n\n\nclass XmlDictConfig(dict):\n    '''\n    Example usage:\n\n    >>> tree = ElementTree.parse('your_file.xml')\n    >>> root = tree.getroot()\n    >>> xmldict = XmlDictConfig(root)\n\n    Or, if you want to use an XML string:\n\n    >>> root = ElementTree.XML(xml_string)\n    >>> xmldict = XmlDictConfig(root)\n\n    And then use xmldict for what it is... a dict.\n    '''\n    def __init__(self, parent_element):\n        if parent_element.items():\n            self.update(dict(parent_element.items()))\n        for element in parent_element:\n            if element:\n                # treat like dict - we assume that if the first two tags\n                # in a series are different, then they are all different.\n                if len(element) == 1 or element[0].tag != element[1].tag:\n                    aDict = XmlDictConfig(element)\n                # treat like list - we assume that if the first two tags\n                # in a series are the same, then the rest are the same.\n                else:\n                    # here, we put the list in dictionary; the key is the\n                    # tag name the list elements all share in common, and\n                    # the value is the list itself \n                    aDict = {element[0].tag: XmlListConfig(element)}\n                # if the tag has attributes, add those to the dict\n                if element.items():\n                    aDict.update(dict(element.items()))\n                self.update({element.tag: aDict})\n            # this assumes that if you've got an attribute in a tag,\n            # you won't be having any text. This may or may not be a \n            # good idea -- time will tell. It works for the way we are\n            # currently doing XML configuration files...\n            elif element.items():\n                self.update({element.tag: dict(element.items())})\n            # finally, if there are no child tags and no attributes, extract\n            # the text\n            else:\n                self.update({element.tag: element.text})\n",
  "label": 1
 },
 {
  "idx": 2865,
  "doc": "How can I keep the indentation between lines?",
  "code": "with open(\"input\") as f:\n    print(''.join(replace_line(f, 'some pattern\\n', ['foo\\n', 'bar\\n'])))\n",
  "label": 0
 },
 {
  "idx": 2866,
  "doc": "How to pass additional parameters (besides of arguments) to a function in Python",
  "code": "#### #0 -- function attributes\ndef fun1(x):\n    return x + fun1.c\n\nfun1.c = 1;  y = fun2(fun1, x0);   print(y)   # --> 2\nfun1.c = 2;  y = fun2(fun1, x0);   print(y)   # --> 3\n\n#### #1 -- closure\ndef fun1(c):\n    def wrapper(x):\n        return x + c\n    return wrapper\n\ny = fun2(fun1(c=1), x0);   print(y)   # --> 2\ny = fun2(fun1(c=2), x0);   print(y)   # --> 3\n\n#### #2 -- functools.partial object\nfrom functools import partial\n\ndef fun1(x, c):\n    return x + c\n\ny = fun2(partial(fun1, c=1), x0);   print(y)   # --> 2\ny = fun2(partial(fun1, c=2), x0);   print(y)   # --> 3\n\n#### #3 -- function object (functor)\nclass Fun1(object):\n    def __init__(self, c):\n        self.c = c\n    def __call__(self, x):\n        return x + self.c\n\ny = fun2(Fun1(c=1), x0);   print(y)   # --> 2\ny = fun2(Fun1(c=2), x0);   print(y)   # --> 3\n\n#### #4 -- function decorator\ndef fun1(x, c):\n    return x + c\n\ndef decorate(c):\n    def wrapper(f):\n        def wrapped(x):\n            return f(x, c)\n        return wrapped\n    return wrapper\n\ny = fun2(decorate(c=1)(fun1), x0);   print(y)   # --> 2\ny = fun2(decorate(c=2)(fun1), x0);   print(y)   # --> 3\n",
  "label": 1
 },
 {
  "idx": 2867,
  "doc": "which random am i looking for to achieve this:",
  "code": "''.join([random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))])\n",
  "label": 1
 },
 {
  "idx": 2868,
  "doc": "Finding combinations that meet a threshold relation",
  "code": "import numpy as np\n\n\ndef calc_combination(N1, N2, n1, n2, theta, phi):\n    N1 = N1[(N1 >= 0) & (N1 <= n1)]\n    N2 = N2[(N2 >= 0) & (N2 <= n2)]\n\n    a = N2 * theta + phi\n    res = N1.reshape(N1.shape[0], 1) - a.reshape(1, a.shape[0])\n\n    indices = np.argwhere(res >= 0)\n    pairs = zip(N1[indices[:,0]], N2[indices[:,1]])\n    return pairs\n\n\ndef test_case():\n    n1 = 5\n    n2 = 1\n    theta = 2\n    phi = 2\n\n    N1 = np.arange(n1 + 1)\n    N2 = np.arange(n2 + 1)\n\n    assert (calc_combination(N1, N2, n1, n2, theta, phi) ==\n            [(2, 0), (3, 0), (4, 0), (4, 1), (5, 0), (5, 1)])\n\ntest_case()\n",
  "label": 1
 },
 {
  "idx": 2869,
  "doc": "How do I plot a histogram using Python so that x-values are frequencies of a spectra?",
  "code": "Complete answer\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(57)\n\nN = 64 ; dw = 0.2\nw = np.linspace(0,N*dw-dw,N)\nX = 200 + (np.arange(N)-N/2)**2*np.random.random(N)\n\nplt.bar(w, abs(X), align='center', width=dw)\nplt.xticks([i*8*dw for i in range(N/8)]+[N*dw-dw/2])\nplt.xlim(-dw/2,N*dw-dw/2)\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2870,
  "doc": "Code a loop on a list of delimiters?",
  "code": "    # start with an array of delimeters\n    delimeters = [d1, d2, d3]\n\n    # start with a blank string\n    regex_delim = ''\n\n    # build the \"delimiters regex\" using alternation\n    for delimeter in delimeters:\n        regex_delim += re.escape(delimeter) + '|'\n\n    # remove the extra '|' at the end\n    regex_delim = regex_delim[:-1]\n\n    # compile the regex\n    regex_obj = re.compile('(' + regex_delim + ')(.*?)(?=' + regex_delim + ')')\n\n    # and that should be it!\n    for match in regex_obj.finditer(html_str):\n        print match.group(2)\n",
  "label": 1
 },
 {
  "idx": 2871,
  "doc": "Rendering requested type in Tornado",
  "code": "class JobsHandler(BaseHandler):\n    def parseRestArgs(self, args):\n        idList = []\n        extension = None\n        if len(args) and not args[0] is None:\n            for arg in range(len(args)):\n                match = re.match(\"[0-9]+\", args[arg])\n                if match:\n                    slave_id = int(match.groups()[0])\n\n            match = re.match(\"(\\.[a-zA-Z]+$)\", args[-1])\n            if match:\n                extension = match.groups()[0][1:]\n\n        return idList, extension\n\n    def get(self, *args):\n        ### Read\n        job_id, extension = self.parseRestArgs(args)\n\n        if len(job_id):\n            if extension == None or \"html\":\n               #self.render(html) # Show with some ID voodoo\n               pass\n            elif extension == 'json':\n                #self.render(json) # Show with some ID voodoo\n                pass\n            else:\n                raise tornado.web.HTTPError(404) #We don't do that sort of thing here...\n        else:\n            if extension == None or \"html\":\n                pass\n                # self.render(html) # Index- No ID given, show an index\n            elif extension == \"json\":\n                pass\n                # self.render(json) # Index- No ID given, show an index\n            else:\n                raise tornado.web.HTTPError(404) #We don't do that sort of thing here...\n",
  "label": 0
 },
 {
  "idx": 2872,
  "doc": "Python: Find in list",
  "code": "matches = filter(fulfills_some_condition, lst)\n",
  "label": 1
 },
 {
  "idx": 2873,
  "doc": "Python: Find in list",
  "code": "next(x for x in lst if ...)\n",
  "label": 1
 },
 {
  "idx": 2874,
  "doc": "Applying python decorators to methods in a class",
  "code": "TestCase = decallmethods(login_testuser)(TestCase)\n",
  "label": 0
 },
 {
  "idx": 2875,
  "doc": "Applying python decorators to methods in a class",
  "code": "@decallmethods(login_testuser)\nclass TestCase(object):\n    def setUp(self):\n        pass\n\n    def test_1(self):\n        print \"test_1()\"\n\n    def test_2(self):\n        print \"test_2()\"\n",
  "label": 0
 },
 {
  "idx": 2876,
  "doc": "Converting dictionary of dictionary of dictionary to pandas data frame",
  "code": "list_of_dict = []\nfor key, value in nested_dict.items():\n    for key1, value1 in value.items():\n        for key2,value2 in value1.items():\n            list_of_dict.append({'A':key,'B':key1,'C':key2,'D':value2})\n\ndf = pd.DataFrame(list_of_dict)\n",
  "label": 1
 },
 {
  "idx": 2877,
  "doc": "Spreadsheet Manipulation Tricks w/ Python's Pandas",
  "code": "df['data_prime'] = df['data'].apply(lambda x: 3*x)\n",
  "label": 1
 },
 {
  "idx": 2878,
  "doc": "Scrapy xpath get text of an element that starts with <",
  "code": ">>> from lxml import html\n>>> raw = '''<div class=\"details_wrapper\">\n... <div class=\"detail\">\n...     <b>Recommended length of visit:</b>\n...     <1 hour\n... </div>\n... <div class=\"detail\">\n...     <b>Fee:</b>\n...     No\n... </div>\n... </div>'''\n... \n>>> root = html.fromstring(raw)\n>>> print html.tostring(root)\n<div class=\"details_wrapper\">\n<div class=\"detail\">\n    <b>Recommended length of visit:</b>\n\n<div class=\"detail\">\n    <b>Fee:</b>\n    No\n</div>\n</div></div>\n",
  "label": 0
 },
 {
  "idx": 2879,
  "doc": "Jenkins and Python",
  "code": "E:\\>python run.py -t $Test_Name -b -c -no_compile -no_wlf\nNumber of arguments 7\nrun.py\n-t\n$Test_Name\n-b\n-c\n-no_compile\n-no_wlf\nsecond method\njenkins.py\n-t\n$Test_Name\n-b\n-c\n-no_compile\n-no_wlf\n$Test_Name\n",
  "label": 0
 },
 {
  "idx": 2880,
  "doc": "Double helix generating algorithm",
  "code": "from numpy import *\n\namp = 10\nlength = 100\nwavelength = 20\n\nomega = (2*pi)/wavelength\nphi   = wavelength*(0.5)\nX = arange(1,length)\nY1 = round_(amp*(sin(omega*X) + 1))\nY2 = round_(amp*(sin(omega*X+phi) + 1))\n\noffset = phi/2\nZ1 = sin(omega*X + offset)\nZ2 = sin(omega*X + phi + offset)\n\nT1 = \" ######### \"\nT2 = \" ********* \"\nclen = len(T1)\n\nH = zeros((length,amp*2+clen),dtype='str')\nH[:,:] = \" \"\n\nfor n,(y1,y2,z1,z2) in enumerate(zip(Y1,Y2,Z1,Z2)):\n    H[n,y1:y1+clen] = list(T1)\n    H[n,y2:y2+clen] = list(T2)\n\n    # Overwrite if first helix is on top\n    if z1>z2: H[n,y1:y1+clen] = list(T1)\n\nfor line in H:\n    print \"\".join(line)\n",
  "label": 1
 },
 {
  "idx": 2881,
  "doc": "Remove duplicates in python list but remember the index",
  "code": "In [13]: l = [randint(1,10000) for _ in range(10000)]     \n\nIn [14]: %%timeit                                         \ninds = []\nseen = set()\nfor i, ele in enumerate(l):\n    if ele not in seen:\n        inds.append((i,ele))\n    seen.add(ele)\n   ....: \n100 loops, best of 3: 3.08 ms per loop\n\nIn [15]: timeit  OrderedDict((x, l.index(x)) for x in l)\n1 loops, best of 3: 442 ms per loop\n\nIn [16]: l = [randint(1,10000) for _ in range(100000)]      \nIn [17]: timeit  OrderedDict((x, l.index(x)) for x in l)\n1 loops, best of 3: 10.3 s per loop\n\nIn [18]: %%timeit                                       \ninds = []\nseen = set()\nfor i, ele in enumerate(l):\n    if ele not in seen:\n        inds.append((i,ele))\n    seen.add(ele)\n   ....: \n10 loops, best of 3: 22.6 ms per loop\n",
  "label": 1
 },
 {
  "idx": 2882,
  "doc": "Extract from a match to next match if patten found in between",
  "code": "content = '''\n<root>\n<Iteration>\n  <Iteration_hit>Elememt1 Element1\n    abc1 hit 1\n  </Iteration_hit>\n</Iteration>\n<Iteration>\n  <Iteration_hit>Elememt2 Element2\n    abc2 hit 1\n  </Iteration_hit>\n</Iteration>\n<Iteration>\n  <Iteration_hit>Elememt3 Element3\n    abc3 hit 1\n  </Iteration_hit>\n</Iteration>\n<Iteration>\n  <Iteration_hit>Elememt4 Element4\n    abc4 hit 1\n  </Iteration_hit>\n</Iteration>\n</root>\n'''\n\nfrom lxml import etree\n\ntree = etree.XML(content)\ntarget_elements = tree.xpath('//Iteration_hit[contains(., \"Element2\") or contains(., \"Element4\")]')\n\nfor element in target_elements:\n    print(etree.tostring(element))\n",
  "label": 1
 },
 {
  "idx": 2883,
  "doc": "Grouping data in a list of of dicts",
  "code": "def merge_dicts(list_of_dicts):\n    lookup = {}\n    results = []\n    for d in list_of_dicts:\n        key = (d['type'], d['obj_id'])\n        try: # it's easier to ask forgiveness than permission\n            lookup[key]['actor'].append(d['actor'])\n        except KeyError:\n            val = {'type': d['type'],\n                   'obj_id': d['obj_id'],\n                   'actor': [d['actor']], # note, extra [] around value to make it a list\n                   'extra_fields': d['extra_fields']}\n            lookup[key] = val\n            results.append(val)\n\n    return results\n",
  "label": 1
 },
 {
  "idx": 2884,
  "doc": "numpy tile without memory allocation",
  "code": "In [511]: a1.shape\nOut[511]: (2, 4)\nIn [512]: a1.strides\nOut[512]: (0, 8)\n",
  "label": 0
 },
 {
  "idx": 2885,
  "doc": "Validity of a string based on some conditions",
  "code": "import re\n\nparser1 = re.compile(\"[0-9]\\\\*?$\")\nparser3 = re.compile(\"\\\\([0-9]\\\\*[0-9]\\\\)$\")\nparser4 = re.compile(\"(\\\\([0-9]\\\\*[0-9]\\\\)|[0-9])\\\\*(\\\\([0-9]\\\\*[0-9]\\\\)|[0-9])$\")\n\ndef validity(s):\n    valid = False\n\n    # Condition 1 and 2\n    if parser1.match(s):\n        return True\n    # Condition 3\n    if parser3.match(s):\n        return True\n    # Condition 4\n    if parser4.match(s):\n        return True\n\n    return False\n\nprint validity('1') # Condition 1\nprint validity('9') # Condition 1\nprint validity('10') # Doesn't satisfy any of the conditions\nprint validity('1*') # Condition 2\nprint validity('4*') # Condition 2\nprint validity('9*') # Condition 2\nprint validity('10*') # Doesn't satisfy any of the conditions\nprint validity('(3*4)') # Condition 3\nprint validity('(3*9)') # Condition 3\nprint validity('(4*9)') # Condition 3\nprint validity('(10*9)') # Doesn't satisfy any of the conditions\nprint validity('(3*2)*(3*1)') # Condition 4\nprint validity('(3*2)*8') # Condition 4\nprint validity('(3*2)*z') # Doesn't satisfy any of the conditions\n",
  "label": 1
 },
 {
  "idx": 2886,
  "doc": "Find dictionary keys with duplicate values",
  "code": ">>> set(chain.from_iterable(values for key, values in rev_multidict.items() if len(values) > 1))\n{'firstname', 'nickname'}\n",
  "label": 0
 },
 {
  "idx": 2887,
  "doc": "Prepend line to beginning of a file",
  "code": "def line_pre_adder(filename, line_to_prepend):\n    f = fileinput.input(filename, inplace=1)\n    for xline in f:\n        if f.isfirstline():\n            print line_to_prepend.rstrip('\\r\\n') + '\\n' + xline,\n        else:\n            print xline,\n",
  "label": 1
 },
 {
  "idx": 2888,
  "doc": "Numpy Compare unequal rows and make both array of same dimension",
  "code": ">>> b[np.in1d(b[:,3],a[:,3])]\narray([[41641,  1428,     0,  2554],\n       [44075,  1428,     0,  2555],\n       [44901,  1428,     1,  2556],\n       [45377,  1428,     0,  2557]])\n\n>>> a=np.array([[100, 1], [101, 4], [106, 6], [104, 10]])\n>>> b= np.array([[ 1, 1], [ 2, 2], [ 3, 3], [ 4, 4], [ 5, 5], [ 6, 6], [ 7, 7], [ 8, 8], [ 9, 9], [10, 10]])\n>>> \n>>> b[np.in1d(b[:,1],a[:,1])]\narray([[ 1,  1],\n       [ 4,  4],\n       [ 6,  6],\n       [10, 10]])\n",
  "label": 1
 },
 {
  "idx": 2889,
  "doc": "Integrating a vector field (a numpy array) using scipy.integrate",
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.interpolate as interp\nimport scipy.integrate as integrate\n\n#dummy input from the streamplot demo\ny, x = np.mgrid[-3:3:100j, -3:3:100j]\nvx = -1 - x**2 + y\nvy = 1 + x - y**2\n\n#dfun = lambda x,y: [interp.griddata((x,y),vx,np.array([[x,y]])), interp.griddata((x,y),vy,np.array([[x,y]]))]\ndfunx = interp.interp2d(x[:],y[:],vx[:])\ndfuny = interp.interp2d(x[:],y[:],vy[:])\ndfun = lambda xy,t: [dfunx(xy[0],xy[1])[0], dfuny(xy[0],xy[1])[0]]\n\np0 = (0.5,0.5)\ndt = 0.01\nt0 = 0\nt1 = 1\nt = np.arange(t0,t1+dt,dt)\n\nstreamline=integrate.odeint(dfun,p0,t)\n\n#plot it\nplt.figure()\nplt.plot(streamline[:,0],streamline[:,1])\nplt.axis('equal')\nmymask = (streamline[:,0].min()*0.9<=x) & (x<=streamline[:,0].max()*1.1) & (streamline[:,1].min()*0.9<=y) & (y<=streamline[:,1].max()*1.1)\nplt.quiver(x[mymask],y[mymask],vx[mymask],vy[mymask])\nplt.show()\n",
  "label": 1
 },
 {
  "idx": 2890,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": "FName        LName   \nAndreas      Kai         2006\nConstantine  Pape         NaN\nKoethe       Talukdar    2005\nManual       Hausman     2005\nMax          Weber       2007\nNadia        Alam        2002\nPia          Naime       2003\nPlank        Ingo        2009\nTanvir       Hossain     2001\nWeber        Mac         2008\nName: id, dtype: float64\n",
  "label": 0
 },
 {
  "idx": 2891,
  "doc": "matching between two columns and taking value from another in pandas",
  "code": ">>> df.groupby(['FName', 'LName']).id.apply(list)\n\nFName        LName   \nAndreas      Kai                         [2006.0]\nConstantine  Pape                      [nan, nan]\nKoethe       Talukdar    [2004.0, 2004.0, 2005.0]\nManual       Hausman             [2005.0, 2005.0]\nMax          Weber               [2007.0, 2007.0]\nNadia        Alam                [2002.0, 2002.0]\nPia          Naime       [2003.0, 2003.0, 2003.0]\nPlank        Ingo                        [2009.0]\nTanvir       Hossain             [2001.0, 2001.0]\nWeber        Mac         [2008.0, 2008.0, 2008.0]\nName: id, dtype: object\n",
  "label": 0
 },
 {
  "idx": 2892,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "stars * grid\n",
  "label": 0
 },
 {
  "idx": 2893,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "revbinnedstars = np.sum(stars * grid, axis=1) / np.sum(grid, axis=1)\n",
  "label": 0
 },
 {
  "idx": 2894,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "bins = 10\nbinwidth = numpy.max(rev_count)//bins\nrevbin = np.arange(0, np.max(rev_count)+binwidth+1, binwidth)\n",
  "label": 0
 },
 {
  "idx": 2895,
  "doc": "Python: Binning one coordinate and averaging another based on these bins",
  "code": "number_of_bins = 10\nrevbin = np.linspace(np.min(rev_count), np.max(rev_count)+1, number_of_bins+1)\n",
  "label": 0
 },
 {
  "idx": 2896,
  "doc": "Dictionary items to variables",
  "code": "In [1]: dct = {'key1': 1, 'key2': 2}\n\nIn [2]: def some_func(key1, key2): # define keys as function parameters\n   ...:     print key1 # print value of variable 'key1'\n   ...:     print key2 # print value of variable 'key2'\n   ...:  \n\nIn [3]: some_func(**dct) # pass 'dct' dictionary using '**kwargs'\n1 # Value of variable 'key1'\n2 # Value of variable 'key2'\n",
  "label": 1
 },
 {
  "idx": 2897,
  "doc": "Dictionary items to variables",
  "code": "\nIn [1]: dct = {'key1': 1, 'key2': 2}\n\nIn [2]: vars().update(dct) # creates variables with name as keys and value as their corresponding value of 'dct' dictionary\n\nIn [3]: key1 # access 'key1' as variable\nOut[3]: 1\n\nIn [4]: key2 # access 'key2' as variable\nOut[4]: 2\n",
  "label": 1
 },
 {
  "idx": 2898,
  "doc": "Mongoengine filter query on list embedded field based on last index",
  "code": "pipeline = [\n    {'$project': {'last_status': { '$arrayElemAt': [{ '$slice': [ \"$status\", -1 ] }, 0 ]} }},\n    {'$match': {'last_status.status_code':'scode'}}\n]\n\nagg_cursor = Order.objects.aggregate(*pipeline)\n\nresult = [ Order.objects.get(id=order['_id']) for order in agg_cursor ]\n",
  "label": 0
 },
 {
  "idx": 2899,
  "doc": "Implementing class descriptors by subclassing the `type` class",
  "code": "('hello from', <class '__main__.Foo'>)\n('hello from', <class '__main__.Foo'>)\n",
  "label": 0
 },
 {
  "idx": 2900,
  "doc": "Print floating point values without leading zero",
  "code": ">>> print(MyFloat(.4444))\n.4444\n\n>>> print(MyFloat(-.4444))\n-.4444\n\n>>> print('some text {:.3f} some more text',format(MyFloat(.4444)))\nsome text .444 some more text\n\n>>> print('some text {:+.3f} some more text',format(MyFloat(.4444)))\nsome text +.444 some more text\n",
  "label": 0
 },
 {
  "idx": 2901,
  "doc": "Django Form with extra information",
  "code": "def recieve_form(request, ...):\n    ...\n    f = MyForm(request.POST, instance=a)\n    new_model_instance = f.save(commit=False)\n    new_model_instance.date_created = <whatever>\n    new_model_instance.save()\n",
  "label": 1
 },
 {
  "idx": 2902,
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "import lxml.etree as ET\ntree = ET.parse(tempXmlExportPath)\nroot = tree.getroot()\n",
  "label": 0
 },
 {
  "idx": 2903,
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "metaInfo = [{\"featureClass\":\"fc1\",\n             \"abstract\":\"text goes here\", \n             \"description\":\"text goes here\",\n             \"tags\":[\"tag1\",\"tag2\",\"tag3\"]},\n            {\"featureClass\":\"fc2\",\n             \"abstract\":\"text goes here\", \n             \"description\":\"text goes here\",\n             \"tags\":[\"tag1\",\"tag2\",\"tag3\"]},...]\n",
  "label": 0
 },
 {
  "idx": 2904,
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "#Create descript tag\ndescript = ET.SubElement(idinfo, \"descript\")\ntree.write(tempXmlExportPath)\n\n#Create purpose child from abstract\nabstract = ET.SubElement(descript, \"abstract\")\ntext = #get abstract string from dictionary\nabstract.text = text\ntree.write(tempXmlExportPath)\n",
  "label": 0
 },
 {
  "idx": 2905,
  "doc": "updating metadata for feature classes programatically using arcpy",
  "code": "arcpy.ImportMetadata_conversion(tempXmlExportPath, \"FROM_FGDC\", featureClassPath)\nshutil.rmtree(tempXmlExportPath)\n",
  "label": 0
 },
 {
  "idx": 2906,
  "doc": "setting unique abbreviation for every column in python",
  "code": "def makeAbbreviations(headers):\n    abbreviations = {}\n    for header in headers:\n        header = header.lower()\n        words = header.split()\n        n = max(len(w) for w in words)\n        i = 2\n        starts = [w[:i] for w in words]\n        abbrev = ''.join(starts)\n\n        while abbrev in abbreviations and i <= n:\n            i += 1\n            for j,w in enumerate(words):\n                starts[j] = w[:i]\n                abbrev = ''.join(starts)\n                if not abbrev in abbreviations: break\n        abbreviations[abbrev] = header\n    return abbreviations\n\nmyHeaders = ['Ad Group', 'Annuity Calculator', 'Tax Deferred Annuity',\n             'Annuity Tables', 'annuities calculator', 'annuity formula',\n             'Annuities Explained', 'Deferred Annuies Calculator',\n             'Current Annuity Rates', 'Forbes.com', 'Annuity Definition',\n             'fixed income', 'Immediate fixed Annuities',\n             'Deferred Variable Annuities', '401k Rollover',\n             'Deferred Annuity Rates', 'Deferred Annuities',\n             'Immediate Annuities Definition', 'Immediate Variable Annuities',\n             'Variable Annuity', 'Aig Annuities', 'Retirement Income', 'retirment system',\n             'Online Financial Planner', 'Certified Financial Planner']\n\nd = makeAbbreviations(myHeaders)\nfor (k,v) in d.items(): print(k,v,sep = \" = \")\n",
  "label": 1
 },
 {
  "idx": 2907,
  "doc": "using key presses instead of buttons in django forms",
  "code": "<div id=\"Vote\" class = \"high\">\n  <div style=\"text-align: center\">\n  {% for entry in voting_entry_list %} \n    <li><a href=\"/entries/{{ entry.id }}/\">{{ entry.text }}&nbsp{{ entry.score }}</a></li>\n    <p>\n    <input type=\"submit\" id=\"voteid\" name='voteid' value=\"{{ entry.id }}\" autofocus value=\"\" onfocus=\"this.value = this.value;\" class = \"transparent\"/>\n          <script>\n            $(document).ready(function() {\n              $(\"#voteid\").bind(\"keydown\", function(e) { //input type=id above\n                if (e.keyCode == 38) {\n                  var text = $(\"#voteid\").val();        \n                  var args = {'voteid':text};       \n                  $.get(\"/voteup/\", args).done(function(data) {\n                    console.log(\"message: \" + data);\n                    location.reload();  \n                  });\n                return false;\n                }\n                if (e.keyCode == 40) {\n                  var text = $(\"#voteid\").val();        \n                  var args = {'voteid':text};       \n                  $.get(\"/votedown/\", args).done(function(data) {\n                    console.log(\"message: \" + data);\n                    location.reload();  \n                  });\n                return false;\n                }       \n              });\n            });     \n          </script>\n  {% endfor %}\n  </div>\n</div>\n",
  "label": 0
 },
 {
  "idx": 2908,
  "doc": "using key presses instead of buttons in django forms",
  "code": "def voting(request):   \ncontext = {\n  'latest_entry_list': Entry.objects.order_by('-pub_date')[:10], # simple sorting by datetime, latest first, 10 items\n  'high_entry_list': Entry.objects.order_by('-score','-pub_date')[:10], # simple sorting by score high to low, 10 items\n  'high_entry': Entry.objects.order_by('-score','-pub_date')[:1], # simple sorting by score high to low, 10 items\n  'low_entry_list': Entry.objects.order_by('score','-pub_date')[:10], # simple sorting by score low to high, 10 items\n  'voting_entry_list': Entry.objects.unvoted_or_random(), # actually one item, command from extended object manager\n}\nreturn render(request, 'entries/voting.html', context); # returns when vote is accessed\n\ndef voteup(request):\nvoting_id = request.GET.get('voteid') # voting id number is brought in as var\nif request.method=='GET': #always polling, when get votes, save and redirect to /index to refresh\n    v = Entry.objects.get(pk=voting_id) # get by voting id var\n    v.score +=1 # add one to score for voteup button\n    v.voted=True # set voted boolean to true\n    v.save() # explicit save, as is not saved with change above\nelse:\n    pass\nreturn HttpResponse('done') # Only on console \n\ndef votedown(request):\nvoting_id = request.GET.get('voteid') # voting id number is brought in as var\nif request.method=='GET': #always polling, when get votes, save and redirect to /index to refresh\n    v = Entry.objects.get(pk=voting_id) # get by voting id var\n    v.score -=1 # add one to score for voteup button\n    v.voted=True # set voted boolean to true\n    v.save() # explicit save, as is not saved with change above\nelse:\n    pass\nreturn HttpResponse('done') # Only on console\n",
  "label": 0
 },
 {
  "idx": 2909,
  "doc": "Extract elements of a 2d array with indices from another 2d array",
  "code": "indices = ind.ravel() + np.repeat(range(0, 8*ind.shape[0], 8), ind.shape[1])\nout = data.ravel()[indices]\nout = out.reshape(ind.shape)\n",
  "label": 1
 },
 {
  "idx": 2910,
  "doc": "renaming pcraster mapstack",
  "code": "python renpcrmaps.py precip 1\n",
  "label": 0
 },
 {
  "idx": 2911,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "out = colormap[color_labels].reshape(color.shape[:2])\n\nIn [267]: out\nOut[267]: \narray([[7, 6],\n       [1, 5],\n       [3, 0],\n       [4, 2]], dtype=uint32)\n",
  "label": 0
 },
 {
  "idx": 2912,
  "doc": "Convert a 3D array to 2D array based on dictionary",
  "code": "In [8]: index = np.array([3,2,1,0])\n\nIn [10]: arr[index]\nOut[10]: array([40, 30, 20, 10])\n",
  "label": 0
 },
 {
  "idx": 2913,
  "doc": "Importing Denormalized data into django models via modelforms",
  "code": "class PersonForm(forms.ModelForm):\n    favorite_color = DenormalizedChoiceField(choices=Person.COLORS)\n    class Meta:\n        model = Person\n        fields = '__all__'\n",
  "label": 0
 },
 {
  "idx": 2914,
  "doc": "How can I compare dates using Python?",
  "code": ">>> birthdate_str = raw_input('Enter your birthday (yyyy-mm-dd): ')\nEnter your birthday (yyyy-mm-dd): 1981-08-04\n>>> birthdatetime = datetime.datetime.strptime(birthdate_str, '%Y-%m-%d')\n>>> birthdate = birthdatetime.date()  # convert from datetime to just date\n>>> age = datetime.date.today() - birthdate\n>>> age\ndatetime.timedelta(11397)\n",
  "label": 1
 },
 {
  "idx": 2915,
  "doc": "How to format inputted data and output it",
  "code": "authors_string = ' & '.join([', '.join(authors[:-1]), authors[-1]]\n                                if len(authors) > 2 else authors)\n",
  "label": 0
 },
 {
  "idx": 2916,
  "doc": "Inherit/Extend Django Module or cram into same Module?",
  "code": "myproject\n-> task\n----> models\n--------> __init__.py\n--------> base.py\n--------> math.py\n--------> etc.\n----> views\n--------> __init__.py\n--------> math.py\n--------> etc.\n----> urls\n--------> __init__.py\n--------> etc.\n-> check\n----> models\n--------> __init__.py\n--------> base.py\n--------> etc.\n\n-etc.- (you get the idea)\n",
  "label": 0
 },
 {
  "idx": 2917,
  "doc": "Conditionally and interatively calculate column based on value of three columns",
  "code": "cnxn = {}\nxyz = [\"x\",\"y\",\"z\"]\n\nfor combo in xyzdict.keys():\n    #print \"the combo is %s\" % (combo) #xyzdict[two] #actual value\n    first_letter = combo[0]\n\n    not_second = [combo[0],combo[1]]\n    not_second_letter = list(set(xyz) - set(not_second))\n\n    if len(not_second_letter) > 1:\n        multi_cnxn = []\n        for each_not_second_letter in not_second_letter:\n\n            fwd = ''.join((first_letter,each_not_second_letter))\n            rev = ''.join((each_not_second_letter,first_letter))\n            cnxnval = xyzdict[fwd] * xyzdict[rev]\n\n            multi_cnxn.append(cnxnval)\n\n        rowvalue = xyzdict[combo] + sum(multi_cnxn)\n        cnxn[combo] =rowvalue\n    else:\n        fwd = ''.join((first_letter,not_second_letter[0]))\n        rev = ''.join((not_second_letter[0],first_letter))\n        cnxnval = xyzdict[fwd] * xyzdict[rev]\n\n        rowvalue = xyzdict[combo] + cnxnval\n        cnxn[combo] = rowvalue\n",
  "label": 0
 },
 {
  "idx": 2918,
  "doc": "How do I get rid of dotted line on x axis of Pandas/Matplotlib bar plot?",
  "code": "ax.axhline(0, color='k', linestyle='--')\n",
  "label": 0
 },
 {
  "idx": 2919,
  "doc": "Finding groups of increasing numbers in a list",
  "code": "def sequences(l):\n    x2 = cycle(l)\n    next(x2)\n    grps = groupby(l, key=lambda j: j + 1 == next(x2))\n    for k, v in grps:\n        if k:\n            t = tuple(v) + (next(next(grps)[1]),)\n            yield t, len(t)\n\n\ndef sequences(l):\n    x2 = cycle(l)\n    next(x2)\n    grps = groupby(l, lambda j: j + 1 == next(x2))\n    yield from ((t, len(t)) for t in (tuple(v) + (next(next(grps)[1]),)\n                                      for k, v in grps if k))\n\n\n\ndef sequences(x):\n        it = iter(x)\n        prev, temp = next(it), []\n        while prev is not None:\n            start = next(it, None)\n            if prev + 1 == start:\n                temp.append(prev)\n            elif temp:\n                yield tuple(temp + [prev]), len(temp) + 1\n                temp = []\n            prev = start\n",
  "label": 1
 },
 {
  "idx": 2920,
  "doc": "How to combine SQLAlchemy's @hybrid_property decorator with Werkzeug's cached_property decorator?",
  "code": "CACHE = {}\n\nclass Example(object):\n    @property\n    def foo(self):\n        if self not in CACHE:\n            CACHE[self] = ...  # do the actual computation\n        return CACHE[self]\n",
  "label": 0
 },
 {
  "idx": 2921,
  "doc": "SQLAlchemy ON DUPLICATE KEY UPDATE",
  "code": "def get_or_create(session, model, defaults=None, **kwargs):\n    instance = session.query(model).filter_by(**kwargs).first()\n    if instance:\n        return instance\n    else:\n        params = dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))\n        if defaults:\n            params.update(defaults)\n        instance = model(**params)\n        return instance\n",
  "label": 1
 },
 {
  "idx": 2922,
  "doc": "Acquiring the Minimum array out of Multiple Arrays by order in Python",
  "code": "[[1,2,3],[1,3,2],[2,3,1],[3,2,1]]\n",
  "label": 0
 },
 {
  "idx": 2923,
  "doc": "background process in python with -e option on terminal",
  "code": "import os\n\nif os.fork():\n    # parent\n    do_stuff()\n\nelse:\n    # child\n    os.setsid()\n    os.execl('prog', 'prog')\n",
  "label": 1
 },
 {
  "idx": 2924,
  "doc": "background process in python with -e option on terminal",
  "code": "3556 pts/1    00:00:00 gvim <defunct>\n3557 ?        00:00:00 gvim\n",
  "label": 0
 },
 {
  "idx": 2925,
  "doc": "Timeout function in Python",
  "code": "import os\nimport signal\nimport sys\n\ndef kill_yourself_now():\n    sig = signal.CTRL_C_EVENT if sys.platform == 'win32' else signal.SIGINT\n    os.kill(os.getpid(), sig) # raise KeyboardInterrupt in the main thread\n",
  "label": 0
 },
 {
  "idx": 2926,
  "doc": "Generate nested dictionary with list and dict comprehensions",
  "code": "mac389 : {'foo': (2), 'bar': (0)}\n",
  "label": 0
 },
 {
  "idx": 2927,
  "doc": "Get permutation with specified degree by index number",
  "code": " _______\n/       \\\n\\->2->0->3\n __     __\n/  |   /  |\n1<-/   4<-/ .\n",
  "label": 0
 },
 {
  "idx": 2928,
  "doc": "Get permutation with specified degree by index number",
  "code": "[n]\n[ ]\n[k]\n",
  "label": 0
 },
 {
  "idx": 2929,
  "doc": "Get permutation with specified degree by index number",
  "code": "[  n - r  ]\n[         ]\n[n - d - c]\n",
  "label": 0
 },
 {
  "idx": 2930,
  "doc": "Faster way to read Excel files to pandas dataframe",
  "code": "# create a list with sheet numbers you want to process\nsheets = map(str,range(1,6))\n\n# convert each sheet to csv and then read it using read_csv\ndf={}\nfrom subprocess import call\nexcel='C:\\\\Users\\\\rsignell\\\\OTT_Data_All_stations.xlsx'\nfor sheet in sheets:\n    csv = 'C:\\\\Users\\\\rsignell\\\\test' + sheet + '.csv' \n    call(['cscript.exe', 'C:\\\\Users\\\\rsignell\\\\ExcelToCsv.vbs', excel, csv, sheet])\n    df[sheet]=pd.read_csv(csv)\n",
  "label": 0
 },
 {
  "idx": 2931,
  "doc": "Best way to reset keys which expires in few minutes in python",
  "code": "1000 keys; max life: 13.98; average life: 7.38\n933 keys; max life: 12.98; average life: 6.85\n870 keys; max life: 11.97; average life: 6.29\n796 keys; max life: 10.97; average life: 5.80\n729 keys; max life: 9.97; average life: 5.26\n666 keys; max life: 8.96; average life: 4.68\n594 keys; max life: 7.96; average life: 4.16\n504 keys; max life: 6.96; average life: 3.77\n427 keys; max life: 5.96; average life: 3.32\n367 keys; max life: 4.95; average life: 2.74\n304 keys; max life: 3.95; average life: 2.16\n215 keys; max life: 2.95; average life: 1.76\n138 keys; max life: 1.95; average life: 1.32\n84 keys; max life: 0.95; average life: 0.72\n\nKeys with 2 secs life:\n    Key 26: 2.0052\n    Key 27: 2.0053\n    Key 41: 2.0048\n    ...\nKeys with 3 secs life:\n    Key 4: 3.0040\n    Key 31: 3.0065\n    Key 32: 3.0111\n    ...\nKeys with 4 secs life:\n...\n",
  "label": 0
 },
 {
  "idx": 2932,
  "doc": "How do I make pip available from command line mac?",
  "code": "export PATH=$PATH:\"/cygdrive/c/Python27/Scripts\"\n",
  "label": 0
 }
]